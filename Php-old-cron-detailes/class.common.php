<?php
/************************************************************************
* @Class Name	: common
* @Created on	: Jun 02, 2017
* @Created By	: Balaji
* @Description	: To create common function
* @Modified by     : Karuppasamy S 
 * @Modified Date 	: 2020-01-24
******************************************************************************/

fileRequire("dataModels/class.requestGroupDetails.php");

ini_set('display_errors',0);
class common
{

	var $_SextendLinkBeforeExpiry;
	public $_Oconnection;
	function common()
	{
		$this->_Oconnection = '';
		$this->_OobjResponse ='';
		$this->_Osmarty = '';	
		$this->_SextendLinkBeforeExpiry='N';
	}
	/* 
	 * @Description	: Date range bet
	 * @function	: _dateRange
	 * @Param		: $startDate => Start date, $endDate => Last date,$returnType => Date/Month/Year Array, $format => Date, $step => Increment by 
	 * @Return		: Date array  Mon 2012-12-31 12 2012 (or) Month array (or) Year array
	 */
	function _dateRange($startDate, $endDate, $returnType="DAYARRAY", $format = "Y-m-d", $step = "+1 day" ) 
	{
		$startDate = strtotime($startDate);
		$endDate = strtotime($endDate);
		$dateArray = array();
		$monthArray = array();
		$yearArray = array();
		while( $startDate <= $endDate ) 
		{
			$month=date("m", $startDate);
			$year=date("Y", $startDate);
			$monthWithYear=$month."-".$year;
			$date = date($format, $startDate); //format date
			$getName = date('l', strtotime($date)); //get week day
			$dayName = substr($getName, 0, 3); // Trim day name to 3 chars
			//Month array pushing
			if(!in_array($year,$yearArray))
				array_push($yearArray,$year);
			//Month and year array pushing
			if(!in_array($monthWithYear,$monthArray))
				array_push($monthArray,$monthWithYear);
			//date(Sun 02/12/2013 12 2013) array pushing
			$days = $dayName." ".$date." ".$month." ".$year;
			array_push($dateArray,$days);
			$startDate = strtotime($step, $startDate);
		}
		if($returnType=="DAYARRAY")
			return $dateArray;
		else if($returnType=="MONTHARRAY")
			return $monthArray;
		else if($returnType=="YEARARRAY")
			return $yearArray;
	}
	
	/* Separtate days with month */
	function _separateDaysWithMonth($startDate, $endDate, $returnType="DAYARRAY", $step = '+1 day', $format = 'Y-m-d') 
	{
		   
		$monthArray=$this->_dateRange($startDate, $endDate, $returnType);
		$finalArray=array();
		$dateRangArray=array();
		$separator = "@@@";
		$delimetor = "%%%";
		for($i=0;$i<count($monthArray);$i++)
		{
			$dateString="";
			$firstDate="";
			$secondDate="";
			$monthAndYearArray=explode("-",$monthArray[$i]);
			$givenMonth=$monthAndYearArray[0];
			$givenYear=$monthAndYearArray[1];
		
			$type = CAL_GREGORIAN;
			$dates = array();
			$current = strtotime($startDate);
			$lastValue = strtotime($endDate);
			$dayCount = cal_days_in_month($type, $givenMonth, $givenYear); // Get the amount of days

			$checkCount=0;
			$checkCountGreater=0;
			while( $current <= $lastValue ) 
			{ 
				$month=date("m", $current);
				$year=date("Y", $current);
				$date = date($format, $current); //format date
				$getName = date('l', strtotime($date)); //get week day
				$dayName = substr($getName, 0, 3); // Trim day name to 3 chars
				$daysCount = cal_days_in_month($type, $month, $year); // Get the amount of days
				$dateValue=date("d", $current);
				
				//echo $month."-".$year."<br>";
				if($month==$givenMonth && $year==$givenYear)
				{
					if($dateValue >=1 && $dateValue <= 15)
					{
						if($checkCount==0)
						{
							
							$firstDate=date($format, $current).$separator;
							$checkCount=1;
						}
						
						if($dateValue < 15)
						{
							
							if($endDate==date($format, $current))
							{
								$firstDate=$firstDate.date($format, $current);
								
							}
						}
						if($dateValue == 15)
						{
							
							$firstDate=$firstDate.date($format, $current);
							
						}
					}
					if($dateValue >=16 && $dateValue <= $daysCount)
					{
						
						if($checkCountGreater==0)
						{
							$secondDate=date($format, $current).$separator;
							$checkCountGreater=1;
						}
						if($dateValue==$daysCount)
						{
							$secondDate=$secondDate.date($format, $current);
						}
						else
						{
							if($endDate==date($format, $current))
							{
								$secondDate=$secondDate.date($format, $current);
							}
						}
					}
					$dates[] = $dayName." ".date($format, $current);
				
				}
			
				$current = strtotime($step, $current);
			}
			$finalArray[$i]=$dates;
			if($firstDate=="")
			{
				$firstDate="NG".$separator."NG";
			}
			if($secondDate=="")
			{
				$secondDate="NG".$separator."NG";
			}
			$dateRangArray[$i]=$firstDate.$delimetor.$secondDate;
		}
		return $dateRangArray;
	}
	
	
	function _getPnrInformation($givenPnr,$requestMasterId=0)
	{
		global $CFG;
		$returnArray=array();
		
		$sqlSelectPnrBlockingDetails="SELECT
							pnr_blocking_id,
							request_master_id,
							request_approved_flight_id,
							pnr,
							status,
							pnr_amount,
							no_of_adult,
							no_of_child,
							no_of_infant,
							no_of_foc
					      FROM
							".$CFG['db']['tbl']['pnr_blocking_details']."
					      WHERE
							pnr='".$givenPnr."'";
							
		if($requestMasterId!=0)
			$sqlSelectPnrBlockingDetails.=" AND request_master_id='".$requestMasterId."'";
							
		$sqlSelectPnrBlockingDetails.=" ORDER BY pnr_blocking_id LIMIT 1";

		if(DB::isError($resultSelectPnrBlockingDetails=$this->_Oconnection->query($sqlSelectPnrBlockingDetails)))
		{
			fileWrite($sqlSelectPnrBlockingDetails,"SqlError","a+");
			return false;
		}

		if($resultSelectPnrBlockingDetails->numRows() >0)
		{
			$rowSelectPnrBlockingDetails=$resultSelectPnrBlockingDetails->fetchRow(DB_FETCHMODE_ASSOC);
			$returnArray['pnrDetails']=$rowSelectPnrBlockingDetails;			

		}
		return $returnArray;
	}
	/*Seperate days with week*/
	function _seperateDaysWithWeek($startDate,$endDate,$period='P1D',$weekFormat='w')
	{
		$interval = new DateInterval($period);
		$dateRange = new DatePeriod($startDate, $interval, $endDate);
		$index = 0;
		$returnArray = array();
		foreach ($dateRange as $date) 
		{
				if($weekFormat=='w')
				{
					$returnArray[$index][] = $date->format('Y-m-d');
					if ($date->format(''.$weekFormat.'') == 6) 
					{
						$index++;
					}
				}
		}
		return $returnArray;
	}
	
	
	

	
	function _getSectorManagement($userId,$_Sstatus = "",$_Slimit=0)

	{
		global $CFG;
		$sql = "SELECT
					origin,
					destination
				FROM
					".$CFG['db']['tbl']['sector_user_mapping']." sum,
					".$CFG['db']['tbl']['sector_management']." sm
				WHERE
					sum.sector_id = sm.sector_id AND
					sum.user_id=".$userId;
		if($_Sstatus != "")
			$sql.= " AND sum.status = '".$_Sstatus."'";
		if($_Slimit != 0)
			$sql.= " LIMIT ".$_Slimit;

		return $this->_executeQuery($sql);
	}




	function _getSalesPersonCorporate($givenUserId)
	{
		global $CFG;
		if($CFG['site']['viewSectorBasedRequest']=='Y')
		{
			$sqlSelectMappingCorporate="SELECT
								corporate_id
							FROM
								".$CFG['db']['tbl']['corporate_salesperson_mapping']."
							WHERE
								user_id='".$givenUserId."'";
		}
		else
		{
			$sqlSelectMappingCorporate="SELECT
								cd.corporate_id
							FROM
								".$CFG['db']['tbl']['pos_user_mapping']." pum INNER JOIN
								".$CFG['db']['tbl']['corporate_details']." cd ON ".encrypt::_decrypt('cd.pos_code')." = pum.pos_code
							WHERE
								pum.active_status='Y' AND
								pum.user_id='".$givenUserId."'";
		}

		return $this->_executeQuery($sqlSelectMappingCorporate);
	}

	function _getAirportName($givenAirportCode)
	{
		global $CFG;

		$sqlSelectAirportName="SELECT
						airport_name
				       FROM
						".$CFG['db']['tbl']['airport_details']."
				       WHERE
						airport_code='".$givenAirportCode."'";
		return $this->_executeQuery($sqlSelectAirportName);
	}

	function _getGroupAliasNameValue($givenGroupId)
	{
		global $CFG;
		$groupAliasName=array();
		if(!empty($CFG['groupAlais']))
		{
			$_AgroupDetails=array_values($CFG['groupAlais']);
			unset ($_AgroupDetails[count($_AgroupDetails)-1]);
			$_IgroupIndex= $this->multiArraySearch($givenGroupId, $_AgroupDetails,'id');
			if($_IgroupIndex!== false)
				return $_AgroupDetails[$_IgroupIndex]['alias_name'];
			else
				return '';
		}
		else
		{
			$sqlSelectGroupAliasName="SELECT
								group_alias_name
						  FROM
								".$CFG['db']['tbl']['group_details']."
						  WHERE
								group_id='".$givenGroupId."'";

			if(DB::isError($resultSelectGroupAliasName=$this->_Oconnection->query($sqlSelectGroupAliasName)))
			{
				fileWrite($sqlSelectGroupAliasName,"SqlError","a+");
				return FALSE;
			}

			if($resultSelectGroupAliasName->numRows() > 0)
			{
				$rowSelectGroupAliasName=$resultSelectGroupAliasName->fetchRow(DB_FETCHMODE_ASSOC);
				$groupAliasName=$rowSelectGroupAliasName['group_alias_name'];
			}
			
			return $groupAliasName;
		}
	}

	function _executeQuery($sql)
	{
		$resultArray = array();
		if(DB::isError($result=$this->_Oconnection->query($sql)))
		{ 
			fileWrite($sql,'SqlError','a+');
			return false;
		}
		
		if($result->numRows()>0)
		{
			while($row = $result->fetchRow(DB_FETCHMODE_ASSOC))
			{
				$resultArray[] =  $row;
			}
		}
		return $resultArray;
	}
	function _getforgotStatus($emailId,$passWord)
	{
		global $CFG;

		$sql="SELECT user_id FROM ".$CFG['db']['tbl']['user_details']." WHERE ".encrypt::_decrypt('email_id')."='".$emailId."' AND user_password='".$passWord."'";
		
		return $this->_executeQuery($sql);
		
	}
	
	/* 
	 * Function Name:-_getSalesPersonDetails
	 * Description : Getting sales person details from corporate id  based  on POS setting
	 * Param: CorporateId (int)
	 * Return: array
	 * */
	function _getSalesPersonDetails($corporateId,$_AuserIdDetails,$origin='',$destination='')
	{
		global $CFG;
				
		
		if(in_array(5,$CFG['site']['sectorMappingGroupId']))
		{
			$table='';
			$condition='';
			#GS is mapped to sector mapping then org and dest is taken else GS mapped to TA while creating new travel agent  
			if($origin != '' && $destination != '')
			{
				$table=$CFG['db']['tbl']['sector_management']." sm,".$CFG['db']['tbl']['sector_user_mapping']." sum";
				$condition="((sm.origin='".$origin."' OR sm.origin='All') AND 
							(sm.destination='".$destination."' OR sm.destination='All')) AND sum.status='Y' AND 
							ud.group_id=5 AND 
							sm.sector_id=sum.sector_id AND 
							sum.user_id=ud.user_id";
			}
			else{
				$table= $CFG['db']['tbl']['corporate_details']." cd, ".$CFG['db']['tbl']['corporate_salesperson_mapping']." csm ";
				$condition="cd.corporate_id='".$corporateId."' AND
				cd.corporate_id = csm.corporate_id AND
				ud.approved_status='Y' AND 
				ud.email_verification_status='Y' AND 
				csm.user_id=ud.user_id AND 
				ud.group_id=5";
			}
	        $fetchSaleSql="SELECT  
                                    ud.user_id,
                                    ud.group_id,
                                    ".encrypt::_decrypt('ud.title')." AS title,
                                    ".encrypt::_decrypt('ud.first_name')." AS first_name,
                                    ".encrypt::_decrypt('ud.last_name')." AS last_name,
                                    ".encrypt::_decrypt('ud.email_id')." AS email_id,
                                    ".encrypt::_decrypt('ud.user_address')." AS user_address,
                                    ".encrypt::_decrypt('ud.phone_number')."  AS phone_number
                             FROM 
                                    ".$CFG['db']['tbl']['user_details']." ud,".
                                    $table."  
                             WHERE ".$condition;
             
        }
        else
        {
			/*if view sector based request is enabled for groups sale then send mail 
			*to users based on it else based pos user mapping.
			*/
			if($CFG['site']['viewSectorBasedRequest']=='Y')
			{
				$tables=$CFG['db']['tbl']['corporate_salesperson_mapping']." csm ";
				$condition="csm.corporate_id='".$corporateId."' AND
							csm.user_id=ud.user_id AND
							csm.corporate_id=cd.corporate_id AND
							ud.approved_status='Y' AND 
							ud.email_verification_status='Y' AND 
							ud.group_id=5 ";
			}
			else
			{
				$tables=$CFG['db']['tbl']['pos_user_mapping']." pum ";
				$condition="cd.corporate_id='".$corporateId."' AND 
				(IF(".$_AuserIdDetails['group_id']."!=4 OR (".encrypt::_decrypt('cd.pos_code'). "!= NULL OR ".encrypt::_decrypt('cd.pos_code'). " != ''),".encrypt::_decrypt('cd.pos_code').",(select cm.pos_code from city_master cm,user_details ud where ud.city_id=cm.city_id and ud.user_id=".$_AuserIdDetails['user_id']." limit 1)) =pum.pos_code OR pum.pos_code='ALL') AND
							pum.user_id=ud.user_id AND
							ud.approved_status='Y' AND 
							pum.active_status='Y' AND
							ud.email_verification_status='Y' AND 
							ud.group_id=5";
				
			}
			$fetchSaleSql="SELECT  
                                    ud.user_id,
                                    ud.group_id,
                                    ".encrypt::_decrypt('ud.title')." AS title,
                                    ".encrypt::_decrypt('ud.first_name')." AS first_name,
                                    ".encrypt::_decrypt('ud.last_name')." AS last_name,
                                    ".encrypt::_decrypt('ud.email_id')." AS email_id,
                                    ".encrypt::_decrypt('ud.user_address')." AS user_address,
                                    ".encrypt::_decrypt('ud.phone_number')."  AS phone_number,
                                    IF(".$_AuserIdDetails['group_id']." !=4 OR (".encrypt::_decrypt('cd.pos_code'). " != NULL OR ".encrypt::_decrypt('cd.pos_code'). " != ''),".encrypt::_decrypt('cd.pos_code').",(select cm.pos_code from city_master cm,user_details ud where ud.city_id=cm.city_id and ud.user_id=".$_AuserIdDetails['user_id']." limit 1))  AS pos_code
                             FROM
									 
									".$CFG['db']['tbl']['user_details']." ud ,
									".$CFG['db']['tbl']['corporate_details']." cd ,
									".$tables."
							WHERE   
									".$condition;	
		}      
		return $this->_executeQuery($fetchSaleSql);
	}
	
	function _getSectorAdminDetails($corporateId,$_AuserIdDetails,$origin,$destination)
	{
		return $this->_getMappingDetailsBasedOnGroupId($corporateId,2,$origin,$destination,$_AuserIdDetails);
	}
	function _getSectorAnalystDetails($corporateId,$_AuserIdDetails,$origin='',$destination='')
	{
		return $this->_getMappingDetailsBasedOnGroupId($corporateId,6,$origin,$destination,$_AuserIdDetails);
	}
	
	function _getSuperAdminDetails($corporateId)
	{
		global $CFG;
		$fetchSuperAdminSql="SELECT  
							user_id,
							group_id,
							".encrypt::_decrypt('title')." AS title,
							".encrypt::_decrypt('first_name')." AS first_name,
							".encrypt::_decrypt('last_name')." AS last_name,
							".encrypt::_decrypt('email_id')." AS email_id,
							".encrypt::_decrypt('user_address')." AS user_address,
							".encrypt::_decrypt('phone_number')." AS phone_number
						FROM 
							".$CFG['db']['tbl']['user_details']."
						WHERE 
							corporate_id='".$corporateId."' AND
							group_id=1";
		return $this->_executeQuery($fetchSuperAdminSql);
	}
	function _checkMinimumDate($requestMasterId,$_Spnr='')
	{
		global $CFG;
		
		$_IrequestApprovedFlightId=0;
		#To check the minimum departure for particular pnr
		if($_Spnr!='')
		{
			$_ApnrInfo=$this->_getPnrInformation($_Spnr,$requestMasterId);
			$_IrequestApprovedFlightId=$_ApnrInfo['pnrDetails']['request_approved_flight_id'];
		}
		$strToTimeArray=array();
		$minDateArray=array();
		$sqlSelectRequestDetailsFromDate="SELECT
								rafd.departure_date,
								rafd.dep_time,
								rm.request_master_id,
								tm.transaction_id
						  FROM
								".$CFG['db']['tbl']['request_approved_flight_details']." rafd,
                                       				".$CFG['db']['tbl']['request_master']." rm,
                                        			".$CFG['db']['tbl']['transaction_master']." tm
						  WHERE
								rm.fare_acceptance_transaction_id=tm.transaction_id
								AND tm.transaction_id=rafd.transaction_master_id
								AND rm.request_master_id='".$requestMasterId."'
								AND rafd.accepted_flight_status='Y'";

		if($_IrequestApprovedFlightId!=0 && $_IrequestApprovedFlightId!='')
			$sqlSelectRequestDetailsFromDate.=" AND rafd.request_approved_flight_id=".$_IrequestApprovedFlightId."";
		$rowValue=$this->_executeQuery($sqlSelectRequestDetailsFromDate);

		
		for($i=0;$i<count($rowValue);$i++)
		{
			$dateValue=strtotime($rowValue[$i]['departure_date']);
			array_push($strToTimeArray,$dateValue);
		}

		$minValue=min($strToTimeArray);

		for($i=0;$i<count($rowValue);$i++)
		{
			$dateValue=strtotime($rowValue[$i]['departure_date']);
			if($dateValue==$minValue)
			{
				$dateTime=$rowValue[$i]['departure_date']." ".$rowValue[$i]['dep_time'];
				array_push($minDateArray,$dateTime);
			}
		}

		$minValue=0;
		if(count($minDateArray) > 1)
		{
			for($j=0;$j<count($minDateArray);$j++)
			{
				$dateValue=strtotime($minDateArray[$j].":00");
				if($minValue > $dateValue || $minValue==0)
				{
					$minValue=$dateValue;
					$finalDate=$minDateArray[$j].":00";
				}
				
			}
		}
		else
		{
			$dateValue=strtotime($minDateArray[0].":00");
			$finalDate=$minDateArray[0].":00";

		}

		$todayDate=date("Y-m-d H:i:s");
		//$todayDate=date("Y-m-d H:i:s ",strtotime("-$configHours hours"));

		$configHours=$CFG['default']['paymentDepartureCheck'];
		
//$finalDate="2013-04-12 20:00:00";

		$subDate="SELECT SUBDATE('".$finalDate."',INTERVAL $configHours hour) as calculatedDate";

		if(DB::isError($resultSubDate=$this->_Oconnection->query($subDate)))
		{
			fileWrite($subDate,"SqlError","a+");
			return false;
		}
		if($resultSubDate->numRows() > 0)
		{
			$rowSubDate=$resultSubDate->fetchRow(DB_FETCHMODE_ASSOC);
			$calculatedDate=$rowSubDate['calculatedDate'];
		}
		
		if(strtotime($todayDate) < strtotime($calculatedDate))
		{
			$resultValue="Y";
		}
		else
		{
			$resultValue="N";
		}
		return $resultValue;
	}

	function _numberToRoman($integer)
	{
	    $table = array('M'=>1000, 'CM'=>900, 'D'=>500, 'CD'=>400, 'C'=>100, 'XC'=>90, 'L'=>50, 'XL'=>40, 'X'=>10, 'IX'=>9, 'V'=>5, 'IV'=>4, 'I'=>1); 
	    $return = ''; 
	    while($integer > 0) 
	    { 
		foreach($table as $rom=>$arb) 
		{ 
		    if($integer >= $arb) 
		    { 
		        $integer -= $arb; 
		        $return .= $rom; 
		        break; 
		    } 
		} 
	    } 

	    return $return; 
	}
	
	function _getCurrencyDetails($currencyType="",$checkStatus='Y')
	{
		/**
		 * Checks whether the static data having the required record or not
		**/
		$_Svariable = $currencyType."_".$checkStatus;
		$_AstaticData = $this->_staticData("_getCurrencyDetails",$_Svariable);
		if($_AstaticData !== false)
			return $_AstaticData;
	
		$condition = '';
		if(!empty($currencyType))
			$condition .= " AND currency_type= '".$currencyType."' ";
		if($checkStatus=='Y')
			$condition .= " AND currency_status='y' ";
		$sqlCurrency = "SELECT 
							currency_id,
							currency_type,
							currency_symbol,
							exchange_rate,
							currency_status,
							display_order
						FROM
							currency_details
						WHERE
							1 ".$condition."
						ORDER BY
							display_order,currency_type";
							
		$_AcurrencyDetails = $this->_executeQuery($sqlCurrency);
		/**
		 * Assign the currency details to static array 
		**/
		$this->_staticData("_getCurrencyDetails",$_Svariable,$_AcurrencyDetails);
		return $_AcurrencyDetails;
	}

    function multiArrayEncrypt($formvalue)
    {
	    foreach($formvalue as $key=> $value) 
	    {
		   if (is_array($value))
		   {
			    $formvalue[$key]=$this->multiArrayEncrypt($value);
		    }
		    else
		    {

			    if(!$this->encriptCheck($key))
	       			$formvalue[$key]=$this->decryptData($value);
	       	}
	    } 
 	    return $formvalue;

    }
	
	function encriptCheck($key)
	{
		global $CFG;
		$fieldArray=array(0=>"policyDescription",1=>"userAddress",2=>"agentAddress",3=>"retailedAddress",4=>"remarks",5=>"paymentRemarks",6=>"userRemarks",7=>"messageSubject",8=>"messageContent");
		$lan=9;
		foreach ($CFG['emailLanguage'] as $keyVal => $value) 
		{	
			if($keyVal!='en')
			{
				$fieldArray[$lan]='airportName_'.$keyVal;
				$lan++;
				$fieldArray[$lan]='countryName_'.$keyVal;				
				$lan++;
			}		
		}
		for($i=0;$i<count($fieldArray);$i++)
		{
			if($fieldArray[$i]===$key)
			{
				return true;
			}
		}
		return false;
	}

    function decryptData($data,$key="")
    {
		global $CFG;
		if(empty($data) || !isset($data['encData']))
			return $data;

		if(isset($CFG['security']['validation']['encryption']) && 
			$CFG['security']['validation']['encryption'] == 'N') {
				// To skip the module name / string decryptions
				if(count(explode('#$#$', $data['encData'])) > 1)
					return $data['encData'];
				// To skip the form values / string decryptions
				if(base64_encode(base64_decode($data['encData'])) !== $data['encData']) {
					$_Adecoded = json_decode(urldecode($data['encData']), true);
					return (json_last_error() === JSON_ERROR_NONE ? $_Adecoded : $data['encData']);
			}
		}
	

		if(empty($key))
		    $key=$CFG['site']['encrypt_key'];
		/* cryptoJsAesDecrypt function used to decrypt data using cryptoJsAES */
		fileRequire("lib/common/cryptojsAES.php");
		$data = cryptoJsAesDecrypt($key, base64_decode($data['encData']));
		/*$data=base64_decode($data);
	    if(strlen($data)==1)
	    {
		    return $data;
	    }
	    // kal6be8ai3 
		$data=mb_substr($data,0,mb_substr($data,-1,1,'UTF-8'),'UTF-8').mb_substr($data,mb_substr($data,-1,1,'UTF-8')+4,mb_strlen($data,'UTF-8')-1,'UTF-8');
		$data=mb_substr($data,0,mb_strlen($data,'UTF-8')-1,'UTF-8');
		# $data=substr($data,0,substr($data, -1)).substr($data,substr($data, -1)+4);
		# $data=substr($data,0,strlen($data)-1);*/
		return $data;
    }
    /**
	@function name : encryptData
	@function desc : this funciton will encrypt the data by using cryptoJS technique
	@parameter     : data
    **/
    function encryptData($data,$key="")
    {
		global $CFG;
		if(empty($data)) return $data;

		if($checkConfig && !empty($CFG['security']['validation']['encryption']) && 
		$CFG['security']['validation']['encryption'] == "N")	
			return $data;
			
		if(empty($key))
		    $key=$CFG['site']['encrypt_key'];
		fileRequire("lib/common/cryptojsAES.php");
		return base64_encode(cryptoJsAesEncrypt($key, $data));
    }
    
    
//function to encode a particular value
	function valueEncoder($idValue)
	{	
		$encodedId=bin2hex($this->Encode($idValue));
		return $encodedId;
	}
//Functin to decode a value
	function valueDecoder($encodedId)
	{
		$val=$this->hex2bin($encodedId);		
		$decodedId=$this->Encode($val);
		return $decodedId;
	}

//Encoder function	
	function Encode($data)
	{
		global $CFG;		
		$pwd=$CFG['site']['encrypt_key'];
		$pwd_length = strlen($pwd);
	    $j = $a = $x = 0;
	    $Zcrypt = "";
	    for ($i = 0; $i < 256; $i++) 
        {
		    $key[$i] = ord(substr($pwd, ($i % $pwd_length)+1, 1));
		    $counter[$i] = $i;
	    }
	    for ($i = 0; $i < 256; $i++) 
        {
		    $x = ($x + $counter[$i] + $key[$i]) % 256;
		    $temp_swap = $counter[$i];
		    $counter[$i] = $counter[$x];
		    $counter[$x] = $temp_swap;
	    }
	    for ($i = 0; $i < strlen($data); $i++) 
        {
		    $a = ($a + 1) % 256;
		    $j = ($j + $counter[$a]) % 256;
		    $temp = $counter[$a];
		    $counter[$a] = $counter[$j];
		    $counter[$j] = $temp;
		    $k = $counter[(($counter[$a] + $counter[$j]) % 256)];
		    $Zcipher = ord(substr($data, $i, 1)) ^ $k;
		    $Zcrypt .= chr($Zcipher);
	    }
	    return $Zcrypt;
	}

	function hex2bin($hexdata) 
	{
		$bindata = "";
		for ($i=0;$i<strlen($hexdata);$i+=2) 
	    {
   			$bindata.=chr(hexdec(substr($hexdata,$i,2)));
		}  
		return $bindata;
	}
	
    function checkIPVerification()
    {
        global $CFG;
        $checkSql="SELECT 
                        ip_address,
                        verification_status 
                    FROM 
                        ".$CFG['db']['tbl']['login_verification']." 
                    WHERE 
                        ip_address='".$_SERVER['REMOTE_ADDR']."' AND 
                        verification_status='IB'";
        return $this->_executeQuery($checkSql);
    }
    
    function regenerateSessionId($sessionObject)
	{
		
		if(in_array($_COOKIE['moduleName'],array(
				"flightSearchV1",
				"createOptionsV1", 
				"viewGroupRequestChangeList",
				"viewGroupRequest",
				"takeRequestControl",
				"ticketingCashEMD",
				"showPnrDetails",
				"viewPaymentRequest",
				"viewDuplicateRequest",
				"viewTransactionHistoryNew",
				"fetchFlightDetails",  
				"processRequestSubmit", 
				"paymentRequest", 
				"menuV1",
				"updatePaymentDetail",
				"paymentProcess",
				"getFlightLoadFactorDetails",
				"requestSetting",
				"createGridValuesForReport",
				"uploadPolicy",
				"commonPolicySubmit",
				"insertRequestPolicy",
				"insertDiscountPolicy",
				"insertFareTypePolicy",
				"insertStaticFarePolicy",
				"airLinesViewRequest",
				"processDashBoard",
				"submitInstantPaymentRequest",
				"popupSSRDetails"
			))){
			return true;
		}
		$oldId = session_id();
		session_regenerate_id(true);
		$sessionObject->renameSessionId($oldId, session_id());
		return true;
	}

	function _getDepartureDate($requestMasterId,$seriesRequestId='',$minDepartureDate='N')
	{
		global $CFG;

		$strToTimeArray=array();
		$minDateArray=array();
		$condition='';
		/*$sqlSelectRequestDetailsFromDate="SELECT
								rafd.departure_date,
								rafd.dep_time,
								rm.request_master_id,
								tm.transaction_id
						  FROM
								".$CFG['db']['tbl']['request_approved_flight_details']." rafd,
                                       				".$CFG['db']['tbl']['request_master']." rm,
                                        			".$CFG['db']['tbl']['transaction_master']." tm
						  WHERE
								rm.fare_acceptance_transaction_id in (0,tm.transaction_id)
								AND tm.transaction_id=rafd.transaction_master_id
								AND rm.request_master_id='".$requestMasterId."'";*/
								
		if($seriesRequestId!='')
			$condition.=" AND rafd.series_request_id='".$seriesRequestId."'";
		if($minDepartureDate=='Y')
			$condition.=" AND now()<rafd.departure_date";
		$sqlSelectRequestDetailsFromDate="SELECT
								rafd.departure_date,
								rafd.dep_time,
								rm.request_master_id,
								tm.transaction_id
							 FROM
								".$CFG['db']['tbl']['request_approved_flight_details']." rafd,
								".$CFG['db']['tbl']['request_master']." rm,
								".$CFG['db']['tbl']['transaction_master']." tm,
								".$CFG['db']['tbl']['airlines_request_mapping']." arm
							 WHERE
								arm.airlines_request_id = tm.airlines_request_id
								AND rm.fare_acceptance_transaction_id=tm.transaction_id
								AND tm.transaction_id=rafd.transaction_master_id
								AND arm.request_master_id = rm.request_master_id
								AND rm.request_master_id='".$requestMasterId."'
								".$condition."
								AND rafd.accepted_flight_status='Y'";

		$rowValue=$this->_executeQuery($sqlSelectRequestDetailsFromDate);
		if(count($rowValue) == 0)
		{
			$sqlSelectRequestDetailsFromDate="SELECT
								rd.from_date as departure_date,
								rd.start_time as dep_time,
								rm.request_master_id
						  FROM
                                       				".$CFG['db']['tbl']['request_master']." rm,
                                        			".$CFG['db']['tbl']['request_details']." rd
						  WHERE
								rm.request_master_id=rd.request_master_id
								AND rm.request_master_id='".$requestMasterId."'";

			$rowValue=$this->_executeQuery($sqlSelectRequestDetailsFromDate);
		}
		for($i=0;$i<count($rowValue);$i++)
		{
			$dateValue=strtotime($rowValue[$i]['departure_date']);
			array_push($strToTimeArray,$dateValue);
		}

		$minValue=min($strToTimeArray);

		for($i=0;$i<count($rowValue);$i++)
		{
			$dateValue=strtotime($rowValue[$i]['departure_date']);
			if($dateValue==$minValue)
			{
				$dateTime=$rowValue[$i]['departure_date']." ".$rowValue[$i]['dep_time'];
				array_push($minDateArray,$dateTime);
			}
		}

		$minValue=0;
		if(count($minDateArray) > 1)
		{
			for($j=0;$j<count($minDateArray);$j++)
			{
				$dateValue=strtotime($minDateArray[$j].":00");
				if($minValue > $dateValue || $minValue==0)
				{
					$minValue=$dateValue;
					$finalDate=$minDateArray[$j].":00";
				}
				
			}
		}
		else
		{
			$dateValue=strtotime($minDateArray[0].":00");
			$finalDate=$minDateArray[0].":00";

		}
	return $finalDate;
	}

        /* @Modified by : Abhishek S
         * @Modified date : 28/09/2018
         * @Desc : The below function was modified to disable access to site for predefined time set in CFG.
         */
	function _getAccessIpAddress()
	{
		global $CFG;
		$maintanaceIpArray=array();
		$match = true;
		if($CFG['site']['siteMaintanace'] == "Y")
		{
			$match = false;
			#To Putt the site maintanace for specific period start
                        #The default timezone is set to Asia/Kolkata because we need not calculate the UTC time to set time in config.
                        #Configs $CFG["site"]["maintenanceStartAt"] and $CFG["site"]["maintenanceEndAt"] should be set with date and time based only IST.
                        #sample data to be filled in config=> "2018-09-25 10:10" (seconds should not mentioned).
                        date_default_timezone_set('Asia/Kolkata');
                        $currentServerDate = new DateTime("0 minutes ago");
                        $maintenanceStart = new DateTime($CFG["site"]["maintenanceStartAt"].":00");
                        $maintenanceEnd = new DateTime($CFG["site"]["maintenanceEndAt"].":00");
                        #The default timezone is set back to UTC.
                        date_default_timezone_set('UTC');
                        if($maintenanceStart <= $currentServerDate && $maintenanceEnd >= $currentServerDate)
                        {
                                $maintanaceIpArray=$CFG['site']['siteMaintanaceIp'];
			
                                if(!empty($maintanaceIpArray) && count($maintanaceIpArray) > 0)
                                {
                                        #Finding the matched IP based on given IP range
                                        foreach($maintanaceIpArray AS $ipKey)
                                        {
                                                if(preg_match('/'.$ipKey.'/i',$_SERVER['REMOTE_ADDR'])==true && $match==false)
                                                {
                                                        $match = true;
                                                }
                                        }
                                }
                        }
                        else
                        {
                                $CFG['site']['siteMaintanace'] == "N";
                                $match = true;
                        }
                }	
		return $match;
	}

	function _checkCorporateGroupDetails($givenCorporateId,$corporateTypeId)
	{
		global $CFG;
		$returnArray=array();

		$indexValue=0;
		$mapGroupIdArray=array();

		$userGroupId=$_SESSION['groupRM']['groupId'];

		if($userGroupId==1)
		{
			if(isset($CFG['groupMap'][$userGroupId][$corporateTypeId]))
			{
				$mapGroupIdArray=$CFG['groupMap'][$userGroupId][$corporateTypeId];
			}
		}
		else
		{
			if($userGroupId==5)
			{
				$mapGroupIdArray=$CFG['groupMap'][$userGroupId][$corporateTypeId];
			}
			elseif(isset($CFG['groupMap'][$userGroupId]))
			{
				$mapGroupIdArray=$CFG['groupMap'][$userGroupId];
			}
		}

		for($i=0;$i<count($mapGroupIdArray);$i++)
		{
			$sqlSelectGroupName="SELECT
							group_name
						 FROM
							".$CFG['db']['tbl']['group_details']."
						 WHERE
							group_id='".$mapGroupIdArray[$i]."'";
			
			if(DB::isError($resultSelectGroupName=$this->_Oconnection->query($sqlSelectGroupName)))
			{
				fileWrite($sqlSelectGroupName,'SqlError','a+');
				return false;
			}
			
			if($resultSelectGroupName->numRows() >0)
			{
				$rowSelectGroupName=$resultSelectGroupName->fetchRow(DB_FETCHMODE_ASSOC);
				$groupDisplayName=$rowSelectGroupName['group_name'];

				$returnArray[$indexValue]['corporate_id']=$givenCorporateId;
				$returnArray[$indexValue]['user_group_id']=$mapGroupIdArray[$i];
				$returnArray[$indexValue]['group_id']=$mapGroupIdArray[$i];
				$returnArray[$indexValue]['group_display_name']=$groupDisplayName;
				$indexValue++;
			}
		}

		return $returnArray;
	}
	function _getPaymentAmountProcess($requestMasterId)
	{
		global $CFG;

		$sql="SELECT
					rm.number_of_passenger,
					rm.number_of_adult,
					rm.number_of_child,
					rm.number_of_infant,
					rm.opened_by,
					rm.opened_time,
					rm.view_status,
					(SELECT concat(".encrypt::_decrypt('first_name').",' ',".encrypt::_decrypt('last_name').") FROM ".$CFG['db']['tbl']['user_details']." WHERE user_id=rm.opened_by) AS opened_person_name,
					tm.fare_advised,
					tm.child_fare,
					tm.infant_fare,
					tm.transaction_id,
					tm.payment_validity,
					tm.payment_validity_type AS payment_type_id,
					tm.passenger_validity,
					tm.passenger_validity_type AS passenger_type_id,
					(SELECT fare_validity_type FROM ".$CFG['db']['tbl']['fare_validity_type_details']." WHERE fare_validity_type_id = tm.payment_validity_type) payment_type_name,
					(SELECT fare_validity_type FROM ".$CFG['db']['tbl']['fare_validity_type_details']." WHERE fare_validity_type_id = tm.passenger_validity_type) passenger_type_name
				FROM
					".$CFG['db']['tbl']['request_master']." rm,
					".$CFG['db']['tbl']['transaction_master']." tm
				WHERE
					rm.request_master_id=".$requestMasterId." AND
					rm.fare_acceptance_transaction_id = tm.transaction_id";

		if(DB::isError($result = $this->_Oconnection->query($sql))) {
			fileWrite($sql,"SqlError","a+");
			return false;
		}
		
		$this->_ApaymentDetails = $result->fetchRow(DB_FETCHMODE_ASSOC);
		
		
		$this->_ItotalAmount = $this->_ApaymentDetails['number_of_adult']*$this->_ApaymentDetails['fare_advised'];
		if($this->_ApaymentDetails['number_of_child']) {
			
			$this->_ItotalAmount += $this->_ApaymentDetails['number_of_child']*$this->_ApaymentDetails['child_fare'];
		}
		if($this->_ApaymentDetails['number_of_infant']) {
			
			$this->_ItotalAmount += $this->_ApaymentDetails['number_of_infant']*$this->_ApaymentDetails['infant_fare'];
		}

		/* Baggage And Meals */

		$transcactionId=$this->_ApaymentDetails['transaction_id'];

		$sqlSelectBaggageAndMeals="SELECT
							sum(baggauge_fare) as baggageFare,
							sum(meals_fare) as mealsFare
					   FROM
							".$CFG['db']['tbl']['request_approved_flight_details']."
					   WHERE
							transaction_master_id='".$transcactionId."' AND 
							accepted_flight_status='Y'";

		if(DB::isError($resultSelectBaggageAndMeals = $this->_Oconnection->query($sqlSelectBaggageAndMeals))) 
		{
			fileWrite($sqlSelectBaggageAndMeals,"SqlError","a+");
			return false;
		}

		$baggageFare=0;
		$mealsFare=0;

		if($resultSelectBaggageAndMeals->numRows() > 0)
		{
			$rowSelectBaggageAndMeals=$resultSelectBaggageAndMeals->fetchRow(DB_FETCHMODE_ASSOC);
			
			$baggageFare =$rowSelectBaggageAndMeals['baggageFare'];
			$mealsFare =$rowSelectBaggageAndMeals['mealsFare'];
		}
		if($baggageFare != 0)
		{
			$this->_ItotalAmount += $this->_ApaymentDetails['number_of_adult']*$baggageFare;
			if($this->_ApaymentDetails['number_of_child']) 
			{
				$this->_ItotalAmount += $this->_ApaymentDetails['number_of_child']*$baggageFare;
			}
		}
		if($mealsFare != 0)
		{
			$this->_ItotalAmount += $this->_ApaymentDetails['number_of_adult']*$mealsFare;
			if($this->_ApaymentDetails['number_of_child']) 
			{
				$this->_ItotalAmount += $this->_ApaymentDetails['number_of_child']*$mealsFare;
			}
		}
		$_ApaymentRequest=array();

		$_ApaymentRequest[0]['percentage_amount']=$this->_ItotalAmount;
		return $_ApaymentRequest;	
	}
    
    function _getTotalAmountProcess($requestMasterId,$paxStatus='N',$noOfAdult=0,$noOfChild=0,$noOfInfant=0)
    {
        global $CFG;
        
        $sql="SELECT 
                    rm.request_type,
                    rm.user_currency,
                    rm.exchange_rate,
                    rm.number_of_passenger,
					rm.number_of_adult,
					rm.number_of_child,
					rm.number_of_infant,
					rm.fare_acceptance_transaction_id,
                    arm.airlines_request_id 
               FROM 
                    ".$CFG['db']['tbl']['request_master']." rm, 
                    ".$CFG['db']['tbl']['airlines_request_mapping']." arm       
                WHERE 
                    rm.request_master_id='".$requestMasterId."' AND 
                    rm.request_master_id=arm.request_master_id";
        if(DB::isError($result = $this->_Oconnection->query($sql))) 
        {
			fileWrite($sql,"SqlError","a+");
			return false;
		}
		$this->_ArequestDetails = $result->fetchRow(DB_FETCHMODE_ASSOC);
		
		$condition = '';
		if($this->_ArequestDetails['fare_acceptance_transaction_id'])
			$condition = ' AND transaction_id = '.$this->_ArequestDetails['fare_acceptance_transaction_id'];
		
        $fetchSql="SELECT 
                            transaction_id,
                            fare_advised,
                            child_fare,
                            infant_fare,
                            payment_validity,
                            payment_validity_type AS payment_type_id,
                            passenger_validity,
                            passenger_validity_type AS passenger_type_id,
					        (SELECT fare_validity_type FROM ".$CFG['db']['tbl']['fare_validity_type_details']." WHERE fare_validity_type_id = payment_validity_type) payment_type_name,
					        (SELECT fare_validity_type FROM ".$CFG['db']['tbl']['fare_validity_type_details']." WHERE fare_validity_type_id = passenger_validity_type) passenger_type_name
                    FROM 
                            ".$CFG['db']['tbl']['transaction_master']."
                    WHERE 
                            airlines_request_id='".$this->_ArequestDetails['airlines_request_id']."'
                            ".$condition."
                    ORDER BY
							transaction_id DESC limit 1";
        if(DB::isError($fetchResult = $this->_Oconnection->query($fetchSql))) 
        {
			fileWrite($fetchSql,"SqlError","a+");
			return false;
		}
		$this->_AtransactionDetails = $fetchResult->fetchRow(DB_FETCHMODE_ASSOC);
		
        if($noOfAdult != 0 || $paxStatus=='Y')
			$this->_ItotalAmount = $noOfAdult*$this->_AtransactionDetails['fare_advised'];
		else
			$this->_ItotalAmount = $this->_ArequestDetails['number_of_adult']*$this->_AtransactionDetails['fare_advised'];
			
        if($noOfChild != 0 || $paxStatus=='Y')
			$this->_ItotalAmount += $noOfChild*$this->_AtransactionDetails['child_fare'];
		else if($this->_ArequestDetails['number_of_child']) {
			$this->_ItotalAmount += $this->_ArequestDetails['number_of_child']*$this->_AtransactionDetails['child_fare'];
		}
        
		if($noOfInfant != 0 || $paxStatus=='Y')
			$this->_ItotalAmount += $noOfInfant*$this->_AtransactionDetails['infant_fare'];
        else if($this->_ArequestDetails['number_of_infant']) {
			$this->_ItotalAmount += $this->_ArequestDetails['number_of_infant']*$this->_AtransactionDetails['infant_fare'];
		}
		
		/* Baggage And Meals */
/*
		$sql = "SELECT ssr_master_id FROM ".$CFG['db']['tbl']['ssr_master']." WHERE request_master_id=".$requestMasterId;
		
		if(DB::isError($ssrDetails = $this->_Oconnection->query($sql))) 
		{
			fileWrite($sql,"SqlError","a+");
			return false;
		}
		$ssrTag = 0;
		if($ssrDetails->numRows() > 0)
		{
			$ssrUpdatedDetails = array();
			while($row = $ssrDetails->fetchRow(DB_FETCHMODE_ASSOC))
				$ssrUpdatedDetails[] = $row['ssr_master_id'];
			
			$ssrSql = "SELECT 
							request_approved_flight_id,
							sum(baggage_fare) as baggageFare,
							sum(meals_fare) as mealsFare
						FROM
							".$CFG['db']['tbl']['ssr_details']."
						WHERE
							ssr_master_id IN ('".implode("','",$ssrUpdatedDetails)."')
						GROUP BY
							ssr_master_id
						ORDER BY
							ssr_master_id DESC";
						
			if(strtoupper($this->_ArequestDetails['request_type']) == "ADHOC")
				$ssrSql .= " LIMIT 1";
			
			if(DB::isError($ssrValues = $this->_Oconnection->query($ssrSql))) 
			{
				fileWrite($ssrSql,"SqlError","a+");
				return false;
			}

			if($ssrValues->numRows() > 0)
			{
				$ssrUpdatedValues['request_approved_flight_id'] = array();
				$ssrUpdatedValues['baggageFare'] = 0;
				$ssrUpdatedValues['mealsFare'] = 0;
				while($rowSSR = $ssrValues->fetchRow(DB_FETCHMODE_ASSOC))
				{
					if(!in_array($rowSSR['request_approved_flight_id'],$ssrUpdatedValues['request_approved_flight_id']))
					{
						$ssrUpdatedValues['baggageFare'] += $rowSSR['baggageFare'];
						$ssrUpdatedValues['mealsFare'] += $rowSSR['mealsFare'];
						$ssrTag = 1;
						array_push($ssrUpdatedValues['request_approved_flight_id'],$rowSSR['request_approved_flight_id']);
					}
				}
			}
			
		}*/
		$_SincludedSSRAmount = "N";

		$transcactionId=$this->_AtransactionDetails['transaction_id'];

		$sqlSelectBaggageAndMeals="SELECT
							sum(baggauge_fare) as baggageFare,
							sum(meals_fare) as mealsFare
					   FROM
							".$CFG['db']['tbl']['request_approved_flight_details']."
					   WHERE
							transaction_master_id='".$transcactionId."' AND 
							accepted_flight_status='Y'";

		if(DB::isError($resultSelectBaggageAndMeals = $this->_Oconnection->query($sqlSelectBaggageAndMeals))) 
		{
			fileWrite($sqlSelectBaggageAndMeals,"SqlError","a+");
			return false;
		}

		$baggageFare=0;
		$mealsFare=0;
		if($resultSelectBaggageAndMeals->numRows() > 0)
		{
			$rowSelectBaggageAndMeals=$resultSelectBaggageAndMeals->fetchRow(DB_FETCHMODE_ASSOC);
			
			$baggageFare =$rowSelectBaggageAndMeals['baggageFare'];
			$mealsFare =$rowSelectBaggageAndMeals['mealsFare'];
            $tigerConnectFare=$rowSelectBaggageAndMeals['tiger_connect_fare'];
		}
		/*We will get the entire SSR total amount in the first time, 
		 * so restrict to call again if SSR added in passenger level
		 */
		if($_SincludedSSRAmount=="N") 
		{
			/*Return 'N' if there is no ssr added else amount will get, 
			 *We can get 0 as total fare for some SSR, so that we returns 'N'
			 */
			$_IssrTotalAmount = $this->_getSSRTotalAmount($requestMasterId);
			if($_IssrTotalAmount!="N") 
			{
				$totalAmount += $_IssrTotalAmount;
				$_SincludedSSRAmount = "Y";
			}	
			else			
			{
				if($baggageFare != 0)
				{
					if($noOfAdult != 0 || $paxStatus=='Y'){
						$this->_ItotalAmount += $noOfAdult*$baggageFare;
						
					}
					else{
						$this->_ItotalAmount += $this->_ArequestDetails['number_of_adult']*$baggageFare;
						
					}
					
					if($noOfChild != 0 || $paxStatus=='Y')
						$this->_ItotalAmount += $noOfChild*$baggageFare;
					else if($this->_ArequestDetails['number_of_child']) {
						$this->_ItotalAmount += $this->_ArequestDetails['number_of_child']*$baggageFare;
					}
				}
				if($mealsFare != 0)
				{
					if($noOfAdult != 0 || $paxStatus=='Y')
						$this->_ItotalAmount += $noOfAdult*$mealsFare;
					else
						$this->_ItotalAmount += $this->_ArequestDetails['number_of_adult']*$mealsFare;
						
					if($noOfChild != 0 || $paxStatus=='Y')
						$this->_ItotalAmount += $noOfChild*$mealsFare;
					else if($this->_ArequestDetails['number_of_child']) {
						$this->_ItotalAmount += $this->_ArequestDetails['number_of_child']*$mealsFare;
					}
				}
			}
		}
		
		if(isset($CFG['site']['enableGenericFees']) && $CFG['site']['enableGenericFees']=='Y')
		{
			$this->_ItotalAmount+=$this->_getTotalGenericChareAmount($requestMasterId);
		}	
        return $this->_ItotalAmount;
    }
	function _getFirstSectorRequest($sectorArray,$returnType="A")
	{
		global $CFG;
		$requestMasterIdArray=array();
		$requestMasterIdArrayExclude=array();
		$requestMasterIdArrayInclude=array();
			
		foreach($sectorArray as $sector)
			$sectorMatchedArray[$sector['origin'].''.$sector['destination']] = $sector['origin'].''.$sector['destination'];
		
		$condition = implode("','",$sectorMatchedArray);
		$sqlSelectRequestMaster="SELECT
								request_master_id,
								origin_airport_code,
								dest_airport_code
						 FROM
								".$CFG['db']['tbl']['request_details']."
						 WHERE
						 		concat(origin_airport_code,dest_airport_code) 
						 IN ('".$condition."')";

		if(DB::isError($resultSelectRequestMaster=$this->_Oconnection->query($sqlSelectRequestMaster)))
		{
			fileWrite($sqlSelectRequestMaster,"SqlError","a+");
			return false;
		}
		while($rowSelectRequestMaster=$resultSelectRequestMaster->fetchRow(DB_FETCHMODE_ASSOC))
		{
			/**
			 * Array unique doesn't support when size reaches to 1 lakh index in live server,So we made unique like this.
			**/
			$requestMasterIdArray[$rowSelectRequestMaster['request_master_id']] = $rowSelectRequestMaster['request_master_id'];
		}
		if($returnType=="S")
		{
			return implode(",",$requestMasterIdArray);
		}
		elseif($returnType=="A")
		{
			return $requestMasterIdArray;
		}
		else
		{
			return $requestMasterIdArray;
		}
	}
	
	/*Modified By   : Subalakshmi.S 17-04-2018
	  Desc			: To return the GMT or UTC date and time
	  Input			: Void
	  Return		: UTC date and time(Date)*/
	  
	public static function _getUTCDateValue()
	{
		/*$timeStamp = time();
		$offset = date('Z');
		$utcTimeStamp = $timeStamp - $offset;
		$UTCDateValue=date('Y-m-d H:i:s',$utcTimeStamp);*/
		$_DUTCDate = gmdate('Y-m-d H:i:s');
		return $_DUTCDate;
	}
	
	/*Modified By   : Subalakshmi.S 17-04-2018
	  Desc			: To convert into UTC date and time from user defined 
					  timezone by default airline timezone will be 
					  considered
	  Input			: User time zone date and it's timezone 
	  Return		: UTC date and time(Date)*/
	  
	function _getConvertToUTCDateValue($_DgivenDate,$_StimeZone='')
	{
		global $CFG;
		if($_StimeZone=='')
			$_StimeZone=$CFG['site']['siteTimeZoneInterval'];
		$_DreturnDate = $this->_getTimeZoneDateFormatValue($_DgivenDate,'UTC',$_StimeZone);
		return $_DreturnDate;
	}
	
	/*Modified By   : Subalakshmi.S 17-04-2018
	  Desc			: To get the time zone
	  Input			: --- 
	  Return		: Time zone*/
	
	function _getTimeZone()
	{
		global $CFG;
		
		if(isset($_SESSION['groupRM']['userTimeZoneInterval']) && $_SESSION['groupRM']['userTimeZoneInterval']!="")
		{
			$_StimeZone=$_SESSION['groupRM']['userTimeZoneInterval'];
		}
		elseif(isset($_SESSION['groupRM']['corporateTimeZoneInterval']) && $_SESSION['groupRM']['corporateTimeZoneInterval']!="")
		{
			$_StimeZone=$_SESSION['groupRM']['corporateTimeZoneInterval'];
		}
		else
		{
			$_StimeZone=$CFG['site']['siteTimeZoneInterval'];
		}
		
		return $_StimeZone;
	} 
	/**
	 * Author:Dhamu G
	 * Created date:16/04/2019
	 * Description:created to add number of days for date filters based on the config
	 */
	function _getDateFilters(){
		global $CFG;
		if($CFG["default"]["dateFilterRange"]==0){
			return date('Y-m-d',strtotime($this->_getUserDateFormatValue(date('Y-m-d H:i:s'))));
		}else{
			return date('Y-m-d',strtotime($this->_getUserDateFormatValue(date('Y-m-d H:i:s')).'-'.$CFG["default"]["dateFilterRange"].'days'));
		}
		
	}
	/*Modified By   : Subalakshmi.S 17-04-2018
	  Desc			: To get the user time zone date and time 
	  Input			: UTC Date(Time) 
	  Return		: User time zone(Date)*/
	  
	function _getUserDateFormatValue($_DgivenDate)
	{
		global $CFG;
		if($this->_isDate($_DgivenDate) > 0)
		{
			return $_DgivenDate;
		}
		$_DreturnDate=$_DgivenDate;

		
		$_StimeZone = $this->_getTimeZone();
		/*if($_StimeZone!="")
		{
			$returnDateValue=date('Y-m-d H:i:s',strtotime($_StimeZone." MINUTE",strtotime($_DgivenDate)));
		}*/

		if($_StimeZone!="")
			$_DreturnDate = $this->_getTimeZoneDateFormatValue($_DgivenDate,$_StimeZone);
		return $_DreturnDate;
	}

	/*Modified By   : Subalakshmi.S 17-04-2018
	  Desc			: To convert into user defined timezone from airline
					  time zone by default UTC time zone will be considered
	  Input			: UTC Date and it's timezone
	  Return		: User time zone(Date)*/

	function _getTimeZoneDateFormatValue($_DgivenDate,$_StimeZone,$_SfromTimeZone='UTC')
	{
		global $CFG;
		$_DreturnDate=$_DgivenDate;
		if(!empty($_StimeZone))
		{
			$_OdateTime = new DateTime((string)$_DgivenDate, new DateTimeZone(!is_array($_SfromTimeZone)? $_SfromTimeZone:'UTC'));
			$_OdateTime->setTimezone(new DateTimeZone($_StimeZone));
			$_DreturnDate = $_OdateTime->format('Y-m-d H:i:s');
		}
		/*if($timeZoneInterval!="")
		{
			$returnDateValue=date('Y-m-d H:i:s',strtotime($timeZoneInterval." MINUTE",strtotime($givenDateValue)));
		}*/
		return $_DreturnDate;
	}
	
	/*Modified By   : Subalakshmi.S 17-04-2018
	  Desc			: To get the display time zone interval
	  Input			: Timezone
	  Return		: Display time zone interval with prefix of GMT*/
	  
	function _getTimeZoneDisplay($_StimeZone='UTC')
	{
		global $CFG;
		
		/*$_SintervalHours=$this->_convertToHoursMins($_StimeZone,'%d:%d');
		$_StimeZone = (substr($_StimeZone,0,1) == "-" ? "" : "+" ) . $_StimeZone;
		$_SintervalDisplay = (substr($_StimeZone,0,1) == "-" ? " (GMT" : " (GMT+" ) . $_SintervalHours . ")";*/
		
		$_OdateTime = new DateTime("now", new DateTimeZone($_StimeZone));
		$_SintervalDisplay = "(GMT".$_OdateTime->format('P').")";
		return $_SintervalDisplay;
	}

	/*Modified By   : Subalakshmi.S 17-04-2018
	  Desc			: To get the offset value for the given timezone 
	  Input			: Timezone
	  Return		: Offset(Time zone interval) value in minutes*/

	function _getTimeZoneOffset($_StimeZone) 
	{
		$_OdateTimeCurrent = new DateTime("now",new DateTimeZone($_StimeZone));
		$_Soffset = ($_OdateTimeCurrent->getOffset()/60);
		return $_Soffset;
	}

	function _convertToHoursMins($time, $format = '%d:%d') 
	{
		settype($time, 'integer');

		$hours = floor($time/60);
		$minutes = $time%60;

		/*if($minutes<0)
			$minutes=-($minutes);*/

		return sprintf($format, $hours, $minutes);
	}

	function _getCountryCodes($_ScountryCode='')
	{
		global $CFG;
		$_AcountryCodes=array();
		$_Scondition = '';
		
		if($_ScountryCode != '')
			$_Scondition = " AND citizen_code='".$_ScountryCode."'";
		
		$sqlSelectCountryDetails="SELECT
										citizenship_name as country_name,
										citizen_code as country_code
								  FROM
										".$CFG['db']['tbl']['citizenship_details']."
								  WHERE 1 ".$_Scondition." 
								  ORDER BY citizenship_name";

		if(DB::isError($resultSelectCountryDetails=$this->_Oconnection->query($sqlSelectCountryDetails)))
		{
			fileWrite($sqlSelectCountryDetails,"SqlError","a+");
			return false;
		}
		if($resultSelectCountryDetails->numRows() > 0)
		{
			while($rowSelectCountryDetails=$resultSelectCountryDetails->fetchRow(DB_FETCHMODE_ASSOC))
			{
				$_AcountryCodes[$rowSelectCountryDetails['country_name']]=$rowSelectCountryDetails['country_code'];
			}

		}
		return $_AcountryCodes;
		
	}
	/*Modified By   : Subalakshmi.S 17-04-2018
	  Desc			: To display  the selected time zone of the user
	  Input			: ---
	  Return		: Array of user time zone details*/

	function _displayTimeZoneSelect($_ScountryCode = '')
	{

		$_AcountryCodes = $this->_getCountryCodes($_ScountryCode);
		$_AreturnData=array();

		foreach ($_AcountryCodes as $_Scountry => $_ScountryCode) 
		{

			$_StimeZoneIdentifiers = DateTimeZone::listIdentifiers(DateTimeZone::PER_COUNTRY,$_ScountryCode);
			foreach( $_StimeZoneIdentifiers as $_Svalue )

			{
				$_SintervalMinutes = $this->_getTimeZoneOffset($_Svalue);
				$_SintervalValue = sprintf("%+d",$_SintervalMinutes);
				
				$_SintervalDisplay = $this->_getTimeZoneDisplay($_Svalue);
				
				$_SdisplayValue = str_replace('_',' ',$_Svalue);
				$_AexplodedValue = explode("/",$_SdisplayValue);
				$_Scity = $_AexplodedValue[sizeof($_AexplodedValue)-1];

				$_AresultData=array();
				$_AresultData['countryCode']=$_ScountryCode;
				$_AresultData['intervalValue']=$_SintervalValue;
				$_AresultData['countryName']=$_Scountry;
				$_AresultData['cityName']=$_Scity;
				$_AresultData['intervalDisplay']=$_SintervalDisplay;
				$_AresultData['timeZone']=$_Svalue;
				$_AreturnData[]=$_AresultData;

			}
		}
		return $_AreturnData;
	}

	/*Modified by Ganesan.S on 21-05-2018
	 *Modification done for time zone automatic selection based on country selection
	 *Added new parameter $timeZoneSelect
	 */
	function _displayTimeZoneCountry($selectedType="C",$selected="IN",$timeZoneSelect="N")
	{
		global $CFG;
		
			$_AtimeZones=$this->_displayTimeZoneSelect();
	  
		$optionString="";
		$edit = '';
		foreach($_AtimeZones as $_AtimeZone)
		{	
			$_Svalue = $_AtimeZone['timeZone'];
			
			$_SdisplayValue=ucfirst(($_AtimeZone['countryName']))." - ".$_AtimeZone['cityName']." - ".$_Svalue." ".$_AtimeZone['intervalDisplay'];
			
			/*if(isset($_COOKIE['groupRMLan']) && ($_COOKIE['groupRMLan']=="EN" || $_COOKIE['groupRMLan']=="BA"))
			{
				$displayValue=ucfirst(($timeZoneValue[$i]['countryName']))." - ".$timeZoneValue[$i]['cityName']." ".$timeZoneValue[$i]['intervalDisplay'];
			}
			
			elseif(!isset($_COOKIE['groupRMLan']))
			{
				$displayValue=ucfirst(($timeZoneValue[$i]['countryName']))." - ".$timeZoneValue[$i]['cityName']." ".$timeZoneValue[$i]['intervalDisplay'];
			}*/
			
			if(isset($_COOKIE['groupRMLan']) && !in_array($_COOKIE['groupRMLan'],array('EN','BA','FR','GR','GE')))
			{
				$_AcountryExplode=explode("-",$_AtimeZone['countryName']);
				
				$_AtimeZone['countryName']=$_AcountryExplode[0];

				if(isset($_AcountryExplode[1]) && trim($_AcountryExplode[1])!="")
					$_AtimeZone['cityName']=$_AcountryExplode[1].$_AtimeZone['cityName'];
					
				//$_SkeyValue="COMMON_COUNTRY_".str_replace(".","",str_replace(")","",str_replace("(","",str_replace(" ","",str_replace(",","",str_replace("'","",str_replace("_","",strtoupper($_AtimeZone['countryName']))))))))."_CITY_".str_replace(".","",str_replace(")","",str_replace("(","",str_replace(" ","",str_replace(",","",str_replace("'","",str_replace("_","",strtoupper($_AtimeZone['cityName']))))))));
	
				$_Asearch = array(".",")","("," ",",","'","_");
				$_SkeyValue = "COMMON_COUNTRY_".str_replace($_Asearch,"",$_AtimeZone['countryName'])."_CITY_".str_replace($_Asearch,"",$_AtimeZone['cityName']);
				$_SkeyValue = preg_replace("/[^a-z_]+/i", "", $_SkeyValue);
				
				$_SdisplayValue=$this->_Osmarty->getConfigVars($_SkeyValue)." - ".$_Svalue." ".$_AtimeZone['intervalDisplay'];
			}
			/*Coded by Ganesan.S on 21-05-2018
			  Prepare array values for select time zone automatically when user and corporate creation, 
			  based on country selection.*/
			if($timeZoneSelect=="Y")
			{
				$_AdisplayTimeZone['displayValue']=$_SdisplayValue;
				$_AdisplayTimeZone['timeZone']=$_AtimeZone['timeZone'];
				$_AdisplayTimeBasedOnCountry[$_AtimeZone['countryCode']][] = $_AdisplayTimeZone;
			}  

			if($CFG['addTravelAgent']['loginPersonCounty']=='Y' && isset($_SESSION['groupRM']['userTimeZoneInterval']))
			{				
				$selectString=((isset($_SESSION['groupRM']['userTimeZoneInterval']) && strtolower($_SESSION['groupRM']['userTimeZoneInterval'])== strtolower($_Svalue)) ? 'selected="selected"' : '');
			}
			else
			{
				if($selectedType=="C")
					$selectString=(($_AtimeZone['countryCode']==$selected) ? 'selected="selected"' : '');				
			}
			if($selectedType=="K")
			{
					$selectString=(($_Svalue==$selected) ? 'selected="selected"' : '');
					if($_Svalue == $selected)
						$edit = $selected ;
					$selected = (($_Svalue==$selected) ? $_AtimeZone['countryCode'] : $selected);
			}
			$optionString .='<option value="' . $_Svalue . '" '.$selectString.'>'. $_SdisplayValue. '</option>' . PHP_EOL;
		}
		if($timeZoneSelect=="Y")
		{
			$this->_OobjResponse->script("displayTimeBasedOnCountry = ".json_encode($_AdisplayTimeBasedOnCountry));
			/*During edit user and corporate, select the selected timezone in dropdown*/
			if($edit != '')
				$this->_OobjResponse->script("setTimeout(function(){getCountryTimeZone('".$selected."','timeZone','Y','".$edit."');},500);");      
			else
				$this->_OobjResponse->script("setTimeout(function(){getCountryTimeZone('".$selected."','timeZone','Y');},500);");      
		}		
		return $optionString;
	}

	function _getTimeZoneInterval($userId)
	{
		global $CFG;

		$timeZoneInterval = $CFG['site']['siteTimeZoneInterval'];

		$sql = "SELECT 
					ud.time_zone_interval as userTimeZoneInterval,
					cd.time_zone_interval as corporateTimeZoneInterval
				FROM 
					".$CFG['db']['tbl']['user_details']." ud,
					".$CFG['db']['tbl']['corporate_details']." cd

				WHERE 
					ud.user_id = '".$userId."'
					AND ud.corporate_id=cd.corporate_id";
		
	
		if(DB::isError($result=$this->_Oconnection->query($sql)))
		{
			fileWrite($sql,"SqlError","a+");
			return false;
		}
		if($result->numRows() > 0)
		{
			$row=$result->fetchRow(DB_FETCHMODE_ASSOC);
			if($row['userTimeZoneInterval'] != "")
				$timeZoneInterval = $row['userTimeZoneInterval'];
			elseif($row["corporateTimeZoneInterval"] != "")
				$timeZoneInterval = $row["corporateTimeZoneInterval"];			
		}
		return $timeZoneInterval;
	}
	function _getCountryDetails()
	{
		
	    global $CFG;
	    $countrySql="SELECT 
						citizenship_id, 
						citizenship_name,
						citizen_code 
					FROM 
						".$CFG['db']['tbl']['citizenship_details']."
					WHERE 
						status='Y'
					ORDER BY citizenship_name ASC ";
        if(DB::isError($resultCountry = $this->_Oconnection->query($countrySql))) 
	    {
		    fileWrite($countrySql,'SqlError','a+');
		    return false;
	    }
	    $index=0;
	
	    while($row = $resultCountry->fetchRow(DB_FETCHMODE_ASSOC)) 
	    {
		    $this->_AcountryDetails['countryCode'][$index]=$row['citizen_code'];
		    $this->_AcountryDetails['countryName'][$index]=$this->_Osmarty->getConfigVars('COMMON_CITIZENSHIP_DETAILS_'.strtoupper($row['citizen_code']));
		    $this->_AcountryDetails[$index]=$row;
		    $index++;
	    }
	    
	    return $this->_AcountryDetails;
	}
	
	function _userTimeZoneDateDisplay()
	{
		/*global $CFG;

		if(isset($_SESSION['groupRM']['userTimeZoneInterval']) && $_SESSION['groupRM']['userTimeZoneInterval']!="")
		{
			$timeZoneInterval=$_SESSION['groupRM']['userTimeZoneInterval'];
		}
		elseif(isset($_SESSION['groupRM']['corporateTimeZoneInterval']) && $_SESSION['groupRM']['corporateTimeZoneInterval']!="")
		{
			$timeZoneInterval=$_SESSION['groupRM']['corporateTimeZoneInterval'];
		}
		else
		{
			$timeZoneInterval=$CFG['site']['siteTimeZoneInterval'];
		}

		/*$timeStamp = time();
		$offset = date('Z');
		$utcTimeStamp = $timeStamp - $offset;
		$UTCDateValue=date('Y-m-d H:i:s',$utcTimeStamp);*/
		
		$_DreturnDate = $this->_getUserDateFormatValue("now");
		return $_DreturnDate;
	}
	
	function _getSSRFareDetails($transcactionId)
	{
	    global $CFG;
	    $sqlSelectBaggageAndMeals="SELECT
							sum(baggauge_fare) as baggageFare,
							sum(meals_fare) as mealsFare
					   FROM
							".$CFG['db']['tbl']['request_approved_flight_details']."
					   WHERE
							transaction_master_id='".$transcactionId."'";

		if(DB::isError($resultSelectBaggageAndMeals = $this->_Oconnection->query($sqlSelectBaggageAndMeals))) 
		{
			fileWrite($sqlSelectBaggageAndMeals,"SqlError","a+");
			return false;
		}
        if($resultSelectBaggageAndMeals->numRows() > 0)
		{
			$rowSelectBaggageAndMeals=$resultSelectBaggageAndMeals->fetchRow(DB_FETCHMODE_ASSOC);
			
			$this->_AssrFare['baggage'] =$rowSelectBaggageAndMeals['baggageFare'];
			$this->_AssrFare['meal'] =$rowSelectBaggageAndMeals['mealsFare'];
		}
		else
		{
		    $this->_AssrFare['baggage'] =0;
			$this->_AssrFare['meal'] =0;
		}
		return $this->_AssrFare;    
	}

	function _getUserDetailsHelpDesk($userId="",$groupId="")
	{
		global $CFG;

		$_Svariable = $userId."_".$groupId;
		$_AstaticData = $this->_staticData("_getUserDetailsHelpDesk",$_Svariable);
		if($_AstaticData !== false)
			return $_AstaticData;

		$condition = "";
		if($userId!="")
			$condition .= " AND ud.user_id = '".$userId."'";
		if($groupId!="")
			$condition .= " AND ud.group_id = '".$groupId."'";
		$userDetailsArray=array();

		$sqlUserDetails="SELECT
					ud.user_id,
					ud.group_id,
					ud.corporate_id,
					".encrypt::_decrypt('ud.title')." AS title,
					".encrypt::_decrypt('ud.first_name')." AS first_name,
					".encrypt::_decrypt('ud.last_name')." AS last_name,
					".encrypt::_decrypt('ud.email_id')." AS email_id,
					".encrypt::_decrypt('ud.user_address')." AS user_address,
					".encrypt::_decrypt('ud.phone_number')." AS phone_number,
					ud.time_zone_interval as userTimeZoneInterval,
					ud.time_zone_key as userTimeZoneKey,
                                        ".encrypt::_decrypt('cd.pos_code')." AS pos_code,
					".encrypt::_decrypt('ud.country_code')." AS country_code,
					cd.corporate_type_id,
					".encrypt::_decrypt('cd.corporate_name')." AS corporate_name,
					".encrypt::_decrypt('cd.agent_name')." AS agent_name,
					".encrypt::_decrypt('cd.iata_code')." AS iata_code,
					".encrypt::_decrypt('cd.pcc_code')." AS pcc_code,
					cd.airlines_code,
					".encrypt::_decrypt('cd.corporate_address')." AS corporate_address,
					".encrypt::_decrypt('cd.fax')." AS fax,
					".encrypt::_decrypt('cd.office_number')." AS office_number,
					cd.time_zone_interval as corporateTimeZoneInterval,
					cd.time_zone_key as corporateTimeZoneKey
				FROM
					".$CFG['db']['tbl']['user_details']." ud,
					".$CFG['db']['tbl']['corporate_details']." cd
				WHERE 
					ud.corporate_id=cd.corporate_id
					".$condition;
		if(DB::isError($resultUserDetails=$this->_Oconnection->query($sqlUserDetails)))
		{
			fileWrite($sqlUserDetails,"SqlError","a+");
			return false;
		}

		if($resultUserDetails->numRows() > 0)
		{
			while($rowUserDetails=$resultUserDetails->fetchRow(DB_FETCHMODE_ASSOC))
			{
				$userDetailsArray[]=$rowUserDetails;
			}	
			$this->_staticData("_getUserDetailsHelpDesk",$_Svariable,$userDetailsArray);		
		}

		return $userDetailsArray;
	}

	function _getIssueCommonInformation($issueId)
	{
		global $CFG;

		$issueInfoArray=array();

		$sqlSelectIssueInformation="SELECT
							id.issue_category_id,
							id.issue_subcategory_id,
							id.severity_id,
							id.user_id,
							(SELECT issue_category_name FROM ".$CFG['db']['tbl']['issue_category_details']." WHERE issue_category_id=id.issue_category_id) as issueCategoryName,
							(SELECT issue_subcategory_name FROM ".$CFG['db']['tbl']['issue_subcategory_details']." WHERE issue_subcategory_id=id.issue_subcategory_id) as issueSubCategoryName,
							(SELECT severity_name FROM ".$CFG['db']['tbl']['issue_severity_details']." WHERE severity_id=id.severity_id) as severityName
					   FROM
							".$CFG['db']['tbl']['issue_details']." id
					   WHERE
							id.issue_details_id='".$issueId."'";

		if(DB::isError($resultSelectIssueInformation=$this->_Oconnection->query($sqlSelectIssueInformation)))
		{
			fileWrite($sqlSelectIssueInformation,"SqlError","a+");
			return false;
		}

		if($resultSelectIssueInformation->numRows() > 0)
		{
			while($rowSelectIssueInformation=$resultSelectIssueInformation->fetchRow(DB_FETCHMODE_ASSOC))
			{
				$issueInfoArray[]=$rowSelectIssueInformation;
			}
		}		
		return $issueInfoArray;
	}
	
	function _getFlightDetails($requestMasterId,$seriesRequestId="")
	{
		global $CFG;
		$condition="";
		if($seriesRequestId!="" && $seriesRequestId!=0)
		{
			$condition.=" AND rafd.series_request_id='".$seriesRequestId."'"; 
		}
		$sql = "SELECT 
					request_approved_flight_id, 
					airlines_request_id, 
					transaction_master_id, 
					rafd.request_id,
					rafd.series_request_id,
					rm.user_currency AS currency_code,
					airline_code, 
					flight_code, 
					rafd.flight_number, 
					source, 
					destination, 
					departure_date, 
					arrival_date, 
					dep_time, 
					arr_time, 
					base_fare,
					tax,
					tax_breakup,
					child_base_fare,
					child_tax,
					child_tax_breakup,
					infant_base_fare,
					infant_tax,
					infant_tax_breakup,
					baggauge_fare,
					baggage_code,
					meals_fare,
					stops,
					adjusted_amount,
					discount_fare,
					rm.request_master_id,
					rd.trip_type,
					no_of_adult,
					no_of_child,
					no_of_infant,
					free_cost_count
				FROM 
					".$CFG['db']['tbl']['request_approved_flight_details']." rafd,
					".$CFG['db']['tbl']['request_master']." rm,
					".$CFG['db']['tbl']['request_details']." rd
				WHERE
					rm.request_master_id = ".$requestMasterId." AND
					rm.request_master_id = rd.request_master_id AND
					rm.fare_acceptance_transaction_id = rafd.transaction_master_id AND 
					rafd.request_id = rd.request_id AND
					rafd.accepted_flight_status='Y'".$condition;
		
		$flightDetails = array();
		$i = 0;
		foreach ($this->_executeQuery($sql) AS $tempFlightDetails){
			$flightDetails[$i] = $tempFlightDetails;
			$flightDetails[$i]['adultCount'] = $flightDetails[$i]['no_of_adult'];
			if($flightDetails[$i]['free_cost_count']>0)
				$flightDetails[$i]['no_of_adult'] += $flightDetails[$i]['free_cost_count'];
			$flightDetails[$i]['groupRequestId'] =  $this->_changeGroupRequestFormat($tempFlightDetails['request_master_id']);
			$flightDetails[$i]['tax_breakup_disp'] = str_replace("$$",", ",$tempFlightDetails['tax_breakup']);
			$flightDetails[$i]['child_tax_breakup_disp'] = str_replace("$$",", ",$tempFlightDetails['child_tax_breakup']);
			$flightDetails[$i]['infant_tax_breakup_disp'] = str_replace("$$",", ",$tempFlightDetails['infant_tax_breakup']);
			$flightDetails[$i]['viaFlight'] = array();
			if($tempFlightDetails['stops']) {
				$sqlViaFlight = "SELECT 
									via_flight_id,
									request_approved_flight_id, 
									origin, 
									destination, 
									airline_code, 
									flight_number, 
									departure_date, 
									departure_time, 
									arrival_date, 
									arrival_time, 
									baggauge_fare, 
									meals_fare
								FROM
									".$CFG['db']['tbl']['via_flight_details']." 
								WHERE request_approved_flight_id = ".$tempFlightDetails['request_approved_flight_id'];
				$flightDetails[$i]['viaFlight'] = $this->_executeQuery($sqlViaFlight);
			}
			$i++;
		}
		return $flightDetails;
	}
	
	/*
	 * To get the sum of paid amount for the request 
	 **/
	function _getPaidAmount($iairlineRequestId){

		global $CFG;
		$sql = "SELECT
					IF(sum(percentage_amount) IS NULL,0,sum(percentage_amount)) as paidAmt
				FROM
					".$CFG['db']['tbl']['payment_master']."
				WHERE
					airlines_request_id='".$iairlineRequestId."' AND (payment_status=10 OR payment_status=12)";
		if(DB::isError($result = $this->_Oconnection->query($sql))) 
		{
			fileWrite($sql,"SqlError","a+");
			return false;
		}
		
		$ipaidAmt = 0;
		while($row = $result->fetchRow(DB_FETCHMODE_ASSOC)) 
		{
			$ipaidAmt=$row['paidAmt'];
		}
		
		return $ipaidAmt;
	}

	function _getMealDescription($mealCode){

		global $CFG;
		if ($mealCode) {
			$_Svariable = $mealCode;
			$_AstaticData = $this->_staticData("_getMealDescription",$_Svariable);
			if($_AstaticData !== false)
				return $_AstaticData;	
			$SmealDescription = '';
			$sql = "SELECT 
					meal_description
					FROM 
					".$CFG['db']['tbl']['meal_code_details']."					
					WHERE 
					meal_code = '".$mealCode."'";
				
			if(DB::isError($result=$this->_Oconnection->query($sql)))
			{
				fileWrite($sql,"SqlError","a+");
				return false;
			}
			if($result->numRows() > 0)
			{
				$row=$result->fetchRow(DB_FETCHMODE_ASSOC);
				$SmealDescription = $row['meal_description'];
				$this->_staticData("_getMealDescription",$_Svariable,$SmealDescription);
			}
			return $SmealDescription;		
		}
	}

	function _getBaggageName($baggageCode){

		global $CFG;
		if($baggageCode){
			$_Svariable = $baggageCode;
			$_AstaticData = $this->_staticData("_getBaggageName",$_Svariable);
			if($_AstaticData !== false)
				return $_AstaticData;		

			$SbaggageName = '';
			$sql = "SELECT 
					baggage_name
					FROM 
					".$CFG['db']['tbl']['baggage_details']."					
					WHERE 
					baggage_code = '".$baggageCode."'";

			if(DB::isError($result=$this->_Oconnection->query($sql)))
			{
				fileWrite($sql,"SqlError","a+");
				return false;
			}
			if($result->numRows() > 0)
			{
				$row=$result->fetchRow(DB_FETCHMODE_ASSOC);
				$SbaggageName = $row['baggage_name'];
				$this->_staticData("_getBaggageName",$_Svariable,$SbaggageName);	
			}
			return $SbaggageName;
		}		
	}

	/*
	*	To get the Baggage details from SSR Management 
	*/
	function _getBaggageDetails(){
		
		global $CFG;
		$baggageDetails = array();

		$sql="SELECT 
				sl.ssr_list_id,
				sl.ssr_description
			FROM 
				".$CFG['db']['tbl']['ssr_list']." sl,
				".$CFG['db']['tbl']['ssr_category_details']." scd
			WHERE 
				scd.ssr_category_id=sl.ssr_category_id
				AND scd.ssr_category_name='Baggage'
				AND sl.display_status='Y'";

		if(DB::isError($result = $this->_Oconnection->query($sql))) 
		{
			fileWrite($sql,'SqlError','a+');
			return false;
		}
		
		$index=0;
		while($row = $result->fetchRow(DB_FETCHMODE_ASSOC)) 
		{
			$temp = 'AC'.substr($row['ssr_description'],0,2);
			$baggageDetails[$temp]=$row['ssr_description'];
			$index++;
		}
		
		return $baggageDetails;
	}

	function _getBaggageInformation()
	{
		global $CFG;
		$baggageDetails = array();

		$sql="SELECT 
		baggage_id, 
		baggage_name,
		baggage_code                             
		FROM 
		".$CFG['db']['tbl']['baggage_details']." where baggage_status='Y'";

		if(DB::isError($result = $this->_Oconnection->query($sql))) 
		{
		    fileWrite($sql,'SqlError','a+');
		    return false;
		}

		while($row = $result->fetchRow(DB_FETCHMODE_ASSOC)) 
		{
		    $baggageName = $row['baggage_name'];
		    $baggageDetails[$baggageName]=$row['baggage_code'];		    
		}	    
		return $baggageDetails;
	}

	/*
	 * To get meals details from ssr management
	 */
	function _getMealDetails(){
		
		global $CFG;
		$mealDetails = array();
	    $sql="SELECT 
				sl.ssr_list_id, 
				sl.ssr_description,
				sl.ssr_code
			FROM 
				".$CFG['db']['tbl']['ssr_list']." sl,
				".$CFG['db']['tbl']['ssr_category_details']." scd
			WHERE 
				scd.ssr_category_id=sl.ssr_category_id
				AND scd.ssr_category_name='Meals'
				AND sl.display_status='Y'";

		if(DB::isError($result = $this->_Oconnection->query($sql))) 
		{
			fileWrite($sql,'SqlError','a+');
			return false;
		}

		$index=0;
		while($row = $result->fetchRow(DB_FETCHMODE_ASSOC)) 
		{
			$mealDetails[$row['ssr_code']]=$row['ssr_description'];
			$index++;
		}
		return $mealDetails;
	}

	function _getValidityDate($requestMasterId,$transactionMasterId=0){

		global $CFG;

		$fareValiditySql = "SELECT 
							fare_validity_type_id,fare_validity_type,fare_validity_values
							FROM 
							".$CFG['db']['tbl']['fare_validity_type_details']."
							WHERE status='Y'";	
		
		if(DB::isError($fareValidityResult = $this->_Oconnection->query($fareValiditySql))) 
		{
			fileWrite($sql,"SqlError","a+");
			return false;
		}

		$i = 0;
		while($fareValidityRow = $fareValidityResult->fetchRow(DB_FETCHMODE_ASSOC)){
			$fareValidity[$i]['fare_validity_type_id'] = $fareValidityRow['fare_validity_type_id'];
			$fareValidity[$i]['fare_validity_type'] = $fareValidityRow['fare_validity_type'];
			$fareValidity[$i]['fare_validity_values'] = $fareValidityRow['fare_validity_values'];
			$i++;
		}		

		$sql = "SELECT 
					tm.transaction_id,
					tm.airlines_request_id,
					tm.fare_advised,
					tm.child_fare,
					tm.infant_fare,
					tm.exchange_rate,
					tm.fare_negotiable,
					tm.fare_validity,
					tm.fare_validity_type_id,
					tm.payment_validity,
					tm.payment_validity_type,
					tm.passenger_validity,
					tm.passenger_validity_type,
					tm.transaction_date,
					tm.fare_expiry_date,
					tm.payment_expiry_date,
					tm.passenger_expiry_date,
					tm.active_status,
					tm.remarks,
					tm.response_source,
					tm.cancel_policy_id,
					tm.time_line_id,
					arm.airlines_request_id,
					arm.request_master_id,
					arm.corporate_id,
					arm.current_status,
					arm.last_updated
				FROM 
					".$CFG['db']['tbl']['transaction_master']." tm
				INNER JOIN ".$CFG['db']['tbl']['airlines_request_mapping']." arm
				ON tm.airlines_request_id = arm.airlines_request_id
				WHERE arm.request_master_id = ".$requestMasterId;

		//Get row based on the transaction master id
		if($transactionMasterId != 0)
			$sql .= " AND tm.transaction_id	= ".$transactionMasterId;
	
		if(DB::isError($result = $this->_Oconnection->query($sql))) 
		{
			fileWrite($sql,"SqlError","a+");
			return false;
		}
		$row = $result->fetchRow(DB_FETCHMODE_ASSOC);

	    foreach($fareValidity as $fareValidityKey => $fareValidityValue) {
	    	if($fareValidityValue['fare_validity_type_id'] == $row['fare_validity_type_id']) {	    		
	    		#$validity['fare']['date'] = date('Y-m-d H:i:s',strtotime("+".$row['fare_validity']." ".$fareValidityValue['fare_validity_values'],strtotime($row['transaction_date'])));
	    		$validity['fare']['date'] = $row['fare_expiry_date'];
	    		$validity['fare']['validity_type'] = $fareValidityValue['fare_validity_type_id'];
	    		$validity['fare']['validity_format'] = $fareValidityValue['fare_validity_type'];
	    		$validity['fare']['validity'] = $row['fare_validity'];
	    	}
	    }	
		return $validity;
	}
	function _getSSRDetailsValue($requestMasterId,$valueType,$requestApprovedFlightId=0)
	{
		global $CFG;

		$returnArray=array();

		$transactionMasterId=0;
		$airlinesRequestId=0;
		$sqlSelectAirlinesRequestId="SELECT
							airlines_request_id
					     FROM
							".$CFG['db']['tbl']['airlines_request_mapping']."
					     WHERE
							request_master_id='".$requestMasterId."'";

		if(DB::isError($resultSelectAirlinesRequestId=$this->_Oconnection->query($sqlSelectAirlinesRequestId)))
		{
			fileWrite($sqlSelectAirlinesRequestId,"SqlError","a+");
			return false;
		}

		if($resultSelectAirlinesRequestId->numRows() >0)
		{
			$rowSelectAirlinesRequestId=$resultSelectAirlinesRequestId->fetchRow(DB_FETCHMODE_ASSOC);

			$airlinesRequestId=$rowSelectAirlinesRequestId['airlines_request_id'];

			$sqlSelectTransactionMasterId="SELECT
								transaction_id
						       FROM
								".$CFG['db']['tbl']['transaction_master']."
						       WHERE
								airlines_request_id='".$airlinesRequestId."'
								ORDER BY transaction_id DESC limit 1";

			if(DB::isError($resultSelectTransactionMasterId=$this->_Oconnection->query($sqlSelectTransactionMasterId)))
			{
				fileWrite($sqlSelectTransactionMasterId,"SqlError","a+");
				return false;
			}

			if($resultSelectTransactionMasterId->numRows() >0)
			{
				$rowSelectTransactionMasterId=$resultSelectTransactionMasterId->fetchRow(DB_FETCHMODE_ASSOC);
				$transactionMasterId=$rowSelectTransactionMasterId['transaction_id'];
			}
		}

		$sqlSelectRequestApprovedFlightDetails="SELECT
								rafd.request_approved_flight_id,
								rafd.base_fare,
								rafd.tax,
								rafd.fare_passenger,
								rafd.child_base_fare,
								rafd.child_tax,
								rafd.infant_base_fare,
								rafd.infant_tax,
								rafd.baggauge_fare,
								rafd.meals_fare,
								srd.series_request_id,
								srd.number_of_adult,
								srd.number_of_child,
								srd.number_of_infant,
								srd.baggage_allowance,
								srd.meals_code
							FROM
								".$CFG['db']['tbl']['request_approved_flight_details']." rafd,
								".$CFG['db']['tbl']['series_request_details']." srd
							WHERE	
								rafd.airlines_request_id='".$airlinesRequestId."'
								AND rafd.transaction_master_id='".$transactionMasterId."'
								AND rafd.series_request_id=srd.series_request_id
								AND rafd.accepted_flight_status='Y'";

		if($requestApprovedFlightId!=0)
		{
			$sqlSelectRequestApprovedFlightDetails.=" AND rafd.request_approved_flight_id='".$requestApprovedFlightId."'";
		}
		
		if(DB::isError($resultSelectRequestApprovedFlightDetails=$this->_Oconnection->query($sqlSelectRequestApprovedFlightDetails)))
		{
			fileWrite($sqlSelectRequestApprovedFlightDetails,"SqlError","a+");
			return false;
		}

		$indexVal=0;
		
		if($resultSelectRequestApprovedFlightDetails->numRows() >0)
		{
			while($rowSelectRequestApprovedFlightDetails=$resultSelectRequestApprovedFlightDetails->fetchRow(DB_FETCHMODE_ASSOC))
			{
				// Changing the SSR amount calculation
				$_ArequestApprovedFlightId = array();
				if(!in_array($rowSelectRequestApprovedFlightDetails['request_approved_flight_id'],$_ArequestApprovedFlightId))
				{
					$_ArequestApprovedFlightId[] = $rowSelectRequestApprovedFlightDetails['request_approved_flight_id'];
					$sqlSelectPnrBlockingDetails="SELECT
										pnr
									  FROM
											".$CFG['db']['tbl']['pnr_blocking_details']."
									  WHERE
											request_approved_flight_id='".$rowSelectRequestApprovedFlightDetails['request_approved_flight_id']."'
											ORDER BY pnr_blocking_id";
										
					if(DB::isError($resultSelectPnrBlockingDetails=$this->_Oconnection->query($sqlSelectPnrBlockingDetails)))
					{
						fileWrite($sqlSelectPnrBlockingDetails,"SqlError","a+");
						return false;
					}
					
					if($resultSelectPnrBlockingDetails->numRows()>0)
					{					
						$ssrDetailsArray=array();
						
						while($rowSelectPnrBlockingDetails=$resultSelectPnrBlockingDetails->fetchRow(DB_FETCHMODE_ASSOC))
						{
							$tempPnr=$rowSelectPnrBlockingDetails['pnr'];
							$returnArray = $this->_getSSRTotalDetailsValue(0,$tempPnr);
							$_ItotalNumberOfPaxMeals = $rowSelectRequestApprovedFlightDetails['number_of_adult']+$rowSelectRequestApprovedFlightDetails['number_of_child']+$rowSelectRequestApprovedFlightDetails['number_of_infant'];
							$_ItotalNumberOfPaxBag = $rowSelectRequestApprovedFlightDetails['number_of_adult']+$rowSelectRequestApprovedFlightDetails['number_of_child'];
							$returnArray['singleMealsFare'] = $this->_getRoundOffFare(($returnArray['mealsFare']/$_ItotalNumberOfPaxMeals),"","displayFare");
							$returnArray['singleBaggageFare'] = $this->_getRoundOffFare(($returnArray['baggageFare']/$_ItotalNumberOfPaxBag),"","displayFare");
						}
					}
				}
			}
		}
		return $returnArray;
	}
	function _getSSRTotalDetailsValue($requestMasterId,$_Spnr='',$_IssrMasterId=0)
	{
		global $CFG;
		$returnArray=array();
		$_AssrMasterDetails=array();       
	    if(!empty($requestMasterId['request_master_id'])){
	    	$_ArequestMasterId=$requestMasterId;
	    	$requestMasterId=$requestMasterId['request_master_id'];
		}
		if(isset($_ArequestMasterId['ssr_master'])){
			$_AssrMasterDetails=$_ArequestMasterId['ssr_master'];
			$_IssrMasterResultCount= sizeof($_ArequestMasterId['ssr_master']); 	
		}else{
			 $_Scondition = '';
			if($requestMasterId !=0)
				$_Scondition .= " AND request_master_id = '".$requestMasterId."'";
			if($_Spnr !='')
				$_Scondition .= " AND pnr = '".$_Spnr."'";
			if($_IssrMasterId != 0)
				$_Scondition .= " AND ssr_master_id = '".$_IssrMasterId."'";
			
			$_Scondition .= ' ORDER BY ssr_master_id';
			$sqlSelectSSRMasterId=	"SELECT
										ssr_master_id,
										sum(ssr_amount) as ssr_amount
									FROM
										".$CFG['db']['tbl']['ssr_master']."
									WHERE
										last_transaction = 'Y' AND 
										status = 'COMPLETED'".$_Scondition;
			if(DB::isError($resultSelectSSRMasterId=$this->_Oconnection->query($sqlSelectSSRMasterId)))
			{
				fileWrite($sqlSelectSSRMasterId,"SqlError","a+");
				return false;
			}
			$_IssrMasterResultCount= $resultSelectSSRMasterId->numRows(); 
			while($rowSelectSSRMasterId=$resultSelectSSRMasterId->fetchRow(DB_FETCHMODE_ASSOC))
			{
				$_AssrMasterDetails[]=$rowSelectSSRMasterId;
			}
		}	
		if($_IssrMasterResultCount > 0)
		{
			$returnArray['mealsFare'] = 0;
			$returnArray['baggageFare'] = 0;
			$returnArray['otherFare'] = 0;	
			foreach ($_AssrMasterDetails as $rowSelectSSRMasterId) {

				$_Svariable = $rowSelectSSRMasterId['ssr_master_id'].'_COMPLETED';
				$_AstaticData = $this->_staticData("_getSSRTotalDetailsValue",$_Svariable);

				if($_AstaticData !== false)
					$returnArray = $_AstaticData;	
				else if ($rowSelectSSRMasterId['ssr_master_id'])
				{
					$sqlSelectTotalSSRDetails="SELECT
												ssr_details_id,
												ssr_total_fare,
												ssr_category_id,
												ssr_code
											   FROM
													".$CFG['db']['tbl']['ssr_details']."
											   WHERE
													ssr_master_id='".$rowSelectSSRMasterId['ssr_master_id']."'
													AND ssr_status = 'COMPLETED'";

					if(DB::isError($resultSelectTotalSSRDetails=$this->_Oconnection->query($sqlSelectTotalSSRDetails)))
					{
						fileWrite($sqlSelectTotalSSRDetails,"SqlError","a+");
						return false;
					}

					if($resultSelectTotalSSRDetails->numRows() > 0)
					{
						while($rowSelectTotalSSRDetails=$resultSelectTotalSSRDetails->fetchRow(DB_FETCHMODE_ASSOC))
						{
							if($rowSelectTotalSSRDetails['ssr_category_id'] == 1)
							{
								$returnArray['mealsFare'] += $rowSelectTotalSSRDetails['ssr_total_fare'];
								$returnArray['meals'] += $rowSelectTotalSSRDetails['ssr_code'];
							}
							if($rowSelectTotalSSRDetails['ssr_category_id'] == 2)
							{
								$returnArray['baggageFare'] += $rowSelectTotalSSRDetails['ssr_total_fare'];					
								$returnArray['baggage'] += $rowSelectTotalSSRDetails['ssr_code'];					
							}
							if($rowSelectTotalSSRDetails['ssr_category_id'] == 3)					
							{
								$returnArray['otherFare'] += $rowSelectTotalSSRDetails['ssr_total_fare'];
								$returnArray['other'] += $rowSelectTotalSSRDetails['ssr_code'];
							}
							$returnArray['requestMasterId']=$requestMasterId;
							$returnArray['ssrMasterId']=$rowSelectSSRMasterId['ssr_master_id'];
							$returnArray['ssr_details_id']=$rowSelectTotalSSRDetails['ssr_details_id'];
							$returnArray['ssr_amount']=$rowSelectSSRMasterId['ssr_amount'];
						}

						$this->_staticData("_getSSRTotalDetailsValue",$_Svariable,$returnArray);
					}
				}
			}
		}
		return $returnArray;
	}
	/*Modified By: Subalakshmi S 27-08-2018
		Desc     : The below lines are commented since it is called in 
		 			class.fetchPolicyDetails.php file*/
		 			
	/*function _getConfigNameUpdateField($givenPolicyArray)
	{
		global $CFG;
		$returnArray=array();
		$policyMasterValueArray=array();
		
		$sqlSelectNameUpdatePolicyMaster="SELECT
						ptpm.policy_id,
						ptpm.policy_name,
						ptpm.passenger_template_id,
						ptpm.priority,
						ptpm.created_date,
						ptpm.policy_dow
					FROM
						".$CFG['db']['tbl']['passenger_template_policy_master']." ptpm,
						".$CFG['db']['tbl']['passenger_template_details']." ptd
					WHERE
						ptpm.passenger_template_id=ptd.passenger_template_id
						AND active_status='Y'
						AND ('".$givenPolicyArray['policyRequestedDate']."' BETWEEN ptpm.start_date and ptpm.end_date)";
		if(DB::isError($resultSelectNameUpdatePolicyMaster=$this->_Oconnection->query($sqlSelectNameUpdatePolicyMaster)))
		{
			fileWrite($sqlSelectNameUpdatePolicyMaster,"SqlError","a+");
			return false;
		}
		if($resultSelectNameUpdatePolicyMaster->numRows() > 0)
		{
			while($rowSelectNameUpdatePolicyMaster=$resultSelectNameUpdatePolicyMaster->fetchRow(DB_FETCHMODE_ASSOC))
			{
				if($this->_getPolicyDayOfWeekStatus($givenPolicyArray['policyRequestedDate'],$rowSelectNameUpdatePolicyMaster['policy_dow'])=="Y")
				{
					$sqlSelectNameUpdatePolicyDetails="SELECT
									ptpd.policy_details_id,
									ptpd.policy_id,
									ptpd.criteria_id,
									ptpd.loop_value,
									ptcm.criteria_name,
									ptcm.criteria_type,
									ptcm.criteria_logical_id,
									ptpd.operator_id,
									om.operator_name,
									om.logical_value,
									om.operator_type,
									ptpd.policy_value
								 FROM
									".$CFG['db']['tbl']['passenger_template_policy_details']." ptpd,
									".$CFG['db']['tbl']['passenger_template_criteria_master']." ptcm,
									".$CFG['db']['tbl']['operator_master']." om
								 WHERE
									ptpd.policy_id='".$rowSelectNameUpdatePolicyMaster['policy_id']."'
									AND ptpd.criteria_id=ptcm.criteria_id
									AND ptpd.operator_id=om.operator_id
									ORDER BY ptpd.criteria_id,ptpd.loop_value";
					if(DB::isError($resultSelectNameUpdatePolicyDetails=$this->_Oconnection->query($sqlSelectNameUpdatePolicyDetails)))
					{
						fileWrite($sqlSelectNameUpdatePolicyDetails,"SqlError","a+");
						return false;
					}
					
					$resultValue=0;
					$stringToExecute="";
					$policyDetailsArray = array();
					if($resultSelectNameUpdatePolicyDetails->numRows() > 0)
					{
						while($rowSelectNameUpdatePolicyDetails=$resultSelectNameUpdatePolicyDetails->fetchRow(DB_FETCHMODE_ASSOC))
						{
							$policyDetailsArray[] = $rowSelectNameUpdatePolicyDetails;
						}
						
						$stringToExecute = $this->_getStringToExecuteForAllPolicy($policyDetailsArray,$givenPolicyArray);
						
						if($stringToExecute!="")
						{
							$resultStringToEval="IF( ".$stringToExecute." ){".'$resultValue'."=1;}";
							
							eval($resultStringToEval);
							if($resultValue==1)
							{
								$policyMasterValueArray[]=$rowSelectNameUpdatePolicyMaster;
							}
						}
					}
				}
			}
		}
		
		$minValue=0;

		if(count($policyMasterValueArray) > 0)
		{
			$finalInput=array("inputArray"=>$policyMasterValueArray,"firstFieldName"=>"priority","firstFieldOrder"=>"ASC","secondFieldName"=>"created_date","secondFieldOrder"=>"ASC");
			$finalArray=$this->_multipleSortFunction($finalInput);
			
			$fetchNameUpdateFieldPolicyArray[0]=$finalArray[0];
			$fetchNameUpdateFieldPolicyArray[0]['departureDate']=$givenPolicyArray['departureDate'];
			$fetchNameUpdateFieldPolicyArray[0]['policyRequestMasterId']=$givenPolicyArray['policyRequestMasterId'];
			$fetchNameUpdateFieldPolicyArray[0]['policyPaxCount']=$givenPolicyArray['policyPaxCount'];
			if(count($fetchNameUpdateFieldPolicyArray) > 0)
			{
				$returnFieldArray=$this->_getConfigNameUpdateConditionCheck($fetchNameUpdateFieldPolicyArray);
				if(count($returnFieldArray) > 0)
				{
					$returnArray=array();
					$returnArray=$returnFieldArray;
				}
			}
			/*for($i=0;$i<count($policyMasterValueArray);$i++)
			{
				if($minValue==0 || $policyMasterValueArray[$i]['priority']<=$minValue)
				{
					$minValue=$policyMasterValueArray[$i]['priority'];
				}
			}
			$minIndex="";
			$appendString="";
			for($i=0;$i<count($policyMasterValueArray);$i++)
			{
				if($minValue==$policyMasterValueArray[$i]['priority'])
				{
					$minIndex.=$appendString.$i;
					$appendString=",";
				}
			}
		
			if($minIndex!="")
			{
				$fetchNameUpdateFieldPolicyArray=array();
				$explodeArray=explode(",",$minIndex);
				for($i=0;$i<count($explodeArray);$i++)
				{
					$fetchNameUpdateFieldPolicyArray[$i]=$policyMasterValueArray[$explodeArray[$i]];
					$fetchNameUpdateFieldPolicyArray[$i]['departureDate']=$givenPolicyArray['departureDate'];
					$fetchNameUpdateFieldPolicyArray[$i]['policyRequestMasterId']=$givenPolicyArray['policyRequestMasterId'];
					$fetchNameUpdateFieldPolicyArray[$i]['policyPaxCount']=$givenPolicyArray['policyPaxCount'];
				}
				
				if(count($fetchNameUpdateFieldPolicyArray) > 0)
				{
					$returnFieldArray=$this->_getConfigNameUpdateConditionCheck($fetchNameUpdateFieldPolicyArray);
					if(count($returnFieldArray) > 0)
					{
						$returnArray=array();
						$returnArray=$returnFieldArray;
					}
				}
			}*/
		/*}
		return $returnArray;
	}*/
	
	/*Modified By: Subalakshmi S 27-08-2018
		Desc     : The below lines are commented since it is called in 
		 			class.fetchPolicyDetails.php file*/
		 			
	/*function _getConfigNameUpdateConditionCheck($givenNameUpdatePolicyArray)
	{
		global $CFG;
		$resultNameUpdateFieldArray=array();
		$resultTemplateField=array();
		for($m=0;$m<count($givenNameUpdatePolicyArray);$m++)
		{
		$sqlSelectNameUpdateField= "SELECT 
			ptd.passenger_template_name,
			ptfd.template_field_id,
			ptfd.template_field_name,
			ptfd.template_logical_name,
			ptcd.condition_name,
			ptcd.condition_logical_name,
			ptcm.template_condition_value
			from
			".$CFG['db']['tbl']['passenger_template_details']." ptd,
			".$CFG['db']['tbl']['passenger_template_field_mapping']." ptfm,
			".$CFG['db']['tbl']['passenger_template_field_details']." ptfd,
			".$CFG['db']['tbl']['passenger_template_condition_mapping']." ptcm,
			".$CFG['db']['tbl']['passenger_template_condition_details']." ptcd
			WHERE 
			ptd.passenger_template_id=ptfm.passenger_template_id
			AND ptfm.template_field_id=ptfd.template_field_id
			AND ptfm.passenger_template_field_mapping_id=ptcm.passenger_template_field_mapping_id
			AND ptcm.template_condition_id=ptcd.template_condition_id
			AND ptd.passenger_template_id=".$givenNameUpdatePolicyArray[$m]['passenger_template_id']."
			ORDER by ptfd.template_field_id";
			
			if(DB::isError($resultNameUpdateFieldArray=$this->_Oconnection->query($sqlSelectNameUpdateField)))
			{
				fileWrite($sqlSelectPolicyRequestDetails,"SqlError","a+");
				return false;
			}

			if($resultNameUpdateFieldArray->numRows() >0)
			{
				while($rowTemplateField=$resultNameUpdateFieldArray->fetchRow(DB_FETCHMODE_ASSOC))
				{
					$resultNameUpdateField['templateName']=$rowTemplateField['passenger_template_name'];
					$resultNameUpdateField[$rowTemplateField['template_logical_name']][$rowTemplateField['condition_logical_name']]=$rowTemplateField['template_condition_value'];
					
				}
				
				$resultNameUpdateField['templateId']=$givenNameUpdatePolicyArray[$m]['passenger_template_id'];
				$resultNameUpdateField['policyName']=$givenNameUpdatePolicyArray[$m]['policy_name'];
				
				
			}
		} 
		return $resultNameUpdateField;
		
	}*/

////end end

	//To fetch request criteria policy for the request
	function _fetchRequestCriteriaPolicy($_IrequestMasterId)
	{
		global $CFG;
		$requestMasterArray=array();
		$returnArray=array();
		$sqlSelectRequestDetails="SELECT
							rm.request_master_id,
							rm.user_id,
							rm.request_type_id as requestType,
							rm.trip_type,
							rm.trip_type as tripType,
							rm.user_currency as currencyType,
							rm.requested_date,
							rm.number_of_passenger,
							rm.number_of_adult,
							rm.number_of_child,
							(rm.number_of_adult+rm.number_of_child) as noOfPax,
							rm.number_of_infant,
							rm.requested_date,
							rd.request_id,
							rd.origin_airport_code as source,
							rd.dest_airport_code as destination,
							rd.flight_number,
							rd.from_date as departureDate,
							rd.to_date,
							rd.cabin,
							ud.corporate_id as travelAgency,
							".encrypt::_decrypt('ud.email_id')." as loginId,
							".encrypt::_decrypt('ud.country_code')." as countryCode,
							".encrypt::_decrypt('cd.pos_code')." as pointOfSale,
							cd.corporate_type_id as userType,
							rm.group_category_id as groupCategory
					  FROM
							".$CFG['db']['tbl']['request_master']." rm,
							".$CFG['db']['tbl']['request_details']." rd,
							".$CFG['db']['tbl']['user_details']." ud,
							".$CFG['db']['tbl']['corporate_details']." cd
					  WHERE
							rm.request_master_id=rd.request_master_id
							AND rm.user_id=ud.user_id
							AND ud.corporate_id=cd.corporate_id
							AND rm.request_master_id='".$_IrequestMasterId."'";

		$sqlSelectRequestDetails=$sqlSelectRequestDetails." ORDER BY rd.request_id ";
		
		if(DB::isError($resultSelectRequestDetails=$this->_Oconnection->query($sqlSelectRequestDetails)))
		{
			fileWrite($sqlSelectRequestDetails,"SqlError","a+");
			return false;
		}
		if($resultSelectRequestDetails->numRows() > 0)
		{
			while($rowSelectRequestDetails=$resultSelectRequestDetails->fetchRow(DB_FETCHMODE_ASSOC))
			{
				
				$rowSelectRequestDetails['policyRequestedDate']=$rowSelectRequestDetails['requested_date'];
				if($rowSelectRequestDetails['tripType']==1)
					$rowSelectRequestDetails['tripType']="O";
				elseif($rowSelectRequestDetails['tripType']==2)
					$rowSelectRequestDetails['tripType']="R";
				elseif($rowSelectRequestDetails['tripType']==3)
					$rowSelectRequestDetails['tripType']="M";
				
				$flightDetailsArray=array();
				if($rowSelectRequestDetails['requestType'] == 2)
				{
					if(isset($_SESSION['groupRM']['airlineCode']) && $_SESSION['groupRM']['airlineCode']!="")
						$flightDetailsArray[0]['airlineCode']=$_SESSION['groupRM']['airlineCode'];
					else
						$flightDetailsArray[0]['airlineCode']="VX";
					$flightDetailsArray[0]['flightNumber']="";
				}
				else
				{
					$flightDetails=array();
					$flightDetails=explode(",",$rowSelectRequestDetails['flight_number']);
					if(count($flightDetails)>0)
					{
						for($i=0; $i<count($flightDetails);$i++)
						{
							$airlineDetail=array();
							$airlineDetail=explode("-",$flightDetails[$i]);
							$flightDetailsArray[$i]['airlineCode']=$airlineDetail[0];
							$flightDetailsArray[$i]['flightNumber']=$airlineDetail[1];
						}
					}
					else
					{
						$airlineDetail=explode("-",$rowSelectRequestDetails['flight_number']);
						$flightDetailsArray[0]['airlineCode']=$airlineDetail[0];
						$flightDetailsArray[0]['flightNumber']=$airlineDetail[1];
					}
				}
				$rowSelectRequestDetails['flightDetails']=$flightDetailsArray;
				$rowSelectRequestDetails['tripCategory']=$this->_isDomestic($_IrequestMasterId);
				$rowSelectRequestDetails['policyType']="Rp";
				$rowSelectRequestDetails['countryOfOrigin']=$this->_getAirportDetails($rowSelectRequestDetails['source'])['country_code'];
				$rowSelectRequestDetails['countryOfDestination']=$this->_getAirportDetails($rowSelectRequestDetails['destination'])['country_code'];
				$requestMasterArray[]=$rowSelectRequestDetails;
			}
			$returnArray=$this->_getConfigRequestField($requestMasterArray);
		}
		
		return $returnArray;
		
	
	}
	/**
	 * @Author		: Sri muthu rajesh 6/03/17
	 * @Modified By : --
	 * @Desc		: To push operator and values in total array
	 * @Param		: 
	 * @Return type : Array
	 */
	function _getConfigRequestField($givenPolicyArrayCommon)
	{	

		global $CFG;
		$returnArray=array();
		$policyMasterValueArray=array();
		if(!isset($givenPolicyArrayCommon[0]))
			$givenPolicyArrayCommon[0]=$givenPolicyArrayCommon;
		foreach($givenPolicyArrayCommon as $givenPolicyArray)
		{						
			$sqlSelectRequestPolicyMaster="SELECT
							rpm.request_policy_id,
							rpm.request_policy_name,
							pm.matrix_id as request_criteria_id,
							rpm.priority,
							rpm.created_date,
							rpm.policy_dow,
							pm.policy_type_id,
							pm.policy_id,
							pm.matrix_id,
							pm.status,
							pm.policy_mapping_id
							
						FROM
							".$CFG['db']['tbl']['request_policy_master']." rpm,
							".$CFG['db']['tbl']['request_criteria_master']." rcm,
							".$CFG['db']['tbl']['policy_mapping']." pm
						WHERE
							
							rpm.active_status='Y'
							AND rcm.status='Y'
							AND pm.status='Y'
							AND pm.policy_id=rpm.request_policy_id
							AND pm.matrix_id = rcm.request_criteria_master_id
							AND rcm.policy_type = '".strtoupper($givenPolicyArray['policyType'])."'
							AND ('".$givenPolicyArray['policyRequestedDate']."' BETWEEN rpm.start_date AND rpm.end_date)";
			if(DB::isError($resultSelectRequestPolicyMaster=$this->_Oconnection->query($sqlSelectRequestPolicyMaster)))
			{
				fileWrite($sqlSelectRequestPolicyMaster,"SqlError","a+");
				return false;
			}
		// Here we'll get list of results, thes result will be looped one by one
			if($resultSelectRequestPolicyMaster->numRows() > 0)
			{
				while($rowSelectRequestPolicyMaster=$resultSelectRequestPolicyMaster->fetchRow(DB_FETCHMODE_ASSOC))
				{
					if($this->_getPolicyDayOfWeekStatus($givenPolicyArray['policyRequestedDate'],$rowSelectRequestPolicyMaster['policy_dow'])=="Y")
					{	
						$sqlSelectRequestPolicyDetails="SELECT
										rpd.request_policy_details_id,
										rpd.request_policy_id,
										rpd.request_criteria_id as criteria_id,
										rpd.loop_value,
										rpcm.request_policy_criteria_name as criteria_name,
										rpcm.request_policy_criteria_type as criteria_type,
										rpcm.request_policy_criteria_logical_id as criteria_logical_id,
										rpd.operator_id,
										om.operator_name,
										om.logical_value,
										om.operator_type,
										rpd.policy_value,
										pm.policy_type_id,
										pm.policy_id,
										pm.matrix_id,
										pm.status,
										pm.policy_mapping_id
									 FROM
										".$CFG['db']['tbl']['request_policy_details']." rpd,
										".$CFG['db']['tbl']['request_policy_criteria_master']." rpcm,
										".$CFG['db']['tbl']['operator_master']." om,
										".$CFG['db']['tbl']['policy_mapping']." pm
									 WHERE
										rpd.request_policy_id='".$rowSelectRequestPolicyMaster['request_policy_id']."'
										AND rpd.request_criteria_id=rpcm.request_policy_criteria_id
										AND rpd.operator_id=om.operator_id
										AND pm.policy_id=rpd.request_policy_id
										ORDER BY rpd.request_criteria_id,rpd.loop_value";
						if(DB::isError($resultSelectRequestPolicyDetails=$this->_Oconnection->query($sqlSelectRequestPolicyDetails)))
						{
							fileWrite($sqlSelectRequestPolicyDetails,"SqlError","a+");
							return false;
						}
						$resultValue=0;
						$stringToExecute="";
						$policyDetailsArray = array();
						if($resultSelectRequestPolicyDetails->numRows() > 0)
						{
							while($rowSelectRequestPolicyDetails=$resultSelectRequestPolicyDetails->fetchRow(DB_FETCHMODE_ASSOC))
							{
								$policyDetailsArray[] = $rowSelectRequestPolicyDetails;
								$_ApolicyCriteriaDetails[$rowSelectRequestPolicyMaster['request_policy_id']] = $rowSelectRequestPolicyDetails;
							}
							$stringToExecute = $this->_getStringToExecuteForAllPolicy($policyDetailsArray,$givenPolicyArray);
							if($stringToExecute!="")
							{
								$resultStringToEval="IF( ".$stringToExecute." ){".'$resultValue'."=1;}";
								
								fileWrite($resultStringToEval,"REQUESTPOLICY","a+");// REM
								eval($resultStringToEval);

								if($resultValue==1)
								{
									$policyMasterValueArray[]=$rowSelectRequestPolicyMaster;
								}
							}
						}
					}
				}
			}
		}
		$minValue=0;
		if(count($policyMasterValueArray) > 0)
		{
			
			$finalInput=array("inputArray"=>$policyMasterValueArray,"firstFieldName"=>"priority","firstFieldOrder"=>"ASC","secondFieldName"=>"created_date","secondFieldOrder"=>"ASC");
			$finalArray=$this->_multipleSortFunction($finalInput);
			$fetchRequestFieldPolicyArray[]=$finalArray[0];
			if(count($fetchRequestFieldPolicyArray) > 0)
			{
				#Get the request_criteria_field_id of instantQuote
				fileRequire("dataModels/class.requestCriteriaFieldDetails.php");
				fileRequire("dataModels/class.requestCriteriaDetails.php");
				$_OrequestCriteriaFieldDetails = new requestCriteriaFieldDetails();
				$_OrequestCriteriaDetails = new requestCriteriaDetails();
				$_OrequestCriteriaFieldDetails->_Oconnection = $this->_Oconnection;
				$_OrequestCriteriaFieldDetails->_SrequestCriteriaFieldLogicalName = 'instantQuote';
				$_AexistInstantQuoteCriteria = $_OrequestCriteriaFieldDetails->_selectRequestCriteriaFieldDetails();
				if(!empty($_AexistInstantQuoteCriteria))
					{
						// $_OrequestCriteriaDetails->__construct();
						$_OrequestCriteriaDetails->_Oconnection = $this->_Oconnection;
						$_OrequestCriteriaDetails->_IrequestCriteriaMasterId = $fetchRequestFieldPolicyArray[0]['request_criteria_id'];
						$_OrequestCriteriaDetails->_IrequestCriteriaFieldId = $_AexistInstantQuoteCriteria[0]['request_criteria_field_id'];
						$this->_AmatrixStatusDetails[$fetchRequestFieldPolicyArray[0]['request_criteria_id']] = $_OrequestCriteriaDetails->_selectRequestCriteriaDetails()[0];
					}

				if($this->_AmatrixStatusDetails[$fetchRequestFieldPolicyArray[0]['request_criteria_id']]['criteria_value']=='N')
				{	
					if($givenPolicyArrayCommon[0]['quoteType'] =='I')
					{
						if($_ApolicyCriteriaDetails[$fetchRequestFieldPolicyArray[0]['request_policy_id']]) 
						{
							/*Select the policy specify criteria details*/
							$value = $_ApolicyCriteriaDetails[$fetchRequestFieldPolicyArray[0]['request_policy_id']];
							if($value['criteria_logical_id'] == 'quoteType' && $value['operator_id'] == 1)
							{
								$this->_OobjResponse->script("infoMessage('Inventory not available','".$this->_Osmarty->getConfigVars('COMMON_CHECK_INSTANT_STATUS')." ');");
								$this->_OobjResponse->script("$('#sendRequest').prop('disabled','disabled')");
								$this->_OobjResponse->script("policyNotAllowed = 'Y'");
								return false;
							}
						}
					}
					unset($fetchRequestFieldPolicyArray[0]);
					if($fetchRequestFieldPolicyArray[1])
						$fetchRequestFieldPolicyArray[0] = $fetchRequestFieldPolicyArray[1];
					else
						return false;
				}

				$returnFieldArray=$this->_getConfigRequestConditionCheck($fetchRequestFieldPolicyArray);

				if(count($returnFieldArray) > 0)
				{
					$returnArray=array();
					$returnArray=$returnFieldArray;
				}
			}
			
		}
	
		return $returnArray;
	}
	
	
	function _getConfigRequestConditionCheck($givenRequestPolicyArray)
	{

		global $CFG;
		
		
		$this->_totalPolicyValue=array();
		$this->_SselectedCriteria='';
		$this->_AfieldArray=array();

		for($m=0;$m<count($givenRequestPolicyArray);$m++)
		{
		
		$this->_ArequestCriteriaDetails=array();	

			$sqlSelectRequestCriteriaDetails="SELECT
									rcm.request_criteria_master_id,
									rcm.request_criteria_master_name,																
									rcm.status,								
									rcd.request_criteria_details_id,
									rcd.request_criteria_field_id,
									rcd.loop_value,
									om.operator_name,
									rcd.criteria_value,
									(SELECT request_criteria_field_logical_name FROM request_criteria_field_details WHERE request_criteria_field_id=rcd.request_criteria_field_id) as logicalOperatorName
							  FROM
									".$CFG['db']['tbl']['request_criteria_master']." rcm,
									".$CFG['db']['tbl']['request_criteria_details']." rcd,
									".$CFG['db']['tbl']['operator_master']." om
							  WHERE
									rcm.request_criteria_master_id=rcd.request_criteria_master_id
									AND rcd.operator_id=om.operator_id
									AND rcm.request_criteria_master_id='".$givenRequestPolicyArray[$m]['request_criteria_id']."'
									ORDER BY rcd.request_criteria_field_id,rcd.loop_value";
			if(DB::isError($resultSelectRequestCriteriaDetails=$this->_Oconnection->query($sqlSelectRequestCriteriaDetails)))
			{
				fileWrite($sqlSelectRequestCriteriaDetails,"SqlError","a+");
				return false;
			}
			$rowSelectRequestCriteriaDetails=array();
			if($resultSelectRequestCriteriaDetails->numRows() > 0)
			{
				$comma="";
				while($rowSelectRequestCriteriaDetails=$resultSelectRequestCriteriaDetails->fetchRow(DB_FETCHMODE_ASSOC))
				{

					$sqlparentId="SELECT
								field_parent_id
						
						    FROM
								".$CFG['db']['tbl']['request_criteria_field_details']."
						    WHERE
								request_criteria_field_id='".$rowSelectRequestCriteriaDetails['request_criteria_field_id']."' limit 1";
							

					if(DB::isError($resultParentId=$this->_Oconnection->query($sqlparentId)))
					{
						fileWrite($sqlparentId,"SqlError","a+");
						return false;
					}
					if($resultParentId->numRows() >0)
					{
						while($rowParentId=$resultParentId->fetchRow(DB_FETCHMODE_ASSOC))
						{
							$rowParentIdArray=$rowParentId['field_parent_id'];
						}
					}
					if($rowParentIdArray != 0 && !in_array($rowParentIdArray,$this->_AfieldArray))
					{
						$this->_AfieldArray[]=$rowParentIdArray;
						$rowSelectRequestCriteriaDetails['request_criteria_field_id']=$rowParentIdArray;
					}

					$this->_SselectedCriteria.=$comma."'".$rowSelectRequestCriteriaDetails['request_criteria_field_id']."'";
					$comma=",";				
					$this->_ArequestCriteriaDetails[]=$rowSelectRequestCriteriaDetails;
				}
			}
			
		
			$conditionVal='';
			if(isset($this->_ArequestCriteriaDetails) && is_array($this->_ArequestCriteriaDetails))
			{
				foreach($this->_ArequestCriteriaDetails as $key=>$value)
				{
						if($value['logicalOperatorName']=='currencyType')
						{
							$currencyArray=array();

							$sqlCurrency = "SELECT 
							
								currency_type
							FROM
								currency_details
							WHERE
								upper(currency_status)='Y'
								AND currency_id IN (".$value['criteria_value'].")
								
							ORDER BY
								currency_type";	
						
							if(DB::isError($resultCurrency=$this->_Oconnection->query($sqlCurrency)))
							{
								fileWrite($sqlCurrency,"SqlError","a+");
								return false;
							}

							if($resultCurrency->numRows() > 0)
							{
								$i=0;
								while($row=$resultCurrency->fetchRow(DB_FETCHMODE_ASSOC))
								{				
									$currencyArray[$i]=$row['currency_type'];
									$i++;
								}
							}

							$logicalNamePara='';
							$operatorNamePara='';
							$keyValuePara='';

							$logicalNamePara=$value['logicalOperatorName'];
							$operatorNamePara='currencyOperator';
							$keyValuePara=$key;

							$this->_convertPolicyArray($currencyArray,$logicalNamePara,$operatorNamePara,$keyValuePara);					
												
						
						}

						if($value['logicalOperatorName']=='cabin')
						{
							$criteriValArrayPara=array();
							$logicalNamePara='';
							$operatorNamePara='';
							$keyValuePara='';
							$criteriValArrayPara=explode(',',$value['criteria_value']);
							
							$logicalNamePara=$value['logicalOperatorName'];
							$operatorNamePara='cabinOperator';
							$keyValuePara=$key;

							$this->_convertPolicyArray($criteriValArrayPara,$logicalNamePara,$operatorNamePara,$keyValuePara);
							
							
						}
						if($value['logicalOperatorName']=='airport')
						{	$criteriValArrayPara=explode(',',$value['criteria_value']);
							$logicalNamePara=$value['logicalOperatorName'];
							$operatorNamePara='airportOperator';
							$keyValuePara=$key;
							$this->_convertCriteriaArray($criteriValArrayPara,$logicalNamePara,$operatorNamePara,$keyValuePara);
						}
						if($value['logicalOperatorName']=='tripType')
						{	
							$criteriValArrayPara=explode(',',$value['criteria_value']);
							$logicalNamePara=$value['logicalOperatorName'];
							$operatorNamePara='tripTypeOperator';
							$keyValuePara=$key;
							$this->_convertCriteriaArray($criteriValArrayPara,$logicalNamePara,$operatorNamePara,$keyValuePara);
						}
						if($value['logicalOperatorName']=='stayPeriodInDays')
						{	
							$criteriValArrayPara=explode(',',$value['criteria_value']);
							$logicalNamePara=$value['logicalOperatorName'];
							$operatorNamePara='stayPeriodInDaysOperator';
							$keyValuePara=$key;
							$this->_convertCriteriaArray($criteriValArrayPara,$logicalNamePara,$operatorNamePara,$keyValuePara);
						}
													
						
						if($value['logicalOperatorName']=='meals' && strtoupper($value['criteria_value']) != 'N')
						{
							$mealsArray=array();
							
							$sql = "SELECT 
									meal_code,
									meal_description
									FROM 
									".$CFG['db']['tbl']['meal_code_details']."					
									WHERE 
									meal_id In (".$value['criteria_value'].")";
	
							if(DB::isError($result=$this->_Oconnection->query($sql)))
							{
								fileWrite($sql,"SqlError","a+");
								return false;
							}
							if($result->numRows() > 0)
							{	
													
								while($row=$result->fetchRow(DB_FETCHMODE_ASSOC))
								{			
									$mealsArray[$row['meal_code']]=$row['meal_description'];
									
								}
														
							}

							$logicalNamePara='';
							$operatorNamePara='';
							$keyValuePara='';

							$logicalNamePara=$value['logicalOperatorName'];
							$operatorNamePara='mealsOperator';
							$keyValuePara=$key;

							$this->_convertPolicyArray($mealsArray,$logicalNamePara,$operatorNamePara,$keyValuePara);				
							
							
							
						}

						if($value['logicalOperatorName']=='baggage' && strtoupper($value['criteria_value']) != 'N')
						{
							$baggageArray=array();

							$sql = "SELECT 
									baggage_id,
									baggage_name
									FROM 
									".$CFG['db']['tbl']['baggage_details']."					
									WHERE 
									baggage_id In (".$value['criteria_value'].")";
	
							if(DB::isError($result=$this->_Oconnection->query($sql)))
							{
								fileWrite($sql,"SqlError","a+");
								return false;
							}
							if($result->numRows() > 0)
							{	
										
								while($row=$result->fetchRow(DB_FETCHMODE_ASSOC))
								{
			
									$baggageArray[$row['baggage_id']]=$row['baggage_name'];
									
								}						
							}
							
							
							$logicalNamePara='';
							$operatorNamePara='';
							$keyValuePara='';

							$logicalNamePara=$value['logicalOperatorName'];
							$operatorNamePara='baggageOperator';
							$keyValuePara=$key;

							$this->_convertPolicyArray($baggageArray,$logicalNamePara,$operatorNamePara,$keyValuePara);
								
						}

									
					
					if($value['logicalOperatorName']=='airlineCode' || $value['logicalOperatorName']=='flightNumber' || $value['logicalOperatorName']=='codeShare')
					{
						if($conditionVal == '')
						$index=$key;
						
						$this->_ArequestCriteriaDetails[$index]['airlineDetails'][$this->_ArequestCriteriaDetails[$key]['loop_value']][$this->_ArequestCriteriaDetails[$key]['logicalOperatorName']]=$this->_ArequestCriteriaDetails[$key]['criteria_value'];
						if($conditionVal != $this->_ArequestCriteriaDetails[$key]['loop_value'])
						{
							$this->_ArequestCriteriaDetails[$index]['airlineDetails'][$this->_ArequestCriteriaDetails[$key]['loop_value']]['operator']=$this->_ArequestCriteriaDetails[$key]['operator_name'];
							$conditionVal=$this->_ArequestCriteriaDetails[$key]['loop_value'];
						}
					
					}

					if($value['logicalOperatorName']=='passengerCount')
					{
						$this->_totalPolicyValue[$key]['operator']=$this->_ArequestCriteriaDetails[$key]['operator_name'];
						$sqlSelectPassengerCountDetails="SELECT
									rcpd.min_passenger,
									rcpd.max_passenger,																
									rcpd.min_infant,
									rcpd.max_infant,
									rcpd.foc		
																
							  FROM
									".$CFG['db']['tbl']['request_criteria_passengercount_details']." rcpd								
							  WHERE
									rcpd.criteria_passenger_count_id=".$value['criteria_value']." limit 1";

						if(DB::isError($resultSelectPassengerCountDetails=$this->_Oconnection->query($sqlSelectPassengerCountDetails)))
						{
							fileWrite($sqlSelectPassengerCountDetails,"SqlError","a+");
							return false;
						}

						if($resultSelectPassengerCountDetails->numRows() > 0)
						{
						
							while($row=$resultSelectPassengerCountDetails->fetchRow(DB_FETCHMODE_ASSOC))
							{
								if(!empty($row['foc']))
								{
									$_AtempFoc = json_decode($row['foc'],1);
									$row['foc'] = array(
										'type' => key($_AtempFoc),
										'value' => reset($_AtempFoc)
									);
								}
								$this->_totalPolicyValue[0][$value['logicalOperatorName']]=$row;
							}
						}					
					}
					if($value['logicalOperatorName']=='minStops')
					{
						$this->_totalPolicyValue[0][$value['logicalOperatorName']]=$value['criteria_value'];
					}
				}

				
				if(isset($this->_ArequestCriteriaDetails[$index]['airlineDetails']))
				{
					if(isset($this->_totalPolicyValue[0]['airlineDetails']))
					{				
						foreach($this->_totalPolicyValue[0]['airlineDetails'] as $totkey=>$totalPolicyValue)
						{
							foreach($this->_ArequestCriteriaDetails[$index]['airlineDetails'] as $requestCriteriaValue)					
							{
								if($totalPolicyValue['flightNumber']==$requestCriteriaValue['flightNumber'] && $totalPolicyValue['airlineCode']==$requestCriteriaValue['airlineCode'])
								{
									unset($this->_totalPolicyValue[0]['airlineDetails'][$totkey]);
								}
							}
						}
					
					
						$this->_totalPolicyValue[0]['airlineDetails'] = array_merge($this->_totalPolicyValue[0]['airlineDetails'],$this->_ArequestCriteriaDetails[$index]['airlineDetails']);
						
						
					}
					else
					{
						$this->_totalPolicyValue[0]['airlineDetails']=$this->_ArequestCriteriaDetails[$index]['airlineDetails'];					
					}
				}
			}
			// Added these lines to get the policy values for insertio. These data is from the policy_mapping table
			$this->_totalPolicyValue[0]['policy_mapping_id'] = $givenRequestPolicyArray[0]['policy_mapping_id'];	// this will be the id field from policy_mapping table
			$this->_totalPolicyValue[0]['policy_type_id'] = $givenRequestPolicyArray[0]['policy_type_id'];
			$this->_totalPolicyValue[0]['matrix_id'] = $givenRequestPolicyArray[0]['request_criteria_id'];			//this will be the matrix id since we've aliased the name in the query 
			$this->_totalPolicyValue[0]['status'] = $givenRequestPolicyArray[0]['status'];
		} 
		return $this->_totalPolicyValue;
	}

	/**
	 * @Author		: Sri muthu rajesh 21/03/17
	 * @Modified By : --
	 * @Desc		: To push operator and values in total array
	 * @Param		: 
	 * @Return type : Array
	 */
	function _convertCriteriaArray($_AcriteriValArray,$_SlogicalName,$_SoperatorName,$_AkeyValue)
	{
		foreach ($_AcriteriValArray as $key => $value) {
			$this->_totalPolicyValue[0][$_SlogicalName][] = array($_SlogicalName=>$value, $_SoperatorName=>$this->_ArequestCriteriaDetails[$_AkeyValue]['operator_name']);
		}
		return true;
	}

	function _convertPolicyArray($criteriValArray,$logicalName,$operatorName,$keyValue)
	{
		if(isset($this->_totalPolicyValue[0][$logicalName]) && isset($this->_totalPolicyValue[0][$operatorName]))
		{
	
			if($this->_totalPolicyValue[0][$operatorName] == $this->_ArequestCriteriaDetails[$keyValue]['operator_name'])
			{									
				$this->_totalPolicyValue[0][$logicalName]=array_unique(array_merge($this->_totalPolicyValue[0][$logicalName],$criteriValArray));
		
			}
			else
			{
				$this->_totalPolicyValue[0][$logicalName]=$criteriValArray;
			}
			$this->_totalPolicyValue[0][$operatorName]=$this->_ArequestCriteriaDetails[$keyValue]['operator_name'];
	
		}
		else
		{	
			$this->_totalPolicyValue[0][$operatorName]=$this->_ArequestCriteriaDetails[$keyValue]['operator_name'];							
			$this->_totalPolicyValue[0][$logicalName]=$criteriValArray;
	
		}
		return true;
	}
////end end end

	function _getPolicyRequestDetails($requestMasterId)
	{
		global $CFG;
		
		$_AstaticData = $this->_staticData("_getPolicyRequestDetails",$requestMasterId);
		if($_AstaticData !== false)
			return $_AstaticData;
		
		$returnArray=array();
		$sqlSelectPolicyRequestDetails="SELECT
								rm.request_master_id,
								rm.trip_type,
								rm.requested_date,
								rm.request_type_id,
								rm.user_currency,
                                                                rm.reference_request_master_id,
								ud.user_id,
								ud.corporate_id,
								cd.corporate_type_id,
								".encrypt::_decrypt('ud.email_id')." as loginId,
								".encrypt::_decrypt('cd.pos_code')." as pointOfSale,
								".encrypt::_decrypt('ud.country_code')." as countryCode,
								".encrypt::_decrypt('cd.iata_code')." AS iata_code
						FROM
								".$CFG['db']['tbl']['request_master']." rm,
								".$CFG['db']['tbl']['user_details']." ud,
								".$CFG['db']['tbl']['corporate_details']." cd
						WHERE
								rm.request_master_id='".$requestMasterId."'
								AND rm.user_id=ud.user_id
								AND ud.corporate_id=cd.corporate_id";
		if(DB::isError($resultSelectPolicyRequestDetails=$this->_Oconnection->query($sqlSelectPolicyRequestDetails)))
		{
			fileWrite($sqlSelectPolicyRequestDetails,"SqlError","a+");
			return false;
		}

		if($resultSelectPolicyRequestDetails->numRows() >0)
		{
			$rowSelectPolicyRequestDetails=$resultSelectPolicyRequestDetails->fetchRow(DB_FETCHMODE_ASSOC);

			$returnArray=$rowSelectPolicyRequestDetails;
		}
		$this->_staticData("_getPolicyRequestDetails",$requestMasterId,$returnArray);
		return $returnArray;
	}
	/*Modified By: Subalakshmi S 27-08-2018
		Desc     : The below lines are commented since it is called in 
		 			class.fetchPolicyDetails.php file*/
		 			
	/*function _fetchPolicyDiscountMatrix($givenPolicyArray)
	{
		global $CFG;
		$returnArray=array();
		$policyMasterValueArray=array();
        
        $_AstaticData = $this->_staticData('_fetchPolicyDiscountMatrix',$givenPolicyArray['policyRequestedDate']);
		if($_AstaticData !== false)
		{
			$_AdiscountPolicyMater = $_AstaticData;
		}
        else
        {
        	$_AdiscountPolicyMater = array();
			$sqlSelectPolicyMaster="SELECT
							policy_id,
							policy_name,
							discount_matrix_id,
							priority,
							created_date,
							policy_dow
						FROM
							".$CFG['db']['tbl']['policy_master']."
						WHERE
							active_status='Y'
							AND ('".$givenPolicyArray['policyRequestedDate']."' BETWEEN start_date AND end_date)";
							
			if(DB::isError($resultSelectPolicyMaster=$this->_Oconnection->query($sqlSelectPolicyMaster)))
			{
				fileWrite($sqlSelectPolicyMaster,"SqlError","a+");
				return false;
			}
			if($resultSelectPolicyMaster->numRows() > 0)
			{
				while($rowSelectPolicyMaster=$resultSelectPolicyMaster->fetchRow(DB_FETCHMODE_ASSOC))
				{
					$_AdiscountPolicyMater[] = $rowSelectPolicyMaster;
				}
			}
			$this->_staticData('_fetchPolicyDiscountMatrix',$givenPolicyArray['policyRequestedDate'],$_AdiscountPolicyMater);
        }
        if(!empty($_AdiscountPolicyMater))
		{
			foreach($_AdiscountPolicyMater AS $key => $rowSelectPolicyMaster)
			{
				if($this->_getPolicyDayOfWeekStatus($givenPolicyArray['policyRequestedDate'],$rowSelectPolicyMaster['policy_dow'])=="Y")
				{
					$_AstaticData = $this->_staticData('_fetchPolicyDiscountMatrix_policyDetails',$rowSelectPolicyMaster['policy_id']);
					if($_AstaticData !== false)
					{
						$policyDetailsArray = $_AstaticData;
					}
					else
					{
						$sqlSelectPolicyDetails="SELECT
										pd.policy_details_id,
										pd.policy_id,
										pd.criteria_id,
										pd.loop_value,
										cm.criteria_name,
										cm.criteria_type,
										cm.criteria_logical_id,
										pd.operator_id,
										om.operator_name,
										om.logical_value,
										om.operator_type,
										pd.policy_value
									 FROM
										".$CFG['db']['tbl']['policy_details']." pd,
										".$CFG['db']['tbl']['criteria_master']." cm,
										".$CFG['db']['tbl']['operator_master']." om
									 WHERE
										pd.policy_id='".$rowSelectPolicyMaster['policy_id']."'
										AND pd.criteria_id=cm.criteria_id
										AND pd.operator_id=om.operator_id";
					
						if(DB::isError($resultSelectPolicyDetails=$this->_Oconnection->query($sqlSelectPolicyDetails)))
						{
							fileWrite($sqlSelectPolicyDetails,"SqlError","a+");
							return false;
						}
						
					//	$resultValue=0;
						$stringToExecute="";
						$policyDetailsArray = array();
						if($resultSelectPolicyDetails->numRows() > 0)
						{
							while($rowSelectPolicyDetails=$resultSelectPolicyDetails->fetchRow(DB_FETCHMODE_ASSOC))
							{
								$policyDetailsArray[] = $rowSelectPolicyDetails;
							}
						}
						$this->_staticData('_fetchPolicyDiscountMatrix_policyDetails',$rowSelectPolicyMaster['policy_id'],$policyDetailsArray);
					}
					$stringToExecute = $this->_getStringToExecuteForAllPolicy($policyDetailsArray,$givenPolicyArray);
					if($stringToExecute!="")
					{
						$resultValue = 0;
						$resultStringToEval="IF( ".$stringToExecute." ){".'$resultValue'."=1;}";
						#fileWrite("POLICY_MASTER_ID=".$rowSelectPolicyMaster['policy_id']."--STRING=".$resultStringToEval,"STRING","a+");// REM
						eval($resultStringToEval);
						if($resultValue==1)
						{
							$policyMasterValueArray[]=$rowSelectPolicyMaster;
						}
					}
				}
			}
		}    
		
		$minValue=0;
		if(count($policyMasterValueArray) > 0)
		{
			$finalInput=array("inputArray"=>$policyMasterValueArray,"firstFieldName"=>"priority","firstFieldOrder"=>"ASC","secondFieldName"=>"created_date","secondFieldOrder"=>"ASC");
			$finalArray=$this->_multipleSortFunction($finalInput);
			//$resultArray[]=$finalArray[0];
			
			$fetchDiscountForPolicyArray[0]=$finalArray[0];
			$fetchDiscountForPolicyArray[0]['departureDate']=$givenPolicyArray['departureDate'];
			$fetchDiscountForPolicyArray[0]['policyBookedLoadFactor']=$givenPolicyArray['policyBookedLoadFactor'];
			$fetchDiscountForPolicyArray[0]['policyFutureLoadFactor']=$givenPolicyArray['policyFutureLoadFactor'];
			$fetchDiscountForPolicyArray[0]['policyForecastLoadFactor']=$givenPolicyArray['policyForecastLoadFactor'];
			$fetchDiscountForPolicyArray[0]['policyRequestMasterId']=$givenPolicyArray['policyRequestMasterId'];
			$fetchDiscountForPolicyArray[0]['policyCurrencyType']=$givenPolicyArray['policyCurrencyType'];
			$fetchDiscountForPolicyArray[0]['policyPaxCount']=$givenPolicyArray['noOfPax'];
			if(count($fetchDiscountForPolicyArray) > 0)
			{
				$returnDiscountArray=$this->_getDiscountMatrixValues($fetchDiscountForPolicyArray);
				if(count($returnDiscountArray) > 0)
					$returnArray=$returnDiscountArray;
			}

			/*for($i=0;$i<count($policyMasterValueArray);$i++)
			{
				if($minValue==0 || $policyMasterValueArray[$i]['priority']<=$minValue)
				{
					$minValue=$policyMasterValueArray[$i]['priority'];
				}
			}
			$minIndex="";
			$appendString="";
			for($i=0;$i<count($policyMasterValueArray);$i++)
			{
				if($minValue==$policyMasterValueArray[$i]['priority'])
				{
					$minIndex.=$appendString.$i;
					$appendString=",";
				}
			}

			if($minIndex!="")
			{
				$fetchDiscountForPolicyArray=array();
				$explodeArray=explode(",",$minIndex);
				for($i=0;$i<count($explodeArray);$i++)
				{
					$fetchDiscountForPolicyArray[$i]=$policyMasterValueArray[$explodeArray[$i]];
					$fetchDiscountForPolicyArray[$i]['departureDate']=$givenPolicyArray['departureDate'];
					$fetchDiscountForPolicyArray[$i]['policyBookedLoadFactor']=$givenPolicyArray['policyBookedLoadFactor'];
					$fetchDiscountForPolicyArray[$i]['policyForecastLoadFactor']=$givenPolicyArray['policyForecastLoadFactor'];
					$fetchDiscountForPolicyArray[$i]['policyRequestMasterId']=$givenPolicyArray['policyRequestMasterId'];
					$fetchDiscountForPolicyArray[$i]['policyCurrencyType']=$givenPolicyArray['policyCurrencyType'];
					$fetchDiscountForPolicyArray[$i]['policyPaxCount']=$givenPolicyArray['noOfPax'];
				}
				
			}*/
		/*}
		return $returnArray;
	}*/
	/*Modified By: Subalakshmi S 27-08-2018
		Desc     : The below lines are commented since it is called in 
		 			class.fetchPolicyDetails.php file*/
		 			
	/*function _getDiscountMatrixValues($givenPolicyDetailsArray)
	{
		global $CFG;

		$currentDate=date('Y-m-d');
		$resultArray=array();
		for($i=0;$i<count($givenPolicyDetailsArray);$i++)
		{
			$departureDate=$givenPolicyDetailsArray[$i]['departureDate'];

			$daysToDeparture=strtotime($departureDate)-strtotime($currentDate);
			$daysToDeparture=floor($daysToDeparture/3600/24);
			
			#To check future load value as booked load factor is future load factor is enabled
			if($this->_getLoadFactorTypeDetails('_SdiscountStatus','FLF')=="Y")
				$_SbookedLoadFactor=$givenPolicyDetailsArray[$i]['policyFutureLoadFactor'];
			else
				$_SbookedLoadFactor=$givenPolicyDetailsArray[$i]['policyBookedLoadFactor'];
					
			$sqlSelectDiscountDetails="SELECT
								dm.discount_matrix_id,
								dm.discount_matrix_name,
								dm.discount_matrix_type,
								dm.load_factor_type,
								dmp.discount_mapping_id,
								dmp.days_to_departure,
								dmp.booked_load_factor
						  FROM
								".$CFG['db']['tbl']['discount_matrix']." dm,
								".$CFG['db']['tbl']['discount_mapping_details']." dmp
						  WHERE
								dm.discount_matrix_id='".$givenPolicyDetailsArray[$i]['discount_matrix_id']."'
								AND dm.discount_matrix_id=dmp.discount_matrix_id";
								
			if($CFG['discountPolicy']['averageFareCaluculation']=="Y")
			{
				$daysToDepartureJoin=" AND (dmp.days_to_departure=(SELECT days_to_departure FROM ".$CFG['db']['tbl']['discount_mapping_details']." WHERE discount_matrix_id='".$givenPolicyDetailsArray[$i]['discount_matrix_id']."' AND days_to_departure >='".$daysToDeparture."' order by days_to_departure limit 1) OR 
								dmp.days_to_departure=(SELECT days_to_departure FROM ".$CFG['db']['tbl']['discount_mapping_details']." WHERE discount_matrix_id='".$givenPolicyDetailsArray[$i]['discount_matrix_id']."' AND days_to_departure <='".$daysToDeparture."' order by days_to_departure desc limit 1)) ";
				$bookedLoadJoin=" AND (dmp.booked_load_factor=(SELECT booked_load_factor FROM ".$CFG['db']['tbl']['discount_mapping_details']." WHERE discount_matrix_id='".$givenPolicyDetailsArray[$i]['discount_matrix_id']."' AND booked_load_factor >='".$_SbookedLoadFactor."' order by booked_load_factor limit 1) OR 
								dmp.booked_load_factor=(SELECT booked_load_factor FROM ".$CFG['db']['tbl']['discount_mapping_details']." WHERE discount_matrix_id='".$givenPolicyDetailsArray[$i]['discount_matrix_id']."' AND booked_load_factor <='".$_SbookedLoadFactor."' order by booked_load_factor desc limit 1))";
				$forecastLoadJoin=" AND dmp.forecast_load_factor=(SELECT forecast_load_factor FROM ".$CFG['db']['tbl']['discount_mapping_details']." WHERE discount_matrix_id='".$givenPolicyDetailsArray[$i]['discount_matrix_id']."' AND forecast_load_factor <='".$givenPolicyDetailsArray[$i]['policyForecastLoadFactor']."' order by forecast_load_factor desc limit 1)";
				//$forecastLoadJoin=" AND (dmp.forecast_load_factor=(SELECT forecast_load_factor FROM ".$CFG['db']['tbl']['discount_mapping_details']." WHERE discount_matrix_id='".$givenPolicyDetailsArray[$i]['discount_matrix_id']."' AND forecast_load_factor >='".$givenPolicyDetailsArray[$i]['policyForecastLoadFactor']."' order by forecast_load_factor limit 1) OR 
								///dmp.forecast_load_factor=(SELECT forecast_load_factor FROM ".$CFG['db']['tbl']['discount_mapping_details']." WHERE discount_matrix_id='".$givenPolicyDetailsArray[$i]['discount_matrix_id']."' AND forecast_load_factor <='".$givenPolicyDetailsArray[$i]['policyForecastLoadFactor']."' order by forecast_load_factor desc limit 1))";
								
			}
			else
			{
				$daysToDepartureJoin=" AND dmp.days_to_departure=(SELECT days_to_departure FROM ".$CFG['db']['tbl']['discount_mapping_details']." WHERE discount_matrix_id='".$givenPolicyDetailsArray[$i]['discount_matrix_id']."' AND days_to_departure <='".$daysToDeparture."' order by days_to_departure desc limit 1)";
				$bookedLoadJoin=" AND dmp.booked_load_factor=(SELECT booked_load_factor FROM ".$CFG['db']['tbl']['discount_mapping_details']." WHERE discount_matrix_id='".$givenPolicyDetailsArray[$i]['discount_matrix_id']."' AND booked_load_factor <='".$_SbookedLoadFactor."' order by booked_load_factor desc limit 1)";
				$forecastLoadJoin=" AND dmp.forecast_load_factor=(SELECT forecast_load_factor FROM ".$CFG['db']['tbl']['discount_mapping_details']." WHERE discount_matrix_id='".$givenPolicyDetailsArray[$i]['discount_matrix_id']."' AND forecast_load_factor <='".$givenPolicyDetailsArray[$i]['policyForecastLoadFactor']."' order by forecast_load_factor desc limit 1)";
			}					
			$sqlSelectDiscountDetails.=$daysToDepartureJoin.$bookedLoadJoin.$forecastLoadJoin;
			if(DB::isError($resultSelectDiscountDetails=$this->_Oconnection->query($sqlSelectDiscountDetails)))
			{
				fileWrite($sqlSelectDiscountDetails,"SqlError","a+");
				return false;
			}
			if($resultSelectDiscountDetails->numRows() > 0)
			{
				$resultDiscountDetailsArray=array();
				$k=0;
				while($rowSelectDiscountDetails=$resultSelectDiscountDetails->fetchRow(DB_FETCHMODE_ASSOC))
				{
					$resultDiscountDetailsArray[$k]['discount_matrix_id']=$rowSelectDiscountDetails['discount_matrix_id'];
					$resultDiscountDetailsArray[$k]['discount_matrix_name']=$rowSelectDiscountDetails['discount_matrix_name'];
					$resultDiscountDetailsArray[$k]['discount_matrix_type']=$rowSelectDiscountDetails['discount_matrix_type'];
					$resultDiscountDetailsArray[$k]['discount_mapping_id']=$rowSelectDiscountDetails['discount_mapping_id'];
					$resultDiscountDetailsArray[$k]['days_to_departure']=$rowSelectDiscountDetails['days_to_departure'];
					$resultDiscountDetailsArray[$k]['booked_load_factor']=$rowSelectDiscountDetails['booked_load_factor'];
					$resultDiscountDetailsArray[$k]['load_factor_type']=$rowSelectDiscountDetails['load_factor_type'];
					
					$sqlSelectDiscountFareMapping="SELECT
										dfm.discount_fare_id,
										dfm.group_size,
										dfm.discount_fare
								       FROM
										".$CFG['db']['tbl']['discount_fare_mapping']." dfm
								       WHERE
										dfm.discount_mapping_id='".$resultDiscountDetailsArray[$k]['discount_mapping_id']."'";
										
					if($CFG['discountPolicy']['averageFareCaluculation']=="Y")
					{					
						$groupPaxJoin=" AND (dfm.group_size=(SELECT group_size FROM ".$CFG['db']['tbl']['discount_fare_mapping']." WHERE discount_mapping_id='".$resultDiscountDetailsArray[$k]['discount_mapping_id']."' AND group_size>='".$givenPolicyDetailsArray[$i]['policyPaxCount']."' order by group_size limit 1) OR 
										dfm.group_size=(SELECT group_size FROM ".$CFG['db']['tbl']['discount_fare_mapping']." WHERE discount_mapping_id='".$resultDiscountDetailsArray[$k]['discount_mapping_id']."' AND group_size<='".$givenPolicyDetailsArray[$i]['policyPaxCount']."' order by group_size desc limit 1))";
					}
					else
					{
						$groupPaxJoin=" AND dfm.group_size=(SELECT group_size FROM ".$CFG['db']['tbl']['discount_fare_mapping']." WHERE discount_mapping_id='".$resultDiscountDetailsArray[$k]['discount_mapping_id']."' AND group_size<='".$givenPolicyDetailsArray[$i]['policyPaxCount']."' order by group_size desc limit 1)";
					}
					
					$sqlSelectDiscountFareMapping.=$groupPaxJoin;
					if(DB::isError($resultSelectDiscountFareMapping=$this->_Oconnection->query($sqlSelectDiscountFareMapping)))
					{
						fileWrite($sqlSelectDiscountFareMapping,"SqlError","a+");
						return false;
					}

					if($resultSelectDiscountFareMapping->numRows() > 0)
					{
						$discountFareMappingArray=array();
						$indexX=0;
						while($rowSelectDiscountDetails=$resultSelectDiscountFareMapping->fetchRow(DB_FETCHMODE_ASSOC))
						{
							$discountFareMappingArray[$indexX]['discountFare']=$rowSelectDiscountDetails['discount_fare'];
							$discountFareMappingArray[$indexX]['groupSize']=$rowSelectDiscountDetails['group_size'];
							$indexX++;
						}
						if(count($discountFareMappingArray)==1)
						{
							$resultDiscountDetailsArray[$k]['dicountFare']=$discountFareMappingArray[0]['discountFare'];
						}
						else
						{
							/*if($discountFareMappingArray[0]['discountFare']>$discountFareMappingArray[1]['discountFare'])
							{
								$minGroupSizeValueDiscountValue=$discountFareMappingArray[1]['discountFare'];
								$maxGroupSizeValueDiscountValue=$discountFareMappingArray[0]['discountFare'];
							}
							if($discountFareMappingArray[0]['discountFare']<$discountFareMappingArray[1]['discountFare'])
							{
								$minGroupSizeValueDiscountValue=$discountFareMappingArray[0]['discountFare'];
								$maxGroupSizeValueDiscountValue=$discountFareMappingArray[1]['discountFare'];
							}*/

							/*if($discountFareMappingArray[0]['groupSize']>$discountFareMappingArray[1]['groupSize'])
							{
								$minGroupSizeValue=$discountFareMappingArray[1]['groupSize'];
								$maxGroupSizeValue=$discountFareMappingArray[0]['groupSize'];

								$minGroupSizeValueDiscountValue=$discountFareMappingArray[1]['discountFare'];
								$maxGroupSizeValueDiscountValue=$discountFareMappingArray[0]['discountFare'];
							}
							if($discountFareMappingArray[0]['groupSize']<$discountFareMappingArray[1]['groupSize'])
							{
								$minGroupSizeValue=$discountFareMappingArray[0]['groupSize'];
								$maxGroupSizeValue=$discountFareMappingArray[1]['groupSize'];

								$minGroupSizeValueDiscountValue=$discountFareMappingArray[0]['discountFare'];
								$maxGroupSizeValueDiscountValue=$discountFareMappingArray[1]['discountFare'];
							}

							$tempGroupSize=(($givenPolicyDetailsArray[$i]['policyPaxCount']-$minGroupSizeValue)/($maxGroupSizeValue-$minGroupSizeValue));
							$tempDiscountAmount=($tempGroupSize)*($maxGroupSizeValueDiscountValue-$minGroupSizeValueDiscountValue);

							//if($tempDiscountAmount<0)
								//$tempDiscountAmount=-($tempDiscountAmount);

							$netDiscountAmount=round(($minGroupSizeValueDiscountValue+$tempDiscountAmount),2);

							$resultDiscountDetailsArray[$k]['dicountFare']=$netDiscountAmount;
							
						}

					}

					$k++;
				}


				if(count($resultDiscountDetailsArray) > 0)
				{
					if($resultDiscountDetailsArray[0]['discount_matrix_type'] == "BP" || $resultDiscountDetailsArray[0]['discount_matrix_type'] == "TP")
						$displayDiscount="%";
					if($resultDiscountDetailsArray[0]['discount_matrix_type'] == "BA" || $resultDiscountDetailsArray[0]['discount_matrix_type'] == "TA")
						$displayDiscount=$givenPolicyDetailsArray[$i]['policyCurrencyType'];

					if(count($resultDiscountDetailsArray) ==1)
					{
						$resultArray[$i]['policyId']=$givenPolicyDetailsArray[$i]['policy_id'];
						$resultArray[$i]['policyName']=$givenPolicyDetailsArray[$i]['policy_name'];
						$resultArray[$i]['matrixId']=$resultDiscountDetailsArray[0]['discount_matrix_id'];
						$resultArray[$i]['matrixName']=$resultDiscountDetailsArray[0]['discount_matrix_name'];
						$resultArray[$i]['loadFactorType']=$resultDiscountDetailsArray[0]['load_factor_type'];
						$resultArray[$i]['matrixType']=$resultDiscountDetailsArray[0]['discount_matrix_type'];
						$resultArray[$i]['dicountFare']=$resultDiscountDetailsArray[0]['dicountFare'];
						$resultArray[$i]['daysToDeparture']=$daysToDeparture;
						$resultArray[$i]['bookedLoadFactor']=$givenPolicyDetailsArray[$i]['policyBookedLoadFactor'];
						$resultArray[$i]['forecastLoadFactor']=$givenPolicyDetailsArray[$i]['policyForecastLoadFactor'];
						$resultArray[$i]['futureLoadFactor']=$givenPolicyDetailsArray[$i]['policyFutureLoadFactor'];
						$resultArray[$i]['policyCurrencyType']=$givenPolicyDetailsArray[$i]['policyCurrencyType'];
						$resultArray[$i]['displayDiscount']=$displayDiscount;
					}
					else
					{						
						$bookedLaodArray=array();
						for($j=0;$j<count($resultDiscountDetailsArray);$j++)
						{
							$bookedLaodArray[$resultDiscountDetailsArray[$j]['booked_load_factor']][]=$resultDiscountDetailsArray[$j];
						}

						$bookedLoadWiseArray=array();
						
						foreach($bookedLaodArray as $bookedLaodKey=>$bookedLoadValue)
						{
							$bookedLoadWiseArray[$bookedLaodKey]['discount_matrix_id']=$bookedLoadValue[0]['discount_matrix_id'];
							$bookedLoadWiseArray[$bookedLaodKey]['discount_matrix_name']=$bookedLoadValue[0]['discount_matrix_name'];
							$bookedLoadWiseArray[$bookedLaodKey]['discount_matrix_type']=$bookedLoadValue[0]['discount_matrix_type'];
							$bookedLoadWiseArray[$bookedLaodKey]['load_factor_type']=$bookedLoadValue[0]['load_factor_type'];
							
							if(count($bookedLoadValue)==1)
							{								
								$bookedLoadWiseArray[$bookedLaodKey]['returnDiscountFare']=$bookedLoadValue[0]['dicountFare'];
							}
							else
							{
								
								$minimumDaysToDeparture=0;
								$minimumDaysToDetartureValue=0;
								$maximumDaysToDeparture=0;
								$maximumDaysToDetartureValue=0;
								
								$minMaxArrayDaysToDepartureTemp=array();
								
								foreach($bookedLoadValue as $key=>$value)
								{
									$minMaxArrayDaysToDepartureTemp[]=$value['days_to_departure'];
								}
								$minimumDaysToDeparture=min($minMaxArrayDaysToDepartureTemp);
								$maximumDaysToDeparture=max($minMaxArrayDaysToDepartureTemp);
								
								foreach($bookedLoadValue as $key=>$value)
								{
									if($minimumDaysToDeparture==$value['days_to_departure'])
									{
										$minimumDaysToDeparture=$value['days_to_departure'];
										$minimumDaysToDetartureValue=$value['dicountFare'];
									}
									if($maximumDaysToDeparture==$value['days_to_departure'])
									{
										$maximumDaysToDeparture=$value['days_to_departure'];
										$maximumDaysToDetartureValue=$value['dicountFare'];
									}
								}								

								$tempDaysToDeparture=(($daysToDeparture-$minimumDaysToDeparture)/($maximumDaysToDeparture-$minimumDaysToDeparture));
								$tempDiscountAmountForDaysToDeparture=($tempDaysToDeparture)*($maximumDaysToDetartureValue-$minimumDaysToDetartureValue);
								
								//if($tempDiscountAmountForDaysToDeparture<0)
									//$tempDiscountAmountForDaysToDeparture=-($tempDiscountAmountForDaysToDeparture);

								$netDiscountAmountForDaysToDeparture=round(($minimumDaysToDetartureValue+$tempDiscountAmountForDaysToDeparture),2);

								$bookedLoadWiseArray[$bookedLaodKey]['returnDiscountFare']=$netDiscountAmountForDaysToDeparture;
							}
						}

						

						if(count($bookedLoadWiseArray)==1)
						{
							foreach($bookedLoadWiseArray as $bookedLoadWiseKey=>$bookedLaodWiseValue)
							{
								$discountMatrixId=$bookedLaodWiseValue['discount_matrix_id'];
								$discountMatrixName=$bookedLaodWiseValue['discount_matrix_name'];
								$discountMatrixType=$bookedLaodWiseValue['discount_matrix_type'];
								$loadFactorType=$bookedLaodWiseValue['load_factor_type'];
								$netDiscountAmountForBookedLoad=$bookedLaodWiseValue['returnDiscountFare'];
							}
						}
						else
						{
							$minimumBookedLoad=0;
							$minimumBookedLoadValue=0;
							$maximumBookedLoad=0;
							$maximumBookedLoadValue=0;
							
							$minMaxArrayBookedLoadTemp=array();
								
							foreach($bookedLoadWiseArray as $bookedLoadWiseKey=>$bookedLaodWiseValue)
							{
								$minMaxArrayBookedLoadTemp[]=$bookedLoadWiseKey;
							}
							$minimumBookedLoad=min($minMaxArrayBookedLoadTemp);
							$maximumBookedLoad=max($minMaxArrayBookedLoadTemp);

							foreach($bookedLoadWiseArray as $bookedLoadWiseKey=>$bookedLaodWiseValue)
							{
								$discountMatrixId=$bookedLaodWiseValue['discount_matrix_id'];
								$discountMatrixName=$bookedLaodWiseValue['discount_matrix_name'];
								$discountMatrixType=$bookedLaodWiseValue['discount_matrix_type'];
								$loadFactorType=$bookedLaodWiseValue['load_factor_type'];
								if($minimumBookedLoad==$bookedLoadWiseKey)
								{
									$minimumBookedLoad=$bookedLoadWiseKey;
									$minimumBookedLoadValue=$bookedLaodWiseValue['returnDiscountFare'];
								}
	
								if($maximumBookedLoad==$bookedLoadWiseKey)
								{
									$maximumBookedLoad=$bookedLoadWiseKey;
									$maximumBookedLoadValue=$bookedLaodWiseValue['returnDiscountFare'];
								}
							}
						
							$tempBookedLoadValue=(($givenPolicyDetailsArray[$i]['policyBookedLoadFactor']-$minimumBookedLoad)/($maximumBookedLoad-$minimumBookedLoad));
							$tempDiscountAmountForBookedLoad=($tempBookedLoadValue)*($maximumBookedLoadValue-$minimumBookedLoadValue);
							//if($tempDiscountAmountForBookedLoad<0)
								//$tempDiscountAmountForBookedLoad=-($tempDiscountAmountForBookedLoad);

							$netDiscountAmountForBookedLoad=round(($minimumBookedLoadValue+$tempDiscountAmountForBookedLoad),2);
						}
						
						$resultArray[$i]['policyId']=$givenPolicyDetailsArray[$i]['policy_id'];
						$resultArray[$i]['policyName']=$givenPolicyDetailsArray[$i]['policy_name'];
						$resultArray[$i]['matrixId']=$discountMatrixId;
						$resultArray[$i]['matrixName']=$discountMatrixName;
						$resultArray[$i]['matrixType']=$discountMatrixType;
						$resultArray[$i]['loadFactorType']=$loadFactorType;
						$resultArray[$i]['dicountFare']=$netDiscountAmountForBookedLoad;
						$resultArray[$i]['daysToDeparture']=$daysToDeparture;
						$resultArray[$i]['bookedLoadFactor']=$givenPolicyDetailsArray[$i]['policyBookedLoadFactor'];
						$resultArray[$i]['forecastLoadFactor']=$givenPolicyDetailsArray[$i]['policyForecastLoadFactor'];
						$resultArray[$i]['futureLoadFactor']=$givenPolicyDetailsArray[$i]['policyFutureLoadFactor'];
						$resultArray[$i]['policyCurrencyType']=$givenPolicyDetailsArray[$i]['policyCurrencyType'];
						$resultArray[$i]['displayDiscount']=$displayDiscount;
					}
				}
			}
		
		}
		if(count($resultArray)==1)
			return $resultArray;

		$percentageDiscountArray=array();
		$absoluteDiscountArray=array();

		if(count($resultArray)>1)
		{
			for($k=0;$k<count($resultArray);$k++)
			{
				$tempArray=array();
				if($resultArray[$k]['matrixType']=="BP" || $resultArray[$k]['matrixType']=="TP")
				{
					$tempArray['index']=$k;
					$tempArray['dicountFare']=$resultArray[$k]['dicountFare'];
					$percentageDiscountArray[]=$tempArray;
				}
				if($resultArray[$k]['matrixType']=="BA" || $resultArray[$k]['matrixType']=="TA")
				{
					$tempArray['index']=$k;
					$tempArray['dicountFare']=$resultArray[$k]['dicountFare'];
					$absoluteDiscountArray[]=$tempArray;
				}
			}
		}

		$returnValueType=$CFG['discountPolicy']['returnValueType'];

		if(count($percentageDiscountArray)>0)
		{
			$minDiscountFarePercentage=0;
			$minDiscountFareIndex="";

			foreach($percentageDiscountArray as $key=>$value)
			{

				if($returnValueType=="MIN")
				{
					if($minDiscountFarePercentage==0 || $value['dicountFare']<=$minDiscountFarePercentage)
					{
						$minDiscountFarePercentage=$value['dicountFare'];
						$minDiscountFareIndex=$value['index'];
					}
				}
				if($returnValueType=="MAX")
				{
					if($minDiscountFarePercentage==0 || $value['dicountFare']>=$minDiscountFarePercentage)
					{
						$minDiscountFarePercentage=$value['dicountFare'];
						$minDiscountFareIndex=$value['index'];
					}
				}
			}

			$newReturnArray=array();
			$newReturnArray[0]=$resultArray[$minDiscountFareIndex];
		}

		if(count($absoluteDiscountArray)>0 && count($percentageDiscountArray)==0)
		{
			$minDiscountFareAbsolute=0;
			$minDiscountFareAbsoluteIndex="";

			foreach($absoluteDiscountArray as $key=>$value)
			{
				if($returnValueType=="MIN")
				{
					if($minDiscountFareAbsolute==0 || $value['dicountFare']<=$minDiscountFareAbsolute)
					{
						$minDiscountFareAbsolute=$value['dicountFare'];
						$minDiscountFareAbsoluteIndex=$value['index'];
					}
				}
				if($returnValueType=="MAX")
				{
					if($minDiscountFareAbsolute==0 || $value['dicountFare']>=$minDiscountFareAbsolute)
					{
						$minDiscountFareAbsolute=$value['dicountFare'];
						$minDiscountFareAbsoluteIndex=$value['index'];
					}
				}
			}
			$newReturnArray=array();
			$newReturnArray[0]=$resultArray[$minDiscountFareAbsoluteIndex];
		}
		return $newReturnArray;
	}*/


	function _getTotalAmountProcessForPnrBlocking($requestMasterId)
    	{
        	global $CFG;
        $sql="SELECT 
                    rm.user_currency,
                    rm.exchange_rate,
                    rm.number_of_passenger,
					rm.number_of_adult,
					rm.number_of_child,
					rm.number_of_infant,
                    arm.airlines_request_id 
               FROM 
                    ".$CFG['db']['tbl']['request_master']." rm, 
                    ".$CFG['db']['tbl']['airlines_request_mapping']." arm       
                WHERE 
                    rm.request_master_id='".$requestMasterId."' AND 
                    rm.request_master_id=arm.request_master_id";
        if(DB::isError($result = $this->_Oconnection->query($sql))) 
        {
			fileWrite($sql,"SqlError","a+");
			return false;
		}
		$this->_ArequestDetails = $result->fetchRow(DB_FETCHMODE_ASSOC);

        $fetchSql="SELECT 
                            transaction_id,
                            fare_advised,
                            child_fare,
                            infant_fare,
                            payment_validity,
                            payment_validity_type AS payment_type_id,
                            passenger_validity,
                            passenger_validity_type AS passenger_type_id,
					        (SELECT fare_validity_type FROM ".$CFG['db']['tbl']['fare_validity_type_details']." WHERE fare_validity_type_id = payment_validity_type) payment_type_name,
					        (SELECT fare_validity_type FROM ".$CFG['db']['tbl']['fare_validity_type_details']." WHERE fare_validity_type_id = passenger_validity_type) passenger_type_name
                    FROM 
                            ".$CFG['db']['tbl']['transaction_master']."
                    WHERE 
                            airlines_request_id='".$this->_ArequestDetails['airlines_request_id']."' ORDER BY transaction_id DESC limit 1";
        if(DB::isError($fetchResult = $this->_Oconnection->query($fetchSql))) 
        {
			fileWrite($fetchSql,"SqlError","a+");
			return false;
		}
        $this->_AtransactionDetails = $fetchResult->fetchRow(DB_FETCHMODE_ASSOC);
        

		$tempAdultFare=0;
		$tempChildFare=0;

		$sqlSelectRequestApprovedFlightDetails="SELECT
								request_approved_flight_id,
								base_fare,
								tax,
								fare_passenger,
								child_base_fare,
								child_tax
							FROM
								".$CFG['db']['tbl']['request_approved_flight_details']."

							WHERE
								airlines_request_id='".$this->_ArequestDetails['airlines_request_id']."' AND
								transaction_master_id='".$this->_AtransactionDetails['transaction_id']."' AND 
								accepted_flight_status='Y'";

		if(DB::isError($resultSelectRequestApprovedFlightDetails=$this->_Oconnection->query($sqlSelectRequestApprovedFlightDetails)))
		{
			fileWrite($sqlSelectRequestApprovedFlightDetails,"SqlError","a+");
			return false;
		}

		if($resultSelectRequestApprovedFlightDetails->numRows() >0)
		{
			while($rowSelectRequestApprovedFlightDetails=$resultSelectRequestApprovedFlightDetails->fetchRow(DB_FETCHMODE_ASSOC))
			{
				$sqlSelectFlightCabinMapping="SELECT
									flight_cabin_mapping_id,
									request_approved_flight_id,
									adult_base_fare,
									adult_tax,
									adult_total_fare,
									child_base_fare,
									child_tax,
									child_total_fare,
									infant_base_fare,
									infant_tax,
									infant_total_fare
							      FROM
									".$CFG['db']['tbl']['flight_cabin_mapping_details']."
							      WHERE
									request_approved_flight_id='".$rowSelectRequestApprovedFlightDetails['request_approved_flight_id']."'
									AND adult_base_fare!=0
									ORDER BY flight_cabin_mapping_id LIMIT 1";

				if(DB::isError($resultSelectFlightCabinMapping=$this->_Oconnection->query($sqlSelectFlightCabinMapping)))
				{
					fileWrite($sqlSelectFlightCabinMapping,"SqlError","a+");
					return false;
				}

				if($resultSelectFlightCabinMapping->numRows() >0)
				{
					$rowSelectFlightCabinMapping=$resultSelectFlightCabinMapping->fetchRow(DB_FETCHMODE_ASSOC);

					$tempAdultFare+=$rowSelectFlightCabinMapping['adult_base_fare']+$rowSelectFlightCabinMapping['adult_tax'];
					$tempChildFare+=$rowSelectFlightCabinMapping['child_base_fare']+$rowSelectFlightCabinMapping['child_tax'];
				}
				else
				{
					$tempAdultFare+=$rowSelectRequestApprovedFlightDetails['base_fare']+$rowSelectRequestApprovedFlightDetails['tax'];
					$tempChildFare+=$rowSelectRequestApprovedFlightDetails['child_base_fare']+$rowSelectRequestApprovedFlightDetails['child_tax'];
				}
			}
		}

		$this->_ItotalAmount = $this->_ArequestDetails['number_of_adult']*$tempAdultFare;
		if($this->_ArequestDetails['number_of_child']) {
			
			$this->_ItotalAmount += $this->_ArequestDetails['number_of_child']*$tempChildFare;
		}


        	#@@$this->_ItotalAmount = $this->_ArequestDetails['number_of_adult']*$this->_AtransactionDetails['fare_advised'];
		#@@if($this->_ArequestDetails['number_of_child']) {
			
			#@@$this->_ItotalAmount += $this->_ArequestDetails['number_of_child']*$this->_AtransactionDetails['child_fare'];
		#@@}

		if($this->_ArequestDetails['number_of_infant']) {
			
			$this->_ItotalAmount += $this->_ArequestDetails['number_of_infant']*$this->_AtransactionDetails['infant_fare'];
		}

		/* Baggage And Meals */

		$transcactionId=$this->_AtransactionDetails['transaction_id'];

		$sqlSelectBaggageAndMeals="SELECT
							sum(baggauge_fare) as baggageFare,
							sum(meals_fare) as mealsFare
					   FROM
							".$CFG['db']['tbl']['request_approved_flight_details']."
					   WHERE
							transaction_master_id='".$transcactionId."' AND 
							accepted_flight_status='Y'";

		if(DB::isError($resultSelectBaggageAndMeals = $this->_Oconnection->query($sqlSelectBaggageAndMeals))) 
		{
			fileWrite($sqlSelectBaggageAndMeals,"SqlError","a+");
			return false;
		}

		$baggageFare=0;
		$mealsFare=0;
        $tigerConnectFare=0;
		if($resultSelectBaggageAndMeals->numRows() > 0)
		{
			$rowSelectBaggageAndMeals=$resultSelectBaggageAndMeals->fetchRow(DB_FETCHMODE_ASSOC);
			
			$baggageFare =$rowSelectBaggageAndMeals['baggageFare'];
			$mealsFare =$rowSelectBaggageAndMeals['mealsFare'];
		}

		if($baggageFare != 0)
		{
			$this->_ItotalAmount += $this->_ArequestDetails['number_of_adult']*$baggageFare;
			if($this->_ArequestDetails['number_of_child']) 
			{
				$this->_ItotalAmount += $this->_ArequestDetails['number_of_child']*$baggageFare;
			}
		}
		if($mealsFare != 0)
		{
			$this->_ItotalAmount += $this->_ArequestDetails['number_of_adult']*$mealsFare;
			if($this->_ArequestDetails['number_of_child']) 
			{
				$this->_ItotalAmount += $this->_ArequestDetails['number_of_child']*$mealsFare;
			}
		}
        return $this->_ItotalAmount;
    }
    /*
     * Function name : _getUserEmail
     * Description   : This function will return array of user id which have mapped in pos mapping
     * Param         :(Int,String,Int,Char)($userId,$pos,$corporateId,$showAirlineUser)
     * Return        : Result set (Array)
     * Modified by   : selvakumar.s
     * Modified date : 28-08-2017
     */
    public function _getUserEmail($userId='',$pos='',$corporateId=0,$showAirlineUser="N",$_SemailStatus="Y",$_SapprovedStatus="Y")
	{
		global $CFG;
		$userId = ($userId) ? $userId : $_SESSION['groupRM']['groupUserId'];
		$condition = "";
		// if($_SESSION['groupRM']['groupId']!=1 && $userId && $showAirlineUser=="N") {
			
		// 	$posAllMappingCheck = $this->_getUserPOSDetails($userId,"ALL");
		// 	if(empty($posAllMappingCheck))
		// 	{
		// 		$salesPersonCorporate = $this->_getSalesPersonCorporate($userId);
		// 		$salesPersonCorporate = implode(',', array_map(function($result){ return $result['corporate_id']; }, $salesPersonCorporate));
		// 		if($salesPersonCorporate)
		// 			$condition .= " AND cd.corporate_id in (".$salesPersonCorporate.") ";
		// 		else
		// 			$condition .= " AND cd.corporate_id ='' ";
		// 	}
		// }
		/*Start show the report based on pos mapping only for non airline users*/
		if($showAirlineUser=="N")
		{
			if($pos!='')
				$condition .= " AND IF(ud.group_id != 4 OR (".encrypt::_decrypt('cd.pos_code'). "!= NULL OR ".encrypt::_decrypt('cd.pos_code'). " !='') ,".encrypt::_decrypt('cd.pos_code').",(select cm.pos_code from ".$CFG['db']['tbl']['city_master']." cm where cm.city_id = ud.city_id limit 1)) ='".$pos."'";
			else
			{
				fileRequire("classes/class.groupDetailsAccess.php");
				$this->_OgroupDetailsAccess = new groupDetailsAccess;
				$this->_OgroupDetailsAccess->_Oconnection = $this->_Oconnection;
				$posStr = $this->_OgroupDetailsAccess->_getSqlPosMappedUser();
				if($posStr == 'NOTAVAIL')
					return false;
				else
					$condition .=  $posStr;
			}
		}
		/*End show the report based on pos mapping*/
		
		if($corporateId > 0)
		{
			$condition .= " AND cd.corporate_id = '".$corporateId."' ";
		}
		
		if($_SemailStatus == "Y")
			$condition .= " AND ud.email_verification_status = 'Y' ";
		if($_SapprovedStatus == "Y")
		{
			$condition .= "AND cd.corporate_status = 'Y' AND ud.approved_status = 'Y'";
		}
			
		if($showAirlineUser=="N")
			$condition .= " AND cd.corporate_type_id NOT IN (2) ";
		elseif($showAirlineUser=="Y")
			$condition .= " AND cd.corporate_type_id=2 ";
		else
			$condition .="";
			
		$sql = "SELECT DISTINCT
					ud.user_id,
					cd.corporate_id AS corporate_id,
					concat(".encrypt::_decrypt('ud.first_name').",' ',".encrypt::_decrypt('ud.last_name').") AS user_name,
					".encrypt::_decrypt('ud.email_id')." AS email_id,
					".encrypt::_decrypt('cd.corporate_name')." AS corporate_name
				FROM
					".$CFG['db']['tbl']['user_details']." ud
				INNER JOIN
					".$CFG['db']['tbl']['corporate_details']." cd
				ON
					ud.corporate_id = cd.corporate_id
				WHERE
					1
					".$condition."
				ORDER BY
					".encrypt::_decrypt('ud.email_id')." ASC";
		return $this->_executeQuery($sql);
	}


	    /*
     * Function name : _getUserIdOnly
     * Description   : This function will return array of user id which have mapped in pos mapping
     * Param         :(Int,String,Int,Char)($userId,$pos,$corporateId,$showAirlineUser)
     * Return        : condition string apply 
     * Modified by   : kathirvelu.B
     * Modified date : 18-10-2022
     */

	   public function _getUserIdOnly($userId='',$pos='',$corporateId=0,$showAirlineUser="N",$_SemailStatus="Y",$_SapprovedStatus="Y")
	{
		
		global $CFG;
		$userId = ($userId) ? $userId : $_SESSION['groupRM']['groupUserId'];
		$condition = "";
		$sql="";
		/*Start show the report based on pos mapping only for non airline users*/
		if($showAirlineUser=="N")
		{
			if($pos!='')
				$condition .= " AND IF(ud.group_id != 4 OR (".encrypt::_decrypt('cd.pos_code'). "!= NULL OR ".encrypt::_decrypt('cd.pos_code'). " !='') ,".encrypt::_decrypt('cd.pos_code').",(select cm.pos_code from ".$CFG['db']['tbl']['city_master']." cm where cm.city_id = ud.city_id limit 1)) ='".$pos."'";
			else
			{
				fileRequire("classes/class.groupDetailsAccess.php");
				$this->_OgroupDetailsAccess = new groupDetailsAccess;
				$this->_OgroupDetailsAccess->_Oconnection = $this->_Oconnection;
				$posStr = $this->_OgroupDetailsAccess->_getSqlPosMappedUser();
				if($posStr == 'NOTAVAIL')
					return false;
				else
					$condition .=  $posStr;
			}
		}
		/*End show the report based on pos mapping*/
		
		if($corporateId > 0)
		{
			$condition .= " AND cd.corporate_id = '".$corporateId."' ";
		}
		
		if($_SemailStatus == "Y")
			$condition .= " AND ud.email_verification_status = 'Y' ";
		if($_SapprovedStatus == "Y")
		{
			$condition .= "AND cd.corporate_status = 'Y' AND ud.approved_status = 'Y'";
		}
			
		if($showAirlineUser=="N")
			$condition .= " AND cd.corporate_type_id NOT IN (2) ";
		elseif($showAirlineUser=="Y")
			$condition .= " AND cd.corporate_type_id=2 ";
		else
			$condition .="";

		$sql= " ud.corporate_id = cd.corporate_id  $condition";

		return $sql;		
	}

	function _getBlockedPassengerCount($inputArray,$conditionStatus='Y')
	{
		global $CFG;
		$returnValue=0;
		$condition="";
		if($conditionStatus == 'Y')
		{		
			$condition .=" AND rafd.airline_code='".$inputArray['airlineCode']."'
							AND rafd.flight_code='".$inputArray['flightCode']."'
							AND rafd.arrival_date='".$inputArray['arrivalDate']."'
							AND rafd.arr_time='".$inputArray['arrivalTime']."'
							AND rafd.dep_time='".$inputArray['departureTime']."'";
		}
		$sqlSelectBlockedPaxCount="SELECT
							rafd.no_of_adult,
							rafd.no_of_child
					   FROM
							".$CFG['db']['tbl']['airlines_request_mapping']." arm,
							".$CFG['db']['tbl']['request_approved_flight_details']." rafd,
							".$CFG['db']['tbl']['pnr_blocking_details']." pbd
					   WHERE
							arm.airlines_request_id=rafd.airlines_request_id
							AND pbd.request_approved_flight_id = rafd.request_approved_flight_id
							AND arm.current_status IN (5,9)
							AND rafd.flight_number='".$inputArray['flightNumber']."'
							AND rafd.source='".$inputArray['source']."'
							AND rafd.destination='".$inputArray['destination']."'
							AND rafd.departure_date='".$inputArray['departureDate']."'
							AND rafd.accepted_flight_status='Y'".$condition;
		if(DB::isError($resultSelectBlockedPaxCount = $this->_Oconnection->query($sqlSelectBlockedPaxCount))) 
		{
			fileWrite($sqlSelectBlockedPaxCount,"SqlError","a+");
			return false;
		}

		if($resultSelectBlockedPaxCount->numRows() > 0)
		{
			while($rowSelectBlockedPaxCount=$resultSelectBlockedPaxCount->fetchRow(DB_FETCHMODE_ASSOC))
			{
				 $returnValue += ($rowSelectBlockedPaxCount['no_of_adult']+$rowSelectBlockedPaxCount['no_of_child']);
			}
		}
		return $returnValue;
	}

	function _getTotalFareOverRideAmountProcess($requestMasterId)
	{
		global $CFG;

		$totalBaseFareAmount=0;
		$totalBaseFareArray=array();

		$sqlSelectAirlinesRequestId="SELECT
							airlines_request_id
					     FROM
							".$CFG['db']['tbl']['airlines_request_mapping']."
					     WHERE
							request_master_id='".$requestMasterId."'";

		if(DB::isError($resultSelectAirlinesRequestId=$this->_Oconnection->query($sqlSelectAirlinesRequestId)))
		{
			fileWrite($sqlSelectAirlinesRequestId,"SqlError","a+");
			return false;
		}
	
		if($resultSelectAirlinesRequestId->numRows() >0)
		{
			$rowSelectAirlinesRequestId=$resultSelectAirlinesRequestId->fetchRow(DB_FETCHMODE_ASSOC);

			$airlinesRequestId=$rowSelectAirlinesRequestId['airlines_request_id'];

			$sqlSelectTransactionMasterId="SELECT
								transaction_id
						       FROM
								".$CFG['db']['tbl']['transaction_master']."
						       WHERE
								airlines_request_id='".$airlinesRequestId."'
								ORDER BY transaction_id DESC limit 1";

			if(DB::isError($resultSelectTransactionMasterId=$this->_Oconnection->query($sqlSelectTransactionMasterId)))
			{
				fileWrite($sqlSelectTransactionMasterId,"SqlError","a+");
				return false;
			}
	
			if($resultSelectTransactionMasterId->numRows() >0)
			{
				$rowSelectTransactionMasterId=$resultSelectTransactionMasterId->fetchRow(DB_FETCHMODE_ASSOC);
				$transactionMasterId=$rowSelectTransactionMasterId['transaction_id'];
			
				$sqlSelectRequestApprovedFlightDetails="SELECT
										request_approved_flight_id,
										base_fare
									FROM
										".$CFG['db']['tbl']['request_approved_flight_details']."
									WHERE
										airlines_request_id='".$airlinesRequestId."' AND 
										transaction_master_id='".$transactionMasterId."' AND 
										accepted_flight_status='Y'
									ORDER BY
										request_approved_flight_id";

				
				if(DB::isError($resultSelectRequestApprovedFlightDetails=$this->_Oconnection->query($sqlSelectRequestApprovedFlightDetails)))
				{
					fileWrite($sqlSelectRequestApprovedFlightDetails,"SqlError","a+");
					return false;
				}
	
				if($resultSelectRequestApprovedFlightDetails->numRows() >0)
				{
					while($rowSelectRequestApprovedFlightDetails=$resultSelectRequestApprovedFlightDetails->fetchRow(DB_FETCHMODE_ASSOC))
					{
						$totalBaseFareAmount +=$rowSelectRequestApprovedFlightDetails['base_fare'];

						$baseFareValue=$rowSelectRequestApprovedFlightDetails['base_fare'];

						$sqlSelectFlightCabinMapping="SELECT
											flight_cabin_mapping_id,
											adult_connection_adjustment				
									      FROM
											".$CFG['db']['tbl']['flight_cabin_mapping_details']."
									      WHERE
											request_approved_flight_id='".$rowSelectRequestApprovedFlightDetails['request_approved_flight_id']."'
											AND adult_base_fare!=0
											ORDER BY flight_cabin_mapping_id LIMIT 1";

						if(DB::isError($resultSelectFlightCabinMapping=$this->_Oconnection->query($sqlSelectFlightCabinMapping)))
						{
							fileWrite($sqlSelectFlightCabinMapping,"SqlError","a+");
							return false;
						}

						if($resultSelectFlightCabinMapping->numRows() >0)
						{
							$rowSelectFlightCabinMapping=$resultSelectFlightCabinMapping->fetchRow(DB_FETCHMODE_ASSOC);
							$baseFareValue+=$rowSelectFlightCabinMapping['adult_connection_adjustment'];									$totalBaseFareAmount +=$rowSelectFlightCabinMapping['adult_connection_adjustment'];
						}
									
						$totalBaseFareArray[]=$baseFareValue;
					}
				
				}
			}
		}
return $totalBaseFareArray;
		return $totalBaseFareAmount;
	}

	function _getPNR($IrequestMasterId){
            
		global $CFG;

		if($IrequestMasterId == 0 || $IrequestMasterId == '')
			return false;
		$_SarrayFlag="N";
		if(is_array($IrequestMasterId)){
			$_SarrayFlag="Y";
			$IrequestMasterId = implode(",", $IrequestMasterId);	
		}
		/*
		$sql="SELECT DISTINCT pnr
				FROM ".$CFG['db']['tbl']['request_details']."
				WHERE request_master_id =".$IrequestMasterId;
				*/
		/*$sql="SELECT DISTINCT pnr
				FROM ".$CFG['db']['tbl']['pnr_blocking_details']."
				WHERE  UPPER(status) != 'PENDING'
					AND request_master_id =".$IrequestMasterId;*/
		$sql="SELECT pnr,request_master_id
				FROM ".$CFG['db']['tbl']['pnr_blocking_details']."
				WHERE  request_master_id IN (".$IrequestMasterId.") GROUP BY request_master_id";
			if(DB::isError($pnr=$this->_Oconnection->query($sql)))
			{
				fileWrite($sql,"SqlError","a+");
				return false;
			}
			
			if($pnr->numRows() >0)
			{
				while($pnrRow=$pnr->fetchRow(DB_FETCHMODE_ASSOC))
				{
	                $pnrDetails[$pnrRow['request_master_id']] = $pnrRow['pnr'];
	            }
	            if($_SarrayFlag=="N")
	            	return $pnrDetails[$IrequestMasterId];
	            else			
	            	return $pnrDetails;
			}
			
			return false;
	}
	
	function _getEmailSetting()
	{
		global $CFG;
		//Modified by Ganesan.S on 05-04-2018, it orders the email setting options.
		
		$fetchSaleSql="SELECT  
						  email_setting_id,
						  email_type,
						  setting_status,
						  display_status,
						  display_order
					   FROM 
						  ".$CFG['db']['tbl']['email_setting']." 
					   WHERE 
						  display_status='Y' ORDER BY display_order ASC";
							   
	   	if(DB::isError($result=$this->_Oconnection->query($fetchSaleSql)))
		{
			fileWrite($fetchSaleSql,'SqlError','a+');
			return false;
		}
		if($result->numRows()>0)
		{
			$count=0;
			while($row = $result->fetchRow(DB_FETCHMODE_ASSOC))
			{
				$resultArray[$count] =  $row;
				$resultArray[$count]['email_type']=$this->_Osmarty->getConfigVars('COMMON_EMAIL_SETTING_'.strtoupper($row['email_setting_id']));
				$resultArray[$count]['checkedStatus'] =  "checked";
				$resultArray[$count]['language'] =  "en";
				$count++;
			}
		}
		return $resultArray;
	}
	
	
	function _getUserEmailMapping($userId,$settingId=0)
	{
		global $CFG;
		$cond="";
		if($settingId>0)
			$cond="em.email_setting_id=".$settingId." AND ";
		$emailSql="SELECT
					uem.user_email_mapping_id,
					uem.email_setting_id,
					uem.user_id,
					uem.language,
					uem.email_status,
					em.email_type
			    FROM
					".$CFG['db']['tbl']['email_setting']." em,
					".$CFG['db']['tbl']['user_email_mapping']." uem
			    WHERE 
					uem.user_id='".$userId."' AND 
					uem.email_setting_id=em.email_setting_id AND
					".$cond."
					em.display_status='Y' order by email_setting_id" ;
		return $this->_executeQuery($emailSql);
	}
	
	
	function _getUserEmailSetting($userId,$emailSettingId,$defaultSetting)
	{
		global $CFG;
                //To call object security class for using security functions
                $objSecurity=new systemSetup();
		
		$corporateEmailSql="SELECT
								ud.user_id,
								cd.corporate_id
							FROM
								".$CFG['db']['tbl']['user_details']." ud,
								".$CFG['db']['tbl']['corporate_details']." cd
							WHERE
								ud.email_verification_status='Y' AND
								ud.approved_status='Y' AND
								cd.corporate_status='Y' AND
								ud.corporate_id=cd.corporate_id AND
								ud.user_id='".$userId."'";
							
		if(DB::isError($resultCorporateEmail=$this->_Oconnection->query($corporateEmailSql)))
		{
			fileWrite($corporateEmailSql,'SqlError','a+');
			return false;
		}
	
		if($resultCorporateEmail->numRows()==0)
		{
			$this->objLangSmarty = $this->_Osmarty;
                        $this->objLangSmarty->assign('objSecurity',$objSecurity); 
			//agency top seperate agent process
			if(in_array($CFG['default']['airlineCode'],$CFG['site']['agencyTopUpAccess']))
			{
				if($defaultSetting=="forgotPwdUser")
				{
            	
	        		fileRequire("classes/class.getUserDetailsService.php");
				$this->_OgetUserDetailsService = new getUserDetailsService();
				$this->_OgetUserDetailsService->_Oconnection = $this->_Oconnection;
				//checking the user is having the agency top access or not
				if(!$this->_OgetUserDetailsService->_getAgencyTopUpAccess($userId))
					return false;
	        	}
	        	else 
	        		return false;	
		}
		else         
			return false;
		}
		$userEmailSql="SELECT
					uem.user_email_mapping_id,
					uem.email_setting_id,
					uem.user_id,
					uem.language,
					uem.email_status,
					em.email_type
			    FROM
					".$CFG['db']['tbl']['email_setting']." em,
					".$CFG['db']['tbl']['user_email_mapping']." uem
			    WHERE 
					uem.user_id='".$userId."' AND 
					uem.email_setting_id=em.email_setting_id AND 
					em.email_setting_id='".$emailSettingId."'";
					
		if(DB::isError($resultUserEmail=$this->_Oconnection->query($userEmailSql)))
		{
			fileWrite($userEmailSql,'SqlError','a+');
			return false;
		}
		
		if($resultUserEmail->numRows()>0)
		{
			$rowUserEmail = $resultUserEmail->fetchRow(DB_FETCHMODE_ASSOC);
			if($rowUserEmail['email_status']=='Y' || ($CFG['email']['mailAirlineGroupsOnly']=='Y' && $rowUserEmail['email_status']=='N'))
			{
				// To get the user id whose email status is disabled
				if($rowUserEmail['email_status'] == 'N')
				{
					$this->_IinactiveUser = $rowUserEmail['user_id'];
				}
				else if($rowUserEmail['email_status'] == 'Y')
				{
					$this->_IinactiveUser = '';
				}
				$this->_changeLangugeConfig($rowUserEmail['language']);
				return true;
			}
			return false;
		}
		else
		{
			#Displaying the mail content for uploaded agents also in resend mail interface
			$this->objLangSmarty = $this->_Osmarty;
			if($CFG['sendEmail'][$defaultSetting]==0)
				$this->_IinactiveUser = $userId;
			$this->objLangSmarty->assign('objSecurity',$objSecurity);
			if($CFG['email']['mailAirlineGroupsOnly']=='Y')
				return true;
			else
				return $CFG['sendEmail'][$defaultSetting];
		}
	}
	
	/****
	*Author  	:A.kaviyarasan
	*Created on :24-12-2018
	*Description:Converted as function from the root function _getUserEmailSetting for reusablity by passing the language code  for changing the config variable.
	*Return value:null
	*****/
    function _changeLangugeConfig($_Slang='',$_OobjSecurity='')
	{
		global $CFG;
		//checking the obj security object and creating it
		if($_OobjSecurity=='')
			$_OobjSecurity= new systemSetup();
			
		if($_Slang!='')
		{
			//forming the file path from the argument
			$languageDir=$_Slang."_language/";
			//initializing the smarty and clearing the config                   
			$this->objLangSmarty= smartyCall();
			$this->objLangSmarty->clearConfig();
			$this->objLangSmarty->configLoad($CFG['path']['basePath'].'language/'.$languageDir.$_Slang."_common.conf");
			$this->objLangSmarty->assign('objSecurity',$_OobjSecurity); 
			/*To load language in Plugin folder*/
			if(is_dir($CFG['path']['basePath'].$CFG['path']['pluginBasePath'].'language/'.$languageDir))
			{
				$this->objLangSmarty->configLoad($CFG['path']['basePath'].$CFG['path']['pluginBasePath'].'language/'.$languageDir.$_Slang."_airline_common.conf"); 			
			}
		}
	}

	function _setGroupResizeValues($requestMasterId)
	{
		global $CFG;

		$currentDate=$this->_getUTCDateValue();

		$groupResizeArray=array();
		$groupResizeArray['groupResize']="Y";
		$groupResizeArray['groupResizeExists']="N";
		$groupResizeArray['groupResizeMsg']="Raise";

		/* Number of passenger fetching */

		$sqlNumberOfPassengers="SELECT
						number_of_passenger
				     	FROM
						".$CFG['db']['tbl']['request_master']."
				     	WHERE
						request_master_id='".$requestMasterId."'";

		if(DB::isError($resultNumberOfPassengers=$this->_Oconnection->query($sqlNumberOfPassengers)))
		{
			fileWrite($sqlNumberOfPassengers,"SqlError","a+");
			return false;
		}

		if($resultNumberOfPassengers->numRows() > 0)
		{
			$rowNumberOfPassengers=$resultNumberOfPassengers->fetchRow(DB_FETCHMODE_ASSOC);
			$noOfPassengers=$rowNumberOfPassengers['number_of_passenger'];
		}


		/* Airlines request id fetching */

		$sqlSelectAirlinesRequestId="SELECT
							airlines_request_id
					     FROM
							".$CFG['db']['tbl']['airlines_request_mapping']."
					     WHERE
							request_master_id='".$requestMasterId."'";

		if(DB::isError($resultSelectAirlinesRequestId=$this->_Oconnection->query($sqlSelectAirlinesRequestId)))
		{
			fileWrite($sqlSelectAirlinesRequestId,"SqlError","a+");
			return false;
		}

		if($resultSelectAirlinesRequestId->numRows() > 0)
		{
			$rowSelectAirlinesRequestId=$resultSelectAirlinesRequestId->fetchRow(DB_FETCHMODE_ASSOC);
			$airlinesRequestId=$rowSelectAirlinesRequestId['airlines_request_id'];
		}


		if($groupResizeArray['groupResize']=="Y")
		{
			/* Days to departure checking */

			$depatureDate=$this->_getDepartureDate($requestMasterId);

			if(strtotime($depatureDate) < strtotime($currentDate))
			{
				$groupResizeArray['groupResize']="N";
				$groupResizeArray['groupResizeMsg']="Days to departure is expire";
			}
		}

		if($groupResizeArray['groupResize']=="Y")
		{
			/* Fare expiry date checking */

			$sqlSelectFareExpiryDate="SELECT 
								IF(sum(tms.fare_expiry_date) IS NULL,UTC_TIMESTAMP,tms.fare_expiry_date) as fareExpiryDate 
						  FROM 
								".$CFG['db']['tbl']['transaction_master']."  tms,
								".$CFG['db']['tbl']['airlines_request_mapping']." arms 
						  WHERE 
								tms.airlines_request_id='".$airlinesRequestId."'
								AND arms.airlines_request_id=tms.airlines_request_id
								AND arms.current_status IN(3) 
								ORDER BY transaction_id DESC LIMIT 1 ";

			if(DB::isError($resultSelectFareExpiryDate=$this->_Oconnection->query($sqlSelectFareExpiryDate)))
			{
				fileWrite($sqlSelectFareExpiryDate,"SqlError","a+");
				return false;
			}
			if($resultSelectFareExpiryDate->numRows() > 0)
			{
				$rowSelectFareExpiryDate=$resultSelectFareExpiryDate->fetchRow(DB_FETCHMODE_ASSOC);
				$fareExpiryDate=$rowSelectFareExpiryDate['fareExpiryDate'];

				if(strtotime($fareExpiryDate) < strtotime($currentDate))
				{
					$groupResizeArray['groupResize']="N";
					$groupResizeArray['groupResizeMsg']="Fare validity expires";
				}
			}
		}

		if($groupResizeArray['groupResize']=="Y")
		{
			/* Payment checking */
			$percentageValue=100;
			$sqlSelectPaymentPercentage="SELECT 
								IF(sum(payment_percentage) IS NULL,0,sum(payment_percentage)) as paymentPercentageSum 
						     FROM 
								".$CFG['db']['tbl']['payment_master']." 
						     WHERE 
								airlines_request_id='".$airlinesRequestId."'
								AND payment_status in(10,12)";

			if(DB::isError($resultSelectPaymentPercentage=$this->_Oconnection->query($sqlSelectPaymentPercentage)))
			{
				fileWrite($sqlSelectPaymentPercentage,"SqlError","a+");
				return false;
			}
			if($resultSelectPaymentPercentage->numRows() > 0)
			{
				$rowSelectPaymentPercentage=$resultSelectPaymentPercentage->fetchRow(DB_FETCHMODE_ASSOC);
				$paymentPercentage=$rowSelectPaymentPercentage['paymentPercentageSum'];

				if($paymentPercentage >= $percentageValue)
				{
					$groupResizeArray['groupResize']="N";
					$groupResizeArray['groupResizeMsg']="Payment completed";
				}
			}

		}

		if($groupResizeArray['groupResize']=="Y")
		{
			/* Number of submitted passengers checking */
			$_SremoveDummyRows='';
			//For not considering dummy rows
			if($CFG['nameUpdate']['insertDummyRowsForSeatSelection']=='Y' || $CFG['site']['doubleBilling']['status'] == 'Y')
				$_SremoveDummyRows = " AND additional_details NOT LIKE '%insertedDummyRow\":\"Y%'";
			$sqlSelectSubmitedPasseger="SELECT
								count(passenger_id) as submittedPassengers 
						    FROM 
								".$CFG['db']['tbl']['passenger_details']." 
						    WHERE 
								airlines_request_id='".$airlinesRequestId."'".$_SremoveDummyRows;

			if(DB::isError($resultSelectSubmitedPasseger=$this->_Oconnection->query($sqlSelectSubmitedPasseger)))
			{
				fileWrite($sqlSelectSubmitedPasseger,"SqlError","a+");
				return false;
			}
			if($resultSelectSubmitedPasseger->numRows() > 0)
			{
				$rowSelectSubmitedPasseger=$resultSelectSubmitedPasseger->fetchRow(DB_FETCHMODE_ASSOC);
				$submitedPaxCount=$rowSelectSubmitedPasseger['submittedPassengers'];

				if($submitedPaxCount >= $noOfPassengers)
				{
					$groupResizeArray['groupResize']="N";
					$groupResizeArray['groupResizeMsg']="Passengers already submiited";
				}
			}

		}

		if($groupResizeArray['groupResize']=="Y")
		{
			/* Group resize request checking */

			$sqlSelectCheck="SELECT
						groupchange_request_id,
						current_no_of_adult,
						current_no_of_child,
						current_no_of_infant,
						requested_no_of_adult,
						requested_no_of_child,
						requested_no_of_infant,
						approved_no_of_adult,
						approved_no_of_child,
						approved_no_of_infant,
						request_status
					 FROM
						".$CFG['db']['tbl']['groupchange_request_details']."
					 WHERE
						request_master_id='".$requestMasterId."'
						AND request_status='P'";

			if(DB::isError($resultSelectCheck=$this->_Oconnection->query($sqlSelectCheck)))
			{
				fileWrite($sqlSelectCheck,"SqlError","a+");
				return false;
			}

			if($resultSelectCheck->numRows() > 0)
			{
				$groupResizeArray['groupResize']="N";
				$groupResizeArray['groupResizeExists']="Y";
				$groupResizeArray['groupResizeMsg']="Group resize already requested";
			}
		}

		return $groupResizeArray;
	}

	function _getTimeZoneForCountry($_ScountryCode)
	{
		global $CFG;
		/**
		 * Check data present in static array or not
		**/
		$_AstaticData = $this->_staticData("_getTimeZoneForCountry",$_ScountryCode);
		if($_AstaticData !== false)
			return $_AstaticData;
		
		$_AreturnData=array();
		$_AreturnData = $this->_displayTimeZoneSelect($_ScountryCode);
		/**
		 * Before returning the data assign it to static for further use
		**/
		$this->_staticData("_getTimeZoneForCountry",$_ScountryCode,$_AreturnData);
		return $_AreturnData;
	}
	
	function _isDomestic($IrequestMasterId,$requestDetailsId=0){

		global $CFG;
		
		if($IrequestMasterId == 0 || $IrequestMasterId == '')
			return -1;
	
		$_Svariable = $IrequestMasterId."_".$requestDetailsId;
		$_AstaticData = $this->_staticData("_isDomestic",$_Svariable);
		if($_AstaticData !== false)
			return $_AstaticData;
			
	   /**
		* Modified By : Subalakshmi S 05.10.2018
		* To check whether the request is modified or not
		**/	
		$_AmodifiedRequestDetails = $this->_checkIsModify($IrequestMasterId);
		if($_AmodifiedRequestDetails['requestModifyStatus'] == 'Y')
		{
			$_SrequiredCondition = " request_master_history_id = ".$_AmodifiedRequestDetails['requestMasterHistoryId'];
			$_SrequiredTables = $CFG['db']['tbl']['request_details_history'];
		}
		else
		{
			$_SrequiredCondition = " request_master_id = ".$IrequestMasterId;
			$_SrequiredTables = $CFG['db']['tbl']['request_details'];
		}
			
		$sql = "SELECT 
					origin_airport_code,
					dest_airport_code
				FROM
					".$_SrequiredTables."
				WHERE
					".$_SrequiredCondition;
		if($requestDetailsId>0)
		{
			$sql .= " AND request_id=".$requestDetailsId;
		}
		if(DB::isError($result=$this->_Oconnection->query($sql))) {

				fileWrite($sql,"SqlError","a+");
				return false;
		}
		if($result->numRows() > 0) 
		{
			$airports = array();
			while($row = $result->fetchRow(DB_FETCHMODE_ASSOC)) 
			{
				$airports[] = $row['origin_airport_code'];
				$airports[] = $row['dest_airport_code'];
			}
			$Idomestic = $this->_checkSectorSameCountry($airports);
		}
		$this->_staticData("_isDomestic",$_Svariable,$Idomestic);
		return $Idomestic;
	}
	/*
	 * Description	: To check whether given sectors are same country
	 * Input		: origin and destination index
	 * Return		: travel type (International-0 or domestic-1)
	*/
	function _checkSectorSameCountry($airports){
		global $CFG;	
		$sql = "SELECT
					country_code 
				FROM 
					".$CFG['db']['tbl']['airport_details']."
				WHERE
					airport_code IN ('".implode("','",array_unique($airports))."')
				GROUP BY
					country_code";
		
		if(DB::isError($result=$this->_Oconnection->query($sql)))
		{
			fileWrite($sql,"SqlError","a+");
			return false;
		}
		
		if($result->numRows() > 1)
			return 0;
		else
			return 1;	
	}

	/*
	 * Description	: To travel type (International or domestic) for the given selected flights
	 * Input		: Selected Flight details array, origin and destination index and trip fare config
	 * Return		: travel type (International or domestic)
	*/
	function _getTarvelType($_AsectorDetails,$originIndex,$destinationIndex,$_SbargainFinderFareFlag = 'N',$_SserviceNeed = 'N')
	{
		global $CFG;
		if($_SbargainFinderFareFlag == 'Y')
			return 'I';
		
		$_SinternationalTravelType = 'I';
		$_AtravelType = array();
		$_InumRows = 0;
		if(count($_AsectorDetails) > 0)
		{
			foreach($_AsectorDetails as $_AsectorValue)
			{
				
				$_AstaticData = $this->_staticData('_getTarvelType',$_AsectorValue[$originIndex].'-'.$_AsectorValue[$destinationIndex]);
				if($_AstaticData !== false)
				{
					
					$_InumRows = $_AstaticData['num_rows'];
					$_AairportRecord = $_AstaticData['record'];
				}
				else
				{
					$sql = "SELECT airport_id,country_code
							FROM ".$CFG['db']['tbl']['airport_details']."  
							WHERE airport_code IN('".$_AsectorValue[$originIndex]."','".$_AsectorValue[$destinationIndex]."') GROUP BY country_code";
					
					if(DB::isError($result=$this->_Oconnection->query($sql))) {

							fileWrite($sql,"SqlError","a+");
							return false;
					}
					$_InumRows = $result->numRows();
					$_AairportRecord = $result->fetchRow(DB_FETCHMODE_ASSOC);
					$_Aresult['num_rows'] = $_InumRows;
					$_Aresult['record'] = $_AairportRecord;
					$this->_staticData('_getTarvelType',$_AsectorValue[$originIndex].'-'.$_AsectorValue[$destinationIndex],$_Aresult);
				}
				
				if($CFG["requestForm"]["internationalCheck"]=="ALL")
				{					
					if($_InumRows == 1) 
					{
						if(isset($CFG['processRequest']['homeCountryBasedCheck']) && ($CFG['processRequest']['homeCountryBasedCheck'] == 'Y'))
						{
							if($CFG['site']['defaultCountryCode'] == $_AairportRecord['country_code'])
								$_SinternationalTravelType = 'D';
							else
								$_SinternationalTravelType = 'I';
						}
						else
							$_SinternationalTravelType = 'D';					
					}
				}
				elseif($CFG["requestForm"]["internationalCheck"]=="ANY")
				{
				
					if($_InumRows == 1) 
					{
						if(isset($CFG['processRequest']['homeCountryBasedCheck']) && ($CFG['processRequest']['homeCountryBasedCheck'] == 'Y'))
						{
							if($CFG['site']['defaultCountryCode'] == $_AairportRecord['country_code'])
								$_SinternationalTravelType = 'D';
							else
								$_SinternationalTravelType = 'I';
						}
						else
							$_SinternationalTravelType = 'D';	
					}
					else
					{
						$_SinternationalTravelType = 'I';	
							
					}
				}
				$_AtravelType[$_SinternationalTravelType] = $_SinternationalTravelType;
			}
			
		}
		if(count($_AtravelType) > 1)
			$_SinternationalTravelType = 'ID';
		else
			$_SinternationalTravelType = reset($_AtravelType);
			
		/**
		 * If it is needed for service then only return 'ID' other wise if 'ID' is came then return 'I'
		**/
		if($_SserviceNeed == 'Y')
			return $_SinternationalTravelType;
		else
			return ($_SinternationalTravelType == 'ID') ? 'I' : $_SinternationalTravelType;
		
	}

	function _getSsrTarvelType($originIndex,$destinationIndex)
	{
		global $CFG;
		$_SinternationalTravelType = 'I';
		$_AtravelType = array();
		$_InumRows = 0;
		$_AstaticData = $this->_staticData('_getTarvelType',$originIndex.'-'.$destinationIndex);
		if($_AstaticData !== false)
		{
			
			$_InumRows = $_AstaticData['num_rows'];
			$_AairportRecord = $_AstaticData['record'];
		}
		else
		{
			$sql = "SELECT airport_id,country_code
					FROM ".$CFG['db']['tbl']['airport_details']."  
					WHERE airport_code IN('".$originIndex."','".$destinationIndex."') GROUP BY country_code";
			if(DB::isError($result=$this->_Oconnection->query($sql))) {

					fileWrite($sql,"SqlError","a+");
					return false;
			}
			$_InumRows = $result->numRows();
			$_AairportRecord = $result->fetchRow(DB_FETCHMODE_ASSOC);
			$_Aresult['num_rows'] = $_InumRows;
			$_Aresult['record'] = $_AairportRecord;
			$this->_staticData('_getTarvelType',$originIndex.'-'.$destinationIndex,$_Aresult);
		}
		
		if($CFG["requestForm"]["internationalCheck"]=="ALL")
		{					
			if($_InumRows == 1) 
			{
				if(isset($CFG['processRequest']['homeCountryBasedCheck']) && ($CFG['processRequest']['homeCountryBasedCheck'] == 'Y'))
				{
					if($CFG['site']['defaultCountryCode'] == $_AairportRecord['country_code'])
						$_SinternationalTravelType = 'D';
					else
						$_SinternationalTravelType = 'I';
				}
				else
					$_SinternationalTravelType = 'D';					
			}
			
		}
		elseif($CFG["requestForm"]["internationalCheck"]=="ANY")
		{
		
			if($_InumRows == 1) 
			{
				//if(isset($CFG['processRequest']['homeCountryBasedCheck']) && ($CFG['processRequest']['homeCountryBasedCheck'] == 'Y'))
				{
					if($CFG['site']['defaultCountryCode'] == $_AairportRecord['country_code'])
						$_SinternationalTravelType = 'D';
					else
						$_SinternationalTravelType = 'I';
				}
			}
			else
			{
				$_SinternationalTravelType = 'I';	
					
			}
		}
		$_AtravelType[$_SinternationalTravelType] = $_SinternationalTravelType;
			
			
		if(count($_AtravelType) > 1)
			$_SinternationalTravelType = 'ID';
		else
			$_SinternationalTravelType = reset($_AtravelType);
			
		return ($_SinternationalTravelType == 'ID' || $_SinternationalTravelType == 'I') ? 'I' : $_SinternationalTravelType;
	}
	
	function _getAgentId($userId)
	{
		global $CFG;
		$fetchAgentIdSql="select  
					".encrypt::_decrypt('cd.pcc_code')." AS pcc_code
				from 
					".$CFG['db']['tbl']['corporate_details']." cd,
					".$CFG['db']['tbl']['user_details']." ud 
				WHERE
					ud.user_id=".$userId." AND 
					ud.corporate_id=cd.corporate_id";
		return $this->_executeQuery($fetchAgentIdSql);
								
	}
	
	function _setSiteLanguage()
	{
		global $CFG;
		$languageDir=strtolower($CFG['groupRM']['siteLang']['adminLang'])."_language/";
		$this->objSiteSmarty= smartyCall();
		$this->objSiteSmarty->clearConfig();
                //To call object security class for using security functions
                $objSecurity=new systemSetup();
                $this->objSiteSmarty->assign('objSecurity',$objSecurity); 
		$this->objSiteSmarty->configLoad($CFG['path']['basePath'].'language/'.$languageDir.strtolower($CFG['groupRM']['siteLang']['adminLang'])."_common.conf"); 
		/*To load language in Plugin folder*/
		if(is_dir($CFG['path']['basePath'].$CFG['path']['pluginBasePath'].'language/'.$languageDir))
		{
			$this->objSiteSmarty->configLoad($CFG['path']['basePath'].$CFG['path']['pluginBasePath'].'language/'.$languageDir.strtolower($CFG['groupRM']['siteLang']['adminLang'])."_airline_common.conf"); 			
		}
	}
	
	/*Modified By: Subalakshmi S 27-08-2018
		Desc     : The below lines are commented since it is called in 
		 			class.fetchPolicyDetails.php file*/
		 			
	/*function _fetchCancelPolicyForRequest($requestMasterId,$requestMasterHistory=array())
	{
		global $CFG;

		$requestMasterArray=array();

		$policyFinalArray=array();
        $bookingType='PARENT';       
		$currentDate = $this->_getUTCDateValue();  
		$currentDate = date('Y-m-d',strtotime($currentDate));
        if(count($requestMasterHistory) > 0)
        {
			$sqlSelectRequestDetails="SELECT
											rmh.request_master_id,
											rmh.trip_type,
											rmh.trip_type as tripType,
											rmh.user_currency as currencyType,
											rmh.requested_date,
											rmh.cabin,
											rdh.number_of_adult,
											rdh.number_of_child,
											rdh.number_of_infant,
											(rdh.number_of_adult+rdh.number_of_child) as noOfPax,
											(rdh.number_of_adult+rdh.number_of_child) as number_of_passenger,
											rdh.request_id,
											rdh.origin_airport_code as source,
											rdh.dest_airport_code as destination,
											rdh.flight_number,
											rdh.departure_date as from_date,
											rdh.departure_date as departure_date,
											rmh.group_category_id as groupCategory,
											rm.user_id,
											rm.request_type_id as requestType,
											ud.corporate_id as travelAgency,
											".encrypt::_decrypt('ud.email_id')." as loginId,
											".encrypt::_decrypt('ud.country_code')." as countryCode,
											".encrypt::_decrypt('cd.pos_code')." as pointOfSale,
											cd.corporate_type_id as userType,
											(select min(rdh1.departure_date) from ".$CFG['db']['tbl']['request_details_history']." rdh1 where rmh.request_master_history_id=rdh1.request_master_history_id AND rdh1.departure_date >= '".$currentDate."') as departureDate
									  FROM
											".$CFG['db']['tbl']['request_master_history']." rmh,
											".$CFG['db']['tbl']['request_details_history']." rdh,
											".$CFG['db']['tbl']['request_master']." rm,
											".$CFG['db']['tbl']['user_details']." ud,
											".$CFG['db']['tbl']['corporate_details']." cd
									  WHERE
											rm.request_master_id = rmh.request_master_id
											AND rm.user_id=ud.user_id
											AND cd.corporate_id=ud.corporate_id
											AND rmh.request_master_history_id=rdh.request_master_history_id 
											AND rdh.request_master_history_id = '".$requestMasterHistory['request_master_history_id']."' ".
											" AND rmh.request_master_id='".$requestMasterId."'";

			$sqlSelectRequestDetails=$sqlSelectRequestDetails." ORDER BY rdh.request_details_history_id ASC , rdh.departure_date ASC ";
		}
		else
		{
			$sqlSelectRequestDetails="SELECT
								rm.request_master_id,
								rm.user_id,
								rm.request_type_id as requestType,
								rm.trip_type,
								rm.trip_type as tripType,
								rm.user_currency as currencyType,
								rm.requested_date,
								srd.number_of_passenger,
								srd.number_of_adult,
								srd.number_of_child,
								(srd.number_of_adult+srd.number_of_child) as noOfPax,
								srd.group_category_id as groupCategory,
								rm.number_of_infant,
								rm.reference_request_master_id,
								rd.request_id,
								rd.origin_airport_code as source,
								rd.dest_airport_code as destination,
								rd.flight_number,
								rd.cabin,
								rd.from_date as from_date,
								rd.to_date,
								ud.corporate_id,
								ud.corporate_id as travelAgency,
								".encrypt::_decrypt('ud.email_id')." as loginId,
								".encrypt::_decrypt('ud.country_code')." as countryCode,
								".encrypt::_decrypt('cd.pos_code')." as pointOfSale,
								cd.corporate_type_id as userType,
								srd.group_category_id as groupCategory,
								(select min(srd1.departure_date) from ".$CFG['db']['tbl']['series_request_details']." srd1 where rd.request_id=srd1.request_id AND srd1.departure_date >= '".$currentDate."') as departureDate
						  FROM
								".$CFG['db']['tbl']['request_master']." rm,
								".$CFG['db']['tbl']['request_details']." rd,
								".$CFG['db']['tbl']['series_request_details']." srd,
								".$CFG['db']['tbl']['user_details']." ud,
								".$CFG['db']['tbl']['corporate_details']." cd
						  WHERE
								rm.request_master_id=rd.request_master_id
								AND rd.request_id=srd.request_id
								AND rm.user_id=ud.user_id
								AND cd.corporate_id=ud.corporate_id
								AND rm.request_master_id='".$requestMasterId."'";
			$sqlSelectRequestDetails=$sqlSelectRequestDetails." ORDER BY rd.from_date ASC ";
		}
		if(DB::isError($resultSelectRequestDetails=$this->_Oconnection->query($sqlSelectRequestDetails)))
		{
			fileWrite($sqlSelectRequestDetails,"SqlError","a+");
			return false;
		}
		if($resultSelectRequestDetails->numRows() > 0)
		{
			while($rowSelectRequestDetails=$resultSelectRequestDetails->fetchRow(DB_FETCHMODE_ASSOC))
			{
				if($rowSelectRequestDetails['departureDate'] == '')
				{
					$rowSelectRequestDetails['departureDate'] = $rowSelectRequestDetails['from_date'];
				}
								
				if($rowSelectRequestDetails['tripType']==1)
					$rowSelectRequestDetails['tripType']="O";
				elseif($rowSelectRequestDetails['tripType']==2)
					$rowSelectRequestDetails['tripType']="R";
				elseif($rowSelectRequestDetails['tripType']==3)
					$rowSelectRequestDetails['tripType']="M";
				
                                $_IparentRequestMasterid = $this->_getParentRequestMasterId($requestMasterId);    
                                //Applying the  parent policies to child policies if the config enabled
                                if((isset($CFG['site']['applyParentRequestPolicy']) && $CFG['site']['applyParentRequestPolicy'] == 'Y') && (!empty($_IparentRequestMasterid) && $_IparentRequestMasterid !=0 ))
                                { 
                                    $_AseriesRequestId =  $this->_getSeriesRequestId($requestMasterId);
                                    $_IparentPaxCount = $this->_getParentOriginalPaxCount($_AseriesRequestId[0]['series_request_id']);
                                    $rowSelectRequestDetails['noOfPax'] = $_IparentPaxCount;
                                }
                                
				$flightDetailsArray=array();
				if($rowSelectRequestDetails['requestType'] == 2)
				{
					if(isset($_SESSION['groupRM']['airlineCode']) && $_SESSION['groupRM']['airlineCode']!="")
						$flightDetailsArray[0]['airlineCode']=$_SESSION['groupRM']['airlineCode'];
					else
						$flightDetailsArray[0]['airlineCode']="VX";
						$flightDetailsArray[0]['flightNumber']="";
						$rowSelectRequestDetails['stops'] = 0;
				}
				else
				{
					$flightDetails=explode(",",$rowSelectRequestDetails['flight_number']);
					if(count($flightDetails)>0)
					{
						for($i=0;$i<count($flightDetails);$i++)
						{
							$airlineDetail=explode("-",$flightDetails[$i]);
							$flightDetailsArray[$i]['airlineCode']=$airlineDetail[0];
							$flightDetailsArray[$i]['flightNumber']=$airlineDetail[1];
						}
					}
					else
					{
						$airlineDetail=explode("-",$rowSelectRequestDetails['flight_number']);
						$flightDetailsArray[0]['airlineCode']=$airlineDetail[0];
						$flightDetailsArray[0]['flightNumber']=$airlineDetail[1];
					}
					$rowSelectRequestDetails['stops']=count(explode('/',$flightDetailsArray[0]['flightNumber']));
				}
				$rowSelectRequestDetails['flightDetails']=$flightDetailsArray;
				$rowSelectRequestDetails['tripCategory']=$this->_isDomestic($requestMasterId);
                                if($index==0){
					$poo=$rowSelectRequestDetails['source'];
                                    $bookingType =$this->_getBookingTypeOfRequest($rowSelectRequestDetails['pointOfSale'],$rowSelectRequestDetails['reference_request_master_id'],$rowSelectRequestDetails['source']);//Get Booking type of this request ;
                                }
				$rowSelectRequestDetails['pointOfOrigin']=$poo;
                                $rowSelectRequestDetails['bookingType']=$bookingType;
                $rowSelectRequestDetails['countryOfOrigin'] = $this->_getAirportDetails($rowSelectRequestDetails['source'])['country_code'];
                $rowSelectRequestDetails['countryOfDestination'] = $this->_getAirportDetails($rowSelectRequestDetails['destination'])['country_code'];
				$requestMasterArray[]=$rowSelectRequestDetails;
                                $index++;
			}
		}
		if(count($requestMasterArray)>0)
		{
			$sqlSelectCancelPolicyMaster="SELECT
									cancel_policy_matrix_master_id,
									policy_name,
									cancel_policy_id,
									priority,
									policy_dow,
									created_date
							 FROM
									".$CFG['db']['tbl']['cancel_policy_matrix_master']."
							 WHERE
									active_status='Y'
									AND ('".$requestMasterArray[0]['requested_date']."' BETWEEN start_date AND end_date)";
			if(DB::isError($resultCancelPolicyMaster=$this->_Oconnection->query($sqlSelectCancelPolicyMaster)))
			{
				fileWrite($sqlSelectCancelPolicyMaster,"SqlError","a+");
				return false;
			}

			if($resultCancelPolicyMaster->numRows() > 0)
			{
				while($rowCancelPolicyMaster=$resultCancelPolicyMaster->fetchRow(DB_FETCHMODE_ASSOC))
				{
					if($this->_getPolicyDayOfWeekStatus($requestMasterArray[0]['requested_date'],$rowCancelPolicyMaster['policy_dow'])=="Y")
					{
						$policyId=$rowCancelPolicyMaster['cancel_policy_matrix_master_id'];
						$policyName=$rowCancelPolicyMaster['policy_name'];
						$priority=$rowCancelPolicyMaster['priority'];
						$policyMasterValueArray=$rowCancelPolicyMaster;
						$sqlSelectPolicyDetails="SELECT
										cpmd.cancel_policy_matrix_detail_id,
										cpmd.cancel_policy_matrix_master_id,
										cpmd.criteria_id,
										cpmd.loop_value,
										cpcm.criteria_name,
										cpcm.criteria_type,
										cpcm.criteria_logical_id,
										cpmd.operator_id,
										om.operator_name,
										om.logical_value,
										om.operator_type,
										cpmd.policy_value
									 FROM
										".$CFG['db']['tbl']['cancel_policy_matrix_details']." cpmd,
										".$CFG['db']['tbl']['cancel_policy_criteria_master']." cpcm,
										".$CFG['db']['tbl']['operator_master']." om
									 WHERE
										cpmd.cancel_policy_matrix_master_id='".$policyId."'
										AND cpmd.criteria_id=cpcm.criteria_id
										AND cpmd.operator_id=om.operator_id";
 
						if(DB::isError($resultSelectPolicyDetails=$this->_Oconnection->query($sqlSelectPolicyDetails)))
						{
							fileWrite($sqlSelectPolicyDetails,"SqlError","a+");
							return false;
						}

						$countValue=0;
						$policyDetailsArray=array();

						if($resultSelectPolicyDetails->numRows() > 0)
						{
							while($rowSelectPolicyDetails=$resultSelectPolicyDetails->fetchRow(DB_FETCHMODE_ASSOC))
							{

								if($rowSelectPolicyDetails['criteria_logical_id']=="tripType" && $rowSelectPolicyDetails['policy_value']=="R" && $countValue==0)
								{
									$countValue=1;
								}
								$rowSelectPolicyDetails['priority']=$priority;
								$policyDetailsArray[]=$rowSelectPolicyDetails;
							}
						}

						if($countValue==0)
							$countValue=count($requestMasterArray);

						$policyResultsArray=array();
						for($i=0;$i<$countValue;$i++)
						{
							$resultValue=0;
							$stringToExecute="";
							$stringToExecute = $this->_getStringToExecuteForAllPolicy($policyDetailsArray,$requestMasterArray[$i]);
							$indexValue="RMIDVAL".$requestMasterArray[$i]['request_master_id']."_RDIDVAL".$requestMasterArray[$i]['request_id']."_SOURCEVAL".$requestMasterArray[$i]['source']."_DESTINATIONVAL".$requestMasterArray[$i]['destination'];
							if($stringToExecute!="")
							{
								$resultStringToEval="IF( ".$stringToExecute." ){".'$resultValue'."=1;}";
								#fileWrite("REQUEST_MASTER_ID=".$requestMasterArray[$i]['request_master_id']."--REQUEST_ID=".$requestMasterArray[$i]['request_id']."--POLICY_MASTER_ID=".$policyId."--STRING=".$resultStringToEval,"STRING","a+");

								eval($resultStringToEval);

								if($resultValue==1)
								{
									$policyFinalArray[$policyId][$indexValue]=$policyMasterValueArray;
								}
								else
									$policyFinalArray[$policyId][$indexValue]="EMPTY";
							}
							else
							{
								$policyFinalArray[$policyId][$indexValue]="EMPTY";
							}
						}
					}
				}
			}
		}
		
		$finalArray=array();
		foreach($policyFinalArray as $key=>$value)
		{
			foreach($value as $subKey=>$subValue)
			{
				if($subValue!="EMPTY")
					$finalArray[]=$subValue;			
			}
		}
		//Priority order
		
		$finalArrayId=array();
		if(count($finalArray)>0)
		{
			$finalInput=array("inputArray"=>$finalArray,"firstFieldName"=>"priority","firstFieldOrder"=>"ASC","secondFieldName"=>"created_date","secondFieldOrder"=>"ASC");
			$finalArrayVal=$this->_multipleSortFunction($finalInput);
			foreach($finalArrayVal as $key=>$value)
			{
				$finalArrayId[]=$value['cancel_policy_id'];	
			}
		}
		return $finalArrayId;
	}*/
	
	/*Modified By: Subalakshmi S 27-08-2018
		Desc     : The below lines are commented since it is called in 
		 			class.fetchPolicyDetails.php file*/
		 			
	/*function _fetchTimeLineValidityForRequest($requestMasterId,$requestMasterHistory=array())
	{
		global $CFG;

		$returnArray = array();
		$requestMasterArray=array();
		$policyFinalArray=array();
        $bookingType='PARENT';      
		$currentDate = $this->_getUTCDateValue();  
		$currentDate = date('Y-m-d',strtotime($currentDate));
        $depatureDate='';
        if(count($requestMasterHistory) > 0)
        {
			$sqlSelectRequestDetails="SELECT
											rmh.request_master_id,
											rmh.trip_type,
											rmh.trip_type as tripType,
											rmh.user_currency as currencyType,
											rmh.requested_date,
											rmh.cabin,
											rdh.number_of_adult,
											rdh.number_of_child,
											rdh.number_of_infant,
											(rdh.number_of_adult+rdh.number_of_child) as noOfPax,
											(rdh.number_of_adult+rdh.number_of_child) as number_of_passenger,
											rdh.request_id,
											rdh.origin_airport_code as source,
											rdh.dest_airport_code as destination,
											rdh.flight_number,
											rdh.departure_date as from_date,
											rdh.departure_date as departure_date,
											rmh.group_category_id as groupCategory,
											rm.user_id,
											rm.request_type_id as requestType,
											ud.corporate_id as travelAgency,
											".encrypt::_decrypt('ud.email_id')." as loginId,
											".encrypt::_decrypt('ud.country_code')." as countryCode,
											".encrypt::_decrypt('cd.pos_code')." as pointOfSale,
											".encrypt::_decrypt('cd.pcc_code')." as skyAgentId,
											cd.corporate_type_id as userType,
											(select min(rdh1.departure_date) from ".$CFG['db']['tbl']['request_details_history']." rdh1 where rmh.request_master_history_id=rdh1.request_master_history_id AND rdh1.departure_date >= '".$currentDate."') as departureDate
									  FROM
											".$CFG['db']['tbl']['request_master_history']." rmh,
											".$CFG['db']['tbl']['request_details_history']." rdh,
											".$CFG['db']['tbl']['request_master']." rm,
											".$CFG['db']['tbl']['user_details']." ud,
											".$CFG['db']['tbl']['corporate_details']." cd
									  WHERE
											rm.request_master_id = rmh.request_master_id
											AND rm.user_id=ud.user_id
											AND cd.corporate_id=ud.corporate_id
											AND rmh.request_master_history_id=rdh.request_master_history_id 
											AND rdh.request_master_history_id = '".$requestMasterHistory['request_master_history_id']."' ".
											" AND rmh.request_master_id='".$requestMasterId."'";

			$sqlSelectRequestDetails=$sqlSelectRequestDetails." ORDER BY rdh.request_details_history_id ASC , rdh.departure_date ASC ";
		}
		else
		{
			
			$sqlSelectRequestDetails="SELECT
											rm.request_master_id,
											rm.user_id,
											rm.request_type_id as requestType,
											rm.trip_type,
											rm.trip_type as tripType,
											rm.user_currency as currencyType,
											rm.requested_date,
											rm.reference_request_master_id,
											srd.departure_date,
											srd.number_of_passenger,
											srd.number_of_adult,
											srd.number_of_child,
											(srd.number_of_adult+srd.number_of_child) as noOfPax,
											rm.number_of_infant,
											rd.request_id,
											rd.origin_airport_code as source,
											rd.dest_airport_code as destination,
											rd.flight_number,
											rd.cabin,
											rd.from_date as from_date,
											rd.to_date,
											ud.corporate_id as travelAgency,
											".encrypt::_decrypt('ud.email_id')." as loginId,
											".encrypt::_decrypt('ud.country_code')." as countryCode,
											".encrypt::_decrypt('cd.pos_code')." as pointOfSale,
											".encrypt::_decrypt('cd.pcc_code')." as skyAgentId,
											cd.corporate_type_id as userType,
											srd.group_category_id as groupCategory,
											(select min(srd1.departure_date) from ".$CFG['db']['tbl']['series_request_details']." srd1 where rd.request_id=srd1.request_id AND srd1.departure_date >= '".$currentDate."') as departureDate
									  FROM
											".$CFG['db']['tbl']['request_master']." rm,
											".$CFG['db']['tbl']['request_details']." rd,
											".$CFG['db']['tbl']['series_request_details']." srd,
											".$CFG['db']['tbl']['user_details']." ud,
											".$CFG['db']['tbl']['corporate_details']." cd
									  WHERE
											rm.request_master_id=rd.request_master_id
											AND rd.request_id=srd.request_id
											AND rm.user_id=ud.user_id
											AND cd.corporate_id=ud.corporate_id
											AND rm.request_master_id='".$requestMasterId."'";

			$sqlSelectRequestDetails=$sqlSelectRequestDetails." ORDER BY rd.from_date ASC ";
		}
 
		if(DB::isError($resultSelectRequestDetails=$this->_Oconnection->query($sqlSelectRequestDetails)))
		{
			fileWrite($sqlSelectRequestDetails,"SqlError","a+");
			return false;
		}
		if($resultSelectRequestDetails->numRows() > 0)
		{
			$_AdepartureDate = array();
			while($rowSelectRequestDetails=$resultSelectRequestDetails->fetchRow(DB_FETCHMODE_ASSOC))
			{
				if($rowSelectRequestDetails['departureDate'] == '')
				{
					$rowSelectRequestDetails['departureDate'] = $rowSelectRequestDetails['from_date'];
				}
				else
					$rowSelectRequestDetails['departure_date'] = $rowSelectRequestDetails['departureDate'];
				if($index==0)
						$depatureDate=$rowSelectRequestDetails['departure_date'];
				if($rowSelectRequestDetails['tripType']==1)
					$rowSelectRequestDetails['tripType']="O";
				elseif($rowSelectRequestDetails['tripType']==2)
					$rowSelectRequestDetails['tripType']="R";
				elseif($rowSelectRequestDetails['tripType']==3)
					$rowSelectRequestDetails['tripType']="M";
				
				$flightDetailsArray=array();
				if($rowSelectRequestDetails['requestType'] == 2)
				{
					if(isset($_SESSION['groupRM']['airlineCode']) && $_SESSION['groupRM']['airlineCode']!="")
						$flightDetailsArray[0]['airlineCode']=$_SESSION['groupRM']['airlineCode'];
					else
						$flightDetailsArray[0]['airlineCode']="VX";
						$flightDetailsArray[0]['flightNumber']="";
				}
				else
				{
					$flightDetails=array();
					$flightDetails=explode(",",$rowSelectRequestDetails['flight_number']);
					if(count($flightDetails)>0)
					{
						for($i=0;$i<count($flightDetails);$i++)
						{
							$airlineDetail=array();
							$airlineDetail=explode("-",$flightDetails[$i]);
							$flightDetailsArray[$i]['airlineCode']=$airlineDetail[0];
							$flightDetailsArray[$i]['flightNumber']=$airlineDetail[1];
						}
					}
					else
					{
						$airlineDetail=explode("-",$rowSelectRequestDetails['flight_number']);
						$flightDetailsArray[0]['airlineCode']=$airlineDetail[0];
						$flightDetailsArray[0]['flightNumber']=$airlineDetail[1];
					}
				}
                                if($index==0){
					$bookingType = $this->_getBookingTypeOfRequest($rowSelectRequestDetails['pointOfSale'],$rowSelectRequestDetails['reference_request_master_id'],$rowSelectRequestDetails['source']);//Get Booking type of this request
				 	$poo = $rowSelectRequestDetails['source'];
					       }
                                $rowSelectRequestDetails['pointOfOrigin'] = $poo;
					$rowSelectRequestDetails['pointOfDestination'] = $rowSelectRequestDetails['destination'];
				$rowSelectRequestDetails['bookingType']=$bookingType;
				$rowSelectRequestDetails['flightDetails']=$flightDetailsArray;
				$rowSelectRequestDetails['tripCategory']=$this->_isDomestic($requestMasterId);
				
				
				
				array_push($_AdepartureDate,$rowSelectRequestDetails['departure_date']);
				$rowSelectRequestDetails['countryOfOrigin'] = $this->_getAirportDetails($rowSelectRequestDetails['source'])['country_code'];
                $rowSelectRequestDetails['countryOfDestination'] = $this->_getAirportDetails($rowSelectRequestDetails['destination'])['country_code'];
				$requestMasterArray[]=$rowSelectRequestDetails;
                $index++;
			}
		}
		
		$_DminDepartDate = min($_AdepartureDate);
		$_IdateOfDeparture = round(abs(strtotime(date('Y-m-d'))-strtotime($_DminDepartDate))/60/60/24);
		if($CFG["limit"]["travelDateHoursValidation"] < 24 && $_IdateOfDeparture==0)
			$_IdateOfDeparture=1;
		if(count($requestMasterArray)>0)
		{
			$sqlSelectTimeLinePolicyMaster="SELECT
													tlmm.time_line_matrix_master_id,
													tlmm.time_line_matrix_list_id,
(select tlm.fare_validity from ".$CFG['db']['tbl']['time_line_matrix']." tlm where tlm.time_line_matrix_list_id =tlmm.time_line_matrix_list_id AND tlm.days_to_departure <= ".$_IdateOfDeparture." ORDER BY tlm.days_to_departure DESC LIMIT 1)as fareValidity,
(select fvtd.fare_validity_values from ".$CFG['db']['tbl']['time_line_matrix']." tlm,".$CFG['db']['tbl']['fare_validity_type_details']." fvtd where tlm.time_line_matrix_list_id =tlmm.time_line_matrix_list_id AND tlm.fare_type_id =fvtd.fare_validity_type_id AND tlm.days_to_departure <= ".$_IdateOfDeparture." ORDER BY tlm.days_to_departure DESC LIMIT 1)as fareValidityType,
													tlmm.time_line_matrix_list_id,
													tlmm.time_line_policy_name,
													tlmm.priority,
													tlmm.activation_status,
													tlmm.create_date,
													tlmm.policy_dow
											 FROM
													".$CFG['db']['tbl']['time_line_matrix_master']." tlmm
											 WHERE
													tlmm.activation_status='Y'
													AND ('".$requestMasterArray[0]['requested_date']."' BETWEEN tlmm.start_date AND tlmm.end_date)";
								 
			if(DB::isError($resultSelectTimeLinePolicyMaster=$this->_Oconnection->query($sqlSelectTimeLinePolicyMaster)))
			{
				fileWrite($sqlSelectTimeLinePolicyMaster,"SqlError","a+");
				return false;
			}
			if($resultSelectTimeLinePolicyMaster->numRows() > 0)
			{
				while($rowSelectTimeLinePolicyMaster=$resultSelectTimeLinePolicyMaster->fetchRow(DB_FETCHMODE_ASSOC))
				{
					if($this->_getPolicyDayOfWeekStatus($requestMasterArray[0]['requested_date'],$rowSelectTimeLinePolicyMaster['policy_dow'])=="Y")
					{
						
						if($rowSelectTimeLinePolicyMaster['fareValidity']==NULL){
							$rowSelectTimeLinePolicyMaster['fareValidity']=0;
						}
						
						if($rowSelectTimeLinePolicyMaster['fareValidityType']=='week'){
							$rowSelectTimeLinePolicyMaster['fare_value']=($rowSelectTimeLinePolicyMaster['fareValidity']*24*7*60)/60;
						}
						else if($rowSelectTimeLinePolicyMaster['fareValidityType']=='days'){
							$rowSelectTimeLinePolicyMaster['fare_value']=($rowSelectTimeLinePolicyMaster['fareValidity']*24*1*60)/60;
						}
						else if($rowSelectTimeLinePolicyMaster['fareValidityType']=='hour'){
							$rowSelectTimeLinePolicyMaster['fare_value']=($rowSelectTimeLinePolicyMaster['fareValidity']*60)/60;
						}
						else{
							$rowSelectTimeLinePolicyMaster['fare_value']='0'.$rowSelectTimeLinePolicyMaster['fareValidity'];
						}	
						$policyId=$rowSelectTimeLinePolicyMaster['time_line_matrix_master_id'];
						$policyName=$rowSelectTimeLinePolicyMaster['time_line_policy_name'];
						$priority=$rowSelectTimeLinePolicyMaster['priority'];
						$policyMasterValueArray=$rowSelectTimeLinePolicyMaster;
						$sqlSelectPolicyDetails="SELECT
													tlmd.time_line_matrix_details_id,
													tlmd.time_line_matrix_master_id 	,
													tlmd.time_line_matrix_criteria_id AS criteria_id,
													tlmd.operator_id,
													tlmd.policy_value,
													tlmcm.time_line_matrix_criteria_name AS criteria_name,
													tlmcm.time_line_matrix_criteria_type AS criteria_type,
													tlmcm.time_line_matrix_criteria_logical_id AS criteria_logical_id,
													tlmd.loop_value,
													om.operator_name,
													om.logical_value,
													om.operator_type
												 FROM
													".$CFG['db']['tbl']['time_line_matrix_details']." tlmd,
													".$CFG['db']['tbl']['time_line_matrix_criteria_master']." tlmcm,
													".$CFG['db']['tbl']['operator_master']." om
												 WHERE
													tlmd.time_line_matrix_master_id='".$policyId."' AND
													tlmd.time_line_matrix_criteria_id=tlmcm.time_line_matrix_criteria_id AND
													tlmcm.display_status='Y' AND
													tlmd.operator_id=om.operator_id";
							 
						if(DB::isError($resultSelectPolicyDetails=$this->_Oconnection->query($sqlSelectPolicyDetails)))
						{
							fileWrite($sqlSelectPolicyDetails,"SqlError","a+");
							return false;
						}
						$countValue=0;
						$policyDetailsArray=array();

						if($resultSelectPolicyDetails->numRows() > 0)
						{
							while($rowSelectPolicyDetails=$resultSelectPolicyDetails->fetchRow(DB_FETCHMODE_ASSOC))
							{
								if($rowSelectPolicyDetails['criteria_logical_id']=="tripType" && $rowSelectPolicyDetails['policy_value']=="R" && $countValue==0)
								{
									$countValue=1;
								}
                                                                $rowSelectPolicyDetails['bookingType']=$bookingType;
								$policyDetailsArray[]=$rowSelectPolicyDetails;
							}
						}

						if($countValue==0)
							$countValue=count($requestMasterArray);

						$policyResultsArray=array();
						for($i=0;$i<$countValue;$i++)
						{
							$resultValue=0;
							$stringToExecute="";
							$andCondition="";
							
							$stringToExecute = $this->_getStringToExecuteForAllPolicy($policyDetailsArray,$requestMasterArray[$i]);
							if($stringToExecute!="")
							{
								$resultStringToEval="IF( ".$stringToExecute." ){".'$resultValue'."=1;}";
								eval($resultStringToEval);
								if($resultValue==1)
								{
									$policyFinalArray[]=$policyMasterValueArray;
								}
							}
						}
					}
				}
			}
		}
		
		$finalArray=array();
		$resultArray=array();
		//Priority for the policy
		
		if(count($policyFinalArray) > 0)
		{
			#$finalArray = $this->_getMultiSort($policyFinalArray,'priority','fare_value');
			
			$finalInput=array("inputArray"=>$policyFinalArray,"firstFieldName"=>"priority","firstFieldOrder"=>"ASC","secondFieldName"=>"create_date","secondFieldOrder"=>"ASC");
			$finalArray=$this->_multipleSortFunction($finalInput);
			$resultArray[]=$finalArray[0];
			/*$_ApriorityArray = array();
			
			foreach($finalArray AS $_AfinalResult)
			{
				$_ApriorityArray[$_AfinalResult['priority']][] = $_AfinalResult;
			}
			/*foreach($_ApriorityArray AS $_Apriority){
				$resultArray = array_merge($resultArray,array_reverse($_Apriority));
			}*/
			
			/*This is for validity min and max value to be applied
			 * 
			 * foreach($_ApriorityArray AS $_Apriority){
				
				if($CFG['timeLinePolicy']['fareValidity']=='HIGH'){			
				$resultArray = array_merge($resultArray,array_reverse($_Apriority));}
				if($CFG['timeLinePolicy']['fareValidity']=='LOW') {
				$resultArray = array_merge($resultArray,$_Apriority);}
			
			}
			
			/*$minValue=0;
			for($i=0;$i<count($policyFinalArray);$i++)
			{
				if($minValue==0 || $policyFinalArray[$i]['priority']<=$minValue)
				{
					$minValue=$policyFinalArray[$i]['priority'];
				}
			}
			$minIndex="";
			$appendString="";
			for($i=0;$i<count($policyFinalArray);$i++)
			{
				if($minValue==$policyFinalArray[$i]['priority'])
				{
					$minIndex.=$appendString.$i;
					$appendString=",";
				}
			}

			if($minIndex!="")
			{
				$fetchFareTypeForPolicyArray=array();
				$explodeArray=explode(",",$minIndex);
				for($i=0;$i<count($explodeArray);$i++)
				{
					$finalArray[$i]=$policyFinalArray[$explodeArray[$i]];
				}
			}*/
		/*}
		
		
		//Default time line
		$sqlTimeLineDefault = "SELECT 
									time_line_matrix_list_id,
									time_line_matrix_name,
									activation_status,
									create_date
								FROM
									".$CFG['db']['tbl']['time_line_matrix_list']."
								WHERE
									activation_status = 'Y' AND
									default_status = 'Y'";
		$_AdefaultArray = $this->_executeQuery($sqlTimeLineDefault);
		if(isset($_AdefaultArray) && !empty($_AdefaultArray))
		{
			$_AdefaultResult['time_line_matrix_master_id'] = 0;
			$_AdefaultResult['time_line_policy_name'] = $_AdefaultArray[0]['time_line_matrix_name'];
			$_AdefaultResult['priority'] = 1;
			$_AdefaultResult['time_line_matrix_list_id'] = $_AdefaultArray[0]['time_line_matrix_list_id'];
			$_AdefaultResult['activation_status'] = $_AdefaultArray[0]['activation_status'];
			$_AdefaultResult['create_date'] = $_AdefaultArray[0]['create_date'];
			array_push($resultArray,$_AdefaultResult);
		}

		foreach($resultArray AS $_AresultArray)
		{
			$sqlTimeLineMatrix = "SELECT
									time_line_id,
									days_to_departure,
									payment_validity,
									payment_type_id,
									(SELECT fare_validity_type FROM fare_validity_type_details WHERE fare_validity_type_id = payment_type_id) payment_type_name,
									passenger_validity,
									passenger_type_id,
									(SELECT fare_validity_type FROM fare_validity_type_details WHERE fare_validity_type_id = passenger_type_id) passenger_type_name,
									fare_validity,
									fare_type_id,
									(SELECT fare_validity_type FROM fare_validity_type_details WHERE fare_validity_type_id = fare_type_id) fare_type_name,
									expiry_type_id,
									payment_expiry_type_id,
									passenger_expiry_type_id,
									payment_percentage,
									payment_in_percent,
									payment_currency,
									materialization,
									policy
								FROM
									".$CFG['db']['tbl']['time_line_matrix']."
								WHERE
									corporate_id = ".$_SESSION['groupRM']['groupCorporateId']." AND
									days_to_departure <= ".$_IdateOfDeparture." AND
									time_line_matrix_list_id = ".$_AresultArray['time_line_matrix_list_id']."
								ORDER BY
									days_to_departure DESC
								LIMIT 1";
			 
			if(DB::isError($resultTimeLineMatrix = $this->_Oconnection->query($sqlTimeLineMatrix))) 
			{
				fileWrite($sqlTimeLineMatrix,'SqlError','a+');
				return FALSE;
			}
			if($resultTimeLineMatrix->numRows()>0)
			{
				$returnArray = $resultTimeLineMatrix->fetchRow(DB_FETCHMODE_ASSOC);
			
				$returnArray['time_line_policy_name'] = $_AresultArray['time_line_policy_name'];
				$returnArray['fare_expiry_type'] = $returnArray['expiry_type_id'];
				$returnArray['payment_expiry_type'] = $returnArray['payment_expiry_type_id'];
				$returnArray['passenger_expiry_type'] = $returnArray['passenger_expiry_type_id'];
				
				$payCount = array();
				fileRequire("dataModels/class.timeLinePaymentDetails.php");
				$this->_OtimeLinePaymentDetails=new timeLinePaymentDetails();
				$this->_OtimeLinePaymentDetails->_Oconnection=$this->_Oconnection;
				$this->_OtimeLinePaymentDetails->_ItimeLineId=$returnArray['time_line_id'];
				$payCount = $this->_OtimeLinePaymentDetails->_selectTimeLinePaymentDetails();
				
				if(count($payCount)>0){
					$paymentArray=array();
					$paymentArray[0]['time_line_id'] = $returnArray['time_line_id'];
					$paymentArray[0]['payment_validity'] = $returnArray['payment_validity'];
					$paymentArray[0]['payment_validity_type'] = $returnArray['payment_type_id'];
					$paymentArray[0]['payment_expiry_type'] = $returnArray['payment_expiry_type_id'];
					$paymentArray[0]['payment_percentage'] = $returnArray['payment_percentage'];
					$returnArray['paymentValidityCount'] = $payCount;	
					$returnArray['paymentRequestDetails']=json_encode(array_merge($paymentArray,$payCount));		
				}
				else{
					$returnArray['paymentRequestDetails']=json_encode($payCount);	
					$returnArray['paymentValidityCount']=0;	
				}
				
				break;
			}
		}
		$returnArray['depatureDate']=$depatureDate;
		return $returnArray;
	}*/
	
	function _getStringToExecuteForAllPolicy($policyDetailsArray,$requestMasterArray,$policyString = "N", $_AomitCriteria=array())
	{
		global $CFG;
	
		$stringToExecute="";
		//To return policy string as array to store in common policy details
		$stringToExecuteArray=array();
		$multiOptionValueArray = array();
		for($j=0;$j<count($policyDetailsArray);$j++)
		{
		
			if(is_array($_AomitCriteria) && in_array($policyDetailsArray[$j]['criteria_logical_id'], $_AomitCriteria))
				continue;
			if(in_array($policyDetailsArray[$j]['criteria_logical_id'],$CFG['site']['multiOptionPolicyField']))
			{
				$multiOptionValueArray[$policyDetailsArray[$j]['criteria_logical_id']][] = $policyDetailsArray[$j];
			}
			if(!in_array($policyDetailsArray[$j]['criteria_logical_id'],$CFG['site']['multiOptionPolicyField']))
			{
				$stringToOptionField='';
				//Prepare string for single value field start
				if(isset($requestMasterArray[$policyDetailsArray[$j]['criteria_logical_id']]))
				{
					if($policyDetailsArray[$j]['criteria_type']=="S")
					{
						if($policyDetailsArray[$j]['criteria_logical_id'] == 'classOfService' && $CFG["policy"]["classOfService"]=='IN')
						{
							$_StempString = '(';
							$_SlastIndex = count($requestMasterArray[$policyDetailsArray[$j]['criteria_logical_id']])-1;
							foreach($requestMasterArray[$policyDetailsArray[$j]['criteria_logical_id']] as $_SfareKey=>$_Sfareclass)
							{
								$_StempString .=$andCondition."( strtoupper('".$_Sfareclass."') ".$policyDetailsArray[$j]['logical_value']." strtoupper('".$policyDetailsArray[$j]['policy_value']."') )";
								if($_SlastIndex!=$_SfareKey)
									$_StempString .= '||';
								if($_SlastIndex==$_SfareKey)
									$_StempString .= ')';
							}
							$stringToOptionField = $_StempString;
						}
						else
							$stringToOptionField=$andCondition."( strtoupper('".$requestMasterArray[$policyDetailsArray[$j]['criteria_logical_id']]."') ".$policyDetailsArray[$j]['logical_value']." strtoupper('".$policyDetailsArray[$j]['policy_value']."') )";
						
					}
					elseif($policyDetailsArray[$j]['criteria_type']=="D" && $policyDetailsArray[$j]['logical_value']=="BTWN")
					{
						$valueArray=explode("@%@",$policyDetailsArray[$j]['policy_value']);
						$stringToOptionField=$andCondition."( strtotime('".$requestMasterArray[$policyDetailsArray[$j]['criteria_logical_id']]."') >= strtotime('".$valueArray[0]."') && strtotime('".$requestMasterArray[$policyDetailsArray[$j]['criteria_logical_id']]."') <= strtotime('".$valueArray[1]."') )";
					}
					elseif($policyDetailsArray[$j]['criteria_type']=="D" && $policyDetailsArray[$j]['logical_value']!="BTWN")
					{
						$stringToOptionField=$andCondition."( strtotime('".$requestMasterArray[$policyDetailsArray[$j]['criteria_logical_id']]."') ".$policyDetailsArray[$j]['logical_value']." strtotime('".$policyDetailsArray[$j]['policy_value']."') )";
					}
					elseif($policyDetailsArray[$j]['criteria_type']=="T" && $policyDetailsArray[$j]['logical_value']=="BTWN")
					{
						$valueArray=explode("@%@",$policyDetailsArray[$j]['policy_value']);
						$stringToOptionField=$andCondition."( strtotime('".$requestMasterArray[$policyDetailsArray[$j]['criteria_logical_id']]."') >= strtotime('".$valueArray[0]."') && strtotime('".$requestMasterArray[$policyDetailsArray[$j]['criteria_logical_id']]."') <= strtotime('".$valueArray[1]."') )";
					}
					elseif($policyDetailsArray[$j]['criteria_type']=="T" && $policyDetailsArray[$j]['logical_value']!="BTWN")
					{
						$stringToOptionField=$andCondition."( strtotime('".$requestMasterArray[$policyDetailsArray[$j]['criteria_logical_id']]."') ".$policyDetailsArray[$j]['logical_value']." strtotime('".$policyDetailsArray[$j]['policy_value']."') )";
					}
					elseif($policyDetailsArray[$j]['criteria_type']=="N" && $policyDetailsArray[$j]['logical_value']=="BTWN")
					{
						$valueArray=explode("@%@",$policyDetailsArray[$j]['policy_value']);
						$stringToOptionField=$andCondition."( ".$requestMasterArray[$policyDetailsArray[$j]['criteria_logical_id']]." >= ".$valueArray[0]." && ".$requestMasterArray[$policyDetailsArray[$j]['criteria_logical_id']]." <= ".$valueArray[1]." )";
					}
					elseif($policyDetailsArray[$j]['criteria_type']=="N" && $policyDetailsArray[$j]['logical_value']!="BTWN")
					{
						$stringToOptionField=$andCondition."( ".$requestMasterArray[$policyDetailsArray[$j]['criteria_logical_id']]." ".$policyDetailsArray[$j]['logical_value']." ".$policyDetailsArray[$j]['policy_value']." )";
					}
					if($stringToOptionField!='')
					{
						if($stringToExecute!='')
							$stringToExecute=$stringToExecute."&&".$stringToOptionField;
						else
							$stringToExecute=$stringToOptionField;
						//To return policy string as array
						if(isset($requestMasterArray['separatePolicyString']) && $requestMasterArray['separatePolicyString']=="Y")
							array_push($stringToExecuteArray,"(".$stringToOptionField.")");
					}
					
					$andCondition=" ";
				}
				//Prepare string for single value field end
			}
		}
			
		//Set pair status and assign pair field
		foreach($CFG['policyPairCriteria'] as $pairKey=> $pairValue)
		{
			
			$pairCount = array();
			foreach($pairValue as $key => $value)
			{
				//Check the criteria field in policy array and push the pair fields into array
				if(isset($multiOptionValueArray[$value]) && !empty($multiOptionValueArray[$value]))
					$pairCount[]= $value;
				else
				{
					//Check the index value in input array if not exists in policy array
					
					if(isset($requestMasterArray[$key]) && !empty($requestMasterArray[$key]))
					{
						if(is_array($value))
						{
							foreach($value as $subValue)
							{
								$pairCount[]=$subValue;
								
								//Assign variable name and value if index value is present for pair fields
								${$subValue.'InputIndex'} = $key;
								${$subValue.'InputArray'} = 'Y';
							}
						}
					}
				}
			}
			//Check both pair fields present in policy array
			/** Modified the pair mapping to set dynamically resulting as array*/
			if(count($pairCount)>1)
			{
				foreach($pairCount as $key => $pairVal)
				{
					${$pairVal.'Pair'} = $pairCount;
					unset(${$pairVal.'Pair'}[$key]);				}
			}
		}
		
		//Check if criteria having mapping array. Eg:; Origin having point of origin
		foreach($CFG['policyInnerMapCriteria'] as $innerKey => $innerValue)
		{
			$innerTempArray = array();
			$innerIndex = 0;
			
			foreach($innerValue as $innerSubKey => $innerSubValue)
			{
				if(isset($multiOptionValueArray[$innerSubValue]) && !empty($multiOptionValueArray[$innerSubValue]))
				{
					${$innerKey.'Map'.$innerIndex} = $innerSubValue;
					${$innerKey.'MappedStatus'} = "Y";
					$innerTempArray[]= $innerSubValue;
					$innerIndex++;
			    }
			}
			${$innerKey.'InnerCount'} = count($innerTempArray);
				
		}
		foreach($multiOptionValueArray as $mainKey => $mainValue)
		{
			$_Bflag = true;
			$policyValueString = "";
			$rowJoinOperator = "";
			//Check if already string prepared for the criteria field
			if(${$mainKey.'StringPrepared'} !='Y')
			{
				//Check if criteria field having index name
				if(${$mainKey.'InputArray'} == "Y")
				{
					
					if(isset($requestMasterArray[${$mainKey.'InputIndex'}][0]))
					{
						$count = count($requestMasterArray[${$mainKey.'InputIndex'}]);
						$orCondition="";
						for($index=0;$index<$count;$index++)
						{
							$policyValueString=$policyValueString.$orCondition."(";
							foreach($mainValue as $subKey => $subValue)
							{
								$policyValue = explode("@%@",$subValue['policy_value']);
								
								/*Modified By : Subalakshmi S 18.12.2018
								 * Prepare the string incase of connecting flights and interline flights*/
								$_AcriteriaLogicalIdIndex = array_column($policyDetailsArray,'criteria_logical_id','criteria_logical_id');
								if(is_array($requestMasterArray[${$mainKey.'InputIndex'}][$index][$subValue['criteria_logical_id']]) && !empty($requestMasterArray[${$mainKey.'InputIndex'}][$index][$subValue['criteria_logical_id']]))
								{
									$_SrequestCriteria = $requestMasterArray[${$mainKey.'InputIndex'}][$index][$subValue['criteria_logical_id']];
									if($subValue['logical_value']=='BTWN' && $subValue['criteria_type'] == "N"){
										$_SpolicyCriteria = $policyValue;
										$_Bflag = false;
									}
									else
										$_SpolicyCriteria = $policyValue[0];
									$_SlogicalValue = $subValue['logical_value'];
									$_SsubString = $this->_prepareSubstringOfPolicy($_SrequestCriteria,$_SpolicyCriteria,$_SlogicalValue);
									$policyValueString=$policyValueString.$rowJoinOperator."(".$_SsubString;
								}

								elseif(in_array($subValue['criteria_logical_id'],$_AcriteriaLogicalIdIndex) && $subValue['logical_value'] == 'BTWN' && $subValue['criteria_type'] == "N")
								{
									$policyValueString=$policyValueString.$rowJoinOperator."(( '".$requestMasterArray[${$mainKey.'InputIndex'}][$index][$subValue['criteria_logical_id']]."' >= '".$policyValue[0]."' && '".$requestMasterArray[${$mainKey.'InputIndex'}][$index][$subValue['criteria_logical_id']]."' <= '".$policyValue[1]."' )";
									$_Bflag = false;
								}
								elseif(in_array($subValue['criteria_logical_id'],$_AcriteriaLogicalIdIndex) && $subValue['logical_value'] != 'BTWN' && $subValue['criteria_type'] == "N"){
									$policyValueString=$policyValueString.$rowJoinOperator."(( '".$requestMasterArray[${$mainKey.'InputIndex'}][$index][$subValue['criteria_logical_id']]."' ".$subValue['logical_value']." '".$policyValue[0]."')";
									$_Bflag = true;
								}
								else
									$policyValueString=$policyValueString.$rowJoinOperator."( strtoupper('".$requestMasterArray[${$mainKey.'InputIndex'}][$index][$subValue['criteria_logical_id']]."') ".$subValue['logical_value']." strtoupper('".$policyValue[0]."') ";

								//Set the pair join operator 
								if(isset($policyValue[2]) && $policyValue[2]!="")
									$rowJoinOperator = $policyValue[2];
								elseif(isset($policyValue[1]) && $policyValue[1]!="" && $_Bflag)
									$rowJoinOperator = $policyValue[1];
								else
									$rowJoinOperator = "&&";
								
								//Looping the paired criteria
								if(isset($multiOptionValueArray[${$mainKey.'Pair'}]))
								{
									$_Bescape = true;
									foreach($multiOptionValueArray[${$mainKey.'Pair'}] as $pairSubKey => $pairSubValue)
									{
										if($subValue['loop_value']==$pairSubValue['loop_value'])
										{
											$pairPolicyValue = explode("@%@",$pairSubValue['policy_value']);
											
											/*Modified By : Subalakshmi S 18.12.2018
											 * Prepare the string incase of connecting flights and interline flights*/
											if(is_array($requestMasterArray[${$mainKey.'InputIndex'}][$index][$pairSubValue['criteria_logical_id']]) && !empty($requestMasterArray[${$mainKey.'InputIndex'}][$index][$pairSubValue['criteria_logical_id']]))
											{
												$_SrequestCriteria = $requestMasterArray[${$mainKey.'InputIndex'}][$index][$pairSubValue['criteria_logical_id']];
												if($pairSubValue['logical_value']=='BTWN' && $pairSubValue['criteria_type'] == 'N'){
													$_SpolicyCriteria = $pairPolicyValue;
													$_Bescape = false;
												}
												else
													$_SpolicyCriteria = $pairPolicyValue[0];
												$_SlogicalValue = $pairSubValue['logical_value'];
												$_SsubString = $this->_prepareSubstringOfPolicy($_SrequestCriteria,$_SpolicyCriteria,$_SlogicalValue);
												$policyValueString=$policyValueString.$rowJoinOperator."(".$_SsubString.")";
												
											}
											elseif($pairSubValue['criteria_logical_id'] == "flightNumber"){

												if($pairSubValue['logical_value'] != 'BTWN')
													$policyValueString=$policyValueString.$rowJoinOperator."( '".$requestMasterArray[${$mainKey.'InputIndex'}][$index][$pairSubValue['criteria_logical_id']]."' ".$pairSubValue['logical_value']." '".$pairPolicyValue[0]."')";
												else{
													$policyValueString=$policyValueString.$rowJoinOperator."( '".$requestMasterArray[${$mainKey.'InputIndex'}][$index][$pairSubValue['criteria_logical_id']]."' >= '".$pairPolicyValue[0]."' && '".$requestMasterArray[${$mainKey.'InputIndex'}][$index][$pairSubValue['criteria_logical_id']]."' <= '".$pairPolicyValue[1]."' )";
													$_Bescape = false;
												}
											}
											else
												$policyValueString=$policyValueString.$rowJoinOperator." strtoupper('".$requestMasterArray[${$mainKey.'InputIndex'}][$index][$pairSubValue['criteria_logical_id']]."') ".$pairSubValue['logical_value']." strtoupper('".$pairPolicyValue[0]."') ";
										}
									}
									$policyValueString=$policyValueString.")";
								
									//Set the row join operator
									if(isset($pairPolicyValue[2]) && $pairPolicyValue[2]!="")
										$rowJoinOperator = $pairPolicyValue[2];
									elseif(isset($pairPolicyValue[1]) && $pairPolicyValue[1]!="" && $_Bescape)
										$rowJoinOperator = $pairPolicyValue[1];
									else
										$rowJoinOperator = "||";
								}
								else
									$policyValueString=$policyValueString.")";
							}
							$orCondition = "||";
							$rowJoinOperator = "";
							$policyValueString=$policyValueString.")";
						}
					}
				}
				else
				{
					
      

					foreach($mainValue as $subKey => $subValue)
					{
						if($subValue['criteria_type']=="D")
						{
							$policyValue=explode("@%@",$subValue['policy_value']);
							
							if($subValue['logical_value']=="BTWN")
							{
								$policyValueString=$policyValueString.$rowJoinOperator."( strtotime('".$requestMasterArray[$subValue['criteria_logical_id']]."') >= strtotime('".$policyValue[0]."') && strtotime('".$requestMasterArray[$subValue['criteria_logical_id']]."') <= strtotime('".$policyValue[1]."') ";
								
								//Set string for day of week
								if($policyValue[2]!='')
								{
									//Get the requested day
									if($policyString=="Y")
										$requestDay = "departureDOW";
									else
										$requestDay = $this->_getDayOfWeek($requestMasterArray[$subValue['criteria_logical_id']]);
									$policyDow=explode(",",$policyValue[2]);
									$dowCondition="";
									$dowString="";
									$openBracs=" ( ";
									
									foreach($policyDow as $dowKey => $dowValue)
									{
										$dowString=$dowString.$dowCondition.$openBracs." strtoupper('".$requestDay."') == strtoupper('".$dowValue."') ";
										$dowCondition=" || ";
										$openBracs=" ";
									}
									$policyValueString=$policyValueString." && ".$dowString.")";
								}
								//Set row join operator
								if(isset($policyValue[3]) && $policyValue[3]!="")
									$rowJoinOperator = $policyValue[3];
								else
									$rowJoinOperator = "||";
								$policyValueString=$policyValueString." )";
							}
							elseif($subValue['logical_value']=="!BTWN")
							{
								$policyValueString=$policyValueString.$rowJoinOperator."( strtotime('".$requestMasterArray[$subValue['criteria_logical_id']]."') < strtotime('".$policyValue[0]."') || strtotime('".$requestMasterArray[$subValue['criteria_logical_id']]."') > strtotime('".$policyValue[1]."') ";
								
								//Set row join operator
								if(isset($policyValue[2]) && $policyValue[2]!="")
									$rowJoinOperator = $policyValue[2];
								else
									$rowJoinOperator = "||";
								$policyValueString=$policyValueString." )";
							}
							else
							{
								$policyValueString=$policyValueString.$rowJoinOperator."( strtotime('".$requestMasterArray[$subValue['criteria_logical_id']]."') ".$subValue['logical_value']." strtotime('".$policyValue[0]."')";
								
								//Set row join operator
								if(isset($policyValue[1]) && $policyValue[1]!="")
									$rowJoinOperator = $policyValue[1];
								else
									$rowJoinOperator = "||";
								$policyValueString=$policyValueString." )";
							}
						}
						elseif($subValue['criteria_type']=="T")
						{
							$policyValue=explode("@%@",$subValue['policy_value']);
						
							if(in_array($subValue['logical_value'],array("BTWN","!BTWN")))
							{
								if($subValue['logical_value']=="BTWN")
									$policyValueString=$policyValueString.$rowJoinOperator."( strtotime('".$requestMasterArray[$subValue['criteria_logical_id']]."') >= strtotime('".$policyValue[0]."') && strtotime('".$requestMasterArray[$subValue['criteria_logical_id']]."') <= strtotime('".$policyValue[1]."') ";
								else
									$policyValueString=$policyValueString.$rowJoinOperator."( strtotime('".$requestMasterArray[$subValue['criteria_logical_id']]."') < strtotime('".$policyValue[0]."') || strtotime('".$requestMasterArray[$subValue['criteria_logical_id']]."') > strtotime('".$policyValue[1]."') ";
								#Set row join operator
								$rowJoinOperator = (isset($policyValue[2]) && $policyValue[2] != "") ? $policyValue[2] : "||";
								$policyValueString=$policyValueString." )";
							}
							elseif(!empty($CFG['policy']['timeComparison']['comparison']) && in_array($subValue['logical_value'],$CFG['policy']['timeComparison']['comparison']))
							{
								$_Soperator = $CFG['policy']['timeComparison']['operator'];
								if(!empty($CFG['policy']['timeComparison']['hoursDiff']))
								{
									$_TtimeToAdd = date('H:i', strtotime($policyValue[0]) + $CFG['policy']['timeComparison']['hoursDiff'] * 3600);
									$_TtimeToSub = date('H:i', strtotime($policyValue[0]) - $CFG['policy']['timeComparison']['hoursDiff'] * 3600);
								}
								switch ($_Soperator) {
									case "+":
										if($subValue['logical_value'] == "==")
											$policyValueString=$policyValueString.$rowJoinOperator."( strtotime('".$requestMasterArray[$subValue['criteria_logical_id']]."') >= strtotime('".$policyValue[0]."') && strtotime('".$requestMasterArray[$subValue['criteria_logical_id']]."') <= strtotime('".$_TtimeToAdd."') ";
										elseif($subValue['logical_value'] == "!=")
											$policyValueString=$policyValueString.$rowJoinOperator."( strtotime('".$requestMasterArray[$subValue['criteria_logical_id']]."') < strtotime('".$policyValue[0]."') || strtotime('".$requestMasterArray[$subValue['criteria_logical_id']]."') > strtotime('".$_TtimeToAdd."') ";
										break;
									case "-":
										if($subValue['logical_value'] == "==")
											$policyValueString=$policyValueString.$rowJoinOperator."( strtotime('".$requestMasterArray[$subValue['criteria_logical_id']]."') >= strtotime('".$_TtimeToSub."') && strtotime('".$requestMasterArray[$subValue['criteria_logical_id']]."') <= strtotime('".$policyValue[0]."') ";
										elseif($subValue['logical_value'] == "!=")
											$policyValueString=$policyValueString.$rowJoinOperator."( strtotime('".$requestMasterArray[$subValue['criteria_logical_id']]."') < strtotime('".$_TtimeToSub."') || strtotime('".$requestMasterArray[$subValue['criteria_logical_id']]."') > strtotime('".$policyValue[0]."') ";
										break;
									default: #Handle +/- cases here
										if($subValue['logical_value'] == "==")
											$policyValueString=$policyValueString.$rowJoinOperator."( strtotime('".$requestMasterArray[$subValue['criteria_logical_id']]."') >= strtotime('".$_TtimeToSub."') && strtotime('".$requestMasterArray[$subValue['criteria_logical_id']]."') <= strtotime('".$_TtimeToAdd."') ";
										elseif($subValue['logical_value'] == "!=")
											$policyValueString=$policyValueString.$rowJoinOperator."( strtotime('".$requestMasterArray[$subValue['criteria_logical_id']]."') < strtotime('".$_TtimeToSub."') || strtotime('".$requestMasterArray[$subValue['criteria_logical_id']]."') > strtotime('".$_TtimeToAdd."') ";
									break;
								}
								#Set row join operator
								$rowJoinOperator = (isset($policyValue[1]) && $policyValue[1] != "") ? $policyValue[1] : "||";
								$policyValueString=$policyValueString." )";
							}
							else
							{
								$policyValueString=$policyValueString.$rowJoinOperator."( strtotime('".$requestMasterArray[$subValue['criteria_logical_id']]."') ".$subValue['logical_value']." strtotime('".$policyValue[0]."')";
								#Set row join operator
								$rowJoinOperator = (isset($policyValue[1]) && $policyValue[1] != "") ? $policyValue[1] : "||";
								$policyValueString=$policyValueString." )";
							}
						}
						else
						{
							
							$policyValue = explode("@%@",$subValue['policy_value']);
							if($mainValue[$subKey]['criteria_logical_id'] == 'aggregateFunction')
								$policyValueString=$policyValueString.$rowJoinOperator."( strtoupper('".$mainValue[$subKey]['criteria_logical_id']."') ".$subValue['logical_value']." strtoupper('".$policyValue[0]."') ";
							elseif(!empty($CFG['policy']['enableViaCriteria']['preparePolicyString']) && $CFG['policy']['enableViaCriteria']['preparePolicyString'] == 'Y' && $mainValue[$subKey]['criteria_logical_id'] == 'via' && ($policyString=="N"))
							{
								if(empty($requestMasterArray['viaDetails']))
									$policyValueString='((0)';
								elseif(!empty($requestMasterArray['viaDetails']))
								{
									foreach($requestMasterArray['viaDetails'] as $_IviaKey => $_AviaValue)
									{
										$_ScompiledPolicy = "(";
										foreach ($_AviaValue['via'] as $_Avalue)
										{
											$policyValueString = $policyValueString.$rowJoinOperator.$_ScompiledPolicy."( strtoupper('".$_Avalue."') ".$subValue['logical_value']." strtoupper('".$policyValue[0]."') ";
											$rowJoinOperator =(count($_AviaValue['via']) > 1) ? '||' : '';
											$policyValueString=$policyValueString.")";
											$_ScompiledPolicy='';
										}
										$rowJoinOperator = '';
									}
								}
							}
                            else
						    	$policyValueString=$policyValueString.$rowJoinOperator."( strtoupper('".$requestMasterArray[$subValue['criteria_logical_id']]."') ".$subValue['logical_value']." strtoupper('".$policyValue[0]."') ";
							//Set the pair join operator
						
							if(isset($policyValue[1]) && $policyValue[1]!="")
								$rowJoinOperator = $policyValue[1];
							else
								$rowJoinOperator = "&&";
							/**Prepare string with pair criteria field when the pair is an array */
							if(is_array(${$mainKey.'Pair'}))
							{
								foreach(${$mainKey.'Pair'} as $pairArrKey=>$pairArrVal)
								{
									foreach($multiOptionValueArray[$pairArrVal] as $pairSubKey => $pairSubValue)
									{
										if($subValue['loop_value']==$pairSubValue['loop_value'])
										{
											$pairPolicyValue = explode("@%@",$pairSubValue['policy_value']);
											
											$policyValueString=$policyValueString.$rowJoinOperator." strtoupper('".$requestMasterArray[$pairSubValue['criteria_logical_id']]."') ".$pairSubValue['logical_value']." strtoupper('".$pairPolicyValue[0]."') ";
										}
									}
								}
							}
							else
							{
								//Prepare string with pair criteria field
								foreach($multiOptionValueArray[${$mainKey.'Pair'}] as $pairSubKey => $pairSubValue)
								{
									if($subValue['loop_value']==$pairSubValue['loop_value'])
									{
										$pairPolicyValue = explode("@%@",$pairSubValue['policy_value']);
										
										$policyValueString=$policyValueString.$rowJoinOperator." strtoupper('".$requestMasterArray[$pairSubValue['criteria_logical_id']]."') ".$pairSubValue['logical_value']." strtoupper('".$pairPolicyValue[0]."') ";
									}
								}
							}
						    if(${$mainKey.'MappedStatus'} == "Y")
							{
								$rowJoinOperator = "&&";
								$openInnerBracs = "(";
								for($i=0;$i<${$mainKey.'InnerCount'};$i++)
								{
									foreach($multiOptionValueArray[${$mainKey.'Map'.$i}] as $innerSubKey => $innerSubValue)
									{
										if($subValue['loop_value']==$innerSubValue['loop_value'])
										{
											$innerPolicyValue = explode("@%@",$innerSubValue['policy_value']);
									
											$policyValueString=$policyValueString.$rowJoinOperator.$openInnerBracs." strtoupper('".$requestMasterArray[$innerSubValue['criteria_logical_id']]."') ".$innerSubValue['logical_value']." strtoupper('".$innerPolicyValue[0]."') ";
											$openInnerBracs = " ";
											if(isset($innerPolicyValue[1]) && $innerPolicyValue[1]!="")
												$rowJoinOperator = $innerPolicyValue[1];
											else
												$rowJoinOperator = "||";
										}
									}
									${${$mainKey.'Map'.$i}.'StringPrepared'} = "Y";
								}
								$policyValueString=$policyValueString.")";
							}
							
							$policyValueString=$policyValueString.")";

						
						
							if(${$mainKey.'Pair'}!="")
							{
								//Set the row join operator
								if(isset($pairPolicyValue[1]) && $pairPolicyValue[1]!="")
									$rowJoinOperator = $pairPolicyValue[1];
								else
									$rowJoinOperator = "||";
							}
						}
					}
				}
				
				//String is prepared for current criteria field and its pair criteria field
				${$mainKey.'StringPrepared'} = "Y";
				/** String prepared status set for the pair criteria fields */
				if(${$mainKey.'Pair'}!="" && is_array(${$mainKey.'Pair'}))
				{
					foreach(${$mainKey.'Pair'} as $key => $AmainKeyPair)
					{
						${$AmainKeyPair.'StringPrepared'} = "Y";
					}
				}
				
			}
			
			if($policyValueString!="")
			{
				//To return policy string as array
				if(isset($requestMasterArray['separatePolicyString']) && $requestMasterArray['separatePolicyString']=="Y")
					array_push($stringToExecuteArray,"(".$policyValueString.")");
				if($stringToExecute!="")
					$stringToExecute="( ".$policyValueString." ) && ".$stringToExecute;
				else
					$stringToExecute="(".$policyValueString.")";
			}
		}
						
		//To return policy string as array
		if(isset($requestMasterArray['separatePolicyString']) && $requestMasterArray['separatePolicyString']=="Y")
			return json_encode($stringToExecuteArray);
		else
			return $stringToExecute;
	}
	
	/*Modified By: Subalakshmi S 27-08-2018
		Desc     : The below lines are commented since it is called in 
		 			class.fetchPolicyDetails.php file*/
		  				
	/*function _fetchAutoPilotPolicy($requestMasterId,$_StenderDuplicateStatus="")
	{
		global $CFG;*/

		/*
		 * Updating the autopilott status as 'TENDER' if the request is identified as Duplicate with any tender
		 * Based on this value, we will display this request with different color and also GD to process this request
		 * and restrict to process the request by RM before GD approves this request is tender or not
		 * 
		 **/
		/*if($_StenderDuplicateStatus!="" && $_StenderDuplicateStatus=="Y")
		{
			$updateTenderAutoPilotStatus = "UPDATE ".$CFG['db']['tbl']['request_master']."
										SET auto_pilot_status = 'TENDER'
										WHERE request_master_id = ".$requestMasterId." LIMIT 1";
			
			if(DB::isError($resultTenderAutoPilotStatus=$this->_Oconnection->query($updateTenderAutoPilotStatus)))
			{
				fileWrite($updateTenderAutoPilotStatus,"SqlError","a+");
				return false;
			}
			return true;
		}
		
		$requestMasterArray=array();
		$bookingType='PARENT';
		$policyFinalArray=array();

		$sqlSelectRequestDetails="SELECT
							rm.request_master_id,
							rm.user_id,
							rm.request_type_id as requestType,
							rm.trip_type,
							rm.trip_type as tripType,
							rm.user_currency as currencyType,
							rm.requested_date,
							rm.number_of_passenger,
							rm.number_of_adult,
							rm.number_of_child,
							rm.reference_request_master_id,
							(rm.number_of_adult+rm.number_of_child) as noOfPax,
							rm.number_of_infant,
							rd.request_id,
							rd.origin_airport_code as source,
							rd.dest_airport_code as destination,
							rd.flight_number,
							rd.from_date as departureDate,
							rd.to_date,
							rd.cabin,
							ud.corporate_id as travelAgency,
							".encrypt::_decrypt('ud.email_id')." as loginId,
							".encrypt::_decrypt('ud.country_code')." as countryCode,
							".encrypt::_decrypt('cd.pos_code')." as pointOfSale,
							cd.corporate_type_id as userType,
							srd.current_load_factor,
							srd.forecast_load_factor,
							srd.future_load_factor
					  FROM
							".$CFG['db']['tbl']['request_master']." rm,
							".$CFG['db']['tbl']['request_details']." rd,
							".$CFG['db']['tbl']['user_details']." ud,
							".$CFG['db']['tbl']['corporate_details']." cd,
							".$CFG['db']['tbl']['series_request_details']." srd
					  WHERE
							rm.request_master_id=rd.request_master_id
							AND rd.request_id=srd.request_id
							AND rm.user_id=ud.user_id
							AND ud.corporate_id=cd.corporate_id
							AND rm.request_master_id='".$requestMasterId."'";

		$sqlSelectRequestDetails=$sqlSelectRequestDetails." ORDER BY rd.request_id ";

		if(DB::isError($resultSelectRequestDetails=$this->_Oconnection->query($sqlSelectRequestDetails)))
		{
			fileWrite($sqlSelectRequestDetails,"SqlError","a+");
			return false;
		}
		if($resultSelectRequestDetails->numRows() > 0)
		{
					$index=0;
			while($rowSelectRequestDetails=$resultSelectRequestDetails->fetchRow(DB_FETCHMODE_ASSOC))
			{
				if($rowSelectRequestDetails['tripType']==1)
					$rowSelectRequestDetails['tripType']="O";
				elseif($rowSelectRequestDetails['tripType']==2)
					$rowSelectRequestDetails['tripType']="R";
				elseif($rowSelectRequestDetails['tripType']==3)
					$rowSelectRequestDetails['tripType']="M";
				
				$flightDetailsArray=array();
			
				if($rowSelectRequestDetails['flight_number'] == 'any')
				{
					if(isset($_SESSION['groupRM']['airlineCode']) && $_SESSION['groupRM']['airlineCode']!="")
						$flightDetailsArray[0]['airlineCode']=$_SESSION['groupRM']['airlineCode'];
					else
						$flightDetailsArray[0]['airlineCode']="VX";
					$flightDetailsArray[0]['flightNumber']="";
				}
				else
				{
					$flightDetails=$loadFactorDetails=array();
					$flightDetails=explode(",",$rowSelectRequestDetails['flight_number']);
					$forecastLoadFactor=explode(",",$rowSelectRequestDetails['forecast_load_factor']);
					$currentLoadFactor=explode(",",$rowSelectRequestDetails['current_load_factor']);
					$futureLoadFactor=explode(",",$rowSelectRequestDetails['future_load_factor']);
					if(count($flightDetails)>0)
					{
						for($i=0; $i<count($flightDetails);$i++)
						{
							$airlineDetail=array();
							$airlineDetail=explode("-",$flightDetails[$i]);
							$clfDet=explode("/",$currentLoadFactor[$i]);
							$flfDet=explode("/",$forecastLoadFactor[$i]);
							$flightDetailsArray[$i]['airlineCode']=$airlineDetail[0];
							$flightDetailsArray[$i]['flightNumber']=$airlineDetail[1];							
							$flightDetailsArray[$i]['viaFlightNumber']=$flightDetails[$i];							
							$loadFactorDetails[$i]['forecastLoadFactor']=max($flfDet);
							$loadFactorDetails[$i]['currentLoadFactor']=max($clfDet);
							
							$futureLF = explode("/",$futureLoadFactor[$i]);
							$loadFactorDetails[$i]['futureLoadFactor']=max($futureLF);
						}
					}
					else
					{
						$airlineDetail=explode("-",$rowSelectRequestDetails['flight_number']);
						$flightDetailsArray[0]['airlineCode']=$airlineDetail[0];
						$flightDetailsArray[0]['flightNumber']=$airlineDetail[1];
						$clfDet=explode("/",$rowSelectRequestDetails['current_load_factor']);
						$flfDet=explode("/",$rowSelectRequestDetails['forecast_load_factor']);
						$loadFactorDetails[0]['forecastLoadFactor']=max($flfDet);
						$loadFactorDetails[0]['currentLoadFactor']=max($clfDet);
						$flightDetailsArray[0]['viaFlightNumber']=$rowSelectRequestDetails['flight_number'];
						
						$futureLF=explode("/",$rowSelectRequestDetails['future_load_factor']);
						$loadFactorDetails[0]['futureLoadFactor']=max($futureLF);
					}
				}
						if($index==0){
					$bookingType = $this->_getBookingTypeOfRequest($rowSelectRequestDetails['pointOfSale'],$rowSelectRequestDetails['reference_request_master_id'],$rowSelectRequestDetails['source']);//Get Booking type of this request
						}
				$rowSelectRequestDetails['bookingType']=$bookingType;
				$rowSelectRequestDetails['flightDetails']=$flightDetailsArray;
				$rowSelectRequestDetails['loadFactorDetails']=$loadFactorDetails;
				$rowSelectRequestDetails['tripCategory']=$this->_isDomestic($requestMasterId);
				$rowSelectRequestDetails['groupCategory']=$this->_getGroupCategoryName($requestMasterId,"Y");
				$rowSelectRequestDetails['countryOfOrigin']=$this->_getAirportDetails($rowSelectRequestDetails['source'])['country_code'];
				$rowSelectRequestDetails['countryOfDestination']=$this->_getAirportDetails($rowSelectRequestDetails['destination'])['country_code'];
				$requestMasterArray[]=$rowSelectRequestDetails;
			}
		}
		
		#Check future load factor with allowed future load factor limit for block the auto pilot policy
		$allowAutoPilot = "Y";
		foreach($requestMasterArray AS $requestMasterKey => $requestMasterValue)
		{
			foreach($requestMasterValue['loadFactorDetails'] AS $loadFactorKey =>$loadFactorValue)
			{
				if(isset($CFG['limit']['equipmentTypeLoaFactorLimit']))
				{
					if($loadFactorValue['futureLoadFactor']>$CFG['limit']['equipmentTypeLoaFactorLimit'])
					{

						$allowAutoPilot = "N";
					}
				}
			}
			#Check Out of horizon request
			if(isset($CFG['limit']['availableFlightsDaysCount']) && $CFG['limit']['availableFlightsDaysCount']>0)
			{
				$currentDate = $this->_getUTCDateValue();
				$flightAvailableDate = date('Y-m-d', strtotime($currentDate."+ ".$CFG['limit']['availableFlightsDaysCount']." days"));
				if(strtotime($requestMasterValue['departureDate'])>strtotime($flightAvailableDate) && $CFG['limit']['availableFlightsDaysCount'] >= 0)
				{
					$allowAutoPilot = "N";
				}
			}
			#Check interline process
			/*if(isset($CFG['limit']['interlineCategoryId']))
			{
				if($CFG['limit']['interlineCategoryId']==$requestMasterValue['groupCategory'])
				{
					if($requestMasterValue['flight_number']=='any')
						$allowAutoPilot = "N";
				}
			}*/
			#The check for interline flights
			/*if(isset($CFG['limit']['interlineCategoryId']) && $CFG['limit']['interlineCategoryId']>0)
			{
				foreach($requestMasterValue['flightDetails'] as $_SflightKey=>$_SflightValues)
				{
					$_AviaFlightNumbers=explode("/",$_SflightValues['viaFlightNumber']);
					foreach($_AviaFlightNumbers as $_viaKey=>$_viaValues)
					{
						$_SairlinesCode=explode("-",$_viaValues);
						#To check airline code of all via flights matches with allowedFlightsCarrierCode
						if(count($_SairlinesCode) > 1 && !in_array($_SairlinesCode[0],$CFG['site']['allowedFlightsCarrierCode']))
						{
							$allowAutoPilot = 'N';
							break;
						}
					}
				}
			}
		}
		
		#Get the autopilot policy when allowAutoPilot status is 'Y'
		if(count($requestMasterArray)>0 && $allowAutoPilot != 'N')
		{
			$sqlSelectAutoPilotPolicyMaster="SELECT
									policy_id,
									policy_name,
									priority,
									policy_dow,
									created_date,
									process_type
							 FROM
									".$CFG['db']['tbl']['auto_pilot_policy_master']."
							 WHERE
									active_status='Y'
									AND policy_type='A'
									AND ('".$requestMasterArray[0]['requested_date']."' BETWEEN start_date AND end_date)";
									

			if(DB::isError($resultSelectAutoPilotPolicyMaster=$this->_Oconnection->query($sqlSelectAutoPilotPolicyMaster)))
			{
				fileWrite($sqlSelectAutoPilotPolicyMaster,"SqlError","a+");
				return false;
			}
			if($resultSelectAutoPilotPolicyMaster->numRows() > 0)
			{
				while($rowSelectAutoPilotPolicyMaster=$resultSelectAutoPilotPolicyMaster->fetchRow(DB_FETCHMODE_ASSOC))
				{
					if($this->_getPolicyDayOfWeekStatus($requestMasterArray[0]['requested_date'],$rowSelectAutoPilotPolicyMaster['policy_dow'])=="Y")
					{
						$policyId=$rowSelectAutoPilotPolicyMaster['policy_id'];
						$policyName=$rowSelectAutoPilotPolicyMaster['policy_name'];
						$priority=$rowSelectAutoPilotPolicyMaster['priority'];
						$policyMasterValueArray=$rowSelectAutoPilotPolicyMaster;
						$sqlSelectPolicyDetails="SELECT
										appd.policy_details_id,
										appd.policy_id,
										appd.criteria_id,
										appd.loop_value,
										apcm.criteria_name,
										apcm.criteria_type,
										apcm.criteria_logical_id,
										appd.operator_id,
										om.operator_name,
										om.logical_value,
										om.operator_type,
										appd.policy_value
									 FROM
										".$CFG['db']['tbl']['auto_pilot_policy_details']." appd,
										".$CFG['db']['tbl']['auto_pilot_criteria_master']." apcm,
										".$CFG['db']['tbl']['operator_master']." om
									 WHERE
										appd.policy_id='".$policyId."'
										AND appd.criteria_id=apcm.criteria_id
										AND appd.operator_id=om.operator_id";

						if(DB::isError($resultSelectPolicyDetails=$this->_Oconnection->query($sqlSelectPolicyDetails)))
						{
							fileWrite($sqlSelectPolicyDetails,"SqlError","a+");
							return false;
						}
						$countValue=0;
						$policyDetailsArray=array();

						if($resultSelectPolicyDetails->numRows() > 0)
						{
							while($rowSelectPolicyDetails=$resultSelectPolicyDetails->fetchRow(DB_FETCHMODE_ASSOC))
							{
								if($rowSelectPolicyDetails['criteria_logical_id']=="tripType" && $rowSelectPolicyDetails['policy_value']=="R" && $countValue==0)
								{
									$countValue=1;
								}
								$policyDetailsArray[]=$rowSelectPolicyDetails;
							}
						}
						
						if($countValue==0)
							$countValue=count($requestMasterArray);
						$policyResultsArray=array();
						
						for($i=0;$i<$countValue;$i++)
						{
							$resultValue=0;
							$stringToExecute="";
							
							$stringToExecute = $this->_getStringToExecuteForAllPolicy($policyDetailsArray,$requestMasterArray[$i]);
							
							$indexValue="RMIDVAL".$requestMasterArray[$i]['request_master_id']."_RDIDVAL".$requestMasterArray[$i]['request_id']."_SOURCEVAL".$requestMasterArray[$i]['source']."_DESTINATIONVAL".$requestMasterArray[$i]['destination'];
							if($stringToExecute!="")
							{


								$resultStringToEval="IF( ".$stringToExecute." ){".'$resultValue'."=1;}";
								#fileWrite("REQUEST_MASTER_ID=".$requestMasterArray[$i]['request_master_id']."--REQUEST_ID=".$requestMasterArray[$i]['request_id']."--POLICY_MASTER_ID=".$policyId."--STRING=".$resultStringToEval,"STRING","a+");
								
								eval($resultStringToEval);
								if($resultValue==1)
								{
									$policyFinalArray[$policyId][$indexValue]=$policyMasterValueArray;


								}
								else
									$policyFinalArray[$policyId][$indexValue]="EMPTY";
							}
							else
							{
								$policyFinalArray[$policyId][$indexValue]="EMPTY";
							}
						}
					}
				}
			}
		}
		
		$finalArray=array();
		foreach($policyFinalArray as $key=>$value)
		{
			foreach($value as $subKey=>$subValue)
			{
				if($subValue!="EMPTY")
					$finalArray[]=$subValue;				
			}
		}
		$autoPilotPriorityGetValue=0;
		$requestMasterAutoPilotPolicyId=0;
		$requestMasterAutoPilot="NA";
		
		if(count($finalArray)>0)
		{
			$finalInput=array("inputArray"=>$finalArray,"firstFieldName"=>"priority","firstFieldOrder"=>"ASC","secondFieldName"=>"created_date","secondFieldOrder"=>"ASC");
			$resultArray=$this->_multipleSortFunction($finalInput);
			$requestMasterPriority=$resultArray[0]['priority'];
			$requestMasterAutoPilotPolicyId=$resultArray[0]['policy_id'];
			if($finalArray[0]['process_type'] != 'MP')
				$requestMasterAutoPilot="NEW";
		}
		
		/* Update request master */

		/*$sqlUpdateRequestMaster="UPDATE ".$CFG['db']['tbl']['request_master']." SET priority='".$requestMasterPriority."',auto_pilot_policy_id='".$requestMasterAutoPilotPolicyId."',auto_pilot_status='".$requestMasterAutoPilot."' WHERE request_master_id='".$requestMasterId."' LIMIT 1";

		if($requestMasterPriority!=0 && $requestMasterAutoPilotPolicyId!=0)
		{
			if(DB::isError($resultUpdateRequestMaster=$this->_Oconnection->query($sqlUpdateRequestMaster)))
			{
				fileWrite($sqlUpdateRequestMaster,"SqlError","a+");
				return false;
			}
		}
	}*/
	function arrayFindKeyByValue($array, $search, $keys = array())
	{
		foreach($array as $key => $value) {
			if (is_array($value)) {
				$sub = $this->arrayFindKeyByValue($value, $search, array_merge($keys, array($key)));
				if (count($sub)) {
					return $sub;
				}
			} elseif ($value === $search) {
				return array_merge($keys, array($key));
			}
		}

		return array();
	}
	function _getGRFlightDetails($requestMasterId,$airlinesRequestId=0,$changedMappingDetails=array(),$splitPnrCheck)
	{
		global $CFG;
		#Getting Needed fileWrites
		fileRequire("dataModels/class.requestMaster.php");
		fileRequire("dataModels/class.responseDetails.php");
		fileRequire("dataModels/class.transactionMaster.php");
		fileRequire("dataModels/class.requestApprovedFlightDetails.php");
		fileRequire("dataModels/class.viaFlightDetails.php");
		fileRequire("classes/class.requestModifyDetails.php");
		fileRequire("classes/class.requestDetails.php");
		if(!class_exists('airlinesRequestMapping'))
			fileRequire("dataModels/class.airlinesRequestMapping.php");
		
		#Creating object
		$_OrequestModifyDetails 	= new requestModifyDetails;
		$_OrequestMaster 			= new requestMaster();
		$_OairlinesRequestMapping   = new airlinesRequestMapping();
		$_OrequestDetailsClass      = new requestDetailsClass();

		#Forming array
		$GRDetails=array();	
		$seriesGroupArray=array();
			
		#Getting Request Master
		$_OrequestMaster->_Oconnection=$this->_Oconnection;
		$_OrequestMaster->_IrequestMasterId=$requestMasterId;
		$GRDetails=$_OrequestMaster->_selectRequestMaster();
		$_ApaxDetails=$this->_getPartialModifiedPaxCount($requestMasterId);
		#Getting Request type master 
		$_AtotalRequestTypes = $this->_getRequestTypeMaster();
			$_ArequestTypes = array();		
			if(!empty($_AtotalRequestTypes) && is_array($_AtotalRequestTypes))
			{
				foreach($_AtotalRequestTypes as $typeVal)
				{
					if($typeVal['request_type_value'] != '')
					{
						$reqType = strtolower($typeVal['request_type_value']);
						$_ArequestTypes[$reqType] = $typeVal['request_type_id'];
					}
				}
			}
		if(isset($GRDetails[0]))
			$GRDetails=$GRDetails[0];

		$GRDetails['number_of_foc']=$this->_getFocPax($requestMasterId)['totalFoc'];
		if(!empty($_ApaxDetails)){
			if($GRDetails['number_of_passenger']+$GRDetails['number_of_foc']==$_ApaxDetails['totalNoOfPax'])
				$GRDetails['number_of_passenger']=$_ApaxDetails['totalNoOfPax'];
			else
				$GRDetails['number_of_passenger']=$_ApaxDetails['totalNoOfPax']+(($GRDetails['number_of_foc']>0)?$GRDetails['number_of_foc']:0);
		}

		if(!empty($_ApaxDetails))
		{
			$GRDetails['total_pax']=$_ApaxDetails['totalNoOfPax'];
			$GRDetails['number_of_adult']=$_ApaxDetails['totalNoOfAdult'];
			$GRDetails['number_of_child']=$_ApaxDetails['totalNoOfChild'];
			$GRDetails['number_of_infant']=$_ApaxDetails['totalNoOfInfant'];
			$GRDetails['number_of_foc']=$_ApaxDetails['totalNoOfFoc'];
		}
		else
			$GRDetails['total_pax']=($GRDetails['number_of_adult']+$GRDetails['number_of_child']+$GRDetails['number_of_infant']+$GRDetails['number_of_foc']);
		$GRDetails['requested_master_id_disp']=$this->_changeGroupRequestFormat($requestMasterId);
		$GRDetails['requested_date_disp']=$this->_getUserDateFormatValue($GRDetails['requested_date']);
		$GRDetails['group_category_name']=$this->_getGroupCategory($GRDetails['group_category_id']);
		$GRDetails['request_type_name']=$GRDetails['request_type'];
		if(strtoupper($GRDetails['request_type']) != 'FLEXIBLE')
			$GRDetails['request_type'] = array_search($GRDetails['request_type_id'],$_ArequestTypes);
		#Getting last transaction master and modify status
		$_AlastTransactionId=$this->_getModifyFareQuoteStatus($requestMasterId,'Y');
		$_SmodifyStatus=$this->_checkRequestModifyStatus($_AlastTransactionId['lastTransactionId']);

		#Getting Airlines request mapping
		$_OairlinesRequestMapping->_Oconnection=$this->_Oconnection;
		$_OairlinesRequestMapping->_IrequestMasterId=$requestMasterId;
		$_AairlineDetails=$_OairlinesRequestMapping->_selectAirlinesRequestMapping();

		#Get current status code
		$_AairlineDetails[0]['current_status_code']=$this->_getCurrentStatusCode($_AairlineDetails[0]['current_status']);
		$_IairlinesRequestId = $_AairlineDetails[0]['airlines_request_id'];
		$GRDetails['fare_validity_status']='N';
		$GRDetails['allowBlockPNRQueue'] = 'N';
		$GRDetails['current_status']=$_AairlineDetails[0]['current_status'];
		$GRDetails['current_status_code']=$this->_getCurrentStatusCode($_AairlineDetails[0]['current_status']);
		$GRDetails['last_updated']=$_AairlineDetails[0]['last_updated'];
		$GRDetails['last_updated_disp']=$this->_getUserDateFormatValue($GRDetails['last_updated']);
		$_DcurrenctUTCDate = $this->_getUTCDateValue();
		
		$_AmodifiedDetails=$this->_getModifyFareQuoteStatus($requestMasterId);
		#If request modify status not modification approved then set modify status 
		if($_AmodifiedDetails['flightDetails']['requestMasterHistory']['request_modify_status']!=3 && $_SmodifyStatus=="Y")
			$_SmodifyStatus = 'N';
		if($_SmodifyStatus=='Y')
		{
			#Get modified details from history tables
			if(!empty($_AmodifiedDetails['flightDetails']['requestMasterHistory']))
			{
				$GRDetails['number_of_adult']=$_AmodifiedDetails['flightDetails']['requestMasterHistory']['number_of_adult'];
				$GRDetails['number_of_child']=$_AmodifiedDetails['flightDetails']['requestMasterHistory']['number_of_child'];
				$GRDetails['number_of_infant']=$_AmodifiedDetails['flightDetails']['requestMasterHistory']['number_of_infant'];
				$GRDetails['number_of_passenger']=($GRDetails['number_of_adult']+$GRDetails['number_of_child']+$GRDetails['number_of_infant']+$GRDetails['number_of_foc']);
				$GRDetails['total_pax']=($GRDetails['number_of_adult']+$GRDetails['number_of_child']+$GRDetails['number_of_infant']+$GRDetails['number_of_foc']);
			}
		}
		
		#Getting User details
		$_AuserDetails=array();
		$_AuserDetails=$this->_getUserDetailsHelpDesk($GRDetails['user_id']);
		$GRDetails['user_details']=$_AuserDetails[0];
		
		#Check requested trip is domestic or international
		$_SlowestFlightFare='';
		$_StripType='OD';
		if(!$this->_isDomestic($requestMasterId))
			$_StripType='IN';

		#Index to form array for viewRequestDetails on accept page 
		$inc=0;
		$_AseriesGroupIdCount = array();

		#Forming the array for getting the series-groupId in flightDetails array
		$_AseriesGroupId = array();

		#Check flight selection based on international or domestic level (IN,DO)
		if(in_array($_StripType,$CFG["settings"]["bargainFinderTripTypes"]['tripType']))
			$_SlowestFlightFare='Y';
		$_AcabinDetails=$this->_getCabinDetails('','Y');
		$_IrequestTypeId = $this->_getRequestType($requestMasterId,Y);
		#Checking for request should be modified
		if($_SmodifyStatus=='Y')
		{
			#Forming the modified details in proper array and getting s_r_d_h
			$_OrequestModifyDetails->__construct();
			$_OrequestModifyDetails->_Oconnection = $this->_Oconnection;
			$_OrequestModifyDetails->_Osmarty = $this->_Osmarty;
			$_OrequestModifyDetails->_OobjResponse = $this->_OobjResponse;
			$_AmodifiedRequestDetails = $_OrequestModifyDetails->_getFormedModifyRequestDetails($_AmodifiedDetails['flightDetails']);
			$_OrequestDetailsClass->__construct();
			$_OrequestDetailsClass->_Oconnection = $this->_Oconnection;
			$_OrequestDetailsClass->_Osmarty = $this->_Osmarty;
			$_OrequestDetailsClass->_OobjResponse = $this->_OobjResponse;
			$_ArequestDetails = $_OrequestDetailsClass->_getFormedRequestDetails($requestMasterId,$_AcabinDetails,$changedMappingDetails=array(),$_IrequestTypeId);
			$_AmodifiedGrpId=array_column($_AmodifiedRequestDetails['requestDetailsDisplay'], 'series_group_id');
			foreach ($_ArequestDetails['requestDetailsDisplay'] as $groupKey => $groupVal)
			{
				if(!in_array($groupVal['series_group_id'],$_AmodifiedGrpId))
				{
					$_AmodifiedRequestDetails['requestDetailsDisplay'][]=$groupVal;
					$_AmodifiedRequestDetails['seriesGroupIdCount'][$groupVal['series_group_id']]=$_ArequestDetails['seriesGroupIdCount'][$groupVal['series_group_id']];
				}
			}
			#Getting GR details from formed modified request details
			$GRDetails['requestDetails']=$_AmodifiedRequestDetails['requestDetails'];
			$GRDetails['requestDetailsDisplay'] = $_AmodifiedRequestDetails['requestDetailsDisplay'];
		    $GRDetails['requestContractDetails']['contract']=$_ArequestDetails['requestContractDetails'];
			$GRDetails['requestContractDetails']['request_type_id']=$GRDetails['request_type_id'];
			$GRDetails['subRequestCount']=count($GRDetails['requestDetails']);
			$GRDetails['groupDetails'] = $_AmodifiedRequestDetails['groupDetails'];
			$_AseriesGroupId = $_AmodifiedRequestDetails['seriesGroupId'];
			$GRDetails['seriesGroupIdCount'] = $_AmodifiedRequestDetails['seriesGroupIdCount'];

			#Sorting the array as per series_group_id and departure date for display purpose
			$_ArequestDetailsDisplay=array("inputArray"=>$GRDetails['requestDetailsDisplay'],"firstFieldName"=>"series_group_id","firstFieldOrder"=>"ASC","secondFieldName"=>"departure_date","secondFieldOrder"=>"ASC");
			$GRDetails['requestDetailsDisplay']=$this->_multipleSortFunction($_ArequestDetailsDisplay);
			$GRDetails['trip_type']=$_AmodifiedDetails['flightDetails']['requestMasterHistory']['trip_type_id'];
			$GRDetails['user_currency']=$_AmodifiedDetails['flightDetails']['requestMasterHistory']['user_currency'];
			$GRDetails['exchange_rate']=$_AmodifiedDetails['flightDetails']['requestMasterHistory']['exchange_rate'];
			$GRDetails['modifyStatus']=$_SmodifyStatus;
			$GRDetails['group_category_name']=$this->_getGroupCategory($_AmodifiedDetails['flightDetails']['requestMasterHistory']['group_category_id']);
			$GRDetails['group_category_id']=$_AmodifiedDetails['flightDetails']['requestMasterHistory']['group_category_id'];
		}		
		
		
		#Declaring Needed vars
		$_SprocessingStatus = 'N';

		#Checking for not should be a modified request
		if($_SmodifyStatus=='N')
		{
			#Getting the request details, group details etc
			$_OrequestDetailsClass->__construct();
			$_OrequestDetailsClass->_Oconnection = $this->_Oconnection;
			$_OrequestDetailsClass->_Osmarty = $this->_Osmarty;
			$_OrequestDetailsClass->_OobjResponse = $this->_OobjResponse;
			$_ArequestDetails = $_OrequestDetailsClass->_getFormedRequestDetails($requestMasterId,$_AcabinDetails,$changedMappingDetails=array());
            #Getting GR details from formed modified request details
			$GRDetails['requestDetails']=$_ArequestDetails['requestDetails'];
			$GRDetails['requestDetailsDisplay']=$_ArequestDetails['requestDetailsDisplay'];
			$GRDetails['requestContractDetails']['contract']=$_ArequestDetails['requestContractDetails'];
			$GRDetails['requestContractDetails']['request_type_id']=$GRDetails['request_type_id'];
			$GRDetails['subRequestCount']=$_ArequestDetails['subRequestCount'];
			$GRDetails['groupDetails'] = $_ArequestDetails['groupDetails'];
			$_AseriesGroupId = $_ArequestDetails['seriesGroupId'];
			$seriesGroupArray = $_ArequestDetails['seriesGroupId'];
			$GRDetails['seriesGroupIdCount'] = $_ArequestDetails['seriesGroupIdCount'];

			#Sorting the array as per series_group_id and departure date for display purpose
			$_ArequestDetailsDisplay=array("inputArray"=>$GRDetails['requestDetailsDisplay'],"firstFieldName"=>"series_group_id","firstFieldOrder"=>"ASC","secondFieldName"=>"dep_time","secondFieldOrder"=>"ASC");
			$GRDetails['requestDetailsDisplay']=$this->_multipleSortFunction($_ArequestDetailsDisplay);
		}
		else
		{
			foreach($GRDetails['requestDetails'] AS $requestKey => $requestValue)
			{
				$GRDetails['requestDetails'][$requestKey]['cabin'] = $_AcabinDetails[$requestValue['cabin']]['cabin_name'];
			}
		}
		/*select only negotion history details to show and get the airline remarks*/
		$sqlSelectNegotiationDetails="SELECT
											 *,
											 tm.remarks as remarks
										FROM
											".$CFG['db']['tbl']['transaction_master']." tm, "
											.$CFG['db']['tbl']['response_details']." rd
										WHERE
											tm.airlines_request_id = '".$_IairlinesRequestId."' AND 
											rd.transaction_master_id != '".$_AlastTransactionId['lastTransactionId']."' AND 
											rd.transaction_master_id =  tm.transaction_id AND
											rd.airlines_request_id = tm.airlines_request_id AND
											rd.response_status = 4";

		if(DB::isError($resultSelectNegotiationDetails=$this->_Oconnection->query($sqlSelectNegotiationDetails)))
		{
			fileWrite($sqlSelectNegotiationDetails,"SqlError","a+");
			return false;
		}

		if($resultSelectNegotiationDetails->numRows() >0)
		{
			while($rowSelectNegotiationDetails=$resultSelectNegotiationDetails->fetchRow(DB_FETCHMODE_ASSOC))
			{
				$this->_AtransactionMaster[] = $rowSelectNegotiationDetails;
			}
			$_AtransactionDetails =  $this->_AtransactionMaster;
		}
		
		if($_AlastTransactionId['lastTransactionId']!='')
		{
			$objTransactionMaster=new transactionMaster();
			$objTransactionMaster->_Oconnection=$this->_Oconnection;
			$objTransactionMaster->_ItransactionId=$_AlastTransactionId['lastTransactionId'];
			$_AlastTransactionMasterDetails =  $objTransactionMaster->_selectTransactionMaster();
			#To append the alternate remarks in remarks field
			if(isset($_AlastTransactionMasterDetails[0]['alternate_flight_remarks']) && $_AlastTransactionMasterDetails[0]['alternate_flight_remarks']!='')
			{
				if($_AlastTransactionMasterDetails[0]['remarks']!='')
					$_AlastTransactionMasterDetails[0]['remarks'].="<br>";
				$_AlastTransactionMasterDetails[0]['remarks'].=" <b>Alternate: </b>".$_AlastTransactionMasterDetails[0]['alternate_flight_remarks'];
			}
			$_AtransactionDetails[] = $_AlastTransactionMasterDetails[0];
		}
		fileRequire("dataModels/class.seriesRequestDetailsHistory.php");
		$_OseriesRequestDetailsHistory = new seriesRequestDetailsHistory();
		if(!empty($_AtransactionDetails))
		{
			//reponse details
			$objResponseDetails=new responseDetails();
			$objResponseDetails->_Oconnection=$this->_Oconnection;
			
			//Request approved flight details
			$objRequestApprovedFlightDetails=new requestApprovedFlightDetails();
			$objRequestApprovedFlightDetails->_Oconnection=$this->_Oconnection;
			
			//Via flight details
			$objViaFlightDetails=new viaFlightDetails();
			$objViaFlightDetails->_Oconnection=$this->_Oconnection;
			
			$_AtransactionDetails = array("inputArray"=>$_AtransactionDetails,"fieldName"=>"transaction_id","fieldType"=>"NUMBER","orderType"=>"ASC");
			$GRDetails['transactionMaster'] = $this->_dynamicSortFunction($_AtransactionDetails);
			#$GRDetails['last_transaction_master_id'] = $this->_getLastTransactionMasterId($requestMasterId);
			$GRDetails['last_transaction_master_id'] = $_AlastTransactionId['lastTransactionId'];
			
			
			$j=0;		
			$groupIndex = array();	
			foreach($GRDetails['transactionMaster'] as $key=>$tm)
			{					
				//Request approved flight details
				$objRequestApprovedFlightDetails->__construct();
				$objRequestApprovedFlightDetails->_ItransactionMasterId=$tm['transaction_id'];
				if($splitPnrCheck == 'Y')
				{
					$objRequestApprovedFlightDetails->_SsplitPNRCheck='Y';
				}
				if(!in_array($_AairlineDetails[0]['current_status_code'],array('AN','NJ','RS','NR')))
					$objRequestApprovedFlightDetails->_SacceptedFlightStatus='Y';
				$GRDetails['transactionMaster'][$j]['conversion_rate'] = 1;

				if($tm['exchange_rate'] != 0)
				{
					$GRDetails['transactionMaster'][$j]['conversion_rate'] = round(1/$tm['exchange_rate'],5);
				}
				
				/* for temporary issue fix fare advised with baggage and tax start */
				$fareAdvised = array();
				$fareAdvised = $this->_getAdultFare($requestMasterId,"Y",$tm['transaction_id']);
				$GRDetails['transactionMaster'][$j]['fare_advised'] = $fareAdvised['adultTotal'];
				$GRDetails['transactionMaster'][$j]['child_fare'] = $fareAdvised['childTotal'];
				$GRDetails['transactionMaster'][$j]['infant_fare'] = $fareAdvised['infantTotal'];
				/* for temporary issue fix fare advised with baggage and tax end */
				
				if(!empty($_SmodifyStatus))
					$objRequestApprovedFlightDetails->_SmodifyStatus=$_SmodifyStatus;
				
				$objRequestApprovedFlightDetails->_selectSeriesRequestApprovedFlightDetails();
				#To show flight details for split pnr as normal flow (its showing duplicate row for a signle flight)
				$_tempRequestApprovedFlightDetails=$objRequestApprovedFlightDetails->_ArequestApprovedFlightDetails;
				$_AtempRequestApprovedFlightIds=array();
				$_uniqueRequestApprovedFlightDetails=array();
				foreach($_tempRequestApprovedFlightDetails as $_Ikey=>$_Svalues)
				{
					if(!in_array($_Svalues['request_approved_flight_id'],$_AtempRequestApprovedFlightIds))
					{
						$_uniqueRequestApprovedFlightDetails[]=$_Svalues;
						$_AtempRequestApprovedFlightIds[]=$_Svalues['request_approved_flight_id'];
					}
				}
				$objRequestApprovedFlightDetails->_ArequestApprovedFlightDetails=$_uniqueRequestApprovedFlightDetails;
				
				//usort($objRequestApprovedFlightDetails->_ArequestApprovedFlightDetails, "sortByDepartDate");
				
				#$objRequestApprovedFlightDetails->_ArequestApprovedFlightDetails = $this->_getMultiSort($objRequestApprovedFlightDetails->_ArequestApprovedFlightDetails,"request_id","departure_date","dep_time");
				foreach($objRequestApprovedFlightDetails->_ArequestApprovedFlightDetails as $_SapprovedKey=>&$_SapprovedValue)
				{
					$_SapprovedValue['departureDateToSort']=$_SapprovedValue['departure_date'].' '.$_SapprovedValue['dep_time'];
					if($_SapprovedValue['original_series_request_id']>0)
						$_SapprovedValue['series_group_id']=$this->_getSeriesGroupId($_SapprovedValue['original_series_request_id'])[0];
					else
					{
						if(isset($_SapprovedValue['series_request_history_id']) && $_SapprovedValue['series_request_history_id']>0)
						{
							$_OseriesRequestDetailsHistory->__construct();
							$_OseriesRequestDetailsHistory->_Oconnection=$this->_Oconnection;
							$_OseriesRequestDetailsHistory->_IseriesRequestHistoryId=$_SapprovedValue['series_request_history_id'];
							$_AseriesRequestHistoryDetails=$_OseriesRequestDetailsHistory->_selectSeriesRequestDetailsHistory();
							$_SapprovedValue['series_group_id']=$_AseriesRequestHistoryDetails[0]['series_group_id'];
						}
					}
				}
				#Sorting the array as per request id and departure date and time for display purpose
				$_AinputArray=array("inputArray"=>$objRequestApprovedFlightDetails->_ArequestApprovedFlightDetails,"firstFieldName"=>"series_group_id","firstFieldOrder"=>"ASC","secondFieldName"=>"departureDateToSort","secondFieldOrder"=>"ASC");
				$objRequestApprovedFlightDetails->_ArequestApprovedFlightDetails=$this->_multipleSortFunction($_AinputArray);
			
				// To set only the active PNR for PNR blocked tender request
				if(isset($CFG['site']['tenderRequest'])&& $CFG['site']['tenderRequest'] == 'Y')
				{
					fileRequire("classes/class.getTenderInformation.php");
					$_OgetTenderInformation = new getTenderInformation;
					$_OgetTenderInformation->__construct();
					$_OgetTenderInformation->_Oconnection = $this->_Oconnection;
					$_OgetTenderInformation->_IrequestMasterId = $requestMasterId;
					$_AcheckTender = $_OgetTenderInformation->_checkTenderPnr();
					$_AtenderPNRDetails = $_OgetTenderInformation->_AtenderPnrDetails;
					if(!empty($_AtenderPNRDetails) && $_AairlineDetails[0]['current_status_code']=='NA')
					{
						foreach($_AtenderPNRDetails as $_StenderKey=>$_StenderValue)
						{
							foreach($_uniqueRequestApprovedFlightDetails as $_SapprovedKey=>$_SapprovedValue)
							{
								if($_StenderValue['status']=='Closed' && $_StenderValue['request_approved_flight_id']==$_SapprovedValue['request_approved_flight_id'])
								{
									array_splice($objRequestApprovedFlightDetails->_ArequestApprovedFlightDetails,$_SapprovedKey,1);
									continue 2;
								}
							}
						}
					}
				}
				$GRDetails['transactionMaster'][$j]['flightDetails']=$objRequestApprovedFlightDetails->_ArequestApprovedFlightDetails;
				$GRDetails['transactionMaster'][$j]['total_fare']=0;
				$GRDetails['transactionMaster'][$j]['fare_expiry_date_disp']=$this->_getUserDateFormatValue($tm['fare_expiry_date']);
				$GRDetails['transactionMaster'][$j]['payment_expiry_date_disp']=$this->_getUserDateFormatValue($tm['payment_expiry_date']);
				$GRDetails['transactionMaster'][$j]['passenger_expiry_date_disp']=$this->_getUserDateFormatValue($tm['passenger_expiry_date']);
				$GRDetails['transactionMaster'][$j]['transaction_date_disp']=$this->_getUserDateFormatValue($tm['transaction_date']);
				$k=0;
				$GRDetails['noBag']="N";
                $total=0;
               
                /*
                 Desc:Change made to get fare_basis_code from flightCabinMappingDetails,
                */
                $AreqAppFlightId = $this->_getRequestApprovedFlightsIds($GRDetails['transactionMaster'][$j]['flightDetails']); 

                if(!empty($AreqAppFlightId))
                	$AfareBasisCode = $this->_getFareBasisCodeOfMinBaseFareFromRAFId($AreqAppFlightId);
                /*
                 end of change
                 */
                $noOfAdultGroups = 0;
				$noOfChildGroups = 0;
				$noOfInfantGroups = 0;
				$seriesRequestIdVal = 0;
				$approvedId=array();
				$yqTaxForChild = 0;
				$yqTaxForInfant = 0;
				#Index arr need to assign txn wise bcz for each txn we need to check and unset series request details for not approved groups
				$index = array();
				foreach($GRDetails['transactionMaster'][$j]['flightDetails'] as $flightKey=>$rapd)
				{
					if($rapd['series_request_id'] == 0 && $rapd['request_id'] == 0 && $rapd['original_series_request_id'] != '' && $tm['request_master_history_id'] != '' && $rapd['original_request_id'] != '')
					{
						$_AhistoryArray = array();

						$_ShistorySql = "SELECT srdh.series_request_history_id, srdh.request_details_history_id FROM series_request_details_history srdh, request_details_history rdh WHERE rdh.request_master_history_id=".$tm['request_master_history_id']." AND srdh.request_details_history_id=rdh.request_details_history_id AND srdh.series_request_id=".$rapd['original_series_request_id']." AND srdh.request_id=".$rapd['original_request_id']." AND srdh.modify_status='Y'";

						if(DB::isError($result=$this->_Oconnection->query($_ShistorySql)))
						{
							fileWrite($_ShistorySql,"SqlError","a+");
							return false;
						}
						if($result->numRows() > 0)
						{
							while($rowResult=$result->fetchRow(DB_FETCHMODE_ASSOC))
							{
								$_AhistoryArray['series_request_history_id'] = $rowResult['series_request_history_id'];
								$_AhistoryArray['request_details_history_id'] = $rowResult['request_details_history_id'];
							}	
						}

						if(!empty($_AhistoryArray))
						{
							$GRDetails['transactionMaster'][$j]['flightDetails'][$flightKey]['series_request_id']=$_AhistoryArray['series_request_history_id'];
							$GRDetails['transactionMaster'][$j]['flightDetails'][$flightKey]['request_id']=$_AhistoryArray['request_details_history_id'];
						}
						else
						{
							$GRDetails['transactionMaster'][$j]['flightDetails'][$flightKey]['modify_reject_series_request_id']=$rapd['original_series_request_id'];
							$GRDetails['transactionMaster'][$j]['flightDetails'][$flightKey]['modify_reject_request_id']=$rapd['original_request_id'];
						}
					}
				}
				foreach($GRDetails['transactionMaster'][$j]['flightDetails'] as $rapd)
				{
					$GRDetails['transactionMaster'][$j]['flightDetails'][$k]['series_group_id']=$seriesGroupArray[$rapd['series_request_id']];
					if(isset($changedMappingDetails['seriesSelectedFlights']) && count($changedMappingDetails['seriesSelectedFlights']))
					{
						$GRDetails['transactionMaster'][$j]['flightDetails'][$k]['accepted_flight_status']='N';
						if($changedMappingDetails['seriesSelectedFlights'][$rapd['series_request_id']]==$rapd['request_approved_flight_id'])
							$GRDetails['transactionMaster'][$j]['flightDetails'][$k]['accepted_flight_status']='Y';
					}
										#Pushing seriesGroupId into flight details array
					foreach ($_AseriesGroupId as $sgKey => $sgValue) 
					{
						if($sgKey == $rapd['series_request_id'])
						{
							$GRDetails['transactionMaster'][$j]['flightDetails'][$k]['series_group_id'] = $sgValue;
						}
					}

						//To check for no baggage
					/*
                 	Desc:Change made to get fare_basis_code from flightCabinMappingDetails,
                	*/
					$rapd['fare_basis_code'] = $AfareBasisCode[$rapd['request_approved_flight_id']];
					/*
                 	end of change
                 	*/
                 	$_SisNoBag = $this->_checkToFetchBaggageFare($rapd['fare_basis_code']);
                 	
					if($_SisNoBag=='Y')
						$GRDetails['noBag'] = 'Y';
					$rapd['smart_base_fare']=0;
					$rapd['smart_child_base_fare']=0;
					if(in_array("BN1",$CFG["site"]["freeBaggageAllowed"]))
					{
						if(strtoupper($rapd['fare_filter_method'])=="SMART")
						{
							$rapd['smart_base_fare']=$this->_getRoundOffFare($rapd['base_fare'],2);
							$rapd['smart_child_base_fare']=$this->_getRoundOffFare($rapd['child_base_fare'],2);}
						else
						{
							$rapd['smart_base_fare']= $this->_getRoundOffFare(($rapd['base_fare']+$rapd['ancillary_fare_array']['ADT']['BN1']),2);
							$rapd['smart_child_base_fare']= $this->_getRoundOffFare(($rapd['child_base_fare']+$rapd['ancillary_fare_array']['CHD']['BN1']),2);
						}
					}
					$GRDetails['transactionMaster'][$j]['flightDetails'][$k]['smart_base_fare'] = $rapd['smart_base_fare'];
					$GRDetails['transactionMaster'][$j]['flightDetails'][$k]['smart_child_base_fare'] = $rapd['smart_child_base_fare'];
					if(isset($rapd['no_of_adult']) && $rapd['no_of_adult'] > 0)
					{
						$GRDetails['transactionMaster'][$j]['flightDetails'][$k]['number_of_adult'] = $rapd['no_of_adult'];
						$GRDetails['transactionMaster'][$j]['flightDetails'][$k]['number_of_child'] = $rapd['no_of_child'];
						$GRDetails['transactionMaster'][$j]['flightDetails'][$k]['number_of_infant'] = $rapd['no_of_infant'];

						if($GRDetails['request_type'] == 'adhoc'){
							$GRDetails['transactionMaster'][$j]['flightDetails'][$k]['number_of_passenger'] = $rapd['no_of_adult']+$rapd['no_of_child']+$rapd['no_of_infant']+ $GRDetails['number_of_foc'];
							$GRDetails['transactionMaster'][$j]['flightDetails'][$k]['free_cost_count'] = $GRDetails['number_of_foc'];
						}
						else{
							$GRDetails['transactionMaster'][$j]['flightDetails'][$k]['number_of_passenger'] = $rapd['no_of_adult']+$rapd['no_of_child']+$rapd['no_of_infant']+ $rapd['free_cost_count'];
							$GRDetails['transactionMaster'][$j]['flightDetails'][$k]['free_cost_count'] = $rapd['free_cost_count'];
						}
						
						$GRDetails['transactionMaster'][$j]['flightDetails'][$k]['modifiedRequestIds'] = $_AmodifiedRequestDetails[0]['seriesRequestDetails'][0]['modifiedRequestIds'];
						if(isset($rapd['pnr_no_of_adult']) && $rapd['pnr_no_of_adult'] > 0)
						{
							$GRDetails['transactionMaster'][$j]['flightDetails'][$k]['number_of_adult'] = $rapd['pnr_no_of_adult'];
							$GRDetails['transactionMaster'][$j]['flightDetails'][$k]['number_of_child'] = $rapd['pnr_no_of_child'];
							$GRDetails['transactionMaster'][$j]['flightDetails'][$k]['number_of_infant'] = $rapd['pnr_no_of_infant'];
							$GRDetails['transactionMaster'][$j]['flightDetails'][$k]['number_of_passenger'] = $rapd['pnr_no_of_adult']+$rapd['pnr_no_of_child']+$rapd['pnr_no_of_infant']+$rapd['pnr_no_of_foc'];
						}

					}
					else
					{
						foreach($GRDetails['requestDetails'] AS $_ArequestDetails)
						{
							foreach($_ArequestDetails['seriesRequestDetails'] AS $key=>$_AseriesRequestDetails)
							{
								if($_AseriesRequestDetails['series_request_id'] == $rapd['series_request_id'])
								{
									$GRDetails['transactionMaster'][$j]['flightDetails'][$k]['number_of_passenger'] = $_AseriesRequestDetails['number_of_passenger'];
									$GRDetails['transactionMaster'][$j]['flightDetails'][$k]['number_of_adult'] = $_AseriesRequestDetails['number_of_adult'];
									$GRDetails['transactionMaster'][$j]['flightDetails'][$k]['number_of_child'] = $_AseriesRequestDetails['number_of_child'];
									$GRDetails['transactionMaster'][$j]['flightDetails'][$k]['number_of_infant'] = $_AseriesRequestDetails['number_of_infant'];
									$GRDetails['transactionMaster'][$j]['flightDetails'][$k]['modifiedRequestIds'] = $_AmodifiedRequestDetails[0]['seriesRequestDetails'][0]['modifiedRequestIds'];
								}
							}
						}
					}
		
					foreach($GRDetails['requestDetails'] AS $_ArequestDetails)
					{
						foreach($_ArequestDetails['seriesRequestDetails'] AS $key=>$_AseriesRequestDetails)
						{
							if($_AseriesRequestDetails['series_request_id'] == $rapd['series_request_id'])
							{
								if(!in_array($key,$index))
								$index[] = $key;
							}
						}
					}
				
					foreach($GRDetails['groupDetails'] as $key=>$value)
					{
						if($key == $rapd['series_group_id'] && !in_array($key,$groupIndex))
						{
							$groupIndex[]=$key;
						}
						$approvedId[]=$rapd['series_request_id'];
						if(!in_array($value['seriesRequestDetails'][0]['series_request_id'], $approvedId))
							continue;
						if($seriesRequestIdVal!=$rapd['series_request_id'])
							$_BseriesReqCondition=$value['seriesRequestDetails'][0]['series_request_id'] == $rapd['series_request_id'];
						else
							$_BseriesReqCondition=false;
						if($value['seriesRequestDetails'][0]['number_of_adult'] !=0 && $_BseriesReqCondition)
							$noOfAdultGroups++;
						if($value['seriesRequestDetails'][0]['number_of_child'] !=0 && $_BseriesReqCondition)
							$noOfChildGroups++;
						if($value['seriesRequestDetails'][0]['number_of_infant'] !=0 && $_BseriesReqCondition)
							$noOfInfantGroups++;
						$seriesRequestIdVal=$value['seriesRequestDetails'][0]['series_request_id'];
					}
					
					$flightNameDisplay = $GRDetails['transactionMaster'][$j]['flightDetails'][$k]['flight_number'];
					
					$GRDetails['transactionMaster'][$j]['flightDetails'][$k]['baggageName'] = "";
					$GRDetails['transactionMaster'][$j]['flightDetails'][$k]['mealsName'] = "";
					
					$GRDetails['transactionMaster'][$j]['flightDetails'][$k]['displacement_cost'] = $this->_getRoundOffFare($rapd['displacement_cost'],2);
					$GRDetails['transactionMaster'][$j]['flightDetails'][$k]['booking_profile_fare'] = $this->_getRoundOffFare($rapd['booking_profile_fare'],2);
					$GRDetails['transactionMaster'][$j]['flightDetails'][$k]['competetor_fare'] = $this->_getRoundOffFare($rapd['competetor_fare'],2);

					$GRDetails['transactionMaster'][$j]['flightDetails'][$k]['base_fare'] = $this->_getRoundOffFare($rapd['base_fare'],2);

					$GRDetails['transactionMaster'][$j]['flightDetails'][$k]['tax'] = $this->_getRoundOffFare($rapd['tax'],2);
					
					$GRDetails['transactionMaster'][$j]['flightDetails'][$k]['fare_filter_method'] = $rapd['fare_filter_method'];
					$farePassenger=$rapd['fare_passenger'];
					$childTax=$rapd['child_tax'];
					$childFare=$rapd['child_base_fare']+$rapd['child_tax'];
					$infantTax=$rapd['infant_tax'];
					$infantFare=$rapd['infant_base_fare']+$rapd['infant_tax'];
					$adultTax=$rapd['tax'];
					$rapd['yq']=0;
					$rapd['childYq']=0;
					$rapd['infantYq']=0;
					if($CFG['site']['totalFareDisplay']=='BF' ||($GRDetails['user_details']['pos_code'] == 'GDS' && (count($CFG['limit']['customization'] > 0 ) && isset($CFG['limit']['customization']['POS']) && $CFG['limit']['customization']['POS'] == "customerCategory")))
					{
							$farePassenger = $rapd['base_fare'];
							$childFare=$rapd['child_base_fare'];
							$infantFare=$rapd['infant_base_fare'];
							//here we need to check the config
							if($GRDetails['user_details']['pos_code'] == 'GDS' && (count($CFG['limit']['customization'] > 0 ) && isset($CFG['limit']['customization']['POS']) && $CFG['limit']['customization']['POS'] == "customerCategory")){
								$adultTax = 0 ;
								$childTax = 0;
								$GRDetails['transactionMaster'][$j]['flightDetails'][$k]['tax'] = 0;
								$childFare = $rapd['fare_passenger'];
							}
					}
					else if($CFG['site']['totalFareDisplay']=='BFYQ' || $CFG['site']['totalFareDisplay']=='YQBREAKUP')
					{
						$adultTax=0;
						if($rapd['tax_breakup']!="")
						{
							$adultTax=$this->_getYqTaxByTaxbreakup($rapd['tax_breakup']);	
						}
						if($CFG['site']['totalFareDisplay']=='BFYQ')
						{
                                                    $GRDetails['transactionMaster'][$j]['flightDetails'][$k]['tax']=$this->_getRoundOffFare($adultTax,2);
                                                    $farePassenger= $rapd['base_fare']+$adultTax;
						}
						else
						{   
							$rapd['yq']=$this->_getRoundOffFare($adultTax,2);
							$GRDetails['transactionMaster'][$j]['flightDetails'][$k]['yq']=$rapd['yq'];
							$adultTax=$rapd['tax'];
						}
						$childTax=0;
						if($rapd['child_tax_breakup']!="")
						{
							$childTax=$this->_getYqTaxByTaxbreakup($rapd['child_tax_breakup']);	
						}
						$infantTax=0;
						if($rapd['infant_tax_breakup']!="")
						{
							$infantTax=$this->_getYqTaxByTaxbreakup($rapd['infant_tax_breakup']);	
						}
						if($CFG['site']['totalFareDisplay']=='BFYQ')
						{
							$childFare=$rapd['child_base_fare']+$childTax;
							$infantFare=$rapd['infant_base_fare']+$infantTax;
						}
						else
						{
							$rapd['childYq']=$this->_getRoundOffFare($childTax,2);
							$GRDetails['transactionMaster'][$j]['flightDetails'][$k]['childYq']=$rapd['childYq'];
							$rapd['infantYq']=$this->_getRoundOffFare($infantTax,2);
							$GRDetails['transactionMaster'][$j]['flightDetails'][$k]['infantYq']=$rapd['infantYq'];
							$childTax=$rapd['child_tax'];
							$infantTax=$rapd['infant_tax'];
						}					
						
					}
					//Add the base fare, YQ tax, baggage fare
					if($CFG['site']['baggageFareFromApi']=='Y' && !in_array("BN1",$CFG["site"]["freeBaggageAllowed"]))
					{
						//Add baggage fare in base fare and total fare
						$farePassenger= $this->_getRoundOffFare(($rapd['base_fare']+$adultTax+$rapd['baggauge_fare']),2);
						$GRDetails['transactionMaster'][$j]['flightDetails'][$k]['base_fare']=$this->_getRoundOffFare(($rapd['base_fare']+$rapd['baggauge_fare']),2);
						$rapd['base_fare'] = $this->_getRoundOffFare(($rapd['base_fare']+$rapd['baggauge_fare']),2);
						$childFare=$this->_getRoundOffFare(($rapd['child_base_fare']+$rapd['baggauge_fare']),2);
						$rapd['child_base_fare'] = $this->_getRoundOffFare(($rapd['child_base_fare']+$rapd['baggauge_fare']),2);
						//zero the baggage fare
						$rapd['baggauge_fare'] = 0;
					}
					$GRDetails['transactionMaster'][$j]['flightDetails'][$k]['fare_passenger'] = $this->_getRoundOffFare($farePassenger,2);
					$GRDetails['transactionMaster'][$j]['flightDetails'][$k]['tax_breakup'] = $this->_getRoundOffFare($rapd['tax_breakup'],2);
                                        
					$GRDetails['transactionMaster'][$j]['flightDetails'][$k]['child_base_fare'] = $this->_getRoundOffFare($rapd['child_base_fare'],2);
					$GRDetails['transactionMaster'][$j]['flightDetails'][$k]['child_tax'] = $this->_getRoundOffFare($childTax,2);
					$GRDetails['transactionMaster'][$j]['flightDetails'][$k]['child_total_fare'] = $this->_getRoundOffFare($childFare,2);
					$GRDetails['transactionMaster'][$j]['flightDetails'][$k]['child_tax_breakup'] = $this->_getRoundOffFare($rapd['child_tax_breakup'],2);
					
					$GRDetails['transactionMaster'][$j]['flightDetails'][$k]['infant_base_fare'] = $this->_getRoundOffFare($rapd['infant_base_fare'],2);
					$GRDetails['transactionMaster'][$j]['flightDetails'][$k]['infant_tax'] = $this->_getRoundOffFare($infantTax,2);
					$GRDetails['transactionMaster'][$j]['flightDetails'][$k]['infant_total_fare'] = $this->_getRoundOffFare($infantFare,2);
					$GRDetails['transactionMaster'][$j]['flightDetails'][$k]['infant_tax_breakup'] = $this->_getRoundOffFare($rapd['infant_tax_breakup'],2);
					
					$GRDetails['transactionMaster'][$j]['flightDetails'][$k]['baggauge_fare'] = $this->_getRoundOffFare($rapd['baggauge_fare'],2);
					$GRDetails['transactionMaster'][$j]['flightDetails'][$k]['meals_fare'] = $this->_getRoundOffFare($rapd['meals_fare'],2);
					$_AancillaryFare = $this->_getAncillaryInformation($rapd['ancillary_fare_array']);
					$GRDetails['transactionMaster'][$j]['flightDetails'][$k]['ancillary_fare_others'] = $this->_getRoundOffFare($_AancillaryFare['ancillaryTotalFare'],2);
					$GRDetails['transactionMaster'][$j]['flightDetails'][$k]['ancillary_adult_fare'] = $this->_getRoundOffFare($_AancillaryFare['adultTotalFare'],2);
					$GRDetails['transactionMaster'][$j]['flightDetails'][$k]['ancillary_child_fare'] = $this->_getRoundOffFare($_AancillaryFare['childTotalFare'],2);
					$GRDetails['transactionMaster'][$j]['flightDetails'][$k]['ancillary_infant_fare'] = $this->_getRoundOffFare($_AancillaryFare['infantTotalFare'],2);

					$GRDetails['transactionMaster'][$j]['flightDetails'][$k]['tiger_connect_fare'] = $this->_getRoundOffFare($rapd['tiger_connect_fare'],2);
					$GRDetails['transactionMaster'][$j]['flightDetails'][$k]['ssr_total'] = $this->_getRoundOffFare($rapd['baggauge_fare']+$rapd['meals_fare']+$rapd['tiger_connect_fare']+$_AancillaryFare['ancillaryTotalFare'],2);

					$GRDetails['transactionMaster'][$j]['flightDetails'][$k]['adult_total_fare'] = $this->_getRoundOffFare($rapd['base_fare']+$adultTax,2);

					$GRDetails['transactionMaster'][$j]['flightDetails'][$k]['adult_total_ssr'] = $this->_getRoundOffFare($rapd['baggauge_fare']+$rapd['meals_fare']+$rapd['tiger_connect_fare']+$_AancillaryFare['adultTotalFare'],2);

					$GRDetails['transactionMaster'][$j]['flightDetails'][$k]['adult_total_fare_tax'] = $this->_getRoundOffFare($rapd['base_fare']+$adultTax,2);
					
					$GRDetails['transactionMaster'][$j]['flightDetails'][$k]['child_total_fare'] = $this->_getRoundOffFare($rapd['child_base_fare']+$childTax+$rapd['baggauge_fare']+$rapd['meals_fare']+$rapd['tiger_connect_fare']+$_AancillaryFare['childTotalFare'],2);
					$GRDetails['transactionMaster'][$j]['flightDetails'][$k]['child_total_fare_tax'] = $this->_getRoundOffFare($rapd['child_base_fare']+$childTax,2);
					
					$GRDetails['transactionMaster'][$j]['flightDetails'][$k]['infant_total_fare'] = $this->_getRoundOffFare($rapd['infant_base_fare']+$rapd['infant_tax'],2);
					$GRDetails['transactionMaster'][$j]['flightDetails'][$k]['foc_total_fare'] = $this->_getRoundOffFare($rapd['foc_base_fare']+$rapd['foc_tax'],2);
					$GRDetails['transactionMaster'][$j]['flightDetails'][$k]['adjusted_amount'] = $this->_getRoundOffFare($rapd['adjusted_amount'],2);
					$GRDetails['transactionMaster'][$j]['flightDetails'][$k]['infant_fare'] = $this->_getRoundOffFare($infantFare);
							
					if($rapd['baggage_code']!="" || $rapd['baggauge_fare']!=0 || $rapd['meals_fare']!=0)
					{
						if($_SmodifyStatus == 'Y')
						{
							$sqlSelectBaggageName="SELECT
														IF('".$rapd['baggage_code']."'<>'',(SELECT baggage_name FROM ".$CFG['db']['tbl']['baggage_details']." WHERE baggage_code='".$rapd['baggage_code']."' LIMIT 1),(SELECT baggage_name FROM ".$CFG['db']['tbl']['baggage_details']." WHERE baggage_code=baggage_allowance LIMIT 1)) as baggageName,
														meals_code,
														(SELECT meal_description FROM ".$CFG['db']['tbl']['meal_code_details']." WHERE meal_code=meals_code LIMIT 1) as mealsName
													FROM									   
														".$CFG['db']['tbl']['series_request_details_history']."
													WHERE
														series_request_history_id='".$rapd['series_request_id']."' LIMIT 1";
						}
						else
						{
							$sqlSelectBaggageName="SELECT
											IF('".$rapd['baggage_code']."'<>'',(SELECT baggage_name FROM ".$CFG['db']['tbl']['baggage_details']." WHERE baggage_code='".$rapd['baggage_code']."' LIMIT 1),(SELECT baggage_name FROM ".$CFG['db']['tbl']['baggage_details']." WHERE baggage_code=baggage_allowance LIMIT 1)) as baggageName,
											meals_code,
											(SELECT meal_description FROM ".$CFG['db']['tbl']['meal_code_details']." WHERE meal_code=meals_code LIMIT 1) as mealsName
										   FROM
											".$CFG['db']['tbl']['series_request_details']."
										   WHERE
											series_request_id='".$rapd['series_request_id']."' LIMIT 1";
						}

						if(DB::isError($resultSelectBaggageName=$this->_Oconnection->query($sqlSelectBaggageName)))
						{
							fileWrite($sqlSelectBaggageName,"SqlError","a+");
							return false;
						}
						if($resultSelectBaggageName->numRows() >0)
						{
							$rowSelectBaggageName=$resultSelectBaggageName->fetchRow(DB_FETCHMODE_ASSOC);
							$GRDetails['transactionMaster'][$j]['flightDetails'][$k]['baggageName'] = $rowSelectBaggageName['baggageName'];
							$GRDetails['transactionMaster'][$j]['flightDetails'][$k]['mealsName'] = $rowSelectBaggageName['mealsName'];
						}
						
					}
					$total += (($rapd['base_fare']+$rapd['tax']+$rapd['meals_fare']+$rapd['baggauge_fare']+$rapd['tiger_connect_fare']) * $GRDetails['transactionMaster'][$j]['flightDetails'][$k]['number_of_adult']);
					if($GRDetails['transactionMaster'][$j]['flightDetails'][$k]['number_of_child'] > 0)
					{
						$total +=(($rapd['child_base_fare']+$rapd['child_tax']+$rapd['meals_fare']+$rapd['baggauge_fare']+$rapd['tiger_connect_fare']) * $GRDetails['transactionMaster'][$j]['flightDetails'][$k]['number_of_child']);
						$GRDetails['transactionMaster'][$j]['total_fare'] = $this->_getRoundOffFare($total);
					}
					
					if($GRDetails['transactionMaster'][$j]['flightDetails'][$k]['number_of_infant'] > 0)
					{
						$total += (($rapd['infant_base_fare']+$rapd['infant_tax']) * $GRDetails['transactionMaster'][$j]['flightDetails'][$k]['number_of_infant']);
						$GRDetails['transactionMaster'][$j]['total_fare'] = $this->_getRoundOffFare($total);
					}
					$GRDetails['transactionMaster'][$j]['total_fare'] = $this->_getRoundOffFare($total);
					//Calculate Total Fare details for last transaction only
					if($GRDetails['last_transaction_master_id'] == $tm['transaction_id'])
					{
						if($rapd['accepted_flight_status'] == "Y")
						{	
							$totalFare += (($rapd['base_fare']+$rapd['tax']+$rapd['meals_fare']+$rapd['baggauge_fare']+$rapd['tiger_connect_fare']) * $GRDetails['transactionMaster'][$j]['flightDetails'][$k]['number_of_adult']);
							
							$GRDetails['transactionMaster'][$j]['total_fare'] = $this->_getRoundOffFare($totalFare);
							
							if($CFG['site']['totalFareDisplay']=='BF')
							{
								$perAdultFareTotal += $rapd['base_fare'];
								$perChildFareTotal += $rapd['child_base_fare'];
								/*adding infant details  for displaying in a accept page seperately*/
								$perInfantFareTotal += $rapd['infant_base_fare'];
							}
							else if($CFG['site']['totalFareDisplay']=='BFYQ')
							{
								$adultTax=0;
								if($rapd['tax_breakup']!="")
								{
									$adultTax=$this->_getYqTaxByTaxbreakup($rapd['tax_breakup']);
									$childTax=$this->_getYqTaxByTaxbreakup($rapd['child_tax_breakup']);	
									/*adding infant for displaying infant details  in a accept page seperately */
									$infantTax=$this->_getYqTaxByTaxbreakup($rapd['infant_tax_breakup']);
									
								}
								$perAdultFareTotal += $rapd['base_fare']+$adultTax;
								$perChildFareTotal += $rapd['child_base_fare']+$childTax;
							    	/*calculating infant base fare with tax for displaying infant details in a accept page seperately*/
								$perInfantFareTotal += $rapd['infant_base_fare']+$infantTax;
							}
							else
							{ 	
								$perAdultFareTotal += $rapd['base_fare']+$rapd['tax'];
								$perChildFareTotal += $rapd['child_base_fare']+$rapd['child_tax'];
								/*adding infant for displaying infant details in a accept page seperately*/
								$perInfantFareTotal+=$rapd['infant_base_fare']+$rapd['infant_tax'];
							}
							$perAdultFare += $rapd['base_fare'];
							$perAdultTax += $rapd['tax'];
							$perAdultYq += $rapd['yq'];
							
							$perChildFare += $rapd['child_base_fare'];
							$perChildTax += $rapd['child_tax'];
							$perChildYq += $rapd['childYq'];
							/*adding infant for displaying infant details in a accept page seperately */
							$perInfantFare += $rapd['infant_base_fare'];
							$perInfantTax += $rapd['infant_tax'];
							$perInfantYq += $rapd['infantYq'];
							if($GRDetails['request_type']=='conference')
							{
								$adultcount=$GRDetails['transactionMaster'][$j]['flightDetails'][$k]['number_of_adult'];
								$childcount=$GRDetails['transactionMaster'][$j]['flightDetails'][$k]['number_of_child'];
								$infantcount=$GRDetails['transactionMaster'][$j]['flightDetails'][$k]['number_of_infant'];

								$perpassengerTotal+= $this->_getRoundOffFare($GRDetails['transactionMaster'][$j]['flightDetails'][$k]['adult_total_fare']*$adultcount,2);
								$perpassengerBaseFare+= $this->_getRoundOffFare($GRDetails['transactionMaster'][$j]['flightDetails'][$k]['base_fare']*$adultcount,2);
								$perpassengerTax+= $this->_getRoundOffFare($GRDetails['transactionMaster'][$j]['flightDetails'][$k]['tax']*$adultcount,2);
								$perpassengerYq+= $this->_getRoundOffFare($GRDetails['transactionMaster'][$j]['flightDetails'][$k]['yq']*$adultcount,2);
								$paxcount+=$adultcount;
								if($childcount>0)
								{
										$perpassengerChildTotal +=$this->_getRoundOffFare($GRDetails['transactionMaster'][$j]['flightDetails'][$k]['child_total_fare']*$childcount,2);
										$perpassengerChildBaseFare+=$this->_getRoundOffFare($GRDetails['transactionMaster'][$j]['flightDetails'][$k]['child_base_fare']*$childcount,2);
										$perpassengerChildTax+=$this->_getRoundOffFare($GRDetails['transactionMaster'][$j]['flightDetails'][$k]['child_tax']*$childcount,2);
										$paxChildcount+=$childcount;
										$perpassengerChildYq+= $this->_getRoundOffFare($GRDetails['transactionMaster'][$j]['flightDetails'][$k]['childYq']*$adultcount,2);
								
										$this->_getRoundOffFare($GRDetails['transactionMaster'][$j]['flightDetails'][$k]['child_tax']*$childcount,2);
								}

								if($infantcount>0)
								{		$paxinfant+=$infantcount;
										$perInfantTotal+=$GRDetails['transactionMaster'][$j]['flightDetails'][$k]['infant_total_fare']*$infantcount;
										$totalinfantcount=$GRDetails['number_of_infant'];
										$perInfant=$perInfantTotal/$totalinfantcount;
										/*adding infant details for showing the infant details in a accept page seperately*/
										$perpassengerInfantTotal +=$this->_getRoundOffFare($GRDetails['transactionMaster'][$j]['flightDetails'][$k]['infant_total_fare']*$infantcount,2);
										$perpassengerInfantBaseFare+=$this->_getRoundOffFare($GRDetails['transactionMaster'][$j]['flightDetails'][$k]['infant_base_fare']*$infantcount,2);
										$perpassengerInfantTax+=$this->_getRoundOffFare($GRDetails['transactionMaster'][$j]['flightDetails'][$k]['infant_tax']*$infantcount,2);
										$paxInfantcount+=$infantcount;
										$perpassengerInfantYq+= $this->_getRoundOffFare($GRDetails['transactionMaster'][$j]['flightDetails'][$k]['infantYq']*$adultcount,2);
										$this->_getRoundOffFare($GRDetails['transactionMaster'][$j]['flightDetails'][$k]['infant_tax']*$infantcount,2);
										/*infant details ending*/
									   
								}
								$totalAdultChildcount=$GRDetails['number_of_adult']+$GRDetails['number_of_child'];
								$GRDetails['transactionMaster'][$j]['per_adult_fare_total']=$this->_getRoundOffFare($perpassengerTotal/$GRDetails['number_of_adult']);
								$GRDetails['transactionMaster'][$j]['per_adult_fare']=$this->_getRoundOffFare($perpassengerBaseFare/$GRDetails['number_of_adult']);
								$GRDetails['transactionMaster'][$j]['per_adult_tax']=$this->_getRoundOffFare($perpassengerTax/$GRDetails['number_of_adult'],2);
								$GRDetails['transactionMaster'][$j]['per_adult_yq']=$this->_getRoundOffFare($perpassengerYq/$GRDetails['number_of_adult'],2);

								$GRDetails['transactionMaster'][$j]['per_child_fare_total']=$this->_getRoundOffFare($perpassengerChildTotal/$GRDetails['number_of_child'],2);
								$GRDetails['transactionMaster'][$j]['per_child_fare']=$this->_getRoundOffFare($perpassengerChildBaseFare/$GRDetails['number_of_child'],2);
								$GRDetails['transactionMaster'][$j]['per_child_tax']=$this->_getRoundOffFare($perpassengerChildTax/$GRDetails['number_of_child'],2);
								$GRDetails['transactionMaster'][$j]['per_child_yq']=$this->_getRoundOffFare($perpassengerChildYq/$GRDetails['number_of_child'],2);
								/*adding the infant details in the displaying the infant details in a accept page seperately*/
								$GRDetails['transactionMaster'][$j]['per_infant_fare_total']=$this->_getRoundOffFare($perpassengerInfantTotal/$GRDetails['number_of_infant'],2);

								$GRDetails['transactionMaster'][$j]['per_infant_fare']=$this->_getRoundOffFare($perpassengerInfantBaseFare/$GRDetails['number_of_infant'],2);
								$GRDetails['transactionMaster'][$j]['per_infant_tax']=$this->_getRoundOffFare($perpassengerInfantTax/$GRDetails['number_of_infant'],2);
								$GRDetails['transactionMaster'][$j]['per_infant_yq']=$this->_getRoundOffFare($perpassengerInfantYq/$GRDetails['number_of_infant'],2);
								/*infant details ending*/

								$GRDetails['transactionMaster'][$j]['infant_fare']=$this->_getRoundOffFare($perInfant,2);
								/*Old ancillary amount with infant fare*/
								//$ancillaryAmount = $perInfant+$rapd['meals_fare']+$rapd['baggauge_fare'];
								/*New ancillary amount without infant fare*/
								//$ancillaryAmount = $rapd['meals_fare']+$rapd['baggauge_fare'];
								$_AancillaryFare = $this->_getAncillaryInformation($rapd['ancillary_fare_array']);
								$_AbaggageAmount[$rapd['request_approved_flight_id']] = $rapd['baggauge_fare']+$rapd['meals_fare']+$_AancillaryFare['ancillaryTotalFare'];
								//$ancillaryAmount =array_sum($_AbaggageAmount);
								$ancillaryAmount += $rapd['meals_fare']+$rapd['baggauge_fare']+$_AancillaryFare['ancillaryTotalFare'];
								$GRDetails['transactionMaster'][$j]['ancillary_fare']=$_AancillaryFare['ancillaryTotalFare'];
								$GRDetails['transactionMaster'][$j]['flightDetails'][$k]['ancillary_fare']=$_AancillaryFare['ancillaryTotalFare'];
								$_AcountGroup[$rapd['request_approved_flight_id']] += 1;
								$GRDetails['transactionMaster'][$j]['ancillary_charges'] = $this->_getRoundOffFare($ancillaryAmount,2);
								
							}
							if($GRDetails['request_type']=='series')
							{  
								$GRDetails['transactionMaster'][$j]['per_adult_fare_total']=_calculateDivisibleByZeroFare($perAdultFareTotal, $noOfAdultGroups,2,$this->_ScurrencyCode);
								$GRDetails['transactionMaster'][$j]['per_adult_fare']=_calculateDivisibleByZeroFare($perAdultFare, $noOfAdultGroups,2,$this->_ScurrencyCode);
								$GRDetails['transactionMaster'][$j]['per_adult_tax']=_calculateDivisibleByZeroFare($perAdultTax, $noOfAdultGroups,2,$this->_ScurrencyCode);
								$GRDetails['transactionMaster'][$j]['per_adult_yq']=_calculateDivisibleByZeroFare($perAdultYq, $noOfAdultGroups,2,$this->_ScurrencyCode);
								
								$GRDetails['transactionMaster'][$j]['per_child_fare_total']=$this->_getRoundOffFare($perChildFareTotal/$noOfChildGroups,2);
								$GRDetails['transactionMaster'][$j]['per_child_fare']=$this->_getRoundOffFare($perChildFare/$noOfChildGroups,2);
								$GRDetails['transactionMaster'][$j]['per_child_tax']=$this->_getRoundOffFare($perChildTax/$noOfChildGroups,2);
								$GRDetails['transactionMaster'][$j]['per_child_yq']=$this->_getRoundOffFare($perChildYq/$noOfChildGroups,2);
								
								$GRDetails['transactionMaster'][$j]['infant_fare']=$this->_getRoundOffFare($perInfant,2);
								/*adding the infant details for displaying infant details in a accept page seperately for series request*/
								$GRDetails['transactionMaster'][$j]['per_infant_fare_total']=$this->_getRoundOffFare($perInfantFareTotal/$noOfInfantGroups,2);
								$GRDetails['transactionMaster'][$j]['per_infant_fare']=$this->_getRoundOffFare($perInfantFare/$noOfInfantGroups,2);
								$GRDetails['transactionMaster'][$j]['per_infant_tax']=$this->_getRoundOffFare($perInfantTax/$noOfInfantGroups,2);
								$GRDetails['transactionMaster'][$j]['per_infant_yq']=$this->_getRoundOffFare($perInfantYq/$noOfInfantGroups,2);
								/*infant details ending*/
								/*Old ancillary amount with infant fare*/
								//$ancillaryAmount = $perInfant+$rapd['meals_fare']+$rapd['baggauge_fare'];																
								/*New ancillary amount without infant fare*/
								$ancillaryAmount = $rapd['meals_fare']+$rapd['baggauge_fare'];
								$_AancillaryFare = $this->_getAncillaryInformation($rapd['ancillary_fare_array']);
								$ancillaryAmount = $rapd['meals_fare']+$rapd['baggauge_fare']+$_AancillaryFare['ancillaryTotalFare'];
								$GRDetails['transactionMaster'][$j]['ancillary_fare']=$_AancillaryFare['ancillaryTotalFare'];
								$GRDetails['transactionMaster'][$j]['flightDetails'][$k]['ancillary_fare']=$_AancillaryFare['ancillaryTotalFare'];
								$GRDetails['transactionMaster'][$j]['ancillary_charges'] = $this->_getRoundOffFare($ancillaryAmount,2);
							}
							else if($GRDetails['request_type']!='conference')
							{   
								$GRDetails['transactionMaster'][$j]['per_adult_fare_total'] = $this->_getRoundOffFare($perAdultFareTotal/$noOfAdultGroups);
								$GRDetails['transactionMaster'][$j]['per_adult_fare'] = $this->_getRoundOffFare($perAdultFare/$noOfAdultGroups);
								$GRDetails['transactionMaster'][$j]['per_adult_tax'] = $this->_getRoundOffFare($perAdultTax/$noOfAdultGroups);
								$GRDetails['transactionMaster'][$j]['per_adult_yq']=$this->_getRoundOffFare($perAdultYq/$noOfAdultGroups,2);
								$GRDetails['transactionMaster'][$j]['per_child_yq']=$this->_getRoundOffFare($perChildYq/$noOfAdultGroups,2);
								
								$GRDetails['transactionMaster'][$j]['per_child_fare_total'] = $this->_getRoundOffFare($perChildFareTotal/$noOfChildGroups);
								$GRDetails['transactionMaster'][$j]['per_child_fare'] = $this->_getRoundOffFare($perChildFare/$noOfChildGroups);
								$GRDetails['transactionMaster'][$j]['per_child_tax'] = $this->_getRoundOffFare($perChildTax/$noOfChildGroups);
								/*adding infant details for displaying infant details in a accept page seperately*/
							   $GRDetails['transactionMaster'][$j]['per_infant_yq']=$this->_getRoundOffFare($perInfantYq/$noOfInfantGroups,2);
								$GRDetails['transactionMaster'][$j]['per_infant_fare_total'] = $this->_getRoundOffFare($perInfantFareTotal/$noOfInfantGroups);
								$GRDetails['transactionMaster'][$j]['per_infant_fare'] = $this->_getRoundOffFare($perInfantFare/$noOfInfantGroups);


								$GRDetails['transactionMaster'][$j]['per_infant_tax'] = $this->_getRoundOffFare($perInfantTax/$noOfInfantGroups);
								/*infant details ending*/

						
							}	
							$flightCount = count($GRDetails['transactionMaster'][$j]['flightDetails']);
							
							$averagePerAdultTotalFare = $perAdultFareTotal / $flightCount;
							$GRDetails['transactionMaster'][$j]['average_per_adult_fare_total'] = $this->_getRoundOffFare($averagePerAdultTotalFare);
					
							$averagePerAdultFare = $perAdultFare / $flightCount;
							$GRDetails['transactionMaster'][$j]['average_per_adult_fare'] = $this->_getRoundOffFare($averagePerAdultFare);

							$averagePerAdultTax = $perAdultTax / $flightCount;
							$GRDetails['transactionMaster'][$j]['average_per_adult_tax'] = $this->_getRoundOffFare($averagePerAdultTax);
                           	
                                                        $averagePerAdultYq = $perAdultYq / $flightCount;
							$GRDetails['transactionMaster'][$j]['average_per_adult_yq'] = $this->_getRoundOffFare($averagePerAdultYq);
                           	
                           					
							$yqtax=$this->_getYqTaxByTaxbreakup($rapd['tax_breakup']);
							$yqtaxPerPax+=$yqtax;
							$GRDetails['transactionMaster'][$j]['yqtax_per_pax']=$this->_getRoundOffFare($yqtaxPerPax);

							$yqtaxchild=$this->_getYqTaxByTaxbreakup($rapd['child_tax_breakup']);
							$yqTaxForChild+=$yqtaxchild;
							$GRDetails['transactionMaster'][$j]['child_yqtax_per_pax']=$this->_getRoundOffFare($yqTaxForChild);

							$yqTaxInfant=$this->_getYqTaxByTaxbreakup($rapd['infant_tax_breakup']);
							$yqTaxForInfant+=$yqTaxInfant;
							$GRDetails['transactionMaster'][$j]['infant_yqtax_per_pax']=$this->_getRoundOffFare($yqTaxForInfant);
							
							$infantFare=$rapd['infant_base_fare']+$rapd['infant_tax'];
							if($CFG['site']['totalFareDisplay']=='BF')
							{
								$infantFare=$rapd['infant_base_fare'];
							}
							else if($CFG['site']['totalFareDisplay']=='BFYQ')
							{								
								$infantTax=0;
								if($rapd['infant_tax_breakup']!="")
								{
									$infantTax=$this->_getYqTaxByTaxbreakup($rapd['infant_tax_breakup']);	
								}					
								$infantFare=$rapd['infant_base_fare']+$infantTax;
							}
							if($GRDetails['request_type']!='conference')
							{
								/*Old ancillary charges with infant fare */
								//$ancillaryCharges += $infantFare+$rapd['meals_fare']+$rapd['baggauge_fare'];
								/*new ancillary charges without infant fare */
								$_AancillaryFare = $this->_getAncillaryInformation($rapd['ancillary_fare_array']);
								$_AbaggageAmount[$rapd['request_approved_flight_id']] = $rapd['baggauge_fare']+$rapd['meals_fare']+$_AancillaryFare['ancillaryTotalFare'];
								//$ancillaryCharges +=$rapd['meals_fare']+$rapd['baggauge_fare'];
								/*ending*/
								//$ancillaryCharges =array_sum($_AbaggageAmount);
								$ancillaryCharges += $rapd['meals_fare']+$rapd['baggauge_fare']+$_AancillaryFare['ancillaryTotalFare'];
								$GRDetails['transactionMaster'][$j]['ancillary_fare']=$_AancillaryFare['ancillaryTotalFare'];
								$GRDetails['transactionMaster'][$j]['flightDetails'][$k]['ancillary_fare']=$_AancillaryFare['ancillaryTotalFare'];
								
								
								$_AcountGrp[$rapd['request_approved_flight_id']] +=1;
								/*ending*/
								$GRDetails['transactionMaster'][$j]['ancillary_charges'] = $this->_getRoundOffFare($ancillaryCharges);
							}
                                                        
							$averageAncillaryCharges = $ancillaryCharges/$flightCount;
							$GRDetails['transactionMaster'][$j]['average_ancillary_charges'] = $this->_getRoundOffFare($averageAncillaryCharges);
							
							$infantFareVal +=$infantFare;
							if($GRDetails['request_type']!='conference')
							{     
								$GRDetails['transactionMaster'][$j]['infant_fare'] = $this->_getRoundOffFare($infantFareVal);
							}
                                                        
							$infantFareValAverage = $infantFareVal/$flightCount;
							$GRDetails['transactionMaster'][$j]['average_infant_fare'] = $this->_getRoundOffFare($infantFareValAverage);
							
							
							//$mealsFare +=$rapd['meals_fare'];
							$_AMealAmount[$rapd['request_approved_flight_id']] =$rapd['meals_fare'];
							$mealsFare =array_sum($_AMealAmount);
							$_AcountGroups[$rapd['request_approved_flight_id']] += 1;
							$GRDetails['transactionMaster'][$j]['meals_fare'] =$this->_getRoundOffFare($mealsFare);
							
							//$baggageFare +=$rapd['baggauge_fare'];
							$_ABaggageAmo[$rapd['request_approved_flight_id']] =$rapd['baggauge_fare'];
							$baggageFare =array_sum($_ABaggageAmo);
							$GRDetails['transactionMaster'][$j]['baggauge_fare'] = $this->_getRoundOffFare($baggageFare);
							
							//SVCF other ssr adding.
							$_AancillaryFare = $this->_getAncillaryInformation($rapd['ancillary_fare_array']);
							$_AOtherAmount[$rapd['request_approved_flight_id']] =$_AancillaryFare['ancillaryTotalFare'];
							$_AOtherAmounts =array_sum($_AOtherAmount);
							$GRDetails['transactionMaster'][$j]['ancillary_fare_other'] = $this->_getRoundOffFare($_AOtherAmounts);

							if($GRDetails['transactionMaster'][$j]['flightDetails'][$k]['number_of_child'] > 0)
							{
								$totalFare +=(($rapd['child_base_fare']+$rapd['child_tax']+$rapd['meals_fare']+$rapd['baggauge_fare']+$rapd['tiger_connect_fare']) * $GRDetails['transactionMaster'][$j]['flightDetails'][$k]['number_of_child']);
								$GRDetails['transactionMaster'][$j]['total_fare'] = $this->_getRoundOffFare($totalFare);
							}
							if($GRDetails['transactionMaster'][$j]['flightDetails'][$k]['number_of_infant'] > 0)
							{
								$totalFare += (($rapd['infant_base_fare']+$rapd['infant_tax']) * $GRDetails['transactionMaster'][$j]['flightDetails'][$k]['number_of_infant']);
								$GRDetails['transactionMaster'][$j]['total_fare'] = $this->_getRoundOffFare($totalFare);
							}
							
							
					}
					}
					
					//Via flight details
					if($rapd['stops']>0)
					{
						$objViaFlightDetails->__Construct();
						$objViaFlightDetails->_IrequestApprovedFlightId=$rapd['request_approved_flight_id'];
						$GRDetails['transactionMaster'][$j]['flightDetails'][$k]['viaFlight']=$objViaFlightDetails->_selectViaFlightDetails();
					}
					if(isset($GRDetails['transactionMaster'][$j]['flightDetails'][$k]['viaFlight']) && is_array($GRDetails['transactionMaster'][$j]['flightDetails'][$k]['viaFlight']))
					{
						#To show airline code for all flights eg:GO-105/GO-104
						if(isset($CFG['site']['showAirlineCodeAllFlights']) && $CFG['site']['showAirlineCodeAllFlights']=="Y") 
						{
							$viaFlightNumber = array_map(function($el){ return $el['airline_code'].'-'.$el['flight_number']; }, $GRDetails['transactionMaster'][$j]['flightDetails'][$k]['viaFlight']);
							$flightNameDisplay=implode("/",$viaFlightNumber);
						}
						else
						{
							$viaFlightNumber = array_map(function($el){ return $el['flight_number']; }, $GRDetails['transactionMaster'][$j]['flightDetails'][$k]['viaFlight']);
							$flightNameDisplay=$GRDetails['transactionMaster'][$j]['flightDetails'][$k]['airline_code']."-".implode("/",$viaFlightNumber);
						}
						
					}
					$GRDetails['transactionMaster'][$j]['flightDetails'][$k]['flightNameDisplay']=$flightNameDisplay;
					if($rapd['accepted_flight_status'] == "Y")
					{
						foreach($GRDetails['requestDetails'] AS $key=>$_ArequestDetails)
						{
							foreach($_ArequestDetails['seriesRequestDetails'] AS $subKey=>$_AseriesRequestDetails)
							{
								if($_AseriesRequestDetails['series_request_id'] == $rapd['series_request_id'])
								{
									$GRDetails['requestDetails'][$key]['seriesRequestDetails'][$subKey]['flightNameDisplay']=$flightNameDisplay;
									
								}
							}
						}
					}
					$k++;
				}
		
				if(isset($index) && count($index)>0)
				{
					foreach($GRDetails['requestDetails'] AS $key=>$_ArequestDetails)
					{
						foreach($_ArequestDetails['seriesRequestDetails'] AS $subKey=>$_AseriesRequestDetails)
						{
								if(!in_array($subKey,$index))
								unset($GRDetails['requestDetails'][$key]['seriesRequestDetails'][$subKey]);
						}
					$GRDetails['requestDetails'][$key]['seriesRequestDetails'] = array_values($GRDetails['requestDetails'][$key]['seriesRequestDetails']);
					}
				}

				if(count($groupIndex)>0)
				{
					foreach($GRDetails['groupDetails'] AS $key=>$_ArequestDetails)
					{
						if(!in_array($key,$groupIndex))
							unset($GRDetails['groupDetails'][$key]);
					}
				}
				
				// Set 'Y', for acceptance queue only for airline groups to show blockpnr option
				if($GRDetails['last_transaction_master_id'] == $tm['transaction_id'] && strtotime($_DcurrenctUTCDate) < strtotime($tm['fare_expiry_date']) && ($GRDetails['current_status_code'] == 'AN' || $GRDetails['current_status_code'] == 'NJ'))
					$GRDetails['fare_validity_status'] = 'Y';

				// Below condition is for the accepance queue process
				// Enable or Disble the BlockPNR and Accept button for TA and AU
				if(isset($CFG["site"]["acceptanceQueue"]) && isset($CFG["site"]["acceptanceQueue"]["status"]) && $CFG["site"]["acceptanceQueue"]["status"] == "Y" && $GRDetails['current_status_code'] == 'NA' && $GRDetails['last_transaction_master_id'] == $tm['transaction_id']){
					if(strtotime($_DcurrenctUTCDate) < strtotime($tm['fare_expiry_date'])){
						if(isset($CFG["site"]["acceptanceQueue"]["blockPNRAllowedGroups"]) && !empty($CFG["site"]["acceptanceQueue"]["blockPNRAllowedGroups"]) && in_array($_SESSION['groupRM']['groupId'],$CFG["site"]["acceptanceQueue"]["blockPNRAllowedGroups"])){
							$GRDetails['fare_validity_status'] = 'Y';
							$GRDetails['allowBlockPNRQueue'] = 'Y';
						}else{
							$GRDetails['fare_validity_status'] = 'Y';
							$GRDetails['allowBlockPNRQueue'] = 'N';
						}
					}else if(isset($CFG["site"]["acceptanceQueue"]["blockPNRAllowedGroups"]) && !empty($CFG["site"]["acceptanceQueue"]["blockPNRAllowedGroups"]) && in_array($_SESSION['groupRM']['groupId'],$CFG["site"]["acceptanceQueue"]["blockPNRAllowedGroups"])){
						$GRDetails['fare_validity_status'] = 'Y';
						$GRDetails['allowBlockPNRQueue'] = 'Y';
					}
				}

				//Response details
				$objResponseDetails->__construct();
				$objResponseDetails->_ItransactionMasterId=$tm['transaction_id'];
				$objResponseDetails->_IairlinesRequestId=$tm['airlines_request_id'];
				$GRDetails['transactionMaster'][$j]['responseDetails']=$objResponseDetails->_selectResponseDetails();
				
				if(in_array($GRDetails['current_status'],$CFG['site']['airlinesReviewStatus']))
				{
					if($j!=0)
					{
						$GRDetails['transactionMaster'][$j-1]['per_adult_fare_total'] = $GRDetails['transactionMaster'][$j]['per_adult_fare_total'];
						$GRDetails['transactionMaster'][$j-1]['per_adult_fare'] = $GRDetails['transactionMaster'][$j]['per_adult_fare'];
						$GRDetails['transactionMaster'][$j-1]['per_adult_tax'] = $GRDetails['transactionMaster'][$j]['per_adult_tax'];

						if(!in_array("CHD", $CFG['settings']['hidePaxDetails'])){
							$GRDetails['transactionMaster'][$j-1]['per_child_fare_total'] = $GRDetails['transactionMaster'][$j]['per_child_fare_total'];
							$GRDetails['transactionMaster'][$j-1]['per_child_fare'] = $GRDetails['transactionMaster'][$j]['per_child_fare'];
							$GRDetails['transactionMaster'][$j-1]['per_child_tax'] = $GRDetails['transactionMaster'][$j]['per_child_tax'];
						}
						if(!in_array("INFT", $CFG['settings']['hidePaxDetails'])){
								
							$GRDetails['transactionMaster'][$j-1]['per_infant_fare_total'] = $GRDetails['transactionMaster'][$j]['per_infant_fare_total'];
							$GRDetails['transactionMaster'][$j-1]['per_infant_fare'] = $GRDetails['transactionMaster'][$j]['per_infant_fare'];
							$GRDetails['transactionMaster'][$j-1]['per_infant_tax'] = $GRDetails['transactionMaster'][$j]['per_infant_tax'];
						}
					}
					if(!empty($GRDetails['transactionMaster'][$j]['responseDetails'][0]))
					{
						$responseDetailsArray[]=$GRDetails['transactionMaster'][$j]['responseDetails'][0];
					}
					
					if(count($responseDetailsArray)>0)
					{
						$previousStatus=4;
						$previousStatusCode=$this->_getCurrentStatusCode($previousStatus);
					}
					else
					{
						$previousStatus=1;
						$previousStatusCode=$this->_getCurrentStatusCode($previousStatus);
					}
					$_SprocessingStatus = 'Y';
				}
				$GRDetails['transactionMaster'][$j]['paymentValidityDetails']=$this->_getMultiplePaymentValidityDetails($requestMasterId,$tm['transaction_id']);
				
				#Getting the Modified history details for this transaction_id starts
				if($tm['request_master_history_id']>0)
				{
					fileRequire("dataModels/class.requestMasterHistory.php");
					$_OrequestMasterHistory = new requestMasterHistory();
					$_OrequestMasterHistory->_Oconnection = $this->_Oconnection;
					$_OrequestMasterHistory->_IrequestMasterHistoryId = $tm['request_master_history_id'];
					$requestMasterHistory = $_OrequestMasterHistory->_selectRequestMasterHistory();					
					
					foreach($requestMasterHistory as $requestMasterHistoryKey=>$requestMasterHistoryValues)
					{		
						$tempRequestMasterHistory=array();						
						$tempRequestMasterHistory['trip_type']=$this->_getTripTypeText($requestMasterHistoryValues['trip_type']);
						$tempRequestMasterHistory['cabin']=$requestMasterHistoryValues['cabin'];
						$tempRequestMasterHistory['group_category_id']=$this->_getGroupCategoryName($requestMasterId,$requestMasterHistoryValues['group_category_id']);
						$tempRequestMasterHistory['user_currency']=$requestMasterHistoryValues['user_currency'];
						$tempRequestMasterHistory['request_fare']=$requestMasterHistoryValues['request_fare'];
						$tempRequestMasterHistory['remarks']=$requestMasterHistoryValues['remarks'];					
						$GRDetails['transactionMaster'][$j]['modifiedHistory'][$requestMasterHistoryKey]=$tempRequestMasterHistory;				

						fileRequire("dataModels/class.requestDetailsHistory.php");
						$_OrequestDetailsHistory = new requestDetailsHistory();
						$_OrequestDetailsHistory->_Oconnection = $this->_Oconnection;
						$_OrequestDetailsHistory->_IrequestMasterHistoryId = $tm['request_master_history_id'];
						$requestDetailsHistory = $_OrequestDetailsHistory->_selectRequestDetailsHistory();						

						foreach($requestDetailsHistory as $requestDetailsHistoryKey=>$requestDetailsHistoryValues)
						{							
							$tempRequestDetailsHistory=array();
							$tempRequestDetailsHistory['origin_airport_code']=$requestDetailsHistoryValues['origin_airport_code'];
							$tempRequestDetailsHistory['dest_airport_code']=$requestDetailsHistoryValues['dest_airport_code'];
							$tempRequestDetailsHistory['departure_date']=$requestDetailsHistoryValues['from_date'];
							$tempRequestDetailsHistory['flight_number']=$requestDetailsHistoryValues['flight_number'];

							#Getting series request details history
							fileRequire("dataModels/class.seriesRequestDetailsHistory.php");
							$_OseriesRequestDetailsHistory = new seriesRequestDetailsHistory();
							$_OseriesRequestDetailsHistory->_Oconnection = $this->_Oconnection;
							$_OseriesRequestDetailsHistory->_IrequestDetailsHistoryId = $requestDetailsHistoryValues['request_details_history_id'];
							$_AseriesRequestHistory = $_OseriesRequestDetailsHistory->_selectSeriesRequestDetailsHistory();		

							$totalPaxCount=$_AseriesRequestHistory[0]['number_of_adult']+$_AseriesRequestHistory[0]['number_of_child']+$_AseriesRequestHistory[0]['number_of_infant'];
							$tempRequestDetailsHistory['paxDetails']=$totalPaxCount.'('.$_AseriesRequestHistory[0]['number_of_adult'].'A,'.$_AseriesRequestHistory[0]['number_of_child'].'C,'.$_AseriesRequestHistory[0]['number_of_infant'].'I)';

							$GRDetails['transactionMaster'][$j]['modifiedHistory'][$requestMasterHistoryKey]['requestHistory'][$requestDetailsHistoryKey]=$tempRequestDetailsHistory;
														
						}					
					}
					$GRDetails['request_fare'] = $tempRequestMasterHistory['request_fare'];					
				}
				#Getting the Modified history details for this transaction_id ends
				$j++;
			}
			
		}
		if($_SprocessingStatus == "Y")
		{
			$GRDetails['current_status']=$previousStatus;
			$GRDetails['current_status_code'] = $previousStatusCode;
			$GRDetails['processingStatus'] = $_SprocessingStatus;
		}
		return $GRDetails;
	}

	function _getTotalAmountPaxPnrBlocking($requestMasterId,$noOfPax,$adult,$child,$infant)
	{
		global $CFG;
		$sql="SELECT 
				rm.user_currency,
				rm.exchange_rate,
				rm.number_of_passenger,
				rm.number_of_adult,
				rm.number_of_child,
				rm.number_of_infant,
				arm.airlines_request_id 
		       FROM 
		            	".$CFG['db']['tbl']['request_master']." rm, 
		           	".$CFG['db']['tbl']['airlines_request_mapping']." arm       
		       WHERE 
		            	rm.request_master_id='".$requestMasterId."' AND 
		            	rm.request_master_id=arm.request_master_id";
        	if(DB::isError($result = $this->_Oconnection->query($sql))) 
        	{
			fileWrite($sql,"SqlError","a+");
			return false;
		}
		$this->_Adetails = $result->fetchRow(DB_FETCHMODE_ASSOC);

        	$fetchSql="SELECT 
                            transaction_id,
                            fare_advised,
                            child_fare,
                            infant_fare,
                            payment_validity,
                            payment_validity_type AS payment_type_id,
                            passenger_validity,
                            passenger_validity_type AS passenger_type_id,
					        (SELECT fare_validity_type FROM ".$CFG['db']['tbl']['fare_validity_type_details']." WHERE fare_validity_type_id = payment_validity_type) payment_type_name,
					        (SELECT fare_validity_type FROM ".$CFG['db']['tbl']['fare_validity_type_details']." WHERE fare_validity_type_id = passenger_validity_type) passenger_type_name
                    FROM 
                            ".$CFG['db']['tbl']['transaction_master']."
                    WHERE 
                            airlines_request_id='".$this->_Adetails['airlines_request_id']."' ORDER BY transaction_id DESC limit 1";
       		if(DB::isError($fetchResult = $this->_Oconnection->query($fetchSql))) 
        	{
			fileWrite($fetchSql,"SqlError","a+");
			return false;
		}
        	$this->_AtransactionDetails = $fetchResult->fetchRow(DB_FETCHMODE_ASSOC);
		$tempAdultFare=0;
		$tempChildFare=0;

		$sqlSelectRequestApprovedFlightDetails="SELECT
				request_approved_flight_id,
				base_fare,
				tax,
				fare_passenger,
				child_base_fare,
				child_tax
			FROM
				".$CFG['db']['tbl']['request_approved_flight_details']."
			WHERE
				airlines_request_id='".$this->_Adetails['airlines_request_id']."' AND 
				transaction_master_id='".$this->_AtransactionDetails['transaction_id']."' AND 
				accepted_flight_status='Y'";

		if(DB::isError($resultSelectRequestApprovedFlightDetails=$this->_Oconnection->query($sqlSelectRequestApprovedFlightDetails)))
		{
			fileWrite($sqlSelectRequestApprovedFlightDetails,"SqlError","a+");
			return false;
		}

		if($resultSelectRequestApprovedFlightDetails->numRows() >0)
		{
			while($rowSelectRequestApprovedFlightDetails=$resultSelectRequestApprovedFlightDetails->fetchRow(DB_FETCHMODE_ASSOC))
			{
				$sqlSelectFlightCabinMapping="SELECT
									flight_cabin_mapping_id,
									request_approved_flight_id,
									adult_base_fare,
									adult_tax,
									adult_total_fare,
									child_base_fare,
									child_tax,
									child_total_fare,
									infant_base_fare,
									infant_tax,
									infant_total_fare
							      FROM
									".$CFG['db']['tbl']['flight_cabin_mapping_details']."
							      WHERE
									request_approved_flight_id='".$rowSelectRequestApprovedFlightDetails['request_approved_flight_id']."'
									AND adult_base_fare!=0
									ORDER BY flight_cabin_mapping_id LIMIT 1";

				if(DB::isError($resultSelectFlightCabinMapping=$this->_Oconnection->query($sqlSelectFlightCabinMapping)))
				{
					fileWrite($sqlSelectFlightCabinMapping,"SqlError","a+");
					return false;
				}

				if($resultSelectFlightCabinMapping->numRows() >0)
				{
					$rowSelectFlightCabinMapping=$resultSelectFlightCabinMapping->fetchRow(DB_FETCHMODE_ASSOC);

					$tempAdultFare+=$rowSelectFlightCabinMapping['adult_base_fare']+$rowSelectFlightCabinMapping['adult_tax'];
					$tempChildFare+=$rowSelectFlightCabinMapping['child_base_fare']+$rowSelectFlightCabinMapping['child_tax'];
				}
				else
				{
					$tempAdultFare+=$rowSelectRequestApprovedFlightDetails['base_fare']+$rowSelectRequestApprovedFlightDetails['tax'];
					$tempChildFare+=$rowSelectRequestApprovedFlightDetails['child_base_fare']+$rowSelectRequestApprovedFlightDetails['child_tax'];
				}
			}
		}

		$this->_ItotalAmount = $adult*$tempAdultFare;
		if($child) {
			
			$this->_ItotalAmount += $child*$tempChildFare;
		}


        	#@@$this->_ItotalAmount = $this->_ArequestDetails['number_of_adult']*$this->_AtransactionDetails['fare_advised'];
		#@@if($this->_ArequestDetails['number_of_child']) {
			
			#@@$this->_ItotalAmount += $this->_ArequestDetails['number_of_child']*$this->_AtransactionDetails['child_fare'];
		#@@}

		if($infant) {
			
			$this->_ItotalAmount += $infant*$this->_AtransactionDetails['infant_fare'];
		}

		/* Baggage And Meals */

		$transcactionId=$this->_AtransactionDetails['transaction_id'];

		$sqlSelectBaggageAndMeals="SELECT
							sum(baggauge_fare) as baggageFare,
							sum(meals_fare) as mealsFare
					   FROM
							".$CFG['db']['tbl']['request_approved_flight_details']."
					   WHERE
							transaction_master_id='".$transcactionId."' AND 
							accepted_flight_status='Y'";

		if(DB::isError($resultSelectBaggageAndMeals = $this->_Oconnection->query($sqlSelectBaggageAndMeals))) 
		{
			fileWrite($sqlSelectBaggageAndMeals,"SqlError","a+");
			return false;
		}

		$baggageFare=0;
		$mealsFare=0;
       		$tigerConnectFare=0;
		if($resultSelectBaggageAndMeals->numRows() > 0)
		{
			$rowSelectBaggageAndMeals=$resultSelectBaggageAndMeals->fetchRow(DB_FETCHMODE_ASSOC);
			
			$baggageFare =$rowSelectBaggageAndMeals['baggageFare'];
			$mealsFare =$rowSelectBaggageAndMeals['mealsFare'];
		}

		if($baggageFare != 0)
		{
			$this->_ItotalAmount += $adult*$baggageFare;
			if($child) 
			{
				$this->_ItotalAmount += $child*$baggageFare;
			}
		}
		if($mealsFare != 0)
		{
			$this->_ItotalAmount += $adult*$mealsFare;
			if($child) 
			{
				$this->_ItotalAmount += $child*$mealsFare;
			}
		}
        	return $this->_ItotalAmount;
	}
	function _getNoOfPassenger($requestMasterId)
	{	
		global $CFG;
		#To get the number of pax in pnr
		$fetchPaxSql="SELECT 
					no_of_adult as adult,
					no_of_child as child,
            				no_of_infant as infant
				FROM 
					".$CFG['db']['tbl']['pnr_blocking_details']." 
				WHERE 
					request_master_id=".$requestMasterId." group by pnr";
		
		return $this->_executeQuery($fetchPaxSql);
	}
	
	function _getPnrDetails($_IrequestMasterId,$_SpnrNumber=0,$TFflag='N')
	{

		global $CFG;
		$_rowCurrency=$this->_getUserCurrency($_IrequestMasterId);
		$_SuserCurrency=$_rowCurrency['user_currency'];
		/*$sql = "SELECT DISTINCT
					request_id,
					origin_airport_code,
					dest_airport_code,
					from_date,
					pnr
				FROM
					".$CFG['db']['tbl']['request_details']."
				WHERE
					UPPER(status) != 'PENDING' AND
					request_master_id = ".$_IrequestMasterId;
		*/
		$sql = "SELECT DISTINCT
					request_id,
					origin_airport_code,
					dest_airport_code,
					from_date,
					pnr,
					trip_type
				FROM
					".$CFG['db']['tbl']['request_details']."
				WHERE
					request_master_id = ".$_IrequestMasterId;
	
		$_ArequestDetails = $this->_executeQuery($sql);
		
		if($_ArequestDetails)
		{
			$_StripType = $this->_getTripType($_IrequestMasterId);
			$_SrequestType = $this->_getRequestType($_IrequestMasterId);
			$resultArray = array();
			$_ArequestApprovedIds = array();
			$i=0;
			fileRequire("dataModels/class.requestApprovedFlightDetails.php");
			fileRequire("dataModels/class.viaFlightDetails.php");
			$_OrequestApprovedFlightDetails = new requestApprovedFlightDetails;
			$_OrequestApprovedFlightDetails->_Oconnection = $this->_Oconnection;
			foreach($_ArequestDetails AS $_SpnrNo)
			{
				$_OrequestApprovedFlightDetails->__construct();
				//if(strtoupper($_SpnrNo['pnr']) == "MULTIPLE")
				{
					fileRequire("dataModels/class.pnrBlockingDetails.php");
					$_OpnrBlockingDetails = new pnrBlockingDetails;
					$_OpnrBlockingDetails->_Oconnection = $this->_Oconnection;
					$_OpnrBlockingDetails->_IrequestMasterId = $_IrequestMasterId;
					if($_SpnrNumber)
						$_OpnrBlockingDetails->_Spnr = $_SpnrNumber;
					foreach($_OpnrBlockingDetails->_selectPnrBlockingDetails() AS $_ApnrBlockingDetails)
					{
						$_OrequestApprovedFlightDetails->__construct();
						$_OrequestApprovedFlightDetails->_IrequestId = $_SpnrNo['request_id'];
						$_OrequestApprovedFlightDetails->_IrequestApprovedFlightId = $_ApnrBlockingDetails['request_approved_flight_id'];
						$_OrequestApprovedFlightDetails->_selectRequestApprovedFlightDetails();
						if($_OrequestApprovedFlightDetails->_IcountLoop > 0)
						{
							$resultArray[$i]['flightDetails'] = $_OrequestApprovedFlightDetails->_ArequestApprovedFlightDetails;
							$k=0;
							foreach($resultArray[$i]['flightDetails'] as $rafd)
							{
								$resultArray[$i]['flightDetails'][$k]['displacement_cost']=$this->_getRoundOffFare($rafd['displacement_cost'],2,$_SuserCurrency);
								$resultArray[$i]['flightDetails'][$k]['booking_profile_fare']=$this->_getRoundOffFare($rafd['booking_profile_fare'],2,$_SuserCurrency);
								$resultArray[$i]['flightDetails'][$k]['competetor_fare']=$this->_getRoundOffFare($rafd['competetor_fare'],2,$_SuserCurrency);
								
								$resultArray[$i]['flightDetails'][$k]['base_fare']=$this->_getRoundOffFare($rafd['base_fare'],2,$_SuserCurrency);
								$resultArray[$i]['flightDetails'][$k]['tax']=$this->_getRoundOffFare($rafd['tax'],2,$_SuserCurrency);
								$resultArray[$i]['flightDetails'][$k]['fare_passenger']=$this->_getRoundOffFare($rafd['fare_passenger'],2,$_SuserCurrency);
								$resultArray[$i]['flightDetails'][$k]['tax_breakup']=$this->_getRoundOffFare($rafd['tax_breakup'],2,$_SuserCurrency);
								$resultArray[$i]['flightDetails'][$k]['taxBreakUpEticket'] = $this->_getExplodeTaxBreakUp($rafd['tax_breakup']);
								$resultArray[$i]['flightDetails'][$k]['childTaxBreakUpEticket'] = $this->_getExplodeTaxBreakUp($rafd['child_tax_breakup']);
								$resultArray[$i]['flightDetails'][$k]['infantTaxBreakUpEticket'] = $this->_getExplodeTaxBreakUp($rafd['infant_tax_breakup']);
								$farePassenger=$rafd['fare_passenger'];
								$childTax=$rafd['child_tax'];
								$childFare=$rafd['child_base_fare']+$rafd['child_tax'];
								$infantTax=$rafd['infant_tax'];
								$infantFare=$rafd['infant_base_fare']+$rafd['infant_tax'];
								
								//Add the baggage fare with base fare
								if($CFG['site']['baggageFareFromApi']=='Y')
								{
									$resultArray[$i]['flightDetails'][$k]['base_fare'] = $this->_getRoundOffFare(($resultArray[$i]['flightDetails'][$k]['base_fare']+$rafd['baggauge_fare']),2,$_SuserCurrency);
									$farePassenger = $this->_getRoundOffFare(($farePassenger+$rafd['baggauge_fare']),2,$_SuserCurrency);
									$rafd['child_base_fare'] = $this->_getRoundOffFare(($rafd['child_base_fare']+$rafd['baggauge_fare']),2,$_SuserCurrency);
									$childFare = $this->_getRoundOffFare(($childFare+$rafd['baggauge_fare']),2,$_SuserCurrency);
									$rafd['baggauge_fare'] = 0;
								}
								
								//Checking for display the total fare based on config value
								if($CFG['site']['totalFareDisplay']=='BF')
								{
									$farePassenger = $rafd['base_fare'];
									$childFare=$rafd['child_base_fare'];
									$infantFare=$rafd['infant_base_fare'];
								}
								else if($CFG['site']['totalFareDisplay']=='BFYQ')
								{
									$adultTax=0;
									if($rafd['tax_breakup']!="")
									{
										$adultTax=$this->_getYqTaxByTaxbreakup($rafd['tax_breakup']);
									}
									$resultArray[$i]['flightDetails'][$k]['tax']=$this->_getRoundOffFare($adultTax,2,$_SuserCurrency);
									$farePassenger= $rafd['base_fare']+$adultTax;
									$childTax=0;
									if($rafd['child_tax_breakup']!="")
									{
										$childTax=$this->_getYqTaxByTaxbreakup($rafd['child_tax_breakup']);	
									}
									$infantTax=0;
									if($rafd['infant_tax_breakup']!="")
									{
										$infantTax=$this->_getYqTaxByTaxbreakup($rafd['infant_tax_breakup']);	
									}
									$childFare=$rafd['child_base_fare']+$childTax;
									$infantFare=$rafd['infant_base_fare']+$infantTax;
								}

								// SVCF Fare
								if(isset($resultArray[$i]['flightDetails'][$k]['ancillary_fare']) && !empty($resultArray[$i]['flightDetails'][$k]['ancillary_fare'])){
									$svcfFare = json_decode($resultArray[$i]['flightDetails'][$k]['ancillary_fare'],1);
									$svcfFareResult = $this->_getAncillaryInformation($svcfFare);
									$resultArray[$i]['flightDetails'][$k]['svcfFareAdt'] = $svcfFareResult['adultTotalFare'];
									$resultArray[$i]['flightDetails'][$k]['svcfFareChd'] = $svcfFareResult['childTotalFare'];
									$resultArray[$i]['flightDetails'][$k]['svcfFareInf'] = $svcfFareResult['infantTotalFare'];
								}
								
								$resultArray[$i]['flightDetails'][$k]['adult_tfee_fare']=0;
								$resultArray[$i]['flightDetails'][$k]['child_tfee_fare']=0;
								// TFEE value inclue in fare breakdown
								if(isset($CFG["processPage"]["taxFeeConfig"]) && $CFG["processPage"]["taxFeeConfig"]["enableTransactionFee"] =="Y" && !empty($CFG["processPage"]["taxFeeConfig"]["taxFeeCode"]))
								{
									$_AancillaryArray =[];
									$_IchildAncillaryFare=0;
									$_IadultAncillaryFare=0;
									$_ATaxFeeCodes =$CFG["processPage"]["taxFeeConfig"]["taxFeeCode"];
										
									$ancillary = json_decode($rafd['ancillary_fare'],1);
									foreach($ancillary as $paxType=>$otherAncilary){
										foreach($otherAncilary as $code=>$fare){
											if(!in_array($code, (array)$_ATaxFeeCodes)){
												unset($ancillary[$paxType][$code]);
											}
										}
									}
									if(!empty($ancillary))
									{
										$_AadultSsrAmount =array_values($ancillary['ADT']);
										if(!empty($_AadultSsrAmount))
											$_IadultAncillaryFare=array_sum($_AadultSsrAmount);
										//child ancillary fare	
										$_AchildSsrAmount =array_values($ancillary['CHD']);
										if(!empty($_AchildSsrAmount))
											$_IchildAncillaryFare=array_sum($_AchildSsrAmount);
										//infant ancillary fare
										$_AinfantSsrAmount =array_values($ancillary['INF']);
										if(!empty($_AinfantSsrAmount))
											$_IinfantAncillaryFare=array_sum($_AinfantSsrAmount);
										if(!empty($ancillary['ADT']))	
											$_AadultSsrCode= array_keys($ancillary['ADT']);
										if(!empty($ancillary['CHD']))
											$_AchildSsrCode= array_keys($ancillary['CHD']);
									}
									$_AancillaryArray['ancillaryTotalFare']=$_IadultAncillaryFare+$_IchildAncillaryFare+$_IinfantAncillaryFare;
									$_AancillaryArray['adultTotalFare']=$_IadultAncillaryFare;
									$_AancillaryArray['childTotalFare']=$_IchildAncillaryFare;
									$resultArray[$i]['flightDetails'][$k]['adult_tfee_fare'] = $this->_getRoundOffFare($_AancillaryArray['adultTotalFare'],2,$_SuserCurrency);
									foreach($resultArray[$i]['flightDetails'][$k]['taxBreakUpEticket'] as $key => $value){

										$taxBreakUpAmount += $value['amount'];
									}
									if($TFflag=='Y')
									    $resultArray[$i]['flightDetails'][$k]['tax'] = $this->_getRoundOffFare(($rafd['tax'] - $_AancillaryArray['adultTotalFare']),2,$_SuserCurrency);
                                    else 
										$resultArray[$i]['flightDetails'][$k]['tax'] = $this->_getRoundOffFare(($rafd['tax']),2,$_SuserCurrency);
                                    
									$resultArray[$i]['flightDetails'][$k]['child_tfee_fare'] = $this->_getRoundOffFare($_AancillaryArray['childTotalFare'],2,$_SuserCurrency);

								}
								$_IfarePassenger=$resultArray[$i]['flightDetails'][$k]['base_fare']+$resultArray[$i]['flightDetails'][$k]['tax']+$resultArray[$i]['flightDetails'][$k]['adult_tfee_fare'];
								$resultArray[$i]['flightDetails'][$k]['fare_passenger'] = $this->_getRoundOffFare($_IfarePassenger,2,$_SuserCurrency);
								
								$resultArray[$i]['flightDetails'][$k]['child_base_fare']=$this->_getRoundOffFare($rafd['child_base_fare'],2,$_SuserCurrency);
								$resultArray[$i]['flightDetails'][$k]['child_tax']=$this->_getRoundOffFare($childTax,2,$_SuserCurrency);
								$resultArray[$i]['flightDetails'][$k]['child_tax_breakup']=$this->_getRoundOffFare($rafd['child_tax_breakup'],2,$_SuserCurrency);
								$resultArray[$i]['flightDetails'][$k]['child_total_fare']=$this->_getRoundOffFare($childFare,2,$_SuserCurrency);
								
								$resultArray[$i]['flightDetails'][$k]['infant_base_fare']=$this->_getRoundOffFare($rafd['infant_base_fare'],2,$_SuserCurrency);
								$resultArray[$i]['flightDetails'][$k]['infant_tax']=$this->_getRoundOffFare($infantTax,2,$_SuserCurrency);
								$resultArray[$i]['flightDetails'][$k]['infant_tax_breakup']=$this->_getRoundOffFare($rafd['infant_tax_breakup'],2,$_SuserCurrency);
								$resultArray[$i]['flightDetails'][$k]['infant_total_fare']=$this->_getRoundOffFare($infantFare,2,$_SuserCurrency);
								
								$resultArray[$i]['flightDetails'][$k]['baggauge_fare']=$this->_getRoundOffFare($rafd['baggauge_fare'],2,$_SuserCurrency);
								$resultArray[$i]['flightDetails'][$k]['meals_fare']=$this->_getRoundOffFare($rafd['meals_fare'],2,$_SuserCurrency);
								$resultArray[$i]['flightDetails'][$k]['tiger_connect_fare']=$this->_getRoundOffFare($rafd['tiger_connect_fare'],2,$_SuserCurrency);
								//set ancillary fare in show pnr template
								$_AancillaryFare = $this->_getAncillaryInformation($rafd['ancillary_fare_array']);						
								$resultArray[$i]['flightDetails'][$k]['ancillary_fare']=$_AancillaryFare['ancillaryTotalFare'];
								$resultArray[$i]['flightDetails'][$k]['series_group_id']=$this->_getSeriesGroupId($resultArray[$i]['flightDetails'][$k]['series_request_id'])[0];
								$resultArray[$i]['series_group_id'] =	$resultArray[$i]['flightDetails'][$k]['series_group_id'];
								//checking stops
								if($resultArray[$i]['flightDetails'][$k]['stops'] > 0)
								{
									$objViaFlightDetails=new viaFlightDetails();
									$objViaFlightDetails->__construct();
									$objViaFlightDetails->_Oconnection=$this->_Oconnection;
									$objViaFlightDetails->_IrequestApprovedFlightId=$resultArray[$i]['flightDetails'][$k]['request_approved_flight_id'];
									$viaFlights=$objViaFlightDetails->_selectViaFlightDetails();
									
									//$_OrequestApprovedFlightDetails->_SflightNumber=$_OrequestApprovedFlightDetails->_SflightNumber."/".$viaFlights[1]['flight_number'];
								}	
								// if($_StripType!="O" && $_SrequestType=='series')
								{
									$mappedFlightsDetails=$this->_getMappedRequestApprovedFlightId($_ApnrBlockingDetails['request_approved_flight_id']);
					
									$count=count($mappedFlightsDetails);
									if($count>0)
									{
										for($k=0;$k<$count;$k++)
										{
											$resultArray[$i]['mapped_request_approved_flight_id'.$k]=$mappedFlightsDetails[$k]['mapped_request_approved_flight_id'];
										}
									}
									$resultArray[$i]['mappingCount']=$count;
								}
							}
							$resultArray[$i]['viaFlights'] =$viaFlights;
							
							$resultArray[$i]['origin'] = $_OrequestApprovedFlightDetails->_Ssource;
							$resultArray[$i]['destination'] = $_OrequestApprovedFlightDetails->_Sdestination;
							$resultArray[$i]['tripType'] = $_SpnrNo['trip_type'];
							$resultArray[$i]['departureDate'] = $_OrequestApprovedFlightDetails->_SdepartureDate;
							$resultArray[$i]['departureTime'] = $_OrequestApprovedFlightDetails->_SdepTime;
							$resultArray[$i]['dep_dateTime'] = $resultArray[$i]['departureDate'].' '.$resultArray[$i]['departureTime'];
							$resultArray[$i]['arrivalDate'] = $_OrequestApprovedFlightDetails->_SarrivalDate;
							$resultArray[$i]['arrivalTime'] = $_OrequestApprovedFlightDetails->_SarrTime;
							$resultArray[$i]['flightNumber'] = $_OrequestApprovedFlightDetails->_SflightNumber;
							$resultArray[$i]['noOfAdult'] = $_ApnrBlockingDetails['no_of_adult'];
							$resultArray[$i]['noOfChild'] = $_ApnrBlockingDetails['no_of_child'];
							$resultArray[$i]['noOfInfant'] = $_ApnrBlockingDetails['no_of_infant'];
							$resultArray[$i]['noOfFoc'] = $_ApnrBlockingDetails['no_of_foc'];
							$resultArray[$i]['noOfPax'] = $resultArray[$i]['noOfAdult']+$resultArray[$i]['noOfChild']+$resultArray[$i]['noOfInfant']+$resultArray[$i]['noOfFoc'];
							$resultArray[$i]['pnrAmount'] = $_ApnrBlockingDetails['pnr_amount'];
							#$resultArray[$i]['pnrAmount'] = $this->_getTotalAmountProcess($_IrequestMasterId);
							$resultArray[$i]['pnrAmount']=$this->_getRoundOffFare($resultArray[$i]['pnrAmount'],2,$_SuserCurrency);
							$resultArray[$i]['pnrBlockingId'] = $_ApnrBlockingDetails['pnr_blocking_id'];
							$resultArray[$i]['pnr'] = $_ApnrBlockingDetails['pnr'];
							$resultArray[$i]['status'] = $_ApnrBlockingDetails['status'];
							/*To check the PNR is split or not*/
							$resultArray[$i]['pnrSplitStatus'] = 'N';
							if(!in_array($_ApnrBlockingDetails['request_approved_flight_id'],$_ArequestApprovedIds))
							{
								$_ArequestApprovedIds[] = $_ApnrBlockingDetails['request_approved_flight_id'];
							}
							else
								$resultArray[$i]['pnrSplitStatus'] = 'Y';
							$i++;
						}
					}
				}
				/*else
				{
					fileRequire("dataModels/class.requestMaster.php");
					$_OrequestMaster = new requestMaster;
					$_OrequestMaster->_Oconnection = $this->_Oconnection;
					$_OrequestMaster->_IrequestMasterId = $_IrequestMasterId;
					$_OrequestMaster->_selectRequestMaster();
					
					$_OrequestApprovedFlightDetails->_Ssource = $_SpnrNo['origin_airport_code'];
					$_OrequestApprovedFlightDetails->_Sdestination = $_SpnrNo['dest_airport_code'];
					$_OrequestApprovedFlightDetails->_SdepartureDate = $_SpnrNo['from_date'];
					$_OrequestApprovedFlightDetails->_SacceptedFlightStatus = 'Y';
					$_OrequestApprovedFlightDetails->_IrequestId = $_SpnrNo['request_id'];
					$resultArray[$i]['flightDetails'] = $_OrequestApprovedFlightDetails->_selectRequestApprovedFlightDetails();
					
					$k=0;
					foreach($resultArray[$i]['flightDetails'] as $rafd)
					{
						$resultArray[$i]['flightDetails'][$k]['displacement_cost']=$this->_getRoundOffFare($rafd['displacement_cost'],2,$_SuserCurrency);
						$resultArray[$i]['flightDetails'][$k]['booking_profile_fare']=$this->_getRoundOffFare($rafd['booking_profile_fare'],2,$_SuserCurrency);
						$resultArray[$i]['flightDetails'][$k]['competetor_fare']=$this->_getRoundOffFare($rafd['competetor_fare'],2,$_SuserCurrency);
								
								
						$farePassenger=$rafd['fare_passenger'];
						$childTax=$rafd['child_tax'];
						$childFare=$rafd['child_base_fare']+$rafd['child_tax'];
						$infantTax=$rafd['infant_tax'];
						$infantFare=$rafd['infant_base_fare']+$rafd['infant_tax'];
						
						//Add the baggage fare with base fare
						if($CFG['site']['baggageFareFromApi']=='Y')
						{
							$rafd['base_fare'] = $this->_getRoundOffFare(($rafd['base_fare']+$rafd['baggauge_fare']),2,$_SuserCurrency);
							$farePassenger = $this->_getRoundOffFare(($farePassenger+$rafd['baggauge_fare']),2,$_SuserCurrency);
							$rafd['child_base_fare'] = $this->_getRoundOffFare(($rafd['child_base_fare']+$rafd['baggauge_fare']),2,$_SuserCurrency);
							$childFare = $this->_getRoundOffFare(($childFare+$rafd['baggauge_fare']),2,$_SuserCurrency);
							$rafd['baggauge_fare'] = 0;
						}
						
						//Checking for display the total fare based on config value
						if($CFG['site']['totalFareDisplay']=='BF')
						{
							$farePassenger = $rafd['base_fare'];
							$childFare=$rafd['child_base_fare'];
							$infantFare=$rafd['infant_base_fare'];
						}
						else if($CFG['site']['totalFareDisplay']=='BFYQ')
						{
							$adultTax=0;
							if($rafd['tax_breakup']!="")
							{
								$adultTax=$this->_getYqTaxByTaxbreakup($rafd['tax_breakup']);
							}
							$resultArray[$i]['flightDetails'][$k]['tax']=$this->_getRoundOffFare($adultTax,2,$_SuserCurrency);;
							$farePassenger= $rafd['base_fare']+$adultTax;
							$childTax=0;
							if($rafd['child_tax_breakup']!="")
							{
								$childTax=$this->_getYqTaxByTaxbreakup($rafd['child_tax_breakup']);	
							}
							$infantTax=0;
							if($rafd['infant_tax_breakup']!="")
							{
								$infantTax=$this->_getYqTaxByTaxbreakup($rafd['infant_tax_breakup']);	
							}
							$childFare=$rafd['child_base_fare']+$childTax;
							$infantFare=$rafd['infant_base_fare']+$infantTax;
						}
						$resultArray[$i]['flightDetails'][$k]['base_fare']=$this->_getRoundOffFare($rafd['base_fare'],2,$_SuserCurrency);
						$resultArray[$i]['flightDetails'][$k]['tax']=$this->_getRoundOffFare($rafd['tax'],2,$_SuserCurrency);
						$resultArray[$i]['flightDetails'][$k]['tax_breakup']=$this->_getRoundOffFare($rafd['tax_breakup'],2,$_SuserCurrency);
						$resultArray[$i]['flightDetails'][$k]['fare_passenger'] = $this->_getRoundOffFare($farePassenger,2,$_SuserCurrency);
						
						$resultArray[$i]['flightDetails'][$k]['child_base_fare']=$this->_getRoundOffFare($rafd['child_base_fare'],2,$_SuserCurrency);
						$resultArray[$i]['flightDetails'][$k]['child_tax']=$this->_getRoundOffFare($childTax,2,$_SuserCurrency);
						$resultArray[$i]['flightDetails'][$k]['child_tax_breakup']=$this->_getRoundOffFare($rafd['child_tax_breakup'],2,$_SuserCurrency);
						$resultArray[$i]['flightDetails'][$k]['child_total_fare']=$this->_getRoundOffFare($childFare,2,$_SuserCurrency);
						
						$resultArray[$i]['flightDetails'][$k]['infant_base_fare']=$this->_getRoundOffFare($rafd['infant_base_fare'],2,$_SuserCurrency);
						$resultArray[$i]['flightDetails'][$k]['infant_tax']=$this->_getRoundOffFare($infantTax,2,$_SuserCurrency);
						$resultArray[$i]['flightDetails'][$k]['infant_tax_breakup']=$this->_getRoundOffFare($rafd['infant_tax_breakup'],2,$_SuserCurrency);
						$resultArray[$i]['flightDetails'][$k]['infant_total_fare']=$this->_getRoundOffFare($infantFare,2,$_SuserCurrency);
					
						$resultArray[$i]['flightDetails'][$k]['baggauge_fare']=$this->_getRoundOffFare($rafd['baggauge_fare'],2,$_SuserCurrency);
						$resultArray[$i]['flightDetails'][$k]['meals_fare']=$this->_getRoundOffFare($rafd['meals_fare'],2,$_SuserCurrency);
						$resultArray[$i]['flightDetails'][$k]['tiger_connect_fare']=$this->_getRoundOffFare($rafd['tiger_connect_fare'],2,$_SuserCurrency);
						$resultArray[$i]['flightDetails'][$k]['taxBreakUpEticket'] = $this->_getExplodeTaxBreakUp($rafd['tax_breakup']);
						$resultArray[$i]['flightDetails'][$k]['childTaxBreakUpEticket'] = $this->_getExplodeTaxBreakUp($rafd['child_tax_breakup']);
						$resultArray[$i]['flightDetails'][$k]['infantTaxBreakUpEticket'] = $this->_getExplodeTaxBreakUp($rafd['infant_tax_breakup']);						
					}
							
					$resultArray[$i]['origin'] = $_SpnrNo['origin_airport_code'];
					$resultArray[$i]['destination'] = $_SpnrNo['dest_airport_code'];
					$resultArray[$i]['departureDate'] = $_OrequestApprovedFlightDetails->_SdepartureDate;
					$resultArray[$i]['departureTime'] = $_OrequestApprovedFlightDetails->_SdepTime;
					$resultArray[$i]['arrivalDate'] = $_OrequestApprovedFlightDetails->_SarrivalDate;
					$resultArray[$i]['arrivalTime'] = $_OrequestApprovedFlightDetails->_SarrTime;
					$resultArray[$i]['flightNumber'] = $_OrequestApprovedFlightDetails->_SflightNumber;
					$resultArray[$i]['noOfAdult'] = $_OrequestMaster->_InumberOfAdult;
					$resultArray[$i]['noOfChild'] = $_OrequestMaster->_InumberOfChild;
					$resultArray[$i]['noOfInfant'] = $_OrequestMaster->_InumberOfInfant;
					$resultArray[$i]['noOfPax'] = $_OrequestMaster->_InumberOfPassenger;
					$resultArray[$i]['pnrAmount'] = $this->_getTotalAmountProcess($_IrequestMasterId);
					$resultArray[$i]['pnrAmount']=$this->_getRoundOffFare($resultArray[$i]['pnrAmount'],2,$_SuserCurrency);
					$resultArray[$i]['pnr'] = $_SpnrNo['pnr'];
					$resultArray[$i]['status'] = '';
					$resultArray[$i]['mappingCount'] = 0;
					$i++;
				}*/
			}
			return $resultArray;
		}
		return false;
	}
	
	function _getPnrFareDetails($requestMasterId,$pnr)
	{
		global $CFG;

		$_rowCurrency=$this->_getUserCurrency($requestMasterId);
		$_SuserCurrency=$_rowCurrency['user_currency'];
		$pnrDetailsArray=array();
		$pnrDetailsArray=$this->_getPnrDetails($requestMasterId,$pnr);
		
		$adultBaseFare=0;
		$adultTax=0;
		$childBaseFare=0;
		$childTax=0;
		$infantBaseFare=0;
		$infantTax=0;
		$baggageFare=0;
		$ancillaryFare = 0;
		$mealsFare=0;
		$noOfAdult=0;
		$noOfChild=0;
		$noOfInfant=0;
		$noOfPax=0;
		$taxBreakUp = array();
		$pnrFareDetails=array();
		$svcfAdt=0;
		$svcfChd=0;
		$svcfInf=0;
		foreach($pnrDetailsArray as $pnrFareKey => $pnrFareValue)
		{
			foreach($pnrFareValue['flightDetails'] as $flightFareKey => $flightFareValue)
			{
				$adultBaseFare+=$flightFareValue['base_fare'];
				$adultTax+=$flightFareValue['tax'];
				$childBaseFare+=$flightFareValue['child_base_fare'];
				$childTax+=$flightFareValue['child_tax'];
				$infantBaseFare+=$flightFareValue['infant_base_fare'];
				$infantTax+=$flightFareValue['infant_tax'];
				$baggageFare+=$flightFareValue['baggauge_fare'];
				$mealsFare+=$flightFareValue['meals_fare'];
				$ancillaryFare+=$flightFareValue['ancillary_fare_array']['ADT']['SVCF'];
				$svcfAdt+=$flightFareValue['svcfFareAdt'];
				$svcfChd+=$flightFareValue['svcfFareChd'];
				$svcfInf+=$flightFareValue['svcfFareInf'];
				foreach($flightFareValue['taxBreakUpEticket'] as $key => $value){
					$taxBreakUp[0][$value['taxCode']]['taxCode'] = $value['taxCode'];
					$taxBreakUp[0][$value['taxCode']]['amount'] += $value['amount'];
				}
			}
			$noOfAdult=$pnrFareValue['noOfAdult'];
			$noOfChild=$pnrFareValue['noOfChild'];
			$noOfInfant=$pnrFareValue['noOfInfant'];
			$noOfPax=$pnrFareValue['noOfPax'];
			
		}
		
		$pnrFareDetails[0]['adultBaseFare']=$this->_getRoundOffFare($adultBaseFare,"",$_SuserCurrency);
		$pnrFareDetails[0]['adultTax']=$this->_getRoundOffFare($adultTax,"",$_SuserCurrency);
		$pnrFareDetails[0]['adultTotalFare']=$this->_getRoundOffFare(($adultBaseFare+$adultTax),"",$_SuserCurrency);
		// Display formatted fare
		$pnrFareDetails[0]['adultBaseFareDisplay']=$this->_getRoundOffFare($adultBaseFare,"","displayFare");
		$pnrFareDetails[0]['adultTaxDisplay']=$this->_getRoundOffFare($adultTax,"","displayFare");
		$pnrFareDetails[0]['adultTotalFareDisplay']=$this->_getRoundOffFare(($adultBaseFare+$adultTax),"","displayFare");

		$pnrFareDetails[0]['childBaseFare']=$this->_getRoundOffFare($childBaseFare,"",$_SuserCurrency);
		$pnrFareDetails[0]['displayChildBaseFare']=$this->_getRoundOffFare($childBaseFare,"","displayFare");
		$pnrFareDetails[0]['childTax']=$this->_getRoundOffFare($childTax,"",$_SuserCurrency);
		$pnrFareDetails[0]['childTotalFare']=$this->_getRoundOffFare(($childBaseFare+$childTax),"",$_SuserCurrency);
		// Display formatted fare
		$pnrFareDetails[0]['childBaseFareDisplay']=$this->_getRoundOffFare($childBaseFare,"","displayFare");
		$pnrFareDetails[0]['childTaxDisplay']=$this->_getRoundOffFare($childTax,"","displayFare");
		$pnrFareDetails[0]['childTotalFareDisplay']=$this->_getRoundOffFare(($childBaseFare+$childTax),"","displayFare");
		
		$pnrFareDetails[0]['infantBaseFare']=$this->_getRoundOffFare($infantBaseFare,"",$_SuserCurrency);
		$pnrFareDetails[0]['displayInfantBaseFare']=$this->_getRoundOffFare($infantBaseFare,"","displayFare");
		$pnrFareDetails[0]['infantTax']=$this->_getRoundOffFare($infantTax,"",$_SuserCurrency);
		$pnrFareDetails[0]['infantTotalFare']=$this->_getRoundOffFare(($infantBaseFare+$infantTax),"",$_SuserCurrency);
		// Display formatted fare
		$pnrFareDetails[0]['infantBaseFareDisplay']=$this->_getRoundOffFare($infantBaseFare,"","displayFare");
		$pnrFareDetails[0]['infantTaxDisplay']=$this->_getRoundOffFare($infantTax,"","displayFare");
		$pnrFareDetails[0]['infantTotalFareDisplay']=$this->_getRoundOffFare(($infantBaseFare+$infantTax),"","displayFare");
		
		$pnrFareDetails[0]['baggageFare']=$this->_getRoundOffFare($baggageFare,"",$_SuserCurrency);
		$pnrFareDetails[0]['mealsFare']=$this->_getRoundOffFare($mealsFare,"",$_SuserCurrency);
		$pnrFareDetails[0]['ancillaryFare']=$this->_getRoundOffFare($ancillaryFare,"",$_SuserCurrency);
		
		$pnrFareDetails[0]['totalAdultFare']=$this->_getRoundOffFare($adultBaseFare*$noOfAdult,"",$_SuserCurrency);
		$pnrFareDetails[0]['totalAdultTax']=$this->_getRoundOffFare($adultTax*$noOfAdult,"",$_SuserCurrency);
		
		$pnrFareDetails[0]['totalChildFare']=$this->_getRoundOffFare($childBaseFare*$noOfChild,"",$_SuserCurrency);
		$pnrFareDetails[0]['totalChildTax']=$this->_getRoundOffFare($childTax*$noOfChild,"",$_SuserCurrency);
		
		$pnrFareDetails[0]['totalInfantFare']=$this->_getRoundOffFare($infantBaseFare*$noOfInfant,"",$_SuserCurrency);
		$pnrFareDetails[0]['totalInfantTax']=$this->_getRoundOffFare($infantTax*$noOfInfant,"",$_SuserCurrency);
		
		$pnrFareDetails[0]['totalBaggageFare']=$this->_getRoundOffFare($baggageFare*($noOfAdult+$noOfChild),"",$_SuserCurrency);
		$pnrFareDetails[0]['totalMealsFare']=$this->_getRoundOffFare($mealsFare*($noOfAdult+$noOfChild),"",$_SuserCurrency);
		$pnrFareDetails[0]['noOfAdult']=$noOfAdult;
		$pnrFareDetails[0]['noOfChild']=$noOfChild;
		$pnrFareDetails[0]['noOfInfant']=$noOfInfant;
		$pnrFareDetails[0]['noOfPax']=$noOfPax;
		$pnrFareDetails[0]['taxBreak']=$taxBreakUp;
		$pnrFareDetails[0]['svcfAdt']=$svcfAdt;
		$pnrFareDetails[0]['svcfChd']=$svcfChd;
		$pnrFareDetails[0]['svcfInf']=$svcfInf;
		return $pnrFareDetails;
	}
	function _getSectorDetails($requestMasterId='', $requestIds='',$seriesRequestIds=array())
	{
		fileRequire("dataModels/class.requestMaster.php");
		fileRequire("dataModels/class.requestDetails.php");
		fileRequire("dataModels/class.seriesRequestDetails.php");
		if(!class_exists('airlinesRequestMapping'))	
			fileRequire("dataModels/class.airlinesRequestMapping.php");
		fileRequire("dataModels/class.passengerDetails.php");
		$sectorDetails=array();
		$_OrequestMaster = new requestMaster;
		$_OrequestMaster->_Oconnection = $this->_Oconnection;
		$_OrequestMaster->_IrequestMasterId = $requestMasterId;
		$sectorDetails=$_OrequestMaster->_selectRequestMaster();
		if(isset($sectorDetails[0]))
			$sectorDetails=$sectorDetails[0];
		$_OairlinesRequestMapping=new airlinesRequestMapping();
		$_OairlinesRequestMapping->_Oconnection = $this->_Oconnection;
		$_OairlinesRequestMapping->_IrequestMasterId=$requestMasterId;
		$airlinesDetails=$_OairlinesRequestMapping->_selectAirlinesRequestMapping();
		$sectorDetails['airlines_request_id']=$airlinesDetails[0]['airlines_request_id'];
		$objRequestDetails=new requestDetails();
		$objRequestDetails->_Oconnection=$this->_Oconnection;
		$objRequestDetails->_IrequestMasterId=$requestMasterId;
		$objRequestDetails->_SorderBY='trip_name,request_id';
		if(!empty($requestIds) && is_array($requestIds))
		{
			$objRequestDetails->_INcondition='IN';
			$objRequestDetails->_IrequestId=implode(",",$requestIds);
		}
		else
			$objRequestDetails->_IrequestId=$requestIds;
		$requestdetails = $objRequestDetails->_selectRequestDetails();
		$tripName = array_column($requestdetails, 'trip_name');

		array_multisort($tripName, SORT_ASC, $requestdetails);
        //$departureDates = array_column($requestdetails, 'from_date');

		// array_multisort($departureDates, SORT_ASC, $requestdetails);

		$sectorDetails['requestDetails']= $requestdetails;
		$objSeriesRequestDetails=new seriesRequestDetails();
		$objSeriesRequestDetails->_Oconnection=$this->_Oconnection;
		
		$_OpassengerDetails=new passengerDetails();
		$sectorDetails = $this->_fillupSectorForSeries($sectorDetails,$_OpassengerDetails,$objSeriesRequestDetails,$seriesRequestIds);
		return $sectorDetails;		
	}

	/**
	 * Desc:loop throug the request
	 */
	private function _fillupSectorForSeries($_AparamOriginalArray=array(),$_OparamPassengerDetails,$_OparamSeriesReqDetails,$seriesRequestIds=array()){
		global $CFG;
		fileRequire("dataModels/class.requestApprovedFlightDetails.php");
		$objRequestApprovedFlightDetails=new requestApprovedFlightDetails();
		$i=0;
		foreach($_AparamOriginalArray['requestDetails'] as $rd)
		{
			$_OparamSeriesReqDetails->__construct();
			$_OparamSeriesReqDetails->_Oconnection=$this->_Oconnection;
			$_OparamSeriesReqDetails->_IrequestId=$rd['request_id'];
			
			// If series request id not empty, get flight details based on series request id
			if(!empty($seriesRequestIds) && is_array($seriesRequestIds))
			{	
				$_OparamSeriesReqDetails->_INcondition = 'IN';
				$_OparamSeriesReqDetails->_IseriesRequestId = implode(",",$seriesRequestIds);
			}
			else
				$_OparamSeriesReqDetails->_IseriesRequestId = $seriesRequestIds;
			$_AparamOriginalArray['requestDetails'][$i]['dep_time'] = $_AparamOriginalArray['requestDetails'][$i]['from_date']." ".$_AparamOriginalArray['requestDetails'][$i]['start_time'];
			$_AparamOriginalArray['requestDetails'][$i]['seriesRequestDetails']=$_OparamSeriesReqDetails->_selectSeriesRequestDetails();	
			$k=0;
			foreach($_AparamOriginalArray['requestDetails'][$i]['seriesRequestDetails'] as $srd)
			{
				$_OparamPassengerDetails->__construct();
				$_OparamPassengerDetails->_Oconnection=$this->_Oconnection;
				$_OparamPassengerDetails->_IseriesRequestId=$srd['series_request_id'];
				$_AsubmittedPax = $_OparamPassengerDetails->_selectPassengerDetails();
				$_AparamOriginalArray['requestDetails'][$i]['seriesRequestDetails'][$k]['submittedPax']=count($_AsubmittedPax);
				
				if(!empty($_AsubmittedPax)){

					$_IsubmittedAdtCount = 0;
					$_IsubmittedChdCount = 0;
					$_IsubmittedInfCount = 0;
					foreach ($_AsubmittedPax as $_AspaxKey => $_AspaxValue) {

						if($_AspaxValue['passenger_type'] == 'Adult')
							$_IsubmittedAdtCount++;

						if($_AspaxValue['passenger_type'] == 'Child')
							$_IsubmittedChdCount++;

						if($_AspaxValue['passenger_type'] == 'Infant')
							$_IsubmittedInfCount++;
					}
					$_AparamOriginalArray['requestDetails'][$i]['seriesRequestDetails'][$k]['submittedAdult']=$_IsubmittedAdtCount;
					$_AparamOriginalArray['requestDetails'][$i]['seriesRequestDetails'][$k]['submittedChild']=$_IsubmittedChdCount;
					$_AparamOriginalArray['requestDetails'][$i]['seriesRequestDetails'][$k]['submittedInfant']=$_IsubmittedInfCount;

				}
				#Removing mutiple query exection placed single query above to get data
				/*$_OparamPassengerDetails->__construct();
				$_OparamPassengerDetails->_Oconnection=$this->_Oconnection;
				$_OparamPassengerDetails->_IseriesRequestId=$srd['series_request_id'];
				$_OparamPassengerDetails->_SpassengerType="Adult";
				$_OparamPassengerDetails->_selectPassengerDetails();
				$_AparamOriginalArray['requestDetails'][$i]['seriesRequestDetails'][$k]['submittedAdult']=$_OparamPassengerDetails->_IcountLoop;
				$_OparamPassengerDetails->__construct();
				$_OparamPassengerDetails->_Oconnection=$this->_Oconnection;
				$_OparamPassengerDetails->_IseriesRequestId=$srd['series_request_id'];
				$_OparamPassengerDetails->_SpassengerType="Child";
				$_OparamPassengerDetails->_selectPassengerDetails();
				$_AparamOriginalArray['requestDetails'][$i]['seriesRequestDetails'][$k]['submittedChild']=$_OparamPassengerDetails->_IcountLoop;
				$_OparamPassengerDetails->__construct();
				$_OparamPassengerDetails->_Oconnection=$this->_Oconnection;
				$_OparamPassengerDetails->_IseriesRequestId=$srd['series_request_id'];
				$_OparamPassengerDetails->_SpassengerType="Infant";
				$_OparamPassengerDetails->_selectPassengerDetails();
				$_AparamOriginalArray['requestDetails'][$i]['seriesRequestDetails'][$k]['submittedInfant']=$_OparamPassengerDetails->_IcountLoop;
				*/
				$flightDetails=$this->_getFlightDetails($_AparamOriginalArray['request_master_id'],$srd['series_request_id']);
				foreach($flightDetails as $flight)
				{
					$_AparamOriginalArray['requestDetails'][$i]['seriesRequestDetails'][$k]['flightNumber']='';
					if(empty($flight['viaFlight']))
					{
					    $_AparamOriginalArray['requestDetails'][$i]['seriesRequestDetails'][$k]['flightNumber']=$flight['flight_number'];
					    /*
						 * Modified by: Subalakshmi S 29-08-2018 
						 * Setting the approved flight number value
						 **/
					    $_AparamOriginalArray['requestDetails'][$i]['seriesRequestDetails'][$k]['flight_number']=$flight['flight_number'];
					    //$_AparamOriginalArray['requestDetails'][$i]['flight_number']=$flight['flight_number'];
					}
					if(!empty($flight['viaFlight']))
					{
					   $flightNo="";
						foreach($flight['viaFlight'] as $via)
						{
							if($flightNo=='')
								$flightNo.=$via['airline_code']."-".$via['flight_number'];
							elseif($flightNo!='')
							{
								$flightNo.="/";
								if(isset($CFG['site']['showAirlineCodeAllFlights']) && $CFG['site']['showAirlineCodeAllFlights']=="Y")
									$flightNo.=$via['airline_code']."-".$via['flight_number'];
								else
									$flightNo.=$via['flight_number'];
							}
						}
					    $_AparamOriginalArray['requestDetails'][$i]['seriesRequestDetails'][$k]['flightNumber']=$flightNo;
					    /*
						 * Modified by: Subalakshmi S 29-08-2018 
						 * Setting the approved flight number value
						 **/
					    $_AparamOriginalArray['requestDetails'][$i]['seriesRequestDetails'][$k]['flight_number']=$flightNo;
					    //$_AparamOriginalArray['requestDetails'][$i]['flight_number']=$flightNo;
					}
				}
				$objRequestApprovedFlightDetails->__construct();
				$objRequestApprovedFlightDetails->_Oconnection=$this->_Oconnection;
				$objRequestApprovedFlightDetails->_IseriesRequestId=$srd['series_request_id'];
				$objRequestApprovedFlightDetails->_ItransactionMasterId=$_AparamOriginalArray['fare_acceptance_transaction_id'];
				$objRequestApprovedFlightDetails->_SacceptedFlightStatus="Y";
				$getApprovedFlight[]=$objRequestApprovedFlightDetails->_selectRequestApprovedFlightDetails();
				
				if(isset($getApprovedFlight[0]))
				{
					if(isset($getApprovedFlight[0][0]))
						$getApprovedFlight=$getApprovedFlight[0][0];
					else
						$getApprovedFlight=$getApprovedFlight[0];
				}
				
				$_AparamOriginalArray['requestDetails'][$i]['seriesRequestDetails'][$k]['pnrNumber']=$this->_getPNRBlockDetails($_AparamOriginalArray['request_master_id'],$getApprovedFlight['request_approved_flight_id']);			
				$k++;
			}
					
			$i++;	
			
		}
		return $_AparamOriginalArray;
	}
	
	function _getSectorDetailsPassengerUpload($requestMasterId)
	{
		global $CFG;
		
		fileRequire("dataModels/class.requestMaster.php");
		fileRequire("dataModels/class.requestDetails.php");
		fileRequire("dataModels/class.seriesRequestDetails.php");
		if(!class_exists('airlinesRequestMapping'))	
		fileRequire("dataModels/class.airlinesRequestMapping.php");
		fileRequire("dataModels/class.passengerDetails.php");
		fileRequire("dataModels/class.requestApprovedFlightDetails.php");
		fileRequire("classes/class.viewRequestFunctions.php");
		$_OrequestMaster = new requestMaster;
		$_OrequestMaster->_Oconnection = $this->_Oconnection;
		$_OrequestMaster->_IrequestMasterId = $requestMasterId;
		$sectorDetails=$_OrequestMaster->_selectRequestMaster();

		if(isset($sectorDetails[0]))
			$sectorDetails=$sectorDetails[0];

		if(isset($sectorDetails['user_id']))
		{
		$userSql = "SELECT		
					".encrypt::_decrypt('ud.first_name')." AS first_name,
					".encrypt::_decrypt('ud.last_name')." AS last_name,
					".encrypt::_decrypt('ud.email_id ')." AS email_id,
					".encrypt::_decrypt('cd.corporate_name ')." AS corporate_name					
				    FROM 
					".$CFG['db']['tbl']['user_details']." ud,
					".$CFG['db']['tbl']['corporate_details']." cd
				    WHERE
					ud.corporate_id = cd.corporate_id AND
					ud.user_id = ".$sectorDetails['user_id'];

			if(DB::isError($userDetailResult=$this->_Oconnection->query($userSql)))
			{
				fileWrite($userDetailResult,"SqlError","a+");
				return false;
			}
			if($userDetailResult->numRows() >0)
				$sectorDetails['user_details'] = $userDetailResult->fetchRow(DB_FETCHMODE_ASSOC);
		}
		$sectorDetails['user_name']=$sectorDetails['user_details']['first_name']." ".$sectorDetails['user_details']['last_name'];
		$_OairlinesRequestMapping=new airlinesRequestMapping();
		$_OairlinesRequestMapping->_Oconnection = $this->_Oconnection;
		$_OairlinesRequestMapping->_IrequestMasterId=$requestMasterId;
		$airlinesDetails=$_OairlinesRequestMapping->_selectAirlinesRequestMapping();

		$sectorDetails['current_status_id'] = $airlinesDetails[0]['current_status'];
		$_OviewRequestFunctions= new viewRequestFunctions();
		$_OviewRequestFunctions->_Oconnection = $this->_Oconnection;
		$sectorDetails['current_status'] = $current_status_name = $_OviewRequestFunctions->_getCurrentStatusName($sectorDetails['current_status_id']);
		$sectorDetails['airlines_request_id']=$airlinesDetails[0]['airlines_request_id'];

		$objRequestDetails=new requestDetails();
		$objRequestDetails->_Oconnection=$this->_Oconnection;
		$objRequestDetails->_IrequestMasterId=$requestMasterId;
		$sectorDetails['requestDetails']=$objRequestDetails->_selectRequestDetails();

		foreach($sectorDetails['requestDetails'] as $sectorKey => $sectorValue)
		{
			$sectorDetails['cityPair']=$sectorValue['origin_airport_code']."-".$sectorValue['dest_airport_code'];
		}
		$objSeriesRequestDetails=new seriesRequestDetails();
		$objSeriesRequestDetails->_Oconnection=$this->_Oconnection;
		
		$_OpassengerDetails=new passengerDetails();
		$objRequestApprovedFlightDetails=new requestApprovedFlightDetails();
		
		$i=0;
		$pnrTempArray=array();
		
		foreach($sectorDetails['requestDetails'] as $rd)
		{
			
			$sqlSelectSeriesRequestDetailsPnr="SELECT
									srd.series_request_id,
									srd.request_id,
									srd.cabin,
									srd.start_time,
									srd.end_time,
									srd.baggage_allowance,
									srd.ancillary,
									srd.meals_code,
									(SELECT meal_description FROM ".$CFG['db']['tbl']['meal_code_details']." WHERE meal_code=srd.meals_code) meals_name,
									srd.expected_fare,
									rafd.request_approved_flight_id,
									rafd.flight_number,
									rafd.departure_date,
									pbd.pnr_blocking_id,
									pbd.pnr as pnrNumber,
									(pbd.no_of_adult+pbd.no_of_child+pbd.no_of_infant) as number_of_passenger,
									pbd.no_of_adult as number_of_adult,
									pbd.no_of_child as number_of_child,
									pbd.no_of_infant as number_of_infant
							   FROM
							   		".$CFG['db']['tbl']['series_request_details']." srd,
							   		".$CFG['db']['tbl']['request_approved_flight_details']." rafd,
							   		".$CFG['db']['tbl']['pnr_blocking_details']." pbd
							   WHERE
							   		srd.request_id='".$rd['request_id']."'
							   		AND srd.request_id=rafd.request_id
							   		AND srd.series_request_id=rafd.series_request_id
							   		AND rafd.accepted_flight_status='Y'
							   		AND pbd.request_master_id='".$rd['request_master_id']."'
							   		AND pbd.request_approved_flight_id=rafd.request_approved_flight_id";
							   		
			if(DB::isError($resultSelectSeriesRequestDetailsPnr=$this->_Oconnection->query($sqlSelectSeriesRequestDetailsPnr)))
			{
				fileWrite($sqlSelectSeriesRequestDetailsPnr,"SqlError","a+");
				return false;
			}
		
	
			if($resultSelectSeriesRequestDetailsPnr->numRows() >0)
			{
				while($rowSelectSeriesRequestDetailsPnr=$resultSelectSeriesRequestDetailsPnr->fetchRow(DB_FETCHMODE_ASSOC))
				{					
					$rowSelectSeriesRequestDetailsPnr['submitPax']="N";
					if(!in_array($rowSelectSeriesRequestDetailsPnr['pnrNumber'],$pnrTempArray))
					{
						$pnrTempArray[]=$rowSelectSeriesRequestDetailsPnr['pnrNumber'];
						$rowSelectSeriesRequestDetailsPnr['submitPax']="Y";
					}
					$sectorDetails['requestDetails'][$i]['seriesRequestDetails'][]=$rowSelectSeriesRequestDetailsPnr;
				}
			}
			else
			{
				$objSeriesRequestDetails->__construct();
				$objSeriesRequestDetails->_Oconnection=$this->_Oconnection;
				$objSeriesRequestDetails->_IrequestId=$rd['request_id'];	
			
				$sectorDetails['requestDetails'][$i]['seriesRequestDetails']=$objSeriesRequestDetails->_selectSeriesRequestDetails();
			}				   		
				
			$k=0;
			foreach($sectorDetails['requestDetails'][$i]['seriesRequestDetails'] as $srd)
			{
			
				if(isset($srd['pnrNumber']) && !empty($srd['pnrNumber']))
				{
					$_OpassengerDetails->__construct();
					$_OpassengerDetails->_Oconnection=$this->_Oconnection;
					$_OpassengerDetails->_IseriesRequestId=$srd['series_request_id'];					
					$_OpassengerDetails->_Spnr=$srd['pnrNumber'];					
					$_OpassengerDetails->_selectPassengerDetails();
					$sectorDetails['requestDetails'][$i]['seriesRequestDetails'][$k]['submittedPax']=$_OpassengerDetails->_IcountLoop;
					$_OpassengerDetails->__construct();
					$_OpassengerDetails->_Oconnection=$this->_Oconnection;
					$_OpassengerDetails->_IseriesRequestId=$srd['series_request_id'];
					$_OpassengerDetails->_SpassengerType="Adult";					
					$_OpassengerDetails->_Spnr=$srd['pnrNumber'];
					$_OpassengerDetails->_selectPassengerDetails();
					$sectorDetails['requestDetails'][$i]['seriesRequestDetails'][$k]['submittedAdult']=$_OpassengerDetails->_IcountLoop;
					$_OpassengerDetails->__construct();
					$_OpassengerDetails->_Oconnection=$this->_Oconnection;
					$_OpassengerDetails->_IseriesRequestId=$srd['series_request_id'];
					$_OpassengerDetails->_SpassengerType="Child";
					$_OpassengerDetails->_Spnr=$srd['pnrNumber'];
					$_OpassengerDetails->_selectPassengerDetails();
					$sectorDetails['requestDetails'][$i]['seriesRequestDetails'][$k]['submittedChild']=$_OpassengerDetails->_IcountLoop;
					$_OpassengerDetails->__construct();
					$_OpassengerDetails->_Oconnection=$this->_Oconnection;
					$_OpassengerDetails->_IseriesRequestId=$srd['series_request_id'];
					$_OpassengerDetails->_SpassengerType="Infant";
					$_OpassengerDetails->_Spnr=$srd['pnrNumber'];
					$_OpassengerDetails->_selectPassengerDetails();
					$sectorDetails['requestDetails'][$i]['seriesRequestDetails'][$k]['submittedInfant']=$_OpassengerDetails->_IcountLoop;
								
				}
				else
				{
					$sectorDetails['requestDetails'][$i]['seriesRequestDetails'][$k]['submittedPax']=0;
					$sectorDetails['requestDetails'][$i]['seriesRequestDetails'][$k]['submittedAdult']=0;
					$sectorDetails['requestDetails'][$i]['seriesRequestDetails'][$k]['submittedChild']=0;
					$sectorDetails['requestDetails'][$i]['seriesRequestDetails'][$k]['submittedInfant']=0;
					$sectorDetails['requestDetails'][$i]['seriesRequestDetails'][$k]['pnrNumber']="--";
					$sectorDetails['requestDetails'][$i]['seriesRequestDetails'][$k]['submitPax']="N";
					
				}
				
				$flightDetails=$this->_getFlightDetails($sectorDetails['request_master_id'],$srd['series_request_id']);
				foreach($flightDetails as $flight)
				{
					$sectorDetails['requestDetails'][$i]['seriesRequestDetails'][$k]['flightNumber']='';
					if(empty($flight['viaFlight']))
					{
					    $sectorDetails['requestDetails'][$i]['seriesRequestDetails'][$k]['flightNumber']=$flight['flight_number'];
					}
					if(!empty($flight['viaFlight']))
					{
					    $flightNo="";
					    foreach($flight['viaFlight'] as $via)
					    {
						if($flightNo!='')
						    $flightNo.=", ";
						$flightNo.=$via['airline_code']."-".$via['flight_number'];
					    }
					    $sectorDetails['requestDetails'][$i]['seriesRequestDetails'][$k]['flightNumber']=$flightNo;
					}
				}
							
				$k++;
			}			
					
			$i++;	
			
		}		
		return $sectorDetails;
	}
	
	function _getPersonOrgId($pnrBlockingId)
	{
		global $CFG;
		
		$reurnArray=array();
		
		$sqlSelectPersonOrgId="SELECT
						personOrgID
				       FROM
				       		".$CFG['db']['tbl']['passenger_pnr_blocking_details']."
				       WHERE
				       		pnr_blocking_id='".$pnrBlockingId."'";
				       		
		if(DB::isError($resultSelectPersonOrgId=$this->_Oconnection->query($sqlSelectPersonOrgId)))
		{
			fileWrite($sqlSelectPersonOrgId,"SqlError","a+");
			return false;
		}

		if($resultSelectPersonOrgId->numRows() >0)
		{
			while($rowSelectPersonOrgId=$resultSelectPersonOrgId->fetchRow(DB_FETCHMODE_ASSOC))
			{
				$reurnArray[]=$rowSelectPersonOrgId['personOrgID'];
			}
		}
		
		return $reurnArray;
	}
	//$ingoreDummyPnr is for selecting the original pnr
	function _getMultiplePnr($_IrequestMasterId,$ingoreDummyPnr="N")
	{
		global $CFG;
		if(!empty($_IrequestMasterId['request_master_id'])){
			$_ArequestMasterId = $_IrequestMasterId;
			$_IrequestMasterId = $_IrequestMasterId['request_master_id'];
		}
		if(empty($_ArequestMasterId['pnrBlockingDetails'])){
			fileRequire("dataModels/class.pnrBlockingDetails.php");
			$_OpnrBlockingDetails = new pnrBlockingDetails;
			$_OpnrBlockingDetails->_Oconnection = $this->_Oconnection;
			if(is_array($_IrequestMasterId))
				$_IrequestMasterId=implode(",",$_IrequestMasterId);				
			$_OpnrBlockingDetails->_IrequestMasterId = $_IrequestMasterId;
			$_OpnrBlockingDetails->_INcondition = "IN";
			if($ingoreDummyPnr!="Y")
				$_OpnrBlockingDetails->_SstatusPending = 'Pending';

			fileRequire("classesTpl/class.tpl.viewPaymentHistory.php");
			$_OviewPaymentHistory = new viewPaymentHistoryTpl;
			$_OviewPaymentHistory->_Oconnection = $this->_Oconnection;
			$_OpnrBlockingDetails->_Spnr=$_OviewPaymentHistory->_getActivatedPnrs($_IrequestMasterId);
			$_ApnrBlockingDetailsResult =$_OpnrBlockingDetails->_selectPnrBlockingDetails();
		}else{
			$_ApnrBlockingDetailsResult =$_ArequestMasterId['pnrBlockingDetails'];
		}
		$resultPnr = array();
		foreach($_ApnrBlockingDetailsResult AS $pnrArray)
		{
			
			$conditionVal=1;
			if($ingoreDummyPnr=="Y")
			{				
				$strPos=strpos($pnrArray['pnr'],'GROUP');
				if($strPos!== false) 
					$conditionVal=0;
			}
			if($conditionVal){
				if(!empty($_ArequestMasterId))
					$resultPnr[$pnrArray['request_master_id']][]=$pnrArray['pnr'];
				else	
					array_push($resultPnr,$pnrArray['pnr']);
			}
		}
		if(in_array($_SESSION['groupRM']['groupId'],$CFG["site"]["travelAgentSideGroupId"]))
		{
			$transactionId=$this->_getLastTransactionMasterId($_IrequestMasterId);
			$_ArequestApprovedDetails=$this->_getRequestApprovedFlightDetails($_IrequestMasterId,'',$transactionId,'');
			$ApprovedId=array_column($_ArequestApprovedDetails,'series_request_id','request_approved_flight_id');
			asort($ApprovedId);
			$pnrBlock=array_flip(array_column($_ApnrBlockingDetailsResult,'request_approved_flight_id'));
			$resultPnr = array();
			foreach($ApprovedId as $key=>$value)
			{
				$resultPnr[]= $_ApnrBlockingDetailsResult[$pnrBlock[$key]]['pnr'];
			}
		}
		if(!empty($_ArequestMasterId))
			return $resultPnr;
		return implode(", ",array_unique($resultPnr));
	}
	
	//Payment request details by airlines
	function _getPaymentRequestDetails($_IrequestMasterId,$_ItransactionId=0,$paidStatus="PENDING")
	{
		global $CFG;
		$condition = '';
		if($_ItransactionId!=0) {
			$condition = " AND tm.transaction_id = '".$_ItransactionId."' ";
		}
		$sql="SELECT 
				arm.airlines_request_id,
				tm.transaction_id,
				tm.fare_expiry_date
			FROM 
				".$CFG['db']['tbl']['airlines_request_mapping']." arm,
				".$CFG['db']['tbl']['transaction_master']." tm
			WHERE 
				arm.request_master_id=".$_IrequestMasterId." AND
				arm.corporate_id=".$CFG['default']['airlineCorporateId']." AND 
				tm.airlines_request_id = arm.airlines_request_id ".$condition."
			ORDER BY
				tm.transaction_id DESC
			LIMIT 1";
				
		if(DB::isError($result=$this->_Oconnection->query($sql)))
		{
			fileWrite($sql,"SqlError","a+");
			return false;
		}
		$row=$result->fetchRow(DB_FETCHMODE_ASSOC);
		
		fileRequire("dataModels/class.paymentRequestDetails.php");
		$_OpaymentRequestDetails = new paymentRequestDetails;
		$_OpaymentRequestDetails->_Oconnection = $this->_Oconnection;
		$_OpaymentRequestDetails->_ItransactionId = $row['transaction_id'];
		$_OpaymentRequestDetails->_selectPaymentRequestDetails();
		if($_OpaymentRequestDetails->_IcountLoop>0) {
			$count=0;
			
			foreach($_OpaymentRequestDetails->_ApaymentRequestDetails as &$_ApaymentRequestDetails)
			{
				if(strtoupper($_ApaymentRequestDetails['paid_status']) == $paidStatus)
				{
					//Check the last validity
					if($_OpaymentRequestDetails->_IcountLoop == ($count+1))
						$_ApaymentRequestDetails['lastValidity'] = "Y";
					else
						$_ApaymentRequestDetails['lastValidity'] = "N";
					
					return $_ApaymentRequestDetails;
				}
				$count++;
			}
		}
		return false;
	}

	/* 
	 * Description	: This function finds the no of pax for which  payment has to be done, based on payment validity
	   and calulates fare for the passengers and then updates the payment percentage in payment_master & pnr_payment_details table.
	   This function is used while accepting the group request (class.tpl.userResponse.php) & after each payment (class.tpl.displayPaymentDetails.php)
	 */	
	function _updateGroupSizePercentage($requestMasterId)
	{
		global $CFG;
		fileRequire("dataModels/class.paymentMaster.php");
		fileRequire("dataModels/class.pnrPaymentDetails.php");
		
		$_OpaymentMaster = new paymentMaster;
		$_OpaymentMaster->_Oconnection = $this->_Oconnection;

		$_OpnrPaymentDetails = new pnrPaymentDetails;
		$_OpnrPaymentDetails->_Oconnection = $this->_Oconnection;

		$airlineRequestId = 0;
		$_ApaymentMaster = $_APnrDetails = array();
		$airlineRequestId = $this->_getAirlineRequestId($requestMasterId);
		#allowing status code added here to further action
		$_AallowedStatuCode=array(9,10,12);
		#Finding the payment_master_details & pnr_payment_details, for which payment is pending/accepted and fare details of each PNR
		#in $_ApnrDetails, storing the total pax count and pax count for which payment is done so far
		if($airlineRequestId > 0)
		{
			$_OpaymentMaster->__construct();
			$_OpaymentMaster->_IairlinesRequestId = $airlineRequestId;
			$_ApaymentMaster = $_OpaymentMaster->_selectPaymentMaster();
			foreach($_ApaymentMaster as $_IpaymentMasterKey=>$_ApaymentMasterVal)
			{
				$_OpnrPaymentDetails->__construct();
				$_OpnrPaymentDetails->_IpaymentMasterId = $_ApaymentMasterVal['payment_master_id'];
				$_ApnrPaymentDetails = $_OpnrPaymentDetails->_selectPnrPaymentDetails();
				$_ApaymentMaster[$_IpaymentMasterKey]['totalAmount'] = 0;
				$_ApaymentMaster[$_IpaymentMasterKey]['approved'] = 'Y';
				$_ApaymentMaster[$_IpaymentMasterKey]['pnrPaymentDetails'] = $_ApnrPaymentDetails;
				foreach($_ApnrPaymentDetails as $_IpnrPaymentDetailsKey=>$_ApnrPaymentDetailsValue)
				{
					if($_ApnrPaymentDetailsValue['payment_status']!= 'APPROVED')
						$_ApaymentMaster[$_IpaymentMasterKey]['approved'] = 'N';
					$_ApaymentMaster[$_IpaymentMasterKey]['pnrPaymentDetails'][$_IpnrPaymentDetailsKey]['totalPnrAmount'] = 0;
		 
					$tempPnr = $_ApnrPaymentDetailsValue['pnr'];
					$sql = "select
							pbd.pnr, 
							rafd.flight_number,
							rafd.source,
							rafd.destination,
							pbd.no_of_adult,
							pbd.no_of_child,
							pbd.no_of_infant,
							pbd.no_of_foc,
							rafd.base_fare,
							rafd.tax,
							rafd.tax_breakup,
							rafd.child_base_fare,
							rafd.child_tax,
							rafd.child_tax_breakup,
							rafd.infant_base_fare,
							rafd.infant_tax,
							rafd.infant_tax_breakup,
							rafd.foc_tax
						from 
							request_approved_flight_details rafd JOIN pnr_blocking_details pbd ON 
							pbd.request_approved_flight_id = rafd.request_approved_flight_id
						where
							pbd.pnr = '".$tempPnr."'";
					if(DB::isError($resultFlightInfo=$this->_Oconnection->query($sql)))
					{
						fileWrite($sql,"SqlError","a+");
						return false;
					}

					if($resultFlightInfo->numRows() > 0)
					{
						$i=0;
						while($row=$resultFlightInfo->fetchRow(DB_FETCHMODE_ASSOC))
						{
							if($i==0)
							{
								if(!isset($_ApnrDetails[$tempPnr]))
								{
									$_ApnrDetails[$tempPnr] = array();
									$_ApnrDetails[$tempPnr]['pax']['ADT'] = $row['no_of_adult'];
									$_ApnrDetails[$tempPnr]['pax']['CHD'] = $row['no_of_child'];
									$_ApnrDetails[$tempPnr]['pax']['INF'] = $row['no_of_infant'];
									$_ApnrDetails[$tempPnr]['pax']['FOC'] = $row['no_of_foc'];
									$_ApnrDetails[$tempPnr]['totalPax'] = $row['no_of_adult']+$row['no_of_child']+$row['no_of_infant']+$row['no_of_foc'];
									$_ApnrDetails[$tempPnr]['paxTaken']['INF'] = $_ApnrDetails[$tempPnr]['paxTaken']['CHD'] = $_ApnrDetails[$tempPnr]['paxTaken']['ADT'] = $_ApnrDetails[$tempPnr]['paxTaken']['FOC'] = 0;
									$_ApnrDetails[$tempPnr]['paidPercentage'] = array();
									$_ApnrDetails[$tempPnr]['groupSizePercent'] = array();
								}
								if($_ApnrPaymentDetailsValue['payment_status'] == 'APPROVED')
								{
									if($_ApnrPaymentDetailsValue['group_pax_paid'] != '')
									{
										$groupPaxPaid = explode('-',$_ApnrPaymentDetailsValue['group_pax_paid']);
										foreach($groupPaxPaid as $paxInfo)
										{
											$paxSeatTaken = explode('=',$paxInfo);
											$_ApnrDetails[$tempPnr]['paxTaken'][$paxSeatTaken[0]] += $paxSeatTaken[1];
										}
									}

								}
							}
							$_ApaymentMaster[$_IpaymentMasterKey]['pnrPaymentDetails'][$_IpnrPaymentDetailsKey]['requestApprovedFlightDetails'][] = $row;
							$i++;
						}
						if($_ApnrPaymentDetailsValue['payment_status'] == 'APPROVED')
						{
							$_ApnrDetails[$tempPnr]['paidPercentage'][] = $_ApnrPaymentDetailsValue['pnr_percentage_amount'];
							$_ApnrDetails[$tempPnr]['groupSizePercent'][] = $_ApnrPaymentDetailsValue['group_pax_percent'];	
						}
					}
				}
			}
		}

		#adjusting percentage and amount in payment_master in case of discrepancy
		$_ApaidStatus = array(10,12);
		$paymentPendingAmount = $totalPnrPaymentAmt = $totalPaidPercent = 0;
		$_IgroupLevelTotalFare=$this->_getRequestTotalAmount($requestMasterId);
		$_rowCurrency=$this->_getUserCurrency($requestMasterId);
		foreach($_ApaymentMaster as $_IpayMasterKey=>$_ApayMasterVal)
		{
			#based on allowing status code this if will perform
			if(!in_array($_ApayMasterVal['payment_status'],$_AallowedStatuCode))
				continue;
			if(in_array($_ApayMasterVal['payment_status'],$_ApaidStatus))
				$totalPaidPercent += $_ApayMasterVal['payment_percentage'];

			foreach($_ApayMasterVal['pnrPaymentDetails'] as $_IpnrPaymentKey=>$_ApnrPaymentVal)
			{
				$totalPnrPaymentAmt+=$_ApnrPaymentVal['paid_amount'];
				if(($_ApnrPaymentVal['payment_status']=='PENDING'))
				{
					$paymentPendingAmount += $_ApnrPaymentVal['paid_amount'];
					$totalPnrPaymentAmt-=$_ApnrPaymentVal['paid_amount'];
				}
			}

			if($_ApayMasterVal['payment_status'] == 9)
			{
				$_ApaymentMaster[$_IpayMasterKey]['percentage_amount'] = $paymentPendingAmount;
				if($totalPnrPaymentAmt==$_IgroupLevelTotalFare)
					$_ApaymentMaster[$_IpayMasterKey]['payment_percentage'] = 100-$totalPaidPercent;
				else
					$_ApaymentMaster[$_IpayMasterKey]['payment_percentage'] = round((($paymentPendingAmount/$_IgroupLevelTotalFare)*100),2);
			}
		}

		#calcualting the number of passengers and their fares for which payment has to be done and updating it in DB, if payment status is pending
		$paymentMasterTotalPercent = $paidpaymentMasterPercent = $paymentMasterAmount = 0;
		foreach($_ApaymentMaster as $payMasterKey=>$payMasterVal)
		{
			#based on allowing status code this if will perform
			if(!in_array($payMasterVal['payment_status'],$_AallowedStatuCode))
				continue;
			
			$paymentMasterTotalPercent += $_ApaymentMaster[$payMasterKey]['payment_percentage'];
			if(in_array($payMasterVal['payment_status'],$_ApaidStatus))
				$paidpaymentMasterPercent += $_ApaymentMaster[$payMasterKey]['payment_percentage'];

			#finding out the number of pax and its fare and percent, for which payment has to be done
			if($payMasterVal['approved'] == 'N')
			{
				if($payMasterVal['payment_status'] == 9)
				{
					$_ApaymentMaster[$payMasterKey]['totalAmount'] = 0;
					$_ApaymentMaster[$payMasterKey]['percentage_amount'] = 0;
					$_ApaymentMaster[$payMasterKey]['payment_percentage'] = 0;
				}
				foreach($payMasterVal['pnrPaymentDetails'] as $pnrPayKey=>$pnrPayVal)
				{
					if($pnrPayVal['payment_status']=='PENDING')
					{
						#finding the number of passengers for whom payment has to be done based on payment perecentage
						$tmpPnrDetails = $_ApnrDetails[$pnrPayVal['pnr']];
						$paymentPercent = $pnrPayVal['pnr_percentage_amount'];
						if(/*($payMasterVal['payment_status'] == 10) &&*/ isset($pnrPayVal['group_pax_percent']))
						{
							if(!empty($pnrPayVal['group_pax_percent']))
								$paymentPercent = $pnrPayVal['group_pax_percent'];
						}
						$noOfPax = ceil(($tmpPnrDetails['totalPax']*$paymentPercent)/100);

						#finidng if the payment is the last payment for PNR
						$pnrLastPayment = 'N';
						$reqGrpPax = $noOfPax;
						$paidGrpPax = $tmpPnrDetails['paxTaken']['ADT']+$tmpPnrDetails['paxTaken']['CHD']+$tmpPnrDetails['paxTaken']['INF']+$tmpPnrDetails['paxTaken']['FOC'];
						$totalGrpPax = $paidGrpPax+$reqGrpPax;

						if(($totalGrpPax>=$tmpPnrDetails['totalPax']) || ($paymentMasterTotalPercent>=100))
						/*Summation of Pending percentage and paid percentage will be 100 then it will consider as last payment*/
						$tmpPnrpaidPercentage = 0;
						$remainingpaidPercentage = 0;
						if(!empty($tmpPnrDetails['paidPercentage']))
						{
							$tmpPnrpaidPercentage = $tmpPnrDetails['paidPercentage'][0];
						}
						$remainingpaidPercentage = $paymentPercent + $tmpPnrpaidPercentage;
						if(($totalGrpPax>=$tmpPnrDetails['totalPax']) || ($paymentMasterTotalPercent>=100) || ($remainingpaidPercentage==100))
							$pnrLastPayment = 'Y';

						$remainingPax = array();
						$remainingPax['ADT'] = $tmpPnrDetails['pax']['ADT'] - $tmpPnrDetails['paxTaken']['ADT'];
						$remainingPax['CHD'] = $tmpPnrDetails['pax']['CHD'] - $tmpPnrDetails['paxTaken']['CHD'];
						$remainingPax['INF'] = $tmpPnrDetails['pax']['INF'] - $tmpPnrDetails['paxTaken']['INF'];
						$remainingPax['FOC'] = $tmpPnrDetails['pax']['FOC'] - $tmpPnrDetails['paxTaken']['FOC'];

						#for last payment of a PNR, fare for remaining passengers in PNR will be calcualted
						$paxTaken = array();
						$paxTaken['INF'] = $paxTaken['CHD'] = $paxTaken['ADT'] = $paxTaken['FOC'] = $totalPaxTaken = 0;
						if($pnrLastPayment == 'Y')
						{
							$paxTaken = $remainingPax;
						}
						else
						{
							foreach($remainingPax as $paxType=>$paxCnt)
							{
								if(($noOfPax!=0) && ($paxCnt>0))
								{
									if($noOfPax<=$paxCnt)
										$paxTaken[$paxType] = $noOfPax;
									else
										$paxTaken[$paxType] = $paxCnt;
									$remainingPax[$paxType] -= $paxTaken[$paxType];
									$noOfPax -= $paxTaken[$paxType];
								}
							}
						}

						#finding out payment percentage based on passenger count
						$pnrPayableAmt = $pnrTotalAmt = 0;
						foreach($pnrPayVal['requestApprovedFlightDetails'] as $fareKey=>$fareVal)
						{
							$pnrTotalAmt += $fareVal['no_of_adult']*($this->_getRoundOffFare($fareVal['base_fare'],'',$_rowCurrency['user_currency'])+$fareVal['tax']);
							$pnrTotalAmt += $fareVal['no_of_child']*($this->_getRoundOffFare($fareVal['child_base_fare'],'',$_rowCurrency['user_currency'])+$fareVal['child_tax']);
							$pnrTotalAmt += $fareVal['no_of_infant']*($this->_getRoundOffFare($fareVal['infant_base_fare'],'',$_rowCurrency['user_currency'])+$fareVal['infant_tax']);
							$pnrTotalAmt += $fareVal['no_of_foc']*$fareVal['foc_tax'];

							$pnrPayableAmt += $paxTaken['ADT']*($this->_getRoundOffFare($fareVal['base_fare'],'',$_rowCurrency['user_currency'])+$fareVal['tax']);
							$pnrPayableAmt += $paxTaken['CHD']*($this->_getRoundOffFare($fareVal['child_base_fare'],'',$_rowCurrency['user_currency'])+$fareVal['child_tax']);
							$pnrPayableAmt += $paxTaken['INF']*($this->_getRoundOffFare($fareVal['infant_base_fare'],'',$_rowCurrency['user_currency'])+$fareVal['infant_tax']);
							$pnrPayableAmt += $paxTaken['FOC']*$fareVal['foc_tax'];
						}
						$paymentInPercent =  $this->_checkPaymentTypeInPercentage($pnrPayVal['pnr']);
						$_IgivenAbosoluteAmount=0;
						if($paymentInPercent=="N")
						{
							fileRequire("dataModels/class.requestTimelineDetails.php");
							$this->_OrequestTimeline = new requestTimelineDetails();
							$this->_OrequestTimeline->_Oconnection = $this->_Oconnection;
							$this->_OrequestTimeline->_IrequestTimelineId= $pnrPayVal['request_timeline_id'];
							$this->_OrequestTimeline->_INcondition = 'IN';
							$this->_OrequestTimeline->_StimelineType = 'PAYMENT';
							$requestValidityDetails=$this->_OrequestTimeline->_selectRequestTimelineDetails();
							$_IgivenAbosoluteAmount= $requestValidityDetails[0]['absolute_amount'];
						}
						//Not to set amount based on pax level
						if($_IgivenAbosoluteAmount!=0)
							$pnrPayableAmt= $pnrPayVal['paid_amount'];
						$_ApaymentMaster[$payMasterKey]['pnrPaymentDetails'][$pnrPayKey]['totalPnrAmount'] = $pnrTotalAmt;
						$_ApaymentMaster[$payMasterKey]['pnrPaymentDetails'][$pnrPayKey]['group_pax_percent'] = $paymentPercent;
						$_ApaymentMaster[$payMasterKey]['pnrPaymentDetails'][$pnrPayKey]['pnr_percentage_amount'] = round((($pnrPayableAmt/$pnrTotalAmt)*100),2);
						if($pnrLastPayment == 'Y')
						{
							$groupPaxPercentPaid = array_sum($tmpPnrDetails['groupSizePercent']);
							$remainingGroupPaxPercent = 100-$groupPaxPercentPaid;
							$_IpaidAmount = $this->_getPnrPaidAmount($requestMasterId,$_ApaymentMaster[$payMasterKey]['pnrPaymentDetails'][$pnrPayKey]['pnr']);
							$_IremainingAmount = $pnrTotalAmt - $_IpaidAmount;
							$_ApaymentMaster[$payMasterKey]['pnrPaymentDetails'][$pnrPayKey]['group_pax_percent'] = $remainingGroupPaxPercent;
							$_ApaymentMaster[$payMasterKey]['pnrPaymentDetails'][$pnrPayKey]['pnr_percentage_amount'] = 100-array_sum($tmpPnrDetails['paidPercentage']);
							$_ApaymentMaster[$payMasterKey]['pnrPaymentDetails'][$pnrPayKey]['paid_amount'] = $this->_getRoundOffFare($_IremainingAmount);
						}
						else
							$_ApaymentMaster[$payMasterKey]['pnrPaymentDetails'][$pnrPayKey]['paid_amount'] = $this->_getRoundOffFare($pnrPayableAmt);
						if($paxTaken['ADT'] !=0 || $paxTaken['CHD'] !=0 || $paxTaken['INF'] !=0 )
						{
							$_ApaymentMaster[$payMasterKey]['pnrPaymentDetails'][$pnrPayKey]['group_pax_paid'] = 'ADT='.$paxTaken['ADT'].'-CHD='.$paxTaken['CHD'].'-INF='.$paxTaken['INF'];
						}
						else
						{
							$_ApaymentMaster[$payMasterKey]['pnrPaymentDetails'][$pnrPayKey]['group_pax_paid'] = '';
						}
						$paymentMasterAmount += $pnrPayableAmt;
						if($payMasterVal['payment_status'] == 9)
						{
							$_ApaymentMaster[$payMasterKey]['totalAmount']+= $pnrTotalAmt;
							$_ApaymentMaster[$payMasterKey]['percentage_amount']+= $pnrPayableAmt;
						}
					}
				}

				#updating payment_master and pnr_payment_details for which payment is pending
				if($payMasterVal['payment_status'] == 9)
				{
					if($pnrLastPayment == 'Y')
					{
						/*During single pax, modify accept ,timeline extend remaining amount*/
						if($noOfPax == 1 && $tmpPnrDetails['totalPax'] == 1)
						{
							$_remainingAmount = $_IgroupLevelTotalFare - $totalPnrPaymentAmt;
							$_ApaymentMaster[$payMasterKey]['percentage_amount'] = $this->_getRoundOffFare($_remainingAmount);
							$_ApaymentMaster[$payMasterKey]['pnrPaymentDetails'][$pnrPayKey]['paid_amount']=$this->_getRoundOffFare($_remainingAmount);
						}
						else
						{
							$_ApaymentMaster[$payMasterKey]['percentage_amount'] = $this->_getRoundOffFare($paymentPendingAmount);
						}
					}
					else
						$_ApaymentMaster[$payMasterKey]['percentage_amount'] = $this->_getRoundOffFare($paymentMasterAmount);
					#$_ApaymentMaster[$payMasterKey]['payment_percentage'] = ($_ApaymentMaster[$payMasterKey]['percentage_amount']/$_ApaymentMaster[$payMasterKey]['totalAmount'])*100;
					$_ApaymentMaster[$payMasterKey]['payment_percentage'] = ($_ApaymentMaster[$payMasterKey]['percentage_amount']/$_IgroupLevelTotalFare)*100;
					$_ApaymentMaster[$payMasterKey]['payment_percentage'] = round($_ApaymentMaster[$payMasterKey]['payment_percentage'],2);
					if($paymentMasterTotalPercent>=100)
						$_ApaymentMaster[$payMasterKey]['payment_percentage'] = 100-$paidpaymentMasterPercent;

					$_OpaymentMaster->__construct();
					$_OpaymentMaster->_IairlinesRequestId = $airlineRequestId;
					$_OpaymentMaster->_IpaymentMasterId = $payMasterVal['payment_master_id'];
					$_OpaymentMaster->_SpaymentPercentage = $_ApaymentMaster[$payMasterKey]['payment_percentage'];
					$_OpaymentMaster->_IpercentageAmount = $_ApaymentMaster[$payMasterKey]['percentage_amount'];

					if ($CFG['site']['reIssueEmd'] == 'Y' && $_ApaymentMaster[$payMasterKey]['percentage_amount']<0) 	
						$_OpaymentMaster->_IpaymentStatus = 10;
					$_OpaymentMaster->_updatePaymentMaster();
				}
				foreach($_ApaymentMaster[$payMasterKey]['pnrPaymentDetails'] as $_IpnrPayKey=>$_ApnrPayVal)
				{
					if($_ApnrPayVal['payment_status'] == 'PENDING')
					{
						$_OpnrPaymentDetails->__construct();
						$_OpnrPaymentDetails->_IpnrPaymentId = $_ApnrPayVal['pnr_payment_id'];
						$_OpnrPaymentDetails->_IpaymentMasterId = $_ApnrPayVal['payment_master_id'];
						$_OpnrPaymentDetails->_Spnr = $_ApnrPayVal['pnr'];
						$_OpnrPaymentDetails->_IpaidAmount = $_ApnrPayVal['paid_amount'];
						$_OpnrPaymentDetails->_IpnrPercentageAmount = $_ApnrPayVal['pnr_percentage_amount'];
						$_OpnrPaymentDetails->_SgroupPaxPaid = $_ApnrPayVal['group_pax_paid'];
						$_OpnrPaymentDetails->_IgroupPaxPercent = $_ApnrPayVal['group_pax_percent'];

						if ($CFG['site']['reIssueEmd'] == 'Y' && $_ApnrPayVal['paid_amount']<0)
							$_OpnrPaymentDetails->_SpaymentStatus = 'APPROVED';

						//Update pnr payment validity date based on request timeline id
						fileRequire("classes/class.updatePaymentDetails.php");
						$_OupdatePaymentDetails=new updatePaymentDetails();
						$_OupdatePaymentDetails->__construct();
						$_OupdatePaymentDetails->_Oconnection=$this->_Oconnection;
						$_ApnrDetails=$_OupdatePaymentDetails->_selectModifiedPnrPaymentDetails($_ApnrPayVal['pnr'],$_ApnrPayVal['payment_status']);

						$_ArequestTimelineDetails[]=$_ApnrDetails[0]['request_timeline_id'];

						$_AtimelineValidityDetails = $this->_getRequestTimeline($_ArequestTimelineDetails);

						$_OpnrPaymentDetails->_SpnrPaymentValidityDate=$_AtimelineValidityDetails[0];
						
						$_OpnrPaymentDetails->_updatePnrPaymentDetails();
					}
				}
			}
		}
	}

	#splits the string which contains the pax details (pnr_payment_details) for which payment is done to array
	function _getGroupPaxPaid($groupPaxPaid)
	{
		$passengers = array();
		$passengers['FOC'] = $passengers['INF'] = $passengers['CHD'] = $passengers['ADT'] = 0;
		if($groupPaxPaid != '')
		{
			$tmpGrpPaxPaid =  explode("-",$groupPaxPaid);
			foreach($tmpGrpPaxPaid as $value)
			{
				$paxCount = explode("=",$value);
				$passengers[$paxCount[0]] = $paxCount[1];
			}	
		}
		return $passengers;
	}

	//get remaining pax of request, tempPax should be array contains group_pax_paid-return array with remaining pax
	function _getRemainingPaxOfRequest($IrequestMasterId,$_SPNR,$tempPax){
		fileRequire("dataModels/class.pnrBlockingDetails.php");
		$_OpnrBlockingDetails = new pnrBlockingDetails();
		$_OpnrBlockingDetails->_Oconnection = $this->_Oconnection;
		$_OpnrBlockingDetails->_Spnr = $_SPNR;
		$_OpnrBlockingDetails->_IrequestMasterId = $IrequestMasterId;
		$_ApnrBlockingDetails = $_OpnrBlockingDetails->_selectPnrBlockingDetails();
		$paidPax = array();
		foreach($tempPax as $key => $val){
			$allpax = $this->_getGroupPaxPaid($val);
			$paidPax['ADT'] += $allpax['ADT'];
			$paidPax['CHD'] += $allpax['CHD'];
			$paidPax['INF'] += $allpax['INF'];
		}
		$paidPax['ADT'] = $_ApnrBlockingDetails[0]['no_of_adult'] - $paidPax['ADT'];
		$paidPax['CHD'] = $_ApnrBlockingDetails[0]['no_of_child'] - $paidPax['CHD'];
		$paidPax['INF'] = $_ApnrBlockingDetails[0]['no_of_infant'] - $paidPax['INF'];
		return $paidPax;
	}

	#splits the string which contains tax details (request_approved_flight_details) to array
	function _splitTaxComponents($taxValue)
	{
		$taxBreakUp = array();
		if($taxValue !='')
		{
			$tempTax = explode('$$',$taxValue);
			foreach($tempTax as $val)
			{
				$taxCmpt = explode('=',$val);
				//No need to assign the tax break up array if there is no tax code
				if($taxCmpt[0] != '')
					$taxBreakUp[$taxCmpt[0]] = $taxCmpt[1];
			}
		}
		return $taxBreakUp;
	}


	#function to get the fare for a pnr for all each passenger type
	function _getPnrPaxFare($requestMasterId,$pnr)
	{
		$sql = "SELECT
				pbd.pnr, 
				rafd.flight_number,
				rafd.source,
				rafd.destination,
				rafd.no_of_adult,
				rafd.no_of_child,
				rafd.no_of_infant,
				rafd.base_fare,
				rafd.tax,
				rafd.tax_breakup,
				rafd.child_base_fare,
				rafd.child_tax,
				rafd.child_tax_breakup,
				rafd.infant_base_fare,
				rafd.infant_tax,
				rafd.infant_tax_breakup
			FROM 
				request_approved_flight_details rafd JOIN pnr_blocking_details pbd ON 
				pbd.request_approved_flight_id = rafd.request_approved_flight_id
			WHERE
				pbd.pnr = '".$pnr."' AND
				pbd.request_master_id = ".$requestMasterId;

		if(DB::isError($resultFlightInfo=$this->_Oconnection->query($sql)))
		{
			fileWrite($sql,"SqlError","a+");
			return false;
		}

		$fareDetails = array();
		$fareDetails['INF'] = $fareDetails['CHD'] = $fareDetails['ADT'] = array('baseFare'=>0,'tax'=>0,'total'=>0); 
		if($resultFlightInfo->numRows() > 0)
		{
			while($row=$resultFlightInfo->fetchRow(DB_FETCHMODE_ASSOC))
			{
				$fareDetails['ADT']['baseFare'] += $row['base_fare'];
				$fareDetails['ADT']['tax'] += $row['tax'];
				$fareDetails['ADT']['total'] += ($row['base_fare']+$row['tax']);
				$fareDetails['CHD']['baseFare'] += $row['child_base_fare'];
				$fareDetails['CHD']['tax'] += $row['child_tax'];
				$fareDetails['CHD']['total'] += ($row['child_base_fare']+$row['child_tax']);
				$fareDetails['INF']['baseFare'] += $row['infant_base_fare'];
				$fareDetails['INF']['tax'] += $row['infant_tax'];
				$fareDetails['INF']['total'] += ($row['infant_base_fare']+$row['infant_tax']);
			}
		}
		return $fareDetails;
	}
	
	function _getMultiplePaymentValidityDetails($_IrequestMasterId,$_ItransactionId=0)
	{
		global $CFG;
		$condition = '';
		if($_ItransactionId!=0) {
			$condition = " AND tm.transaction_id = '".$_ItransactionId."' ";
		}
		$sql="SELECT 
				arm.airlines_request_id,
				tm.transaction_id,
				tm.payment_in_percent,
				tm.fare_expiry_date,
				tm.passenger_expiry_date
			FROM 
				".$CFG['db']['tbl']['airlines_request_mapping']." arm,
				".$CFG['db']['tbl']['transaction_master']." tm
			WHERE 
				arm.request_master_id=".$_IrequestMasterId." AND
				arm.corporate_id=".$CFG['default']['airlineCorporateId']." AND 
				tm.airlines_request_id = arm.airlines_request_id ".$condition."
			ORDER BY
				tm.transaction_id DESC
			LIMIT 1";
				
		if(DB::isError($result=$this->_Oconnection->query($sql)))
		{
			fileWrite($sql,"SqlError","a+");
			return false;
		}
		$row=$result->fetchRow(DB_FETCHMODE_ASSOC);
		
		fileRequire("dataModels/class.paymentRequestDetails.php");
		$_OpaymentRequestDetails = new paymentRequestDetails;
		$_OpaymentRequestDetails->_Oconnection = $this->_Oconnection;
		$_OpaymentRequestDetails->_ItransactionId = $row['transaction_id'];
		$_ApaymentRequestDetails = $_OpaymentRequestDetails->_selectPaymentRequestDetails();
		if($_OpaymentRequestDetails->_IcountLoop>0) {
			foreach($_ApaymentRequestDetails AS &$_ApaymentRequestArray)
			{
				$_ApaymentRequestArray['payment_in_percent'] = $row['payment_in_percent'];
				$_ApaymentRequestArray['passenger_expiry_date'] = $row['passenger_expiry_date'];
				$_ApaymentRequestArray['payment_expiry_date_disp'] = $this->_getUserDateFormatValue($_ApaymentRequestArray['payment_expiry_date']);
				if($_ApaymentRequestArray['payment_in_percent']=='Y')
				{
					$_ApaymentRequestArray['payment_amount'] = $_ItotalAmount*($_ApaymentRequestArray['payment_percentage']/100);
				}
				else
				{
					$_ApaymentRequestArray['payment_amount']=$this->_updatePaymentRequestDetailsForAmount($_IrequestMasterId,$_ApaymentRequestArray['payment_percentage']);
				}
				$_ApaymentRequestArray['payment_amount']=$this->_getRoundOffFare($_ApaymentRequestArray['payment_amount']);				
				$_ApaymentRequestArray['paymentCount']=$paymentCount;
				$paymentCount++;
			}
			return $_ApaymentRequestDetails;
		}
		
		return false;
	}
	
	function paymentRequestProcess($_IrequestMasterId,$_ItransactionId=0)
	{
		global $CFG;
		$condition = '';
		if($_ItransactionId!=0) {
			$condition = " AND tm.transaction_id = '".$_ItransactionId."' ";
		}
		$sql="SELECT 
				arm.airlines_request_id,
				tm.transaction_id,
				tm.fare_expiry_date
			FROM 
				".$CFG['db']['tbl']['airlines_request_mapping']." arm,
				".$CFG['db']['tbl']['transaction_master']." tm
			WHERE 
				arm.request_master_id=".$_IrequestMasterId." AND
				arm.corporate_id=".$CFG['default']['airlineCorporateId']." AND 
				tm.airlines_request_id = arm.airlines_request_id ".$condition."
			ORDER BY
				tm.transaction_id DESC
			LIMIT 1";
				
		if(DB::isError($result=$this->_Oconnection->query($sql)))
		{
			fileWrite($sql,"SqlError","a+");
			return false;
		}
		$row=$result->fetchRow(DB_FETCHMODE_ASSOC);
		
		fileRequire("dataModels/class.paymentRequestDetails.php");
		$_OpaymentRequestDetails = new paymentRequestDetails;
		$_OpaymentRequestDetails->_Oconnection = $this->_Oconnection;
		$_OpaymentRequestDetails->_ItransactionId = $row['transaction_id'];
		$_ApaymentRequestDetails = $_OpaymentRequestDetails->_selectPaymentRequestDetails();
		
		fileRequire("dataModels/class.paymentMaster.php");
		$_OpaymentMaster = new paymentMaster;
		$_OpaymentMaster->_Oconnection = $this->_Oconnection;
		$_OpaymentMaster->_IairlinesRequestId = $row['airlines_request_id'];
		$_OpaymentMaster->_selectPaymentMaster();
		
		$_IpaidPercentage=0;
		
		foreach($_OpaymentMaster->_ApaymentMaster AS $_ApaymentMaster) {
			if($_ApaymentMaster['payment_status'] == 10) {
				$_IpaidPercentage += $_ApaymentMaster['payment_percentage'];
			}
		}	
		$remainingPayment = round(100-$_IpaidPercentage,2);

		if($_IpaidPercentage == 100) {
			$_OpaymentRequestDetails->__construct();
			$_OpaymentRequestDetails->_ItransactionId = $row['transaction_id'];
			$_OpaymentRequestDetails->_SpaidStatus = "Paid";
			$_OpaymentRequestDetails->_updatePaymentRequestDetails();
		}
		else if($_OpaymentRequestDetails->_IcountLoop == 1) {
			$_OpaymentRequestDetails->__construct();
			$_OpaymentRequestDetails->_IpaymentPercentage = $_IpaidPercentage;
			$_OpaymentRequestDetails->_IpaymentRequestId = $_ApaymentRequestDetails[0]['payment_request_id'];
			$_OpaymentRequestDetails->_ItransactionId = $_ApaymentRequestDetails[0]['transaction_id'];
			$_OpaymentRequestDetails->_SpaidStatus = "Paid";
			$_OpaymentRequestDetails->_updatePaymentRequestDetails();
			$_OpaymentRequestDetails->__construct();
			$_OpaymentRequestDetails->_IpaymentPercentage = $remainingPayment;
			$_OpaymentRequestDetails->_ItransactionId = $_ApaymentRequestDetails[0]['transaction_id'];
			$_OpaymentRequestDetails->_IpaymentValidity = $_ApaymentRequestDetails[0]['payment_validity'];
			$_OpaymentRequestDetails->_IpaymentValidityType = $_ApaymentRequestDetails[0]['payment_validity_type'];
			$_OpaymentRequestDetails->_IpaymentExpiryType = $_ApaymentRequestDetails[0]['payment_expiry_type'];
			$_OpaymentRequestDetails->_SpaymentExpiryDate = $_ApaymentRequestDetails[0]['payment_expiry_date'];
			$_OpaymentRequestDetails->_SpaidStatus = "Pending";
			$_OpaymentRequestDetails->_updatePaymentRequestDetails();
		}
		else {

			$i=$_OpaymentRequestDetails->_IcountLoop-1;
			$currentPaymentPercentage = 100;
			foreach($_ApaymentRequestDetails as $paymentRequestDetails) {
				$_OpaymentRequestDetails->__construct();
				$_OpaymentRequestDetails->_IpaymentRequestId = $paymentRequestDetails['payment_request_id'];
				$_OpaymentRequestDetails->_ItransactionId = $paymentRequestDetails['transaction_id'];
				if($_IpaidPercentage >= $paymentRequestDetails['payment_percentage']) {
					if($i==1)
						$_OpaymentRequestDetails->_IpaymentPercentage = $_IpaidPercentage;
					else
						$_OpaymentRequestDetails->_IpaymentPercentage = $paymentRequestDetails['payment_percentage'];
				}
				else {
					if($i>0)
						$_OpaymentRequestDetails->_IpaymentPercentage = $paymentRequestDetails['payment_percentage'];
					else
						$_OpaymentRequestDetails->_IpaymentPercentage = $currentPaymentPercentage;
				}
				if($_IpaidPercentage>0) {
					$_OpaymentRequestDetails->_SpaidStatus = "Paid";
					$_IpaidPercentage -= $_OpaymentRequestDetails->_IpaymentPercentage;
				}else
					$_OpaymentRequestDetails->_SpaidStatus = "Pending";
					
				$currentPaymentPercentage -= $_OpaymentRequestDetails->_IpaymentPercentage;
				$_OpaymentRequestDetails->_updatePaymentRequestDetails();
				$i--;
			}
		}
		return false;
	}

	function _getPaymentExpiryDate($requestMasterId)
	{
		global $CFG;
		$transactionIdSql = "SELECT
						arm.airlines_request_id, 
						tm.transaction_id 
					FROM 
						".$CFG['db']['tbl']['transaction_master']." tm,
						".$CFG['db']['tbl']['airlines_request_mapping']." arm,
						".$CFG['db']['tbl']['request_master']." rm
					WHERE 
						tm.airlines_request_id = arm.airlines_request_id AND
						arm.request_master_id = rm.request_master_id AND
						rm.request_master_id = '".$requestMasterId."' 
					ORDER BY 
						tm.transaction_id DESC
					LIMIT 1";

		if(DB::isError($result=$this->_Oconnection->query($transactionIdSql)))
		{
			fileWrite($transactionIdSql,"SqlError","a+");
			return false;
		}
		$row=$result->fetchRow(DB_FETCHMODE_ASSOC);

		fileRequire("dataModels/class.paymentRequestDetails.php");
		$_OpaymentRequestDetails = new paymentRequestDetails;
		$_OpaymentRequestDetails->_Oconnection = $this->_Oconnection;
		$_OpaymentRequestDetails->_ItransactionId = $row['transaction_id'];
		$_ApaymentRequestDetails = $_OpaymentRequestDetails->_selectPaymentRequestDetails();

		$paymentExpiryDate = '';
		$requestedDate = '';
		$pendingDate = '';
		$lastExpiryDate = '';
		foreach($_ApaymentRequestDetails as $paymentDetails)
		{
			if((strtoupper($paymentDetails['paid_status']) == 'REQUESTED') && ($requestedDate==''))
				$requestedDate = $paymentDetails['payment_expiry_date'];

			if((strtoupper($paymentDetails['paid_status']) == 'PENDING') && ($pendingDate==''))
				$pendingDate = $paymentDetails['payment_expiry_date'];

			$lastExpiryDate = $paymentDetails['payment_expiry_date'];
		}

		if($requestedDate != '')
			$paymentExpiryDate = $requestedDate;
		else if($pendingDate != '')
			$paymentExpiryDate = $pendingDate;
		else
			$paymentExpiryDate = $lastExpiryDate;

		return $paymentExpiryDate;
	}


	function _getTotalAmountProcessForPnrBlockingFlightWise($requestMasterId,$requestApprovedFlightId,$noOfAdult,$noOfChild,$noOfInfant)
    	{
        	global $CFG;
		$sql="SELECT 
				rm.user_currency,
				rm.exchange_rate,
				rm.number_of_passenger,
				rm.number_of_adult,
				rm.number_of_child,
				rm.number_of_infant,
				arm.airlines_request_id 
		      FROM 
				".$CFG['db']['tbl']['request_master']." rm, 
				".$CFG['db']['tbl']['airlines_request_mapping']." arm       
		      WHERE 
				rm.request_master_id='".$requestMasterId."' AND 
				rm.request_master_id=arm.request_master_id";
		if(DB::isError($result = $this->_Oconnection->query($sql))) 
		{
			fileWrite($sql,"SqlError","a+");
			return false;
		}
		$this->_ArequestDetails = $result->fetchRow(DB_FETCHMODE_ASSOC);

		$this->_ArequestDetails['number_of_adult']=$noOfAdult;
		$this->_ArequestDetails['number_of_child']=$noOfChild;
		$this->_ArequestDetails['number_of_infant']=$noOfInfant;

		$fetchSql="SELECT 
					transaction_id,
					fare_advised,
					child_fare,
					infant_fare,
					payment_validity,
					payment_validity_type AS payment_type_id,
					passenger_validity,
					passenger_validity_type AS passenger_type_id,
					(SELECT fare_validity_type FROM ".$CFG['db']['tbl']['fare_validity_type_details']." WHERE fare_validity_type_id = payment_validity_type) payment_type_name,
					(SELECT fare_validity_type FROM ".$CFG['db']['tbl']['fare_validity_type_details']." WHERE fare_validity_type_id = passenger_validity_type) passenger_type_name
			   FROM 
					".$CFG['db']['tbl']['transaction_master']."
			   WHERE 
					airlines_request_id='".$this->_ArequestDetails['airlines_request_id']."' ORDER BY transaction_id DESC limit 1";
		if(DB::isError($fetchResult = $this->_Oconnection->query($fetchSql))) 
		{
			fileWrite($fetchSql,"SqlError","a+");
			return false;
		}
		$this->_AtransactionDetails = $fetchResult->fetchRow(DB_FETCHMODE_ASSOC);


		$tempAdultFare=0;
		$tempChildFare=0;

		$sqlSelectRequestApprovedFlightDetails="SELECT
								request_approved_flight_id,
								base_fare,
								tax,
								fare_passenger,
								child_base_fare,
								child_tax,
								infant_base_fare,
								infant_tax
						        FROM
								".$CFG['db']['tbl']['request_approved_flight_details']."
							WHERE
								airlines_request_id='".$this->_ArequestDetails['airlines_request_id']."' AND
								transaction_master_id='".$this->_AtransactionDetails['transaction_id']."' AND
								request_approved_flight_id='".$requestApprovedFlightId."' AND
								accepted_flight_status='Y'";

		if(DB::isError($resultSelectRequestApprovedFlightDetails=$this->_Oconnection->query($sqlSelectRequestApprovedFlightDetails)))
		{
			fileWrite($sqlSelectRequestApprovedFlightDetails,"SqlError","a+");
			return false;
		}

		if($resultSelectRequestApprovedFlightDetails->numRows() >0)
		{
			while($rowSelectRequestApprovedFlightDetails=$resultSelectRequestApprovedFlightDetails->fetchRow(DB_FETCHMODE_ASSOC))
			{
				$sqlSelectFlightCabinMapping="SELECT
									flight_cabin_mapping_id,
									request_approved_flight_id,
									adult_base_fare,
									adult_tax,
									adult_total_fare,
									child_base_fare,
									child_tax,
									child_total_fare,
									infant_base_fare,
									infant_tax,
									infant_total_fare
							      FROM
									".$CFG['db']['tbl']['flight_cabin_mapping_details']."
							      WHERE
									request_approved_flight_id='".$rowSelectRequestApprovedFlightDetails['request_approved_flight_id']."'
									AND adult_base_fare!=0
									ORDER BY flight_cabin_mapping_id LIMIT 1";

				if(DB::isError($resultSelectFlightCabinMapping=$this->_Oconnection->query($sqlSelectFlightCabinMapping)))
				{
					fileWrite($sqlSelectFlightCabinMapping,"SqlError","a+");
					return false;
				}

				if($resultSelectFlightCabinMapping->numRows() >0)
				{
					$rowSelectFlightCabinMapping=$resultSelectFlightCabinMapping->fetchRow(DB_FETCHMODE_ASSOC);

					$tempAdultFare+=$rowSelectFlightCabinMapping['adult_base_fare']+$rowSelectFlightCabinMapping['adult_tax'];
					$tempChildFare+=$rowSelectFlightCabinMapping['child_base_fare']+$rowSelectFlightCabinMapping['child_tax'];
				}
				else
				{
					$tempAdultFare+=$rowSelectRequestApprovedFlightDetails['base_fare']+$rowSelectRequestApprovedFlightDetails['tax'];
					$tempChildFare+=$rowSelectRequestApprovedFlightDetails['child_base_fare']+$rowSelectRequestApprovedFlightDetails['child_tax'];
				}
				$tempInfantFare+=$rowSelectRequestApprovedFlightDetails['infant_base_fare']+$rowSelectRequestApprovedFlightDetails['infant_tax'];
			}
		}

		$this->_ItotalAmount = $this->_ArequestDetails['number_of_adult']*$tempAdultFare;

		if($this->_ArequestDetails['number_of_child']) 
		{
			$this->_ItotalAmount += $this->_ArequestDetails['number_of_child']*$tempChildFare;
		}


		#@@$this->_ItotalAmount = $this->_ArequestDetails['number_of_adult']*$this->_AtransactionDetails['fare_advised'];
		#@@if($this->_ArequestDetails['number_of_child']) {

		#@@$this->_ItotalAmount += $this->_ArequestDetails['number_of_child']*$this->_AtransactionDetails['child_fare'];
		#@@}

		#@@if($this->_ArequestDetails['number_of_infant'])
		#@@{
			#@@$this->_ItotalAmount += $this->_ArequestDetails['number_of_infant']*$this->_AtransactionDetails['infant_fare'];
		#@@}

		if($this->_ArequestDetails['number_of_infant'])
		{
			$this->_ItotalAmount += $this->_ArequestDetails['number_of_infant']*$tempInfantFare;
		}

		/* Baggage And Meals */

		$transcactionId=$this->_AtransactionDetails['transaction_id'];

		$sqlSelectBaggageAndMeals="SELECT
							sum(baggauge_fare) as baggageFare,
							sum(meals_fare) as mealsFare
					   FROM
							".$CFG['db']['tbl']['request_approved_flight_details']."
					   WHERE
							transaction_master_id='".$transcactionId."' AND
							request_approved_flight_id='".$requestApprovedFlightId."' AND
							accepted_flight_status='Y'";

		if(DB::isError($resultSelectBaggageAndMeals = $this->_Oconnection->query($sqlSelectBaggageAndMeals))) 
		{
			fileWrite($sqlSelectBaggageAndMeals,"SqlError","a+");
			return false;
		}

		$baggageFare=0;
		$mealsFare=0;
		if($resultSelectBaggageAndMeals->numRows() > 0)
		{
			$rowSelectBaggageAndMeals=$resultSelectBaggageAndMeals->fetchRow(DB_FETCHMODE_ASSOC);

			$baggageFare =$rowSelectBaggageAndMeals['baggageFare'];
			$mealsFare =$rowSelectBaggageAndMeals['mealsFare'];
		}

		if($baggageFare != 0)
		{
			$this->_ItotalAmount += $this->_ArequestDetails['number_of_adult']*$baggageFare;
			if($this->_ArequestDetails['number_of_child']) 
			{
				$this->_ItotalAmount += $this->_ArequestDetails['number_of_child']*$baggageFare;
			}
		}
		if($mealsFare != 0)
		{
			$this->_ItotalAmount += $this->_ArequestDetails['number_of_adult']*$mealsFare;
			if($this->_ArequestDetails['number_of_child']) 
			{
				$this->_ItotalAmount += $this->_ArequestDetails['number_of_child']*$mealsFare;
			}
		}
		return $this->_ItotalAmount;
    	}

	function _getTotalFareOverRideAmountProcessFlightWise($requestMasterId,$requestApprovedFlightId)
	{
		global $CFG;

		$totalBaseFareAmount=0;
		$totalBaseFareArray=array();

		$sqlSelectAirlinesRequestId="SELECT
							airlines_request_id
					     FROM
							".$CFG['db']['tbl']['airlines_request_mapping']."
					     WHERE
							request_master_id='".$requestMasterId."'";

		if(DB::isError($resultSelectAirlinesRequestId=$this->_Oconnection->query($sqlSelectAirlinesRequestId)))
		{
			fileWrite($sqlSelectAirlinesRequestId,"SqlError","a+");
			return false;
		}
	
		if($resultSelectAirlinesRequestId->numRows() >0)
		{
			$rowSelectAirlinesRequestId=$resultSelectAirlinesRequestId->fetchRow(DB_FETCHMODE_ASSOC);

			$airlinesRequestId=$rowSelectAirlinesRequestId['airlines_request_id'];

			$sqlSelectTransactionMasterId="SELECT
								transaction_id
						       FROM
								".$CFG['db']['tbl']['transaction_master']."
						       WHERE
								airlines_request_id='".$airlinesRequestId."'
								ORDER BY transaction_id DESC limit 1";

			if(DB::isError($resultSelectTransactionMasterId=$this->_Oconnection->query($sqlSelectTransactionMasterId)))
			{
				fileWrite($sqlSelectTransactionMasterId,"SqlError","a+");
				return false;
			}
	
			if($resultSelectTransactionMasterId->numRows() >0)
			{
				$rowSelectTransactionMasterId=$resultSelectTransactionMasterId->fetchRow(DB_FETCHMODE_ASSOC);
				$transactionMasterId=$rowSelectTransactionMasterId['transaction_id'];
			
				$sqlSelectRequestApprovedFlightDetails="SELECT
										request_approved_flight_id,
										base_fare
									FROM
										".$CFG['db']['tbl']['request_approved_flight_details']."
									WHERE
										airlines_request_id='".$airlinesRequestId."' AND 
										transaction_master_id='".$transactionMasterId."' AND
										request_approved_flight_id='".$requestApprovedFlightId."' AND
										accepted_flight_status='Y'
									ORDER BY
										request_approved_flight_id";

				
				if(DB::isError($resultSelectRequestApprovedFlightDetails=$this->_Oconnection->query($sqlSelectRequestApprovedFlightDetails)))
				{
					fileWrite($sqlSelectRequestApprovedFlightDetails,"SqlError","a+");
					return false;
				}
	
				if($resultSelectRequestApprovedFlightDetails->numRows() >0)
				{
					while($rowSelectRequestApprovedFlightDetails=$resultSelectRequestApprovedFlightDetails->fetchRow(DB_FETCHMODE_ASSOC))
					{
						$totalBaseFareAmount +=$rowSelectRequestApprovedFlightDetails['base_fare'];

						$baseFareValue=$rowSelectRequestApprovedFlightDetails['base_fare'];
									
						$totalBaseFareArray[]=$baseFareValue;
					}
				
				}
			}
		}
		return $totalBaseFareArray;
		return $totalBaseFareAmount;
	}
	function _getNoOfPassengerForFlight($requestMasterId,$requestApprovedFlightId)
	{	
		global $CFG;
		$fetchPaxSql="SELECT distinct
					sum(no_of_adult) as adult,
					sum(no_of_child) as child,
            				sum(no_of_infant) as infant
				FROM 
					".$CFG['db']['tbl']['pnr_blocking_details']." 
				WHERE 
					request_master_id=".$requestMasterId."
					AND request_approved_flight_id=".$requestApprovedFlightId."";
		return $this->_executeQuery($fetchPaxSql);
	}

	function _getPnrAmountValue($pnr,$requestMasterId,$_SincludeGenericFee = "Y",$requestApprovedFightId=0,$viaFlightId=0)
	{
		
		global $CFG;

		$totalAmount=0;
		$transactionMasterId=0;
		$airlinesRequestId=0;

		// Get User Currency
		$_AuserCurrency = $this->_getUserCurrency($requestMasterId);
		$_SuserCurrency = $_AuserCurrency['user_currency'];

		$sqlSelectAirlinesRequestId="SELECT
							airlines_request_id
					     FROM
							".$CFG['db']['tbl']['airlines_request_mapping']."
					     WHERE
							request_master_id='".$requestMasterId."'";

							

		if(DB::isError($resultSelectAirlinesRequestId=$this->_Oconnection->query($sqlSelectAirlinesRequestId)))
		{
			fileWrite($sqlSelectAirlinesRequestId,"SqlError","a+");
			return false;
		}
	
		if($resultSelectAirlinesRequestId->numRows() >0)
		{
			$rowSelectAirlinesRequestId=$resultSelectAirlinesRequestId->fetchRow(DB_FETCHMODE_ASSOC);

			$airlinesRequestId=$rowSelectAirlinesRequestId['airlines_request_id'];

			$sqlSelectTransactionMasterId="SELECT
								transaction_id
						       FROM
								".$CFG['db']['tbl']['transaction_master']."
						       WHERE
								airlines_request_id='".$airlinesRequestId."'
								ORDER BY transaction_id DESC limit 1";

					
			if(DB::isError($resultSelectTransactionMasterId=$this->_Oconnection->query($sqlSelectTransactionMasterId)))
			{
				fileWrite($sqlSelectTransactionMasterId,"SqlError","a+");
				return false;
			}
	
			if($resultSelectTransactionMasterId->numRows() >0)
			{
				$rowSelectTransactionMasterId=$resultSelectTransactionMasterId->fetchRow(DB_FETCHMODE_ASSOC);
				$transactionMasterId=$rowSelectTransactionMasterId['transaction_id'];
			}
		}
	
		$sqlSelectPnrBlockingDetails="SELECT
							request_approved_flight_id,
							via_flight_id,
							pnr,
							no_of_adult,
							no_of_child,
							no_of_infant,
							no_of_foc,
							pnr_amount
					      FROM
							".$CFG['db']['tbl']['pnr_blocking_details']."
					      WHERE
							request_master_id=".$requestMasterId."
							AND pnr='".$pnr."'";	
		/*if($requestApprovedFightId!=0)
			$sqlSelectPnrBlockingDetails.=" AND request_approved_flight_id='".$requestApprovedFightId."'";*/

		/*if($viaFlightId!=0)
			$sqlSelectPnrBlockingDetails.=" AND via_flight_id='".$viaFlightId."'";*/
		if(DB::isError($resultSelectPnrBlockingDetails=$this->_Oconnection->query($sqlSelectPnrBlockingDetails)))
		{
			fileWrite($sqlSelectPnrBlockingDetails,"SqlError","a+");
			return false;
		}
	
		if($resultSelectPnrBlockingDetails->numRows() >0)
		{
			$pnrAmount = 0;
			$noOfAdult = 0;
			$noOfChild = 0;
			$noOfInfant = 0;
			$noOfFoc = 0;
			#$pnr=0;
			$_SincludedSSRAmount = "N";
			while($rowSelectPnrBlockingDetails=$resultSelectPnrBlockingDetails->fetchRow(DB_FETCHMODE_ASSOC))
			{
				$pnrRequestApprovedFlightId=$rowSelectPnrBlockingDetails['request_approved_flight_id'];
				$pnrViaFlightId=$rowSelectPnrBlockingDetails['via_flight_id'];
				#$pnrAmount=$rowSelectPnrBlockingDetails['pnr_amount'];

				$noOfAdult=$rowSelectPnrBlockingDetails['no_of_adult'];
				$noOfChild=$rowSelectPnrBlockingDetails['no_of_child'];
				$noOfInfant=$rowSelectPnrBlockingDetails['no_of_infant'];
				$noOfFoc=$rowSelectPnrBlockingDetails['no_of_foc'];
				$pnr=$rowSelectPnrBlockingDetails['pnr'];
				
				$sqlSelectRequestApprovedFlightDetails="SELECT
										request_approved_flight_id,
										series_request_id,
										base_fare,
										tax,
										fare_passenger,
										child_base_fare,
										child_tax,
										infant_base_fare,
										infant_tax,
										free_cost_count,
										foc_tax,
										baggauge_fare,
										meals_fare,
										ancillary_fare
									FROM
										".$CFG['db']['tbl']['request_approved_flight_details']."
									WHERE
										request_approved_flight_id='".$pnrRequestApprovedFlightId."'
										AND airlines_request_id='".$airlinesRequestId."'
										AND transaction_master_id='".$transactionMasterId."'
										AND accepted_flight_status='Y'";
						
				if(DB::isError($resultSelectRequestApprovedFlightDetails=$this->_Oconnection->query($sqlSelectRequestApprovedFlightDetails)))
				{
					fileWrite($sqlSelectRequestApprovedFlightDetails,"SqlError","a+");
					return false;
				}

				if($resultSelectRequestApprovedFlightDetails->numRows() >0)
				{
					while($rowSelectRequestApprovedFlightDetails=$resultSelectRequestApprovedFlightDetails->fetchRow(DB_FETCHMODE_ASSOC))
					{
						$adultBaseFare=$this->_getRoundOffFare($rowSelectRequestApprovedFlightDetails['base_fare'],"",$_SuserCurrency);
						$adultTax=$rowSelectRequestApprovedFlightDetails['tax'];
						$adultTotal=$adultBaseFare+$adultTax;

						$childBaseFare=$this->_getRoundOffFare($rowSelectRequestApprovedFlightDetails['child_base_fare'],"",$_SuserCurrency);
						$childTax=$rowSelectRequestApprovedFlightDetails['child_tax'];
						$childTotal=$childBaseFare+$childTax;

						$infantBaseFare=$this->_getRoundOffFare($rowSelectRequestApprovedFlightDetails['infant_base_fare'],"",$_SuserCurrency);
						$infantTax=$rowSelectRequestApprovedFlightDetails['infant_tax'];
						$infantTotal=$infantBaseFare+$infantTax;

						$baggageFare=$rowSelectRequestApprovedFlightDetails['baggauge_fare'];
						$mealsFare=$rowSelectRequestApprovedFlightDetails['meals_fare'];
						// if(!empty($rowSelectRequestApprovedFlightDetails['ancillary_fare']))
						// {
						// 	$_AotherAncillaryAmount=json_decode($rowSelectRequestApprovedFlightDetails['ancillary_fare'],1);
						// 	if(is_array($_AotherAncillaryAmount)){
						// 		$_AotherSsrAmount =array_values($_AotherAncillaryAmount['ADT']);
						// 		$othersFare = array_sum($_AotherSsrAmount);
						// 	}
						// }
						if(!empty($rowSelectRequestApprovedFlightDetails['ancillary_fare']))
						{
							$ancillaryAmountCheck=json_decode($rowSelectRequestApprovedFlightDetails['ancillary_fare'],1);
							$_AancillaryFare = $this->_getAncillaryInformation($ancillaryAmountCheck);
							$ancillaryAmount = $_AancillaryFare;
						}
						$focTax=$rowSelectRequestApprovedFlightDetails['foc_tax'];
						if($noOfAdult!=0)
						{
							$totalAmount+=$noOfAdult*$adultTotal;
						}

						if($noOfChild!=0)
						{
							$totalAmount+=$noOfChild*$childTotal;
						}
						$infantCountFlag = 'N';
						if($noOfInfant!=0)
						{
							$infantAmount=$noOfInfant*$infantTotal;
							$infantCountFlag = 'Y';
							$totalAmount+=$infantAmount;
						}	
						if($noOfFoc!=0)
						{
							$totalAmount+=$noOfFoc*$focTax;
						}
						// $_AuserCurrency = $this->_getUserCurrency($requestMasterId);
                        // $_SuserCurrency = $_AuserCurrency['user_currency'];
                        // $totalAmount = $this->_getRoundOffFare($totalAmount,"",$_SuserCurrency);
						
			 			if (!empty($CFG['ssr']['instantPayment']['status']) && $CFG['ssr']['instantPayment']['status'] == 'Y') {
			 				if($baggageFare != 0)
							{
								if($noOfAdult!=0)
									$totalAmount += $noOfAdult*$baggageFare;
								
								if($noOfChild!=0)
									$totalAmount += $noOfChild*$baggageFare;
							}
							if($mealsFare != 0)
							{
								if($noOfAdult!=0)
									$totalAmount += $noOfAdult*$mealsFare;
								
								if($noOfChild!=0)
									$totalAmount += $noOfChild*$mealsFare;
							}
							// if($ancillaryAmount != 0)
							// {
							// 	if($noOfAdult!=0)
							// 		$totalAmount += $noOfAdult*$ancillaryAmount;
								
							// 	if($noOfChild!=0)
							// 		$totalAmount += $noOfChild*$ancillaryAmount;
							// }
							if($ancillaryAmount['adultTotalFare'] != 0 || $ancillaryAmount['childTotalFare'] != 0)
							{
								if($noOfAdult!=0)
									$totalAmount += $noOfAdult*$ancillaryAmount['adultTotalFare'];
								
								if($noOfChild!=0)
									$totalAmount += $noOfChild*$ancillaryAmount['childTotalFare'];
							}
			 			}
	
						/*We will get the entire SSR total amount in the first time, 
						 * so restrict to call again if SSR added in passenger level
						 */
						if($_SincludedSSRAmount=="N") {
							/*Return 'N' if there is no ssr added else amount will get, 
							 *We can get 0 as total fare for some SSR, so that we returns 'N'
							 */
							$_IssrTotalAmount = $this->_getSSRTotalAmount($requestMasterId,$pnr,$infantCountFlag);
							
							if($_IssrTotalAmount!="N") {
									$totalAmount += $_IssrTotalAmount;
								$_SincludedSSRAmount = "Y";
							}	
							else
							{

			 					if (!empty($CFG['ssr']['instantPayment']['status']) && $CFG['ssr']['instantPayment']['status'] == 'Y')
			 						continue;

								if($baggageFare != 0)
								{
									if($noOfAdult!=0)
										$totalAmount += $noOfAdult*$baggageFare;
									
									if($noOfChild!=0)
										$totalAmount += $noOfChild*$baggageFare;
								}
								if($mealsFare != 0)
								{
									if($noOfAdult!=0)
										$totalAmount += $noOfAdult*$mealsFare;
									
									if($noOfChild!=0)
										$totalAmount += $noOfChild*$mealsFare;
								}
		   
								if($ancillaryAmount['adultTotalFare'] != 0 || $ancillaryAmount['childTotalFare'] != 0)
								{
									if($noOfAdult!=0)
										$totalAmount += $noOfAdult*$ancillaryAmount['adultTotalFare'];
									
									if($noOfChild!=0)
										$totalAmount += $noOfChild*$ancillaryAmount['childTotalFare'];
								}
							}
						}
						
					}
				}
			}
		}
		
		/*
		 * Modified by: Subalakshmi S 11-09-2018 
		 * To get Pnr total amount of inclusive of generic fee
		 */
		if(isset($CFG['site']['enableGenericFees']) && $CFG['site']['enableGenericFees']=='Y' && $_SincludeGenericFee=="Y")
		{        
			$totalAmount+=$this->_getTotalGenericChareAmount($requestMasterId,$pnr);
		}
		//if changefee added in payment additional charge table need to be included in pnr amount too
		$_IfeePaymentTotalAmount=$this->_getFeePaymentTotalAmount($requestMasterId,$pnr);
		if(!empty($_IfeePaymentTotalAmount))
		    $totalAmount+=$_IfeePaymentTotalAmount;
        $totalAmount = $this->_getRoundOffFare($totalAmount,"",$_SuserCurrency);
		fileWrite("pnrtotalamount requestMasterId->".$requestMasterId."totalAmount->".$totalAmount."feeamount->".$_IfeePaymentTotalAmount."pnr->".$pnr,'pnrtotalcost','a+');
		return $totalAmount;
	}

	function _getPnrTotalAmountValue($requestMasterId)
	{
		global $CFG;

		$pnrTotalAmount=0;

		$sqlSelectPnrBlockingDetails="SELECT
							pnr_blocking_id,
							request_approved_flight_id,
							pnr
					      FROM
							".$CFG['db']['tbl']['pnr_blocking_details']."
					      WHERE
							request_master_id='".$requestMasterId."'
						  GROUP BY
							pnr";

		if(DB::isError($resultSelectPnrBlockingDetails=$this->_Oconnection->query($sqlSelectPnrBlockingDetails)))
		{
			fileWrite($sqlSelectPnrBlockingDetails,"SqlError","a+");
			return false;
		}

		if($resultSelectPnrBlockingDetails->numRows() > 0)
		{
			while($rowSelectPnrBlockingDetails=$resultSelectPnrBlockingDetails->fetchRow(DB_FETCHMODE_ASSOC))
			{
				$pnr=$rowSelectPnrBlockingDetails['pnr'];
				$requestApprovedFlightId=$rowSelectPnrBlockingDetails['request_approved_flight_id'];

				$particularPnrAmount=$this->_getPnrAmountValue($pnr,$requestMasterId,$requestApprovedFlightId);
				
				if($particularPnrAmount!=0)
					$pnrTotalAmount+=$particularPnrAmount;
			}
		}
		
		return $pnrTotalAmount;
	}
	//Param - $categoryType: * - Common Categories, A - Adhoc, S - Series, C - Conference 
	function _getGroupCategoryList($categoryType='')
	{
		global $CFG;
		if($categoryType!=''){
			$categoryCond=" category_type = '*' ";
			if($categoryType!='*')
				$categoryCond.=" OR category_type = '".$categoryType."' ";
			$categoryCond="AND (".$categoryCond.")";
			if($categoryType=='I')
				$categoryCond="AND category_type = '".$categoryType."' ";
		}

		$_Svariable = $categoryType;
		$_AstaticData = $this->_staticData("_getGroupCategoryList",$_Svariable);
		if($_AstaticData !== false)
			return $_AstaticData;

		$sqlSelectGroupCategoryList="SELECT
							group_category_id,
							group_category_name,
							display_order,
							group_category_code
					     FROM
							".$CFG['db']['tbl']['group_category_list']."
						WHERE
							group_category_status = 'Y'
							".$categoryCond."
						ORDER BY
							group_category_name";
		if(DB::isError($resultSelectGroupCategoryList=$this->_Oconnection->query($sqlSelectGroupCategoryList)))
		{
			fileWrite($sqlSelectGroupCategoryList,"SqlError","a+");
			return false;
		}
		$_AgroupCategoryListValue=array();
		$_AgroupCategoryListDisplay=array();
		$_AgroupCategoryList=array();

		if($resultSelectGroupCategoryList->numRows() >0)
		{
			while($rowSelectGroupCategoryList=$resultSelectGroupCategoryList->fetchRow(DB_FETCHMODE_ASSOC))
			{
				$_AgroupCategoryListValue[]=$rowSelectGroupCategoryList['group_category_id'];
				$_AgroupCategoryListDisplay[]=$rowSelectGroupCategoryList['group_category_name'];
				$_AgroupCategoryList[]=$rowSelectGroupCategoryList;
			}
			$this->_staticData("_getGroupCategoryList",$_Svariable,$_AgroupCategoryList);
		}
		
		return $_AgroupCategoryList;
	}

	function calculateTimeDuration($first,$second)
	{			
/*first method start **/
		$interval=strtotime($second)-strtotime($first);
		
		$totalHours=intval($interval/(60*60));
		$timeMinutes=($interval%(60*60)/60);
		if($timeMinutes<10)
			$timeMinutes="0".$timeMinutes;
		if($totalHours<10)
			$totalHours="0".$totalHours;

		return $totalHours.":".$timeMinutes;
	}

	function _getTransactionMasterId($requestMasterId)
	{
		global $CFG;
		$sql="SELECT 
				rm.request_master_id,
				arm.airlines_request_id,
				".encrypt::_decrypt('cd.corporate_name')." AS corporate_name,
				tm.transaction_id,
				tm.fare_advised,
				tm.child_fare,
				tm.infant_fare ,
				ROUND(1/rm.exchange_rate,5) AS conversion_rate
			FROM 
				".$CFG['db']['tbl']['request_master']." rm,
				".$CFG['db']['tbl']['airlines_request_mapping']." arm,
				".$CFG['db']['tbl']['corporate_details']." cd,
				".$CFG['db']['tbl']['transaction_master']." tm
			WHERE 
				rm.request_master_id='".$requestMasterId."' AND 
				arm.request_master_id=rm.request_master_id AND 
				arm.corporate_id=cd.corporate_id AND 
				tm.airlines_request_id=arm.airlines_request_id order by tm.transaction_id desc limit 1";
		if(DB::isError($result=$this->_Oconnection->query($sql)))
		{
			fileWrite($sql,"SqlError","a+");
			return false;
		}
		$this->_AformValues=array();
		if($result->numRows() > 0)
		{
			$row=$result->fetchRow(DB_FETCHMODE_ASSOC);
			
				$this->_AformValues['transactionId']=$row['transaction_id'];
				$this->_AformValues['requestMasterId']=$row['request_master_id'];
				$this->_AformValues['responseType']="viewDetail";
				$this->_AformValues['corporateName']=$row['corporate_name'];
				$this->_AformValues['airlinesRequestId']=$row['airlines_request_id'];
				$this->_AformValues['fareAdvised']=($CFG['site']['evalateUserCurrency']=="Y")?round($row['fare_advised'],2):round($row['fare_advised']*$row['conversion_rate'],2);
				$this->_AformValues['childFare']=($CFG['site']['evalateUserCurrency']=="Y")?round($row['child_fare'],2):round($row['child_fare']*$row['conversion_rate'],2);
				$this->_AformValues['infantFare']=($CFG['site']['evalateUserCurrency']=="Y")?round($row['infant_fare'],2):round($row['infant_fare']*$row['conversion_rate'],2);
	
				//$transactionId=$row['transaction_id'];
		}
		return $this->_AformValues;	
	}

	function _checkGroupResizeStatus($requestMasterId,$requestId=0,$seriesRequestId=0)
	{
		global $CFG;

		$tempRequestRaise="Y";
		$tempRequestRaiseMsg="";

		$returnArray['groupResize']="Y";
		$returnArray['groupResizeMsg']="";

		$sqlSelectRequestDetails="SELECT
							rm.request_master_id,
							rm.request_type,
							rm.requested_date,
							rm.requested_date as requested_date_disp,
							arm.airlines_request_id,
							rm.user_currency,
							rd.request_id,
							rd.origin_airport_code,
							rd.dest_airport_code,
							srd.series_request_id,
							srd.departure_date,
							srd.number_of_passenger,
							srd.number_of_adult,
							srd.number_of_child,
							srd.number_of_infant,
							srd.cabin,
							srd.expected_fare,
							srd.start_time,
							srd.end_time
					  FROM
							".$CFG['db']['tbl']['request_master']." rm,
							".$CFG['db']['tbl']['airlines_request_mapping']." arm,
							".$CFG['db']['tbl']['request_details']." rd,
							".$CFG['db']['tbl']['series_request_details']." srd
					  WHERE
							rm.request_master_id=rd.request_master_id
							AND rm.request_master_id=arm.request_master_id
							AND rd.request_id=srd.request_id
							AND rm.request_master_id='".$requestMasterId."'";
						
						$requestIdCondition=" ";	
						if($requestId!=0)
						{	
							$requestIdCondition=" AND rd.request_id='".$requestId."'";
						}
						$seriesRequestCondition=" ";
						if($seriesRequestId!=0)
						{
							$seriesRequestCondition="AND srd.series_request_id='".$seriesRequestId."'";
						}

		$sqlSelectRequestDetails=$sqlSelectRequestDetails.$requestIdCondition.$seriesRequestCondition." GROUP BY srd.series_request_id";


		$percentageValue=100;
		$currentDate=$this->_getUTCDateValue();

		if(DB::isError($resultSelectRequestDetails=$this->_Oconnection->query($sqlSelectRequestDetails)))
		{
			fileWrite($sqlSelectRequestDetails,"SqlError","a");
			return false;
		}

		if($resultSelectRequestDetails->numRows() >0)
		{
			$i=0;
			while($rowSelectRequestDetails=$resultSelectRequestDetails->fetchRow(DB_FETCHMODE_ASSOC))
			{
				$rowSelectRequestDetails['requested_date_disp']=$this->_getUserDateFormatValue($rowSelectRequestDetails['requested_date_disp']);
				$rowSelectRequestDetails['requested_date_disp']=date('d-M-Y H:i:s',strtotime($rowSelectRequestDetails['requested_date_disp']));
				
				if($i==0)
				{
					if($tempRequestRaise=="Y")
					{
						$sqlSelectFareExpiry="SELECT 
										IF(sum(tms.fare_expiry_date) IS NULL,UTC_TIMESTAMP,tms.fare_expiry_date) as fareExpiryDate 
								      FROM 
										".$CFG['db']['tbl']['transaction_master']."  tms,
										".$CFG['db']['tbl']['airlines_request_mapping']." arms 
								      WHERE 
										tms.airlines_request_id=arms.airlines_request_id 
										AND arms.current_status IN(3) 
										AND tms.airlines_request_id='".$rowSelectRequestDetails['airlines_request_id']."'
										ORDER BY transaction_id DESC LIMIT 1";

						if(DB::isError($resultSelectFareExpiry=$this->_Oconnection->query($sqlSelectFareExpiry)))
						{
							fileWrite($sqlSelectFareExpiry,"SqlError","a");
							return false;
						}

						if($resultSelectFareExpiry->numRows() >0)
						{
							$rowSelectFareExpiry=$resultSelectFareExpiry->fetchRow(DB_FETCHMODE_ASSOC);

							if(strtotime($rowSelectFareExpiry['fareExpiryDate'])<strtotime($currentDate))
							{
								$tempRequestRaise="N";
								$tempRequestRaiseMsg="Fare validity expired";
							}
						}
					}

					if($tempRequestRaise=="Y")
					{
						$sqlSelectPayment="SELECT 
										IF(sum(payment_percentage) IS NULL,0,sum(payment_percentage)) as paymentPercentageSum 
								   FROM 
										".$CFG['db']['tbl']['payment_master']." 
								   WHERE 
										airlines_request_id='".$rowSelectRequestDetails['airlines_request_id']."'
										AND payment_status in(10,12) ";

						if(DB::isError($resultSelectPayment=$this->_Oconnection->query($sqlSelectPayment)))
						{
							fileWrite($sqlSelectPayment,"SqlError","a");
							return false;
						}

						if($resultSelectPayment->numRows() >0)
						{
							$rowSelectPayment=$resultSelectPayment->fetchRow(DB_FETCHMODE_ASSOC);

							if($rowSelectPayment['paymentPercentageSum']>=$percentageValue)
							{
								$tempRequestRaise="N";
								$tempRequestRaiseMsg="Payment completed";
							}
						}
					}
				}

				$raiseStatus="Y";
				$raiseMsg="";

				if($rowSelectRequestDetails['request_type']=="flexible" && !in_array($currentStatus,array(1,2,7)))
				{
					$approvedFlightPaxCount=$this->_getApprovedFlightPaxCount($requestMasterId,$requestId,$seriesRequestId);
					
					$noOfAdultCount=$approvedFlightPaxCount[0];
					$noOfChildCount=$approvedFlightPaxCount[1];
					$noOfInfantCount=$approvedFlightPaxCount[2];
					
					$noOfPax=$noOfAdultCount+$noOfChildCount+$noOfInfantCount;
				}
				else
				{
					$noOfPax=$rowSelectRequestDetails['number_of_passenger'];
				}

				if($tempRequestRaise=="N")
				{
					$raiseStatus="N";
					$raiseMsg=$tempRequestRaiseMsg;
				}
				else
				{
					if($raiseStatus=="Y")
					{
						$sqlSelectTravelDate="SELECT
										arma.airlines_request_id,
										IF(MIN(TIMESTAMP(CONCAT(rafda.departure_date,' ',rafda.dep_time,':00'))) IS NULL,CONCAT('".$rowSelectRequestDetails['departure_date']."',' ','00:00:00'),MIN(TIMESTAMP(CONCAT(rafda.departure_date,' ',rafda.dep_time,':00')))) as minTravelDate 
								      FROM 
										".$CFG['db']['tbl']['request_master']." rma,
										".$CFG['db']['tbl']['airlines_request_mapping']." arma,
										".$CFG['db']['tbl']['request_approved_flight_details']." rafda 
								      WHERE 
										rma.request_master_id=arma.request_master_id 
										AND rafda.transaction_master_id=(SELECT tma.transaction_id FROM ".$CFG['db']['tbl']['transaction_master']." tma WHERE tma.airlines_request_id=arma.airlines_request_id ORDER BY tma.transaction_id DESC LIMIT 1)  
										AND rafda.airlines_request_id=arma.airlines_request_id 
										AND arma.airlines_request_id='".$rowSelectRequestDetails['airlines_request_id']."'
										AND rafda.request_id='".$rowSelectRequestDetails['request_id']."'
										AND rafda.series_request_id='".$rowSelectRequestDetails['series_request_id']."'";

						if(DB::isError($resultSelectTravelDate=$this->_Oconnection->query($sqlSelectTravelDate)))
						{
							fileWrite($sqlSelectTravelDate,"SqlError","a");
							return false;
						}

						if($resultSelectTravelDate->numRows() >0)
						{
							$rowSelectTravelDate=$resultSelectTravelDate->fetchRow(DB_FETCHMODE_ASSOC);

							if(strtotime($rowSelectTravelDate['minTravelDate'])<strtotime($currentDate))
							{
								$raiseStatus="N";
								$raiseMsg="Days to departure expired";
							}
						}
					}

					if($raiseStatus=="Y")
					{
						$_SremoveDummyRows='';
						//For not considering dummy rows
						if($CFG['nameUpdate']['insertDummyRowsForSeatSelection']=='Y' || $CFG['site']['doubleBilling']['status'] == 'Y')
							$_SremoveDummyRows = " AND additional_details NOT LIKE '%insertedDummyRow\":\"Y%'";
						$sqlSelectSubmitedPax="SELECT 
										count(passenger_id) as submittedPassengers 
								       FROM 
										".$CFG['db']['tbl']['passenger_details']." 
								       WHERE 
										airlines_request_id='".$rowSelectRequestDetails['airlines_request_id']."'
										AND series_request_id='".$rowSelectRequestDetails['series_request_id']."'".$_SremoveDummyRows;

						if(DB::isError($resultSelectSubmitedPax=$this->_Oconnection->query($sqlSelectSubmitedPax)))
						{
							fileWrite($sqlSelectSubmitedPax,"SqlError","a");
							return false;
						}

						if($resultSelectSubmitedPax->numRows() >0)
						{
							$rowSelectSubmitedPax=$resultSelectSubmitedPax->fetchRow(DB_FETCHMODE_ASSOC);

							if($noOfPax!=0)
							{
								if($rowSelectSubmitedPax['submittedPassengers']>=$noOfPax)
								{
									$raiseStatus="N";
									$raiseMsg="All passenegrs submited";
								}
							}
							else
							{
								$raiseStatus="N";
								$raiseMsg="Request has been ended";
							}
						}
					}

					
				}

				$sqlSelectCheck="SELECT
							gcrd.groupchange_request_id,
							gcrm.resize_type_id,
							gcrd.current_no_of_adult,
							gcrd.current_no_of_child,
							gcrd.current_no_of_infant,
							gcrd.requested_no_of_adult,
							gcrd.requested_no_of_child,
							gcrd.requested_no_of_infant,
							gcrd.approved_no_of_adult,
							gcrd.approved_no_of_child,
							gcrd.approved_no_of_infant,
							gcrd.changed_no_of_adult,
							gcrd.changed_no_of_child,
							gcrd.changed_no_of_infant,
							gcrm.request_status
							
						 FROM
							".$CFG['db']['tbl']['groupchange_request_master']." gcrm,
							".$CFG['db']['tbl']['groupchange_request_details']." gcrd
						 WHERE
							gcrm.request_master_id='".$requestMasterId."'
							AND gcrm.groupchange_master_id=gcrd.groupchange_master_id
							AND gcrd.request_id='".$rowSelectRequestDetails['request_id']."'
							AND gcrd.series_request_id='".$rowSelectRequestDetails['series_request_id']."'
							AND gcrm.request_status='P'";

				if(DB::isError($resultSelectCheck=$this->_Oconnection->query($sqlSelectCheck)))
				{
					fileWrite($sqlSelectCheck,"SqlError","a+");
					return false;
				}

				if($resultSelectCheck->numRows() > 0)
				{
					$raiseStatus="N";
					$raiseMsg="Group resize requested";
				}


				$rowSelectRequestDetails['raiseStatus']=$raiseStatus;
				$rowSelectRequestDetails['raiseMsg']=$raiseMsg;

				$returnArray['groupResize']=$raiseStatus;
				$returnArray['groupResizeMsg']=$raiseMsg;

				$i++;
			}			
		}
		else
		{
			$returnArray['groupResize']="Y";
			$returnArray['groupResizeMsg']="Request not found";
		}

		return $returnArray;
	}

	function _getRequestDetailsValue($requestMasterId,$requestId,$seriesRequestId)
	{
		global $CFG;

		$returnArray=array();

		$sqlSelectRequestDetails="SELECT
							rm.request_master_id,
							rm.request_type,
							rm.requested_date,
							rm.requested_date as requested_date_disp,
							arm.airlines_request_id,
							rm.user_currency,
							rd.request_id,
							rd.origin_airport_code,
							rd.dest_airport_code,
							srd.series_request_id,
							rvfd.departure_date,
							srd.number_of_passenger,
							srd.number_of_adult,
							srd.number_of_child,
							srd.number_of_infant,
							srd.cabin,
							srd.expected_fare,
							srd.start_time,
							srd.end_time,
							rvfd.flight_status
					  FROM
							".$CFG['db']['tbl']['request_master']." rm,
							".$CFG['db']['tbl']['airlines_request_mapping']." arm,
							".$CFG['db']['tbl']['request_details']." rd,
							".$CFG['db']['tbl']['series_request_details']." srd,
							".$CFG['db']['tbl']['request_via_flight_details']." rvfd
					  WHERE
							rm.request_master_id=rd.request_master_id
							AND rm.request_master_id=arm.request_master_id
							AND rd.request_id=srd.request_id
							AND rvfd.flight_status = 'Y'
							AND srd.series_request_id=rvfd.series_request_id
							AND rm.request_master_id='".$requestMasterId."'
							AND rd.request_id='".$requestId."'
							AND srd.series_request_id='".$seriesRequestId."'
							AND rvfd.flight_status='Y'";
		if(DB::isError($result = $this->_Oconnection->query($sqlSelectRequestDetails))) 
		{
			fileWrite($sqlSelectRequestDetails,"SqlError","a+");
			return false;
		}
		
		if($result->numRows() >0)
		{
			$row = $result->fetchRow(DB_FETCHMODE_ASSOC);
			$returnArray[]=$row;
		}

		return $returnArray;
	}
	//To integrate queue reading process 
	function _queuePnrMultiCurlCalling($inputArray)
	{
		#create multi handle
		$mh = curl_multi_init();
		#array for individual handles and results
		$ch=array();
		$out=array();
		
		foreach($inputArray as $key=>$val)
		{
			#initializing curl handles
			$ch[$key]=curl_init();
			#Setting options for each handle
			curl_setopt($ch[$key], CURLOPT_URL, $inputArray[$key]['url']);		
			curl_setopt ($ch[$key], CURLOPT_POSTFIELDS, $inputArray[$key]['val']);
			curl_setopt($ch[$key], CURLOPT_RETURNTRANSFER, 1);	 
			//To disable the SSL check
			curl_setopt($ch[$key], CURLOPT_SSL_VERIFYPEER, false);
			#adding handles here
			curl_multi_add_handle($mh,$ch[$key]);
		}
		#execute the handles
		$running = null;
		do
		{
			curl_multi_exec($mh, $running);
		} while($running > 0);

		#receiving the result from handles
		foreach($ch as $curlKey=>$curlVal)
		{
			$out[$curlKey] = curl_multi_getcontent($curlVal);
			curl_multi_remove_handle($mh, $curlVal);
		}
		// all done
		curl_multi_close($mh);
		return $out;
	}
	function _getRequestedPnr($requestMasterId)
	{
		global $CFG;
		$sql="SELECT
					pnr
			  FROM
					".$CFG['db']['tbl']['request_details']." 
			  WHERE
					request_master_id=".$requestMasterId."";
		
		if(DB::isError($result=$this->_Oconnection->query($sql)))
		{
			fileWrite($sql,"SqlError","a+");
			return false;
		}
		$pnr="";
		if($result->numRows() > 0)
		{					
			$rowValue=$result->fetchRow(DB_FETCHMODE_ASSOC);
			$pnr=$rowValue['pnr'];
		}
		return $pnr;
	}
	function _checkingExistingPnr($pnr)
	{
		global $CFG;
		$sql="SELECT
					request_master_id
			  FROM
					".$CFG['db']['tbl']['request_details']." 
			  WHERE
					pnr='".$pnr."'
				ORDER BY request_master_id DESC LIMIT 1";
		
		if(DB::isError($result=$this->_Oconnection->query($sql)))
		{
			fileWrite($sql,"SqlError","a+");
			return false;
		}
		$requestMasterId=0;
		if($result->numRows() > 0)
		{					
			$rowValue=$result->fetchRow(DB_FETCHMODE_ASSOC);
			$requestMasterId=$rowValue['request_master_id'];
		}
		return $requestMasterId;
		
	}
	function _getAirportDetailsFromApi($airportCode)
	{
		$url="http://www.cleartrip.com/places/airports/search?string=".$airportCode;
		$reffer="http://www.cleartrip.com/";
		$agent ="Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0";
		$ch = curl_init(); 
		curl_setopt($ch, CURLOPT_URL, $url); 
		curl_setopt($ch, CURLOPT_USERAGENT, $agent);
		curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
		curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);
		curl_setopt($ch, CURLOPT_ENCODING,'gzip');
		curl_setopt($ch, CURLOPT_REFERER, $reffer);
		curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
		curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);
		$airportDetails = curl_exec($ch);
		$airportDetails=json_decode($airportDetails);
		$i=0;
		$resultArray=array();
		foreach($airportDetails as $key=>$value)
		{
			if($value->k!=$airportCode)
				continue;
			
			$resultArray[$i]['airportCode']=$value->k;
			$city=explode(",",$value->v);
			$country=explode("-",trim($city[1]));
			$resultArray[$i]['airportName']=trim($country[1]);
			$resultArray[$i]['airportCityName']=trim($city[0]);
			$resultArray[$i]['countryCode']=trim($country[0]);
		}
		return $resultArray;
	}
	function _requestHistoryMovingProcess($requestMasterId,$responseId)
	{
		global $CFG;
		fileRequire("dataModels/class.alternateSeriesRequestDetails.php");
		$this->_OalternateSeriesRequestDetails = new alternateSeriesRequestDetails;
		$this->_OalternateSeriesRequestDetails->_Oconnection=$this->_Oconnection;
		$alternaleIdArr=array();
		
		$airlineRequestId=$this->_getAirlineRequestId($requestMasterId);
		$sql="SELECT
					srd.request_id,
					srd.series_request_id,
					srd.departure_date,
					srd.number_of_passenger,
					srd.number_of_adult,
					srd.number_of_child	,
					srd.number_of_infant,
					srd.cabin,
					srd.start_time,
					srd.end_time,
					srd.baggage_allowance,
					srd.ancillary,
					srd.meals_code,
					srd.pnr,
					srd.expected_fare,
					srd.group_category_id,
					rd.origin_airport_code,
					rd.dest_airport_code,
					rd.flight_number,
					srd.flight_status					
			  FROM
					".$CFG['db']['tbl']['request_details']." rd,
					".$CFG['db']['tbl']['series_request_details']." srd
			  WHERE
					rd.request_id=srd.request_id
					AND rd.request_master_id=".$requestMasterId;
		
		if(DB::isError($result=$this->_Oconnection->query($sql)))
		{
			fileWrite($sql,"SqlError","a+");
			return false;
		}
		if($result->numRows() > 0)
		{					
			while($rowValue=$result->fetchRow(DB_FETCHMODE_ASSOC))
			{				
				$this->_OalternateSeriesRequestDetails->__construct();
				$this->_OalternateSeriesRequestDetails->_IresponseId=$responseId;
				$this->_OalternateSeriesRequestDetails->_IairlinesRequestId=$airlineRequestId;
				$this->_OalternateSeriesRequestDetails->_IseriesRequestId=$rowValue['series_request_id'];
				$this->_OalternateSeriesRequestDetails->_IrequestId=$rowValue['request_id'];
				$this->_OalternateSeriesRequestDetails->_Sorigin=$rowValue['origin_airport_code'];
				$this->_OalternateSeriesRequestDetails->_Sdestination=$rowValue['dest_airport_code'];
				$this->_OalternateSeriesRequestDetails->_InumberOfPassenger=$rowValue['number_of_passenger'];
				$this->_OalternateSeriesRequestDetails->_InumberOfAdult=$rowValue['number_of_adult'];
				$this->_OalternateSeriesRequestDetails->_InumberOfChild=$rowValue['number_of_child'];
				$this->_OalternateSeriesRequestDetails->_InumberOfInfant=$rowValue['number_of_infant'];
				$this->_OalternateSeriesRequestDetails->_Scabin=$rowValue['cabin'];
				$this->_OalternateSeriesRequestDetails->_SstartTime=$rowValue['start_time'];
				$this->_OalternateSeriesRequestDetails->_SendTime=$rowValue['end_time'];
				$this->_OalternateSeriesRequestDetails->_SbaggageAllowance=$rowValue['baggage_allowance'];
				$this->_OalternateSeriesRequestDetails->_Sancillary=$rowValue['ancillary'];
				$this->_OalternateSeriesRequestDetails->_SmealsCode=$rowValue['meals_code'];
				$this->_OalternateSeriesRequestDetails->_Spnr=$rowValue['pnr'];
				$this->_OalternateSeriesRequestDetails->_IexpectedFare=$rowValue['expected_fare'];
				$this->_OalternateSeriesRequestDetails->_IgroupCategoryId=$rowValue['group_category_id'];
				$this->_OalternateSeriesRequestDetails->_SflightStatus=$rowValue['flight_status'];
				$this->_OalternateSeriesRequestDetails->_insertAlternateSeriesRequestDetails();
				$alternaleIdArr[]=$this->_OalternateSeriesRequestDetails->_IalternateSeriesRequestId;
			}
			return $alternaleIdArr;		
		}
		return false;
	}
	function _getPNRBlockDetails($IrequestMasterId,$requestApprovedFlightId,$_SreturnSplitPnrResult='N', $_SincludeStatus="")
	{

		global $CFG;
		$_Scondition = "";

		if($IrequestMasterId == 0 || $IrequestMasterId == '' || $requestApprovedFlightId == 0 || $requestApprovedFlightId == '')
			return false;

		if(!empty($_SincludeStatus))
			$_Scondition = ' AND status != "'.$_SincludeStatus.'"';

		$sql="SELECT 
				DISTINCT pnr	
		      FROM 
				".$CFG['db']['tbl']['pnr_blocking_details']."
		      WHERE 
				request_master_id =".$IrequestMasterId." AND 
				request_approved_flight_id=".$requestApprovedFlightId.$_Scondition;
		
		if(DB::isError($pnr=$this->_Oconnection->query($sql)))
		{
			fileWrite($sql,"SqlError","a+");
			return false;
		}
		
		if($pnr->numRows() >0)
		{
			if($_SreturnSplitPnrResult == 'Y'){
				while($pnrDetails = $pnr->fetchRow(DB_FETCHMODE_ASSOC))
				{
					$_splitPnrArray[]=$pnrDetails['pnr'];
				}
				return $_splitPnrArray;				
			}
			else{
				$pnrDetails = $pnr->fetchRow(DB_FETCHMODE_ASSOC);
				return $pnrDetails['pnr'];
			}
		}
		
		return false;
	}
	function _getSeriesRequestId($requestMasterId,$seriesRequestId="",$mappedStatus="",$_AgroupId = array(),$seriesGroupOrder='Y',$modifyStatus='N')
	{
		global $CFG;
		$_AseriesRequestDetails = array();

		$_Svar = $requestMasterId.'_'.$seriesRequestId.'_'.$mappedStatus.'_'.$modifyStatus;
		if(!empty($_AgroupId))
			$_Svar .= '_'.implode(',',$_AgroupId);

		$_AstaticData = $this->_staticData("_getSeriesRequestId",$_Svar);
		if($_AstaticData !== false)
			return $_AstaticData;


		$condition ="";
		/**Modified to allow more than one series_request_id or mapped_series_request_id */
		if($mappedStatus=="Y" && $seriesRequestId!="")
		{
			$condition .=" AND (srd.series_request_id IN (".$seriesRequestId.") OR srd.mapped_series_request_id IN (".$seriesRequestId."))";
		}

		if(!empty($_AgroupId))
		{
			$condition .=" AND srd.series_group_id in (".implode(',',$_AgroupId).")";
		}
		
		$sql="SELECT 
				rd.request_master_id,
				rd.request_id,
				srd.series_request_id,
				rd.origin_airport_code,
				rd.dest_airport_code,
				rd.trip_type,
				srd.departure_date,
				srd.number_of_passenger,
				srd.number_of_adult,
				srd.number_of_child,
				srd.number_of_infant,
				srd.foc_pax,
				srd.series_group_id,
				srd.mapped_series_request_id,
				srd.parent_series_request_id,
				srd.parent_series_group_id,
				srd.flight_number,
				srd.series_group_id,
				srd.cabin,
				srd.flight_status,
				srd.expected_fare
			FROM 
				".$CFG['db']['tbl']['series_request_details']." srd,
				".$CFG['db']['tbl']['request_details']." rd 
			WHERE 
				srd.request_id=rd.request_id AND 
				rd.request_master_id='".$requestMasterId."'
				".$condition."";  

		if($seriesGroupOrder == 'N')
		{
			$sql .= ' ORDER BY rd.request_id';
		}else
		{
			$sql .= ' ORDER BY srd.series_group_id,rd.request_id';
		}
		$_AseriesRequestDetails = $this->_executeQuery($sql);
		
		$this->_staticData('_getSeriesRequestId',$_Svar,$_AseriesRequestDetails);

		return $_AseriesRequestDetails;
	}

	function _getSalesPersonCorporatesCommon($givenUserId)
	{
		global $CFG;

		$corporateIdInArray="";
		$sqlSelectMappingCorporate="SELECT
							corporate_id
					    FROM
							".$CFG['db']['tbl']['corporate_salesperson_mapping']."
					    WHERE
							user_id='".$givenUserId."'";

		if(DB::isError($resultSelectMappingCorporate=$this->_Oconnection->query($sqlSelectMappingCorporate)))
		{
			fileWrite($sqlSelectMappingCorporate,"SqlError","a+");
			return false;
		}

		if($resultSelectMappingCorporate->numRows() > 0)
		{
			$comma="";
			while($rowSelectMappingCorporate=$resultSelectMappingCorporate->fetchRow(DB_FETCHMODE_ASSOC))
			{
				$corporateIdInArray=$corporateIdInArray.$comma.$rowSelectMappingCorporate['corporate_id'];
				$comma=",";
			}
		}
		else
		{
			$corporateIdInArray=0;
		}

		return $corporateIdInArray;
	}

	function _getCorporateListCommon($corporateIdInArray,$corporateId)
	{
		global $CFG;

		$sqlSelectCorporate="SELECT
						corporate_id,
						".encrypt::_decrypt('corporate_name')." AS corporate_name
				     FROM
						".$CFG['db']['tbl']['corporate_details']."
				     WHERE ";

		if($corporateIdInArray!="" || $corporateIdInArray!=0)
		{
			//$sqlSelectCorporate=$sqlSelectCorporate." (corporate_id IN($corporateIdInArray) OR corporate_id='".$corporateId."')";
			$sqlSelectCorporate=$sqlSelectCorporate." corporate_id IN($corporateIdInArray)";
		}
		else
		{
			if($_SESSION['groupRM']['groupId']!=1)
			{
				$sqlSelectCorporate=$sqlSelectCorporate." (corporate_type_id!=2 OR corporate_id='".$corporateId."')";
			}
			else
			{
				$sqlSelectCorporate=$sqlSelectCorporate." 1 ";
			}
		}
						
		$sqlSelectCorporate=$sqlSelectCorporate." ORDER BY corporate_name";

		if(DB::isError($resultSelectCorporate=$this->_Oconnection->query($sqlSelectCorporate)))
		{
			fileWrite($sqlSelectCorporate,"SqlError","a+");
			return FALSE;
		}

		$_AcorporateDetails[0]['corporate_id']=0;
		$_AcorporateDetails[0]['corporate_name']="All";
		$i=1;
		if($resultSelectCorporate->numRows() > 0)
		{
			while($rowSelectCorporate=$resultSelectCorporate->fetchRow(DB_FETCHMODE_ASSOC))
			{
				if($rowSelectCorporate['corporate_name']!='' && !empty($rowSelectCorporate['corporate_name']) && $rowSelectCorporate['corporate_name']!=null)
				{
					$_AcorporateDetails[$i]['corporate_id']=$rowSelectCorporate['corporate_id'];
					$_AcorporateDetails[$i]['corporate_name']=$rowSelectCorporate['corporate_name'];
					$i++;
				}
			}
		}

		
		return $_JAcorporateDetails=json_encode($_AcorporateDetails);
	}

	function _getUserDetailsValue($corporateId)
	{
		global $CFG;
		$_AuserDetails=array();
		$sqlSelectUser="SELECT
					user_id,
					".encrypt::_decrypt('email_id')." AS email_id
				FROM
					".$CFG['db']['tbl']['user_details']." 
				     		
				WHERE
					corporate_id=".$corporateId;

		if(DB::isError($resultSelectUser=$this->_Oconnection->query($sqlSelectUser)))
		{
			fileWrite($sqlSelectUser,"SqlError","a+");
			return FALSE;
		}

		$_AuserDetails[0]['user_id']=0;
		$_AuserDetails[0]['email_id']=$this->_Osmarty->getConfigVars("COMMON_SELECT");
		$i=1;
		if($resultSelectUser->numRows() > 0)
		{
			while($rowSelectUser=$resultSelectUser->fetchRow(DB_FETCHMODE_ASSOC))
			{
				$_AuserDetails[$i]['user_id']=$rowSelectUser['user_id'];
				$_AuserDetails[$i]['email_id']=$rowSelectUser['email_id'];
				$i++;
			}
		}

		return $_JAuserDetails=json_encode($_AuserDetails);
	}
	function _getRequestTotalAmount($requestMasterId,$requestApprovedFightId=0,$viaFlightId=0,$_AclosedPnrDetails=array())
	{
		global $CFG;
		$totalAmount=0;
		$transactionMasterId=0;
		$airlinesRequestId=0;
		$_ScurrentStatusCode = '';
		if(!empty($requestMasterId['request_master_id'])){
			$_ArequestMasterId=$requestMasterId;
			$_ScurrentStatusCode=$requestMasterId['current_status_code'];
			$transactionMasterId=$requestMasterId['transaction_id'];
			$airlinesRequestId=$requestMasterId['airlines_request_id'];
			$requestMasterId=$requestMasterId['request_master_id'];
		}elseif(empty($requestMasterId['request_master_id'])&&empty($requestMasterId['transaction_id'])&&empty($requestMasterId['airlines_request_id'])){
			$sqlSelectAirlinesRequestId="SELECT
								airlines_request_id,
								current_status
						     FROM
								".$CFG['db']['tbl']['airlines_request_mapping']."
						     WHERE
								request_master_id='".$requestMasterId."'";

			if(DB::isError($resultSelectAirlinesRequestId=$this->_Oconnection->query($sqlSelectAirlinesRequestId)))
			{
				fileWrite($sqlSelectAirlinesRequestId,"SqlError","a+");
				return false;
			}
			if($resultSelectAirlinesRequestId->numRows() >0)
			{
				$rowSelectAirlinesRequestId=$resultSelectAirlinesRequestId->fetchRow(DB_FETCHMODE_ASSOC);

				$airlinesRequestId=$rowSelectAirlinesRequestId['airlines_request_id'];
				$_ScurrentStatusCode = $this->_getCurrentStatusCode($rowSelectAirlinesRequestId['current_status']);
				$sqlSelectTransactionMasterId="SELECT
									transaction_id
							       FROM
									".$CFG['db']['tbl']['transaction_master']."
							       WHERE
									airlines_request_id='".$airlinesRequestId."'
									ORDER BY transaction_id DESC limit 1";

				if(DB::isError($resultSelectTransactionMasterId=$this->_Oconnection->query($sqlSelectTransactionMasterId)))
				{
					fileWrite($sqlSelectTransactionMasterId,"SqlError","a+");
					return false;
				}
				if($resultSelectTransactionMasterId->numRows() >0)
				{
					$rowSelectTransactionMasterId=$resultSelectTransactionMasterId->fetchRow(DB_FETCHMODE_ASSOC);
					$transactionMasterId=$rowSelectTransactionMasterId['transaction_id'];
				}
			}
		}

		/**
		 * Start to skip the closed pnr for calculating the total amount 
		**/
		if(empty($_ArequestMasterId['pnrBlockingDetails'])){
			$sqlPnrBlocking = "SELECT 
									DISTINCT pnr,
									status,
									request_approved_flight_id,
									no_of_adult,
									no_of_child,
									no_of_infant
								FROM 
								".$CFG['db']['tbl']['pnr_blocking_details']."
								WHERE 
									request_master_id = ".$requestMasterId." AND status !='Closed'";
			if(DB::isError($resultPnrBlocking=$this->_Oconnection->query($sqlPnrBlocking)))
			{
				fileWrite($sqlPnrBlocking,"SqlError","a+");
				return false;
			}
			if($resultPnrBlocking->numRows() >0)
			{
				$_ApnrBlocking = array();
				/**
				 * Prepare the array against each reqeust approved flight id for every pnr
				**/
				while($rowPnrBlocking=$resultPnrBlocking->fetchRow(DB_FETCHMODE_ASSOC))
				{
					$_ApnrBlocking[$rowPnrBlocking['request_approved_flight_id']][$rowPnrBlocking['pnr']] = array();
					$_ApnrBlocking[$rowPnrBlocking['request_approved_flight_id']][$rowPnrBlocking['pnr']]['status'] = $rowPnrBlocking['status']; 
					$_ApnrBlocking[$rowPnrBlocking['request_approved_flight_id']][$rowPnrBlocking['pnr']]['no_of_adult'] = $rowPnrBlocking['no_of_adult'];
					$_ApnrBlocking[$rowPnrBlocking['request_approved_flight_id']][$rowPnrBlocking['pnr']]['no_of_child'] = $rowPnrBlocking['no_of_child'];
					$_ApnrBlocking[$rowPnrBlocking['request_approved_flight_id']][$rowPnrBlocking['pnr']]['no_of_infant'] = $rowPnrBlocking['no_of_infant'];
				}
			}
		}else{
			foreach ($_ArequestMasterId['pnrBlockingDetails'] as $pnrBlockingDetailsvalue) {
				$_ApnrBlocking[$pnrBlockingDetailsvalue['request_approved_flight_id']][$pnrBlockingDetailsvalue['pnr']] = array();
				$_ApnrBlocking[$pnrBlockingDetailsvalue['request_approved_flight_id']][$pnrBlockingDetailsvalue['pnr']]['status'] = $pnrBlockingDetailsvalue['status']; 
				$_ApnrBlocking[$pnrBlockingDetailsvalue['request_approved_flight_id']][$pnrBlockingDetailsvalue['pnr']]['no_of_adult'] = $pnrBlockingDetailsvalue['no_of_adult'];
				$_ApnrBlocking[$pnrBlockingDetailsvalue['request_approved_flight_id']][$pnrBlockingDetailsvalue['pnr']]['no_of_child'] = $pnrBlockingDetailsvalue['no_of_child'];
				$_ApnrBlocking[$pnrBlockingDetailsvalue['request_approved_flight_id']][$pnrBlockingDetailsvalue['pnr']]['no_of_infant'] = $pnrBlockingDetailsvalue['no_of_infant'];
			}
		}	
		#To get total amount including closed pnrs
		if(!empty($_AclosedPnrDetails))
		{
			$_ApnrBlocking=array_replace($_ApnrBlocking,$_AclosedPnrDetails);
		}

		// Get User Currency
		$_rowCurrency=$this->_getUserCurrency($requestMasterId);

		$sqlSelectRequestApprovedFlightDetails="SELECT
								rafd.request_approved_flight_id,
								rafd.base_fare,
								rafd.tax,
								rafd.fare_passenger,
								rafd.child_base_fare,
								rafd.child_tax,
								rafd.infant_base_fare,
								rafd.infant_tax,
								rafd.baggauge_fare,
								rafd.meals_fare,
								ancillary_fare,
								rafd.no_of_adult,
								rafd.no_of_child,
								rafd.no_of_infant,
								rafd.foc_tax,
								rafd.free_cost_count,
								srd.series_request_id,
								srd.number_of_adult,
								srd.number_of_child,
								srd.number_of_infant
							FROM
								".$CFG['db']['tbl']['request_approved_flight_details']." rafd,
								".$CFG['db']['tbl']['series_request_details']." srd,
								".$CFG['db']['tbl']['request_group_details']." rgd
							WHERE	
								rafd.airlines_request_id='".$airlinesRequestId."'
								AND rafd.transaction_master_id='".$transactionMasterId."'
								AND rafd.series_request_id=srd.series_request_id
								AND rgd.airlines_request_id=rafd.airlines_request_id
								AND rgd.transaction_master_id=rafd.transaction_master_id
								AND rgd.series_group_id=srd.series_group_id
								AND rgd.group_status != ".$this->_getCurrentStatusId('PM')."
								AND rafd.accepted_flight_status='Y' ORDER BY srd.series_group_id ASC";
		if($requestApprovedFightId!=0)
			$sqlSelectRequestApprovedFlightDetails .= " AND rafd.request_approved_flight_id = '".$requestApprovedFightId."'";
			
		if(DB::isError($resultSelectRequestApprovedFlightDetails=$this->_Oconnection->query($sqlSelectRequestApprovedFlightDetails)))
		{
			fileWrite($sqlSelectRequestApprovedFlightDetails,"SqlError","a+");
			return false;
		}
		
		$_SincludedSSRAmount = "N";
		$_ApnrValue=array();
		$_SpnrVal = '';
		$_AsplitArray=array();
		if($resultSelectRequestApprovedFlightDetails->numRows() >0)
		{
			$_IstatusClosed=$this->_getCurrentStatusId('RC');
			while($rowSelectRequestApprovedFlightDetails=$resultSelectRequestApprovedFlightDetails->fetchRow(DB_FETCHMODE_ASSOC))
			{
				
				if($rowSelectRequestApprovedFlightDetails['no_of_adult'] > 0)
				{
					$noOfAdult=$rowSelectRequestApprovedFlightDetails['no_of_adult'];
					$noOfChild=$rowSelectRequestApprovedFlightDetails['no_of_child'];
					$noOfInfant=$rowSelectRequestApprovedFlightDetails['no_of_infant'];
				}
				else
				{
					$noOfAdult=$rowSelectRequestApprovedFlightDetails['number_of_adult'];
					$noOfChild=$rowSelectRequestApprovedFlightDetails['number_of_child'];
					$noOfInfant=$rowSelectRequestApprovedFlightDetails['number_of_infant'];
				}
				/**
				 * If the request is not closed then overrite the no of passenger count from pnr blocking details 
				     other than pnr closed, if pnr status is closed skip that pnr alone
				 **/
				if(!empty($_ApnrBlocking) && ($_ScurrentStatusCode != '' && $_ScurrentStatusCode !='RC'))
				{
					if(isset($_ApnrBlocking[$rowSelectRequestApprovedFlightDetails['request_approved_flight_id']]) && !empty($_ApnrBlocking[$rowSelectRequestApprovedFlightDetails['request_approved_flight_id']]))
					{
						$noOfAdult = 0;
						$noOfChild = 0;
						$noOfInfant = 0;
						foreach($_ApnrBlocking[$rowSelectRequestApprovedFlightDetails['request_approved_flight_id']] as $key => $_ApnrValues)
						{
							if($_ApnrValues['status'] == 'Closed')
								continue;
							$noOfAdult += $_ApnrValues['no_of_adult'];
							$noOfChild += $_ApnrValues['no_of_child']; 
							$noOfInfant += $_ApnrValues['no_of_infant'];
						}
					}
					/*While creating pnr, due to error if PNR not created then don't consider its amount 
					 * while calculating total cost of request.
					 * */
					if(empty($_ApnrBlocking[$rowSelectRequestApprovedFlightDetails['request_approved_flight_id']]) && !isset($_ApnrBlocking[$rowSelectRequestApprovedFlightDetails['request_approved_flight_id']]))
					{
						$noOfInfant=$noOfChild=$noOfAdult = 0;
					}
				}

				$adultBaseFare=$this->_getRoundOffFare($rowSelectRequestApprovedFlightDetails['base_fare'],2,$_rowCurrency['user_currency']);
				$adultTax=$rowSelectRequestApprovedFlightDetails['tax'];
				$adultTotal=$adultBaseFare+$adultTax;

				$childBaseFare=$this->_getRoundOffFare($rowSelectRequestApprovedFlightDetails['child_base_fare'],2,$_rowCurrency['user_currency']);
				$childTax=$rowSelectRequestApprovedFlightDetails['child_tax'];
				$childTotal=$childBaseFare+$childTax;

				$infantBaseFare=$this->_getRoundOffFare($rowSelectRequestApprovedFlightDetails['infant_base_fare'],2,$_rowCurrency['user_currency']);
				$infantTax=$rowSelectRequestApprovedFlightDetails['infant_tax'];
				$infantTotal=$infantBaseFare+$infantTax;

				$baggageFare=$rowSelectRequestApprovedFlightDetails['baggauge_fare'];
				$mealsFare=$rowSelectRequestApprovedFlightDetails['meals_fare'];
				$othersFare = 0;
				// if(!empty($rowSelectRequestApprovedFlightDetails['ancillary_fare']))
				// {
				// 	$_AotherAncillaryAmount=json_decode($rowSelectRequestApprovedFlightDetails['ancillary_fare'],1);
				// 	if(is_array($_AotherAncillaryAmount)){
				// 		$_AotherSsrAmount =array_values($_AotherAncillaryAmount['ADT']);
				// 		$othersFare = array_sum($_AotherSsrAmount);
				// 	}
				// }
				if(!empty($rowSelectRequestApprovedFlightDetails['ancillary_fare']))
				{
					$ancillaryAmountCheck=json_decode($rowSelectRequestApprovedFlightDetails['ancillary_fare'],1);
					$_AancillaryFare = $this->_getAncillaryInformation($ancillaryAmountCheck);
					$ancillaryAmount = $_AancillaryFare;
				}

				$focFareTax=$rowSelectRequestApprovedFlightDetails['foc_tax'];
				$noOfFoc=$rowSelectRequestApprovedFlightDetails['free_cost_count'];
				if($noOfAdult!=0)
				{
					$totalAmount+=$noOfAdult*$adultTotal;
				}

				if($noOfChild!=0)
				{
					$totalAmount+=$noOfChild*$childTotal;
				}
				$infantCountFlag='N';
				if($noOfInfant!=0)
				{
					$infantAmount=$noOfInfant*$infantTotal;
					$infantCountFlag='Y';
					$totalAmount+=$infantAmount;
				}
				if($focFareTax!=0)
				{
					$totalAmount+=$noOfFoc*$focFareTax;
				}
				$_Ipaxcount=$noOfAdult+$noOfChild;
				if($_Ipaxcount>=$CFG['site']['maxPaxPerPnr'])
					$_SpnrVal=$this->_getPNRBlockDetails($requestMasterId,$rowSelectRequestApprovedFlightDetails['request_approved_flight_id'],'Y');
				else
					$_SpnrVal=$this->_getPNRBlockDetails($requestMasterId,$rowSelectRequestApprovedFlightDetails['request_approved_flight_id']);
				if(is_array($_SpnrVal))
				{
					if(!in_array($_SpnrVal[0],$_ApnrValue))
						$_SincludedSSRAmount='N';
				}
				else
				{	
					if(!in_array($_SpnrVal,$_ApnrValue) && $_SpnrVal!='')
						$_SincludedSSRAmount='N';
				}

				if (!empty($CFG['ssr']['instantPayment']['status']) && $CFG['ssr']['instantPayment']['status'] == 'Y') {
	 				if($baggageFare != 0) {
						if($noOfAdult!=0)
							$totalAmount += $noOfAdult*$baggageFare;
						
						if($noOfChild!=0)
							$totalAmount += $noOfChild*$baggageFare;
					}
					if($mealsFare != 0){
						if($noOfAdult!=0)
							$totalAmount += $noOfAdult*$mealsFare;
							
						if($noOfChild!=0)
							$totalAmount += $noOfChild*$mealsFare;
					}
					if($ancillaryFare != 0)
					{
						if($noOfAdult!=0)
						$totalAmount += $noOfAdult*$ancillaryFare;
						if($noOfChild!=0)
							$totalAmount += $noOfChild*$ancillaryFare;
					}
					if($ancillaryAmount['adultTotalFare'] != 0 || $ancillaryAmount['childTotalFare'] != 0)
					{
						if($noOfAdult!=0)
							$totalAmount += $noOfAdult*$ancillaryAmount['adultTotalFare'];
						
						if($noOfChild!=0)
							$totalAmount += $noOfChild*$ancillaryAmount['childTotalFare'];
					}
		 		}
				/*We will get the entire SSR total amount in the first time, 
				 * so restrict to call again if SSR added in passenger level
				 */

				if($_SincludedSSRAmount=="N") {
					/*Return 'N' if there is no ssr added else amount will get, 
					 *We can get 0 as total fare for some SSR, so that we returns 'N'
					 */
					if(is_array($_SpnrVal))
					{
						$_IsplitPnrSSRamount=0;
						foreach ($_SpnrVal as $splitKey => $splitPnr)
						{
							$_IssrTotalAmount = $this->_getSSRTotalAmount($requestMasterId,$splitPnr,$infantCountFlag);
							if($_IssrTotalAmount!='N' && !in_array($splitPnr, $_AsplitArray))
							{
								$_AsplitArray[]=$splitPnr;
								$totalAmount += $_IssrTotalAmount;
								$_SincludedSSRAmount = "Y";
							}
							else
							{
								if(!in_array($splitPnr, $_AsplitArray) && (empty($CFG['ssr']['instantPayment']['status']) || (isset($CFG['ssr']['instantPayment']['status']) && $CFG['ssr']['instantPayment']['status']=='N')))
								{
									$noOfAdult=$_ApnrBlocking[$rowSelectRequestApprovedFlightDetails['request_approved_flight_id']][$splitPnr]['no_of_adult'];
									$noOfChild=$_ApnrBlocking[$rowSelectRequestApprovedFlightDetails['request_approved_flight_id']][$splitPnr]['no_of_child'];
									if($baggageFare != 0)
									{
										if($noOfAdult!=0)
										{
											$totalAmount += $noOfAdult*$baggageFare;
										}
										
										if($noOfChild!=0)
										{
											$totalAmount += $noOfChild*$baggageFare;
										}
									}
									if($mealsFare != 0){
										if($noOfAdult!=0)
											$totalAmount += $noOfAdult*$mealsFare;
											
										if($noOfChild!=0)
											$totalAmount += $noOfChild*$mealsFare;
									}

									if($ancillaryFare != 0)
									{
										if($noOfAdult!=0)
										$totalAmount += $noOfAdult*$ancillaryFare;
										if($noOfChild!=0)
											$totalAmount += $noOfChild*$ancillaryFare;
									}
									if($ancillaryAmount['adultTotalFare'] != 0 || $ancillaryAmount['childTotalFare'] != 0)
									{
										if($noOfAdult!=0)
											$totalAmount += $noOfAdult*$ancillaryAmount['adultTotalFare'];
										
										if($noOfChild!=0)
											$totalAmount += $noOfChild*$ancillaryAmount['childTotalFare'];
									}
								}
							}
						}
					}
					else
					{
						$_IssrTotalAmount = $this->_getSSRTotalAmount($requestMasterId,$_SpnrVal,$infantCountFlag);

						if($_IssrTotalAmount!="N") {
							$totalAmount += $_IssrTotalAmount;
						$_SincludedSSRAmount = "Y";
						}
						else
						{
							if (!empty($CFG['ssr']['instantPayment']['status']) && $CFG['ssr']['instantPayment']['status'] == 'Y')
								continue;
							if($baggageFare != 0) {
								if($noOfAdult!=0)
									$totalAmount += $noOfAdult*$baggageFare;
								
								if($noOfChild!=0)
									$totalAmount += $noOfChild*$baggageFare;
							}
							if($mealsFare != 0){
								if($noOfAdult!=0)
									$totalAmount += $noOfAdult*$mealsFare;
									
								if($noOfChild!=0)
									$totalAmount += $noOfChild*$mealsFare;
							}

							if($ancillaryFare != 0)
							{
								if($noOfAdult!=0)
								$totalAmount += $noOfAdult*$ancillaryFare;
								if($noOfChild!=0)
									$totalAmount += $noOfChild*$ancillaryFare;
							}
							if($ancillaryAmount['adultTotalFare'] != 0 || $ancillaryAmount['childTotalFare'] != 0)
							{
								if($noOfAdult!=0)
									$totalAmount += $noOfAdult*$ancillaryAmount['adultTotalFare'];
								
								if($noOfChild!=0)
									$totalAmount += $noOfChild*$ancillaryAmount['childTotalFare'];
							}
						}
					}
					
				}
				if(is_array($_SpnrVal))
					$_ApnrValue[]=$_SpnrVal[0];
				else
					$_ApnrValue[]=$_SpnrVal;
			}
		}
		if(isset($CFG['site']['enableGenericFees']) && $CFG['site']['enableGenericFees']=='Y')
		{
			$totalAmount+=$this->_getTotalGenericChareAmount($requestMasterId);
		}
		$_IfeePaymentTotalAmount=$this->_getFeePaymentTotalAmount($requestMasterId);
		if(!empty($_IfeePaymentTotalAmount))
		    $totalAmount+=$_IfeePaymentTotalAmount;
		
		$totalAmount=$this->_getRoundOffFare($totalAmount); 
		fileWrite("requesttotalamount requestMasterId->".$requestMasterId."totalAmount->".$totalAmount."feeamount->".$_IfeePaymentTotalAmount,'requesttotalamount','a+');
		return $totalAmount;
	}
	
	function _getRequestPerPaxAmountBaseFareYq($requestMasterId,$requestApprovedFightId=0,$viaFlightId=0,$splitFares='N')
	{
		global $CFG;

		$totalAmount=0;
		$adultFare = 0;
		$childFare = 0;
		$infantFare = 0;
		$adultBag = 0;
		$childBag = 0;
		$transactionMasterId=0;
		$airlinesRequestId=0;

		$sqlSelectAirlinesRequestId="SELECT
							airlines_request_id
					     FROM
							".$CFG['db']['tbl']['airlines_request_mapping']."
					     WHERE
							request_master_id='".$requestMasterId."'";

		if(DB::isError($resultSelectAirlinesRequestId=$this->_Oconnection->query($sqlSelectAirlinesRequestId)))
		{
			fileWrite($sqlSelectAirlinesRequestId,"SqlError","a+");
			return false;
		}
	
		if($resultSelectAirlinesRequestId->numRows() >0)
		{
			$rowSelectAirlinesRequestId=$resultSelectAirlinesRequestId->fetchRow(DB_FETCHMODE_ASSOC);

			$airlinesRequestId=$rowSelectAirlinesRequestId['airlines_request_id'];

			$sqlSelectTransactionMasterId="SELECT
								transaction_id,
								payment_expiry_date
						       FROM
								".$CFG['db']['tbl']['transaction_master']."
						       WHERE
								airlines_request_id='".$airlinesRequestId."'
								ORDER BY transaction_id DESC limit 1";

			if(DB::isError($resultSelectTransactionMasterId=$this->_Oconnection->query($sqlSelectTransactionMasterId)))
			{
				fileWrite($sqlSelectTransactionMasterId,"SqlError","a+");
				return false;
			}
	
			if($resultSelectTransactionMasterId->numRows() >0)
			{
				$rowSelectTransactionMasterId=$resultSelectTransactionMasterId->fetchRow(DB_FETCHMODE_ASSOC);
				$transactionMasterId=$rowSelectTransactionMasterId['transaction_id'];
				$this->_SpaymentExpiryDate=$rowSelectTransactionMasterId['payment_expiry_date'];
			}
		}

		$sqlSelectRequestApprovedFlightDetails="SELECT
								rafd.request_approved_flight_id,
								rafd.base_fare,
								rafd.tax,
								rafd.fare_passenger,
								rafd.child_base_fare,
								rafd.child_tax,
								rafd.infant_base_fare,
								rafd.infant_tax,
								rafd.baggauge_fare,
								rafd.meals_fare,
								rafd.no_of_adult,
								rafd.no_of_child,
								rafd.no_of_infant,
								rafd.tax_breakup,
								rafd.child_tax_breakup,
								rafd.infant_tax_breakup
							FROM
								".$CFG['db']['tbl']['request_approved_flight_details']." rafd
							WHERE	
								rafd.airlines_request_id='".$airlinesRequestId."'
								AND rafd.transaction_master_id='".$transactionMasterId."'
								AND rafd.accepted_flight_status='Y'";
		if($requestApprovedFightId>0)
			$sqlSelectRequestApprovedFlightDetails.=" AND rafd.request_approved_flight_id=".$requestApprovedFightId;
			
		if(DB::isError($resultSelectRequestApprovedFlightDetails=$this->_Oconnection->query($sqlSelectRequestApprovedFlightDetails)))
		{
			fileWrite($sqlSelectRequestApprovedFlightDetails,"SqlError","a+");
			return false;
		}
		if($resultSelectRequestApprovedFlightDetails->numRows() >0)
		{
			while($rowSelectRequestApprovedFlightDetails=$resultSelectRequestApprovedFlightDetails->fetchRow(DB_FETCHMODE_ASSOC))
			{
				$noOfAdult=$rowSelectRequestApprovedFlightDetails['no_of_adult'];
				$noOfChild=$rowSelectRequestApprovedFlightDetails['no_of_child'];
				$noOfInfant=$rowSelectRequestApprovedFlightDetails['no_of_infant'];
				
				//Base fares
				$adultBaseFare=$rowSelectRequestApprovedFlightDetails['base_fare'];
				$childBaseFare=$rowSelectRequestApprovedFlightDetails['child_base_fare'];
				$infantBaseFare=$rowSelectRequestApprovedFlightDetails['infant_base_fare'];
				//Taxes
				$adultTax=0;
				if($rowSelectRequestApprovedFlightDetails['tax_breakup'])
				{
					$taxArray=explode('$$',$rowSelectRequestApprovedFlightDetails['tax_breakup']);
					foreach($taxArray as $val)
					{
						if(strpos($val,'YQ')!==false)
						{
							$valArray=explode('=',$val);
							$adultTax=$adultTax+$valArray[1];
						}						
					}
				}
				$childTax=0;
				if($rowSelectRequestApprovedFlightDetails['child_tax_breakup'])
				{
					$taxArray=explode('$$',$rowSelectRequestApprovedFlightDetails['child_tax_breakup']);
					foreach($taxArray as $val)
					{
						if(strpos($val,'YQ')!==false)
						{
							$valArray=explode('=',$val);
							$childTax=$childTax+$valArray[1];
						}
					}
				}
				$infantTax=0;
				if($rowSelectRequestApprovedFlightDetails['infant_tax_breakup'])
				{
					$taxArray=explode('$$',$rowSelectRequestApprovedFlightDetails['infant_tax_breakup']);
					foreach($taxArray as $val)
					{
						if(strpos($val,'YQ')!==false)
						{
							$valArray=explode('=',$val);
							$infantTax=$infantTax+$valArray[1];
						}
						
					}
				}
				//Total per pax fare
				if($CFG['site']['baggageFareFromApi']=='Y')
				{
					$adultTotal=$adultBaseFare;
					$childTotal=$childBaseFare;
					$infantTotal=$infantBaseFare;
				}
				else
				{
					$adultTotal=$adultBaseFare+$adultTax;
					$childTotal=$childBaseFare+$childTax;
					$infantTotal=$infantBaseFare+$infantTax;
				}
				//SSR
				$baggageFare=$rowSelectRequestApprovedFlightDetails['baggauge_fare'];
				$mealsFare=$rowSelectRequestApprovedFlightDetails['meals_fare'];
				//assign baggage fare
				if($baggageFare > 0)
					$adultBag=$childBag=$baggageFare;
				//Total Fare based on no of pax
				if($noOfAdult!=0)
				{
					$totalAmount+=$adultTotal;
					$adultFare+=$adultTotal;
				}
				if($noOfChild!=0)
				{
					//$totalAmount+=$childTotal;
					$childFare+=$childTotal;
				}
				if($noOfInfant!=0)
				{
					//$totalAmount+=$infantTotal;
					$infantFare+=$infantTotal;
				}
			}
			//To split pax fares to store in PNR
			if($splitFares == 'Y')
			{
				$totalFares = array();
				$totalFares['adultBag']=$totalFares['childBag']=0;
				if($noOfAdult!=0)
					$totalFares['adultTotal'] = $adultFare;
				if($noOfChild!=0)
					$totalFares['childTotal'] = $childFare;
				if($noOfInfant!=0)
					$totalFares['infantTotal'] = $infantFare;
				if($adultBag!=0)
					$totalFares['adultBag'] = $adultBag;
				if($childBag!=0)
					$totalFares['childBag'] = $childBag;
				return $totalFares;
			}
		}
		
		return $totalAmount;				
	}
	function _getRequestTotalAmountDetails($requestMasterId,$requestApprovedFightId=0,$viaFlightId=0)
	{
		global $CFG;
		$totalAmount = array();
		$transactionMasterId=0;
		$airlinesRequestId=0;

		$sqlSelectAirlinesRequestId="SELECT
							airlines_request_id
					     FROM
							".$CFG['db']['tbl']['airlines_request_mapping']."
					     WHERE
							request_master_id='".$requestMasterId."'";

		if(DB::isError($resultSelectAirlinesRequestId=$this->_Oconnection->query($sqlSelectAirlinesRequestId)))
		{
			fileWrite($sqlSelectAirlinesRequestId,"SqlError","a+");
			return false;
		}
	
		if($resultSelectAirlinesRequestId->numRows() >0)
		{
			$rowSelectAirlinesRequestId=$resultSelectAirlinesRequestId->fetchRow(DB_FETCHMODE_ASSOC);

			$airlinesRequestId=$rowSelectAirlinesRequestId['airlines_request_id'];

			$sqlSelectTransactionMasterId="SELECT
								transaction_id
						       FROM
								".$CFG['db']['tbl']['transaction_master']."
						       WHERE
								airlines_request_id='".$airlinesRequestId."'
								ORDER BY transaction_id DESC limit 1";

			if(DB::isError($resultSelectTransactionMasterId=$this->_Oconnection->query($sqlSelectTransactionMasterId)))
			{
				fileWrite($sqlSelectTransactionMasterId,"SqlError","a+");
				return false;
			}
	
			if($resultSelectTransactionMasterId->numRows() >0)
			{
				$rowSelectTransactionMasterId=$resultSelectTransactionMasterId->fetchRow(DB_FETCHMODE_ASSOC);
				$transactionMasterId=$rowSelectTransactionMasterId['transaction_id'];
			}
		}
		$condition="";
		if($requestApprovedFightId>0)
			$condition.=" AND rafd.request_approved_flight_id=".$requestApprovedFightId;	
				
		if($transactionMasterId != 0)
		{
			$totalAmount = $this->_getCalculatedAmountDetails($transactionMasterId,$condition);	
		}	
		return $totalAmount;				
	}
	
	function _getCalculatedAmountDetails($transactionMasterId,$condition='',$segment='')
	{
		global $CFG;
		$returnSingleArr = true;
		$airlinesRequestId = 0;
		$ancillaryAmount = 0;
		if(is_array($transactionMasterId))
		{
			$transactionMasterId = $transactionMasterId[1];
			$returnSingleArr = false;
		}
		$totalAmount=array();
		$_ApnrArray = array();
		$sqlSelectRequestApprovedFlightDetails="SELECT
					rafd.request_approved_flight_id,
					rafd.airlines_request_id,
					rafd.transaction_master_id,
					rafd.base_fare,
					rafd.tax,
					rafd.fare_passenger,
					rafd.child_base_fare,
					rafd.child_tax,
					rafd.infant_base_fare,
					rafd.infant_tax,
					rafd.baggauge_fare,
					rafd.meals_fare,
					rafd.no_of_adult,
					rafd.no_of_child,
					rafd.no_of_infant,
					rafd.free_cost_count,
					rafd.tax_breakup,
					rafd.child_tax_breakup,
					rafd.infant_tax_breakup,
					rafd.foc_tax,
                                        rafd.discount_fare,
                                        rafd.adjusted_amount,
										rafd.ancillary_fare
				FROM
					".$CFG['db']['tbl']['request_approved_flight_details']." rafd
				WHERE
					rafd.transaction_master_id in (".$transactionMasterId.")
					AND rafd.accepted_flight_status='Y'".$condition;
		if(DB::isError($resultSelectRequestApprovedFlightDetails=$this->_Oconnection->query($sqlSelectRequestApprovedFlightDetails)))
		{
			fileWrite($sqlSelectRequestApprovedFlightDetails,"SqlError","a+");
			return false;
		}
		/*$_SincludedSSRAmount = 'N';
		$ssrAmount = array();*/
		
		if($resultSelectRequestApprovedFlightDetails->numRows() >0)
		{
			while($rowSelectRequestApprovedFlightDetails=$resultSelectRequestApprovedFlightDetails->fetchRow(DB_FETCHMODE_ASSOC))
			{
				if($segment != '' && is_array($segment))
				{
					if(isset($segment['paymentCompleted'][$rowSelectRequestApprovedFlightDetails['airlines_request_id']]) || isset($segment['partiallyPaid'][$rowSelectRequestApprovedFlightDetails['airlines_request_id']]))
							$totalAmount['confirmedSegmentCount'] +=1;
					$totalAmount['segmentCount']+=1;
				}
				else
				{				
					$airlinesRequestId = $rowSelectRequestApprovedFlightDetails['airlines_request_id'];
					if($rowSelectRequestApprovedFlightDetails['no_of_adult'] > 0)
					{
						$noOfAdult=$rowSelectRequestApprovedFlightDetails['no_of_adult'];
						$noOfChild=$rowSelectRequestApprovedFlightDetails['no_of_child'];
						$noOfInfant=$rowSelectRequestApprovedFlightDetails['no_of_infant'];
						$noOfFoc=$rowSelectRequestApprovedFlightDetails['free_cost_count'];
					}
					/*else
					{
						$noOfAdult=$rowSelectRequestApprovedFlightDetails['number_of_adult'];
						$noOfChild=$rowSelectRequestApprovedFlightDetails['number_of_child'];
						$noOfInfant=$rowSelectRequestApprovedFlightDetails['number_of_infant'];
					}*/

					$adultBaseFare=$rowSelectRequestApprovedFlightDetails['base_fare'];
					$adultTax=$rowSelectRequestApprovedFlightDetails['tax'];
					//To calculate the discount and adjusted amount for multiple values
					$adultDiscount = $rowSelectRequestApprovedFlightDetails['discount_fare'];
					$adjustedAmount = $rowSelectRequestApprovedFlightDetails['adjusted_amount'];
					if($CFG['site']['baggageFareFromApi']=='Y')
						$adultBaseFare=$rowSelectRequestApprovedFlightDetails['base_fare']+$rowSelectRequestApprovedFlightDetails['baggauge_fare'];

					if($CFG['site']['totalFareDisplay']=='BF')
					{
						$adultTotal=$adultBaseFare;
					}
					else if($CFG['site']['totalFareDisplay']=='BFYQ')
					{
						$adultTax=0;
						if($rowSelectRequestApprovedFlightDetails['tax_breakup']!="")
						{
							$adultTax=$this->_getYqTaxByTaxbreakup($rowSelectRequestApprovedFlightDetails['tax_breakup']);	
						}
						
						$adultTotal=$adultBaseFare+$adultTax;
					}
					else
					{
						$adultTotal=$adultBaseFare+$adultTax;
					}
					$childBaseFare=$rowSelectRequestApprovedFlightDetails['child_base_fare'];
					$childTax=$rowSelectRequestApprovedFlightDetails['child_tax'];

					if($CFG['site']['baggageFareFromApi']=='Y')
						$childBaseFare=$rowSelectRequestApprovedFlightDetails['child_base_fare']+$rowSelectRequestApprovedFlightDetails['baggauge_fare'];

					if($CFG['site']['totalFareDisplay']=='BF')
					{
						$childTotal=$childBaseFare;
					}
					else if($CFG['site']['totalFareDisplay']=='BFYQ')
					{
						$childTax=0;
						if($rowSelectRequestApprovedFlightDetails['child_tax_breakup']!="")
						{
							$childTax=$this->_getYqTaxByTaxbreakup($rowSelectRequestApprovedFlightDetails['child_tax_breakup']);	
						}
						$childTotal=$childBaseFare+$childTax;
					}
					else
					{
						$childTotal=$childBaseFare+$childTax;
					}

					$infantBaseFare=$rowSelectRequestApprovedFlightDetails['infant_base_fare'];
					$infantTax=$rowSelectRequestApprovedFlightDetails['infant_tax'];

					if($CFG['site']['baggageFareFromApi']=='Y')
						$infantBaseFare=$rowSelectRequestApprovedFlightDetails['infant_base_fare'];

					if($CFG['site']['totalFareDisplay']=='BF')
					{
						$infantTotal=$infantBaseFare;
					}
					else if($CFG['site']['totalFareDisplay']=='BFYQ')
					{
						$infantTax=0;
						if($rowSelectRequestApprovedFlightDetails['infant_tax_breakup']!="")
						{
							$infantTax=$this->_getYqTaxByTaxbreakup($rowSelectRequestApprovedFlightDetails['infant_tax_breakup']);	
						}
						$infantTotal=$infantBaseFare+$infantTax;
					}
					else
					{
						$infantTotal=$infantBaseFare+$infantTax;
					}

					$focTax=$rowSelectRequestApprovedFlightDetails['foc_tax'];

					if($CFG['site']['totalFareDisplay']=='TF')
					{
						$focTotalTax=$focTax;
					}

					//Add the base fare, YQ tax, baggage fare
					if($CFG['site']['baggageFareFromApi']=='Y')
						$baggageFare=0;
					else
						$baggageFare=$rowSelectRequestApprovedFlightDetails['baggauge_fare'];

					$mealsFare=$rowSelectRequestApprovedFlightDetails['meals_fare'];
					$othersFare = 0;
					// if(!empty($rowSelectRequestApprovedFlightDetails['ancillary_fare']))
					// {
					// 	$_AotherAncillaryAmount=json_decode($rowSelectRequestApprovedFlightDetails['ancillary_fare'],1);
					// 	if(is_array($_AotherAncillaryAmount)){
					// 		$_AotherSsrAmount =array_values($_AotherAncillaryAmount['ADT']);
					// 		$othersFare = array_sum($_AotherSsrAmount);
					// 	}
					// }
					$ancillaryAmountCheck=json_decode($rowSelectRequestApprovedFlightDetails['ancillary_fare'],1);
					$_AancillaryFare = $this->_getAncillaryInformation($ancillaryAmountCheck);
					$othersFare = $_AancillaryFare;

					$tigerConnectFare=$rowSelectRequestApprovedFlightDetails['tiger_connect_fare'];	
					$adultYq=0;				
					if($CFG['site']['totalFareDisplay']=='YQBREAKUP')
					{
						if($rowSelectRequestApprovedFlightDetails['tax_breakup']!="")
						{
							$adultYq=$this->_getYqTaxByTaxbreakup($rowSelectRequestApprovedFlightDetails['tax_breakup']);	
						}
					}
					if($noOfAdult!=0)
					{
						$totalAmount[$rowSelectRequestApprovedFlightDetails['airlines_request_id']]['adultBaseFare']+=$adultBaseFare;
						$totalAmount[$rowSelectRequestApprovedFlightDetails['airlines_request_id']]['adultTax']+=$adultTax;
						$totalAmount[$rowSelectRequestApprovedFlightDetails['airlines_request_id']]['adultYq']+=$adultYq;
						
						$totalAmount[$rowSelectRequestApprovedFlightDetails['airlines_request_id']]['totalfare']+=$noOfAdult*$adultTotal;
						$totalAmount[$rowSelectRequestApprovedFlightDetails['airlines_request_id']]['baseFare']+=$noOfAdult*$adultBaseFare;
						$totalAmount[$rowSelectRequestApprovedFlightDetails['airlines_request_id']]['tax']+=$noOfAdult*$adultTax;
						$totalAmount[$rowSelectRequestApprovedFlightDetails['airlines_request_id']]['yq']+=$noOfAdult*$adultYq;
						//adding all discount value and adjusted amount for multiples value
						$totalAmount[$rowSelectRequestApprovedFlightDetails['airlines_request_id']]['discount']+=$adultDiscount;
						$totalAmount[$rowSelectRequestApprovedFlightDetails['airlines_request_id']]['adjusted_amount'] += $adjustedAmount;
						//$totalAmount[$rowSelectRequestApprovedFlightDetails['airlines_request_id']]['baggageFare'] += $noOfAdult*$baggageFare;
						//$totalAmount[$rowSelectRequestApprovedFlightDetails['airlines_request_id']]['mealsFare'] += $noOfAdult*$mealsFare;
						
					}
					if($noOfChild!=0)
					{
						if($CFG['site']['totalFareDisplay']=='YQBREAKUP')
						{
							if($rowSelectRequestApprovedFlightDetails['child_tax_breakup']!="")
							{
								$childYq=$this->_getYqTaxByTaxbreakup($rowSelectRequestApprovedFlightDetails['child_tax_breakup']);	
							}
						}
						$totalAmount[$rowSelectRequestApprovedFlightDetails['airlines_request_id']]['childYQ']+=$noOfChild*$childYq;
						
						$totalAmount[$rowSelectRequestApprovedFlightDetails['airlines_request_id']]['totalfare']+=$noOfChild*$childTotal;
						$totalAmount[$rowSelectRequestApprovedFlightDetails['airlines_request_id']]['baseFare']+=$noOfChild*$childBaseFare;
						$totalAmount[$rowSelectRequestApprovedFlightDetails['airlines_request_id']]['tax']+=$noOfChild*$childTax;
						$totalAmount[$rowSelectRequestApprovedFlightDetails['airlines_request_id']]['yq']+=$noOfChild*$childYq;

						$totalAmount[$rowSelectRequestApprovedFlightDetails['airlines_request_id']]['childBaseFare']+=$childBaseFare;
						$totalAmount[$rowSelectRequestApprovedFlightDetails['airlines_request_id']]['childTax']+=$childTax;
						$totalAmount[$rowSelectRequestApprovedFlightDetails['airlines_request_id']]['chdYq']+=$childYq;
						//$totalAmount[$rowSelectRequestApprovedFlightDetails['airlines_request_id']]['baggageFare'] += $noOfChild*$baggageFare;
						//$totalAmount[$rowSelectRequestApprovedFlightDetails['airlines_request_id']]['mealsFare'] += $noOfChild*$mealsFare;
					}

					if($noOfInfant!=0)
					{
						if($CFG['site']['totalFareDisplay']=='YQBREAKUP')
						{
							if($rowSelectRequestApprovedFlightDetails['infant_tax_breakup']!="")
							{
								$infantYq=$this->_getYqTaxByTaxbreakup($rowSelectRequestApprovedFlightDetails['infant_tax_breakup']);	
							}
						}
						$totalAmount[$rowSelectRequestApprovedFlightDetails['airlines_request_id']]['infantYQ']+=$noOfInfant*$childYq;
						$totalAmount[$rowSelectRequestApprovedFlightDetails['airlines_request_id']]['totalfare']+=$noOfInfant*$infantTotal;
						$totalAmount[$rowSelectRequestApprovedFlightDetails['airlines_request_id']]['baseFare']+=$noOfInfant*$infantBaseFare;
						$totalAmount[$rowSelectRequestApprovedFlightDetails['airlines_request_id']]['tax']+=$noOfInfant*$infantTax;
						$totalAmount[$rowSelectRequestApprovedFlightDetails['airlines_request_id']]['yq']+=$noOfInfant*$infantYq;
						$totalAmount[$rowSelectRequestApprovedFlightDetails['airlines_request_id']]['infantBaseFare']+=($noOfInfant*$infantBaseFare);
						$totalAmount[$rowSelectRequestApprovedFlightDetails['airlines_request_id']]['infantTax']+=($noOfInfant*$infantTax);

						$totalAmount[$rowSelectRequestApprovedFlightDetails['airlines_request_id']]['infBaseFare']+=$infantBaseFare;
						$totalAmount[$rowSelectRequestApprovedFlightDetails['airlines_request_id']]['infTax']+=$infantTax;
						$totalAmount[$rowSelectRequestApprovedFlightDetails['airlines_request_id']]['infYq']+=$infantYq;
					}
					if($noOfFoc!=0)
					{
						$totalAmount[$rowSelectRequestApprovedFlightDetails['airlines_request_id']]['totalfare']+=$noOfFoc*$focTotalTax;
						$totalAmount[$rowSelectRequestApprovedFlightDetails['airlines_request_id']]['focTax']+=$noOfFoc*$focTotalTax;					
					}
					/*
					$ssr="SELECT	
								ssr_master_id,															
								sum(meals_fare) as mealsFare,								
								sum(baggage_fare) as baggageFare
							FROM
								".$CFG['db']['tbl']['ssr_details']."								
							WHERE	
								request_approved_flight_id='".$rowSelectRequestApprovedFlightDetails['request_approved_flight_id']."'
							GROUP BY ssr_master_id ORDER BY ssr_master_id DESC LIMIT 1";
							//echo $ssr;exit;
					if(DB::isError($ssrResult=$this->_Oconnection->query($ssr)))
					{
						fileWrite($ssr,"SqlError","a+");
						return false;
					}*/

					// Calculating SVCF Code for AK
					if($rowSelectRequestApprovedFlightDetails['ancillary_fare'])
					{
						$_AancillaryFare = json_decode($rowSelectRequestApprovedFlightDetails['ancillary_fare'],true);
						$_AancillaryFare = $this->_getAncillaryInformation($_AancillaryFare);
						if(!empty($_AancillaryFare))
						{
							if(isset($_AancillaryFare['adultTotalFare']) && !empty($_AancillaryFare['adultTotalFare']))
							{
								$ancillaryAmount +=$_AancillaryFare['adultTotalFare']*$noOfAdult;
							}
							if(isset($_AancillaryFare['childTotalFare']) && !empty($_AancillaryFare['childTotalFare']))
							{
								$ancillaryAmount += $_AancillaryFare['childTotalFare']*$noOfChild;
							}
							if(isset($_AancillaryFare['infantTotalFare']) && !empty($_AancillaryFare['infantTotalFare']))
							{
								$ancillaryAmount += $_AancillaryFare['infantTotalFare']*$noOfInfant;
							}

							if(!empty($ancillaryAmount))
							{
								$totalAmount[$rowSelectRequestApprovedFlightDetails['airlines_request_id']]['ancillaryTotalSsrFare'] = $ancillaryAmount;
							}
						}
					}
					
					/* To get the ssr amount based the pnr instead of request master id*/
					$ssrAmount = array();
					$_IrequestMasterId = $this->_getRequestMasterId($rowSelectRequestApprovedFlightDetails['airlines_request_id']);
					$_Spnr = $this->_getPNRBlockDetails($_IrequestMasterId,$rowSelectRequestApprovedFlightDetails['request_approved_flight_id']);
				
					if($_Spnr != false)
						$ssrAmount = $this->_getSSRTotalDetailsValue(0,$_Spnr);
						
					if(empty($_ApnrArray) || !in_array($_Spnr,$_ApnrArray))
					{
						if(isset($ssrAmount) && !empty($ssrAmount) && ($ssrAmount['baggageFare'] >0 || $ssrAmount['mealsFare'] > 0))
						{
							if(isset($CFG['ssr']['instantPayment']['status']) && $CFG['ssr']['instantPayment']['status']=='Y')
							{
								if($baggageFare != 0)
								{
									if($noOfAdult!=0)
									{
										$totalAmount[$rowSelectRequestApprovedFlightDetails['airlines_request_id']]['totalfare']+=$noOfAdult*$baggageFare;
										$totalAmount[$rowSelectRequestApprovedFlightDetails['airlines_request_id']]['ssr'] += $noOfAdult*$baggageFare;
										$totalAmount[$rowSelectRequestApprovedFlightDetails['airlines_request_id']]['baggageFare'] += $noOfAdult*$baggageFare;
									}
									if($noOfChild!=0)
									{
										$totalAmount[$rowSelectRequestApprovedFlightDetails['airlines_request_id']]['totalfare']+=$noOfChild*$baggageFare;
										$totalAmount[$rowSelectRequestApprovedFlightDetails['airlines_request_id']]['ssr'] += $noOfChild*$baggageFare;
										$totalAmount[$rowSelectRequestApprovedFlightDetails['airlines_request_id']]['baggageFare'] += $noOfChild*$baggageFare;
									}
								}
								if($mealsFare != 0)
								{
									if($noOfAdult!=0)
									{
										$totalAmount[$rowSelectRequestApprovedFlightDetails['airlines_request_id']]['totalfare']+=$noOfAdult*$mealsFare;
										$totalAmount[$rowSelectRequestApprovedFlightDetails['airlines_request_id']]['ssr'] += $noOfAdult*$mealsFare;
										$totalAmount[$rowSelectRequestApprovedFlightDetails['airlines_request_id']]['mealsFare'] += $noOfAdult*$mealsFare;
									}
									if($noOfChild!=0)
									{
										$totalAmount[$rowSelectRequestApprovedFlightDetails['airlines_request_id']]['totalfare']+=$noOfChild*$mealsFare;
										$totalAmount[$rowSelectRequestApprovedFlightDetails['airlines_request_id']]['ssr'] += $noOfChild*$mealsFare;
										$totalAmount[$rowSelectRequestApprovedFlightDetails['airlines_request_id']]['mealsFare'] += $noOfChild*$mealsFare;
									}
								}
							}

							$totalAmount[$rowSelectRequestApprovedFlightDetails['airlines_request_id']]['totalfare']+=$ssrAmount['mealsFare']; 
							$totalAmount[$rowSelectRequestApprovedFlightDetails['airlines_request_id']]['totalfare']+=$ssrAmount['baggageFare']; 
							$totalAmount[$rowSelectRequestApprovedFlightDetails['airlines_request_id']]['ssr'] += $ssrAmount['mealsFare'];
							$totalAmount[$rowSelectRequestApprovedFlightDetails['airlines_request_id']]['ssr'] += $ssrAmount['baggageFare'];
							$totalAmount[$rowSelectRequestApprovedFlightDetails['airlines_request_id']]['baggageFare'] += $ssrAmount['baggageFare'];
							$totalAmount[$rowSelectRequestApprovedFlightDetails['airlines_request_id']]['mealsFare'] += $ssrAmount['mealsFare'];
							$_ApnrArray[]=$_Spnr;
						}
						else
						{
							if($baggageFare != 0)
							{
								if($noOfAdult!=0)
								{
									$totalAmount[$rowSelectRequestApprovedFlightDetails['airlines_request_id']]['totalfare']+=$noOfAdult*$baggageFare;
									$totalAmount[$rowSelectRequestApprovedFlightDetails['airlines_request_id']]['ssr'] += $noOfAdult*$baggageFare;
									$totalAmount[$rowSelectRequestApprovedFlightDetails['airlines_request_id']]['baggageFare'] += $noOfAdult*$baggageFare;
								}
								if($noOfChild!=0)
								{
									$totalAmount[$rowSelectRequestApprovedFlightDetails['airlines_request_id']]['totalfare']+=$noOfChild*$baggageFare;
									$totalAmount[$rowSelectRequestApprovedFlightDetails['airlines_request_id']]['ssr'] += $noOfChild*$baggageFare;
									$totalAmount[$rowSelectRequestApprovedFlightDetails['airlines_request_id']]['baggageFare'] += $noOfChild*$baggageFare;
								}
							}
							if($mealsFare != 0)
							{
								if($noOfAdult!=0)
								{
									$totalAmount[$rowSelectRequestApprovedFlightDetails['airlines_request_id']]['totalfare']+=$noOfAdult*$mealsFare;
									$totalAmount[$rowSelectRequestApprovedFlightDetails['airlines_request_id']]['ssr'] += $noOfAdult*$mealsFare;
									$totalAmount[$rowSelectRequestApprovedFlightDetails['airlines_request_id']]['mealsFare'] += $noOfAdult*$mealsFare;
								}
								if($noOfChild!=0)
								{
									$totalAmount[$rowSelectRequestApprovedFlightDetails['airlines_request_id']]['totalfare']+=$noOfChild*$mealsFare;
									$totalAmount[$rowSelectRequestApprovedFlightDetails['airlines_request_id']]['ssr'] += $noOfChild*$mealsFare;
									$totalAmount[$rowSelectRequestApprovedFlightDetails['airlines_request_id']]['mealsFare'] += $noOfChild*$mealsFare;
								}
							}
							// if($othersFare['adultTotalFare'] != 0 || $othersFare['childTotalFare'] != 0)
							// {
							// 	if($noOfAdult!=0)
							// 	{
							// 		$totalAmount[$rowSelectRequestApprovedFlightDetails['airlines_request_id']]['totalfare']+=$noOfAdult*$othersFare['adultTotalFare'];
							// 		$totalAmount[$rowSelectRequestApprovedFlightDetails['airlines_request_id']]['ssr'] += $noOfAdult*$othersFare['adultTotalFare'];
							// 		$totalAmount[$rowSelectRequestApprovedFlightDetails['airlines_request_id']]['otherFare'] += $noOfAdult*$othersFare['adultTotalFare'];
							// 	}
							// 	if($noOfChild!=0)
							// 	{
							// 		$totalAmount[$rowSelectRequestApprovedFlightDetails['airlines_request_id']]['totalfare']+=$noOfChild*$othersFare['childTotalFare'];
							// 		$totalAmount[$rowSelectRequestApprovedFlightDetails['airlines_request_id']]['ssr'] += $noOfChild*$othersFare['childTotalFare'];
							// 		$totalAmount[$rowSelectRequestApprovedFlightDetails['airlines_request_id']]['otherFare'] += $noOfChild*$othersFare['childTotalFare'];
							// 	}
							// }
						}
					}
					if($tigerConnectFare != 0)
					{
						if($noOfAdult!=0)
						{
							$totalAmount[$rowSelectRequestApprovedFlightDetails['airlines_request_id']]['totalfare']+=$noOfAdult*$tigerConnectFare;
							$totalAmount[$rowSelectRequestApprovedFlightDetails['airlines_request_id']]['tigerCon'] += $noOfAdult*$tigerConnectFare;
						}
						if($noOfChild!=0)
						{
							$totalAmount[$rowSelectRequestApprovedFlightDetails['airlines_request_id']]['totalfare']+=$noOfChild*$tigerConnectFare;
							$totalAmount[$rowSelectRequestApprovedFlightDetails['airlines_request_id']]['tigerCon'] += $noOfChild*$tigerConnectFare;
						}
					}
				}
			}
			if($returnSingleArr)
				$totalAmount = $totalAmount[$airlinesRequestId];
		}
		return  $totalAmount;
	}
	function _getAncillaryInformation($ancillary)
	{
		global $CFG;
		$_AancillaryArray =[];
		$_IchildAncillaryFare=0;
		$_IadultAncillaryFare=0;
		$_IinfantAncillaryFare=0;
		$_AchildSsrCode=[];
		$_AadultSsrCode=[];
		// Unset the ancillaries which are no need to show in accept page
		if($CFG["site"]["specialFareTypes"]["status"] == "Y"){
			// if its a instalment payment, then don't consider special baggage code
			if($CFG["site"]["SpecialFareInstallment"]["status"] == 'Y'){
				$specialBaggages = $CFG["site"]["specialFareTypes"]["specialBaggage"];
			}
			// If its a light fare, then need to consider
			if(isset($CFG["site"]["specialFareTypes"]["bundleSSR"]["fare"]) && !empty($CFG["site"]["specialFareTypes"]["bundleSSR"]["fare"])){
				$ancillaryFares = $CFG["site"]["specialFareTypes"]["bundleSSR"]["fare"];
				$specialBaggages = [];
				foreach($ancillaryFares as $fareType=>$ancillaryCodes){
					$specialBaggages = array_merge($specialBaggages,$ancillaryCodes);
				}
			}
			foreach($ancillary as $paxType=>$otherAncilary){
				foreach($otherAncilary as $code=>$fare){
					if(in_array($code, (array)$specialBaggages)){
						unset($ancillary[$paxType][$code]);
					}
				}
			}
		}
		if(isset($CFG["processPage"]["taxFeeConfig"]) && $CFG["processPage"]["taxFeeConfig"]["enableTransactionFee"] =="Y" && !empty($CFG["processPage"]["taxFeeConfig"]["taxFeeCode"]))
		{
			$_ATaxFeeCodes =$CFG["processPage"]["taxFeeConfig"]["taxFeeCode"];
			foreach($ancillary as $paxType=>$otherAncilary){
				foreach($otherAncilary as $code=>$fare){
					if(in_array($code, (array)$_ATaxFeeCodes)){
						unset($ancillary[$paxType][$code]);
					}
				}
			}
		}
		
		if(!empty($ancillary))
		{
			$_AadultSsrAmount =array_values($ancillary['ADT']);
			if(!empty($_AadultSsrAmount))
				$_IadultAncillaryFare=array_sum($_AadultSsrAmount);
			//child ancillary fare	
			$_AchildSsrAmount =array_values($ancillary['CHD']);
			if(!empty($_AchildSsrAmount))
				$_IchildAncillaryFare=array_sum($_AchildSsrAmount);
			//infant ancillary fare
			$_AinfantSsrAmount =array_values($ancillary['INF']);
			if(!empty($_AinfantSsrAmount))
				$_IinfantAncillaryFare=array_sum($_AinfantSsrAmount);
			if(!empty($ancillary['ADT']))	
				$_AadultSsrCode= array_keys($ancillary['ADT']);
			if(!empty($ancillary['CHD']))
				$_AchildSsrCode= array_keys($ancillary['CHD']);
		}
		$_AancillaryArray['ancillaryTotalFare']=$_IadultAncillaryFare+$_IchildAncillaryFare+$_IinfantAncillaryFare;
		$_AancillaryArray['adultTotalFare']=$_IadultAncillaryFare;
		$_AancillaryArray['childTotalFare']=$_IchildAncillaryFare;
		$_AancillaryArray['infantTotalFare']=$_IinfantAncillaryFare;
		$_AancillaryArray['ancillaryCode']=array_merge($_AadultSsrCode,$_AchildSsrCode);
		return $_AancillaryArray;
	}

	function _changeGroupRequestFormat($requestMasterId,$requestPrefix="")
	{
		
		if($requestPrefix=="")
			$requestPrefix = ($this->_Osmarty->getConfigVars('COMMON_GR')!='') ? $this->_Osmarty->getConfigVars('COMMON_GR'):'GRP';
		$showGroupId="00000";
		$showGroupRequestId=$requestMasterId;
		$showGroupRequestIdCount=strlen($showGroupRequestId);	
		#$groupRequestId=$this->_Osmarty->getConfigVars('COMMON_GR').substr($showGroupId,$showGroupRequestIdCount).$requestMasterId;
		$groupRequestId=$requestPrefix.substr($showGroupId,$showGroupRequestIdCount).$requestMasterId;
		return $groupRequestId;
	}
	function _getEmailGroupRequestDetails($requestMasterId,$seriesRequestId=0,$modifyRequest='N')
	{
		global $CFG;
		$requestLevelHorizonStatus='N';
		$horizoneScheduleCount=0;
		$horizonStatus='N';
		
		//getting the common informations
		$emailGRDetails=array();
		$emailGRDetails=$this->_getCommonDetailsForSectorMail($requestMasterId,$modifyRequest);
		//getting the mapped series request details
		$_AseriesGroupDetails=array();
		if($seriesRequestId!=0)
			$_AseriesGroupDetails=$this->_getSeriesRequestId($requestMasterId,$seriesRequestId,'Y');

		$i=0;
		foreach($emailGRDetails['requestDetails'] as $rd)
		{
			if($modifyRequest=="N")
			{	
				if(isset($_AseriesGroupDetails[$i]["series_request_id"]))
					$_IseriesRequestId=$_AseriesGroupDetails[$i]["series_request_id"];
				else
					$_IseriesRequestId="";

				$emailGRDetails['requestDetails'][$i]['seriesRequestDetails']=$this->_getSeriesRequestDetails($_IseriesRequestId,$rd['request_id']);	
				$_AfocPax = json_decode($emailGRDetails['requestDetails'][$i]['seriesRequestDetails'][0]['foc_pax'],1);
				if(is_array($_AfocPax))				
					$emailGRDetails['requestDetails'][$i]['seriesRequestDetails'][0]['number_of_foc'] = ($_AfocPax['edited']>0)?$_AfocPax['edited']:$_AfocPax['requested'];		
				else
					$emailGRDetails['requestDetails'][$i]['seriesRequestDetails'][0]['number_of_foc'] = $_AfocPax;
					$emailGRDetails['requestDetails'][$i]['seriesRequestDetails'][0]['number_of_passenger'] +=$emailGRDetails['requestDetails'][$i]['seriesRequestDetails'][0]['number_of_foc'];
				if($emailGRDetails['requestDetails'][$i]['seriesRequestDetails'])
				{
					$_Spnr = $this->_getParentGroupPNR($emailGRDetails['requestDetails'][$i]['seriesRequestDetails'][0]['series_request_id']);
					$emailGRDetails['requestDetails'][$i]['seriesRequestDetails'][0]['pnr']=$_Spnr;
				}
			}
			else
			{
				$seriesRequeststatus="N";
				$emailGRDetails['requestDetails'][$i]['seriesRequestDetails']=$this->_getRequestSeriesRequestHistory($rd['request_details_history_id']);
				if($rd['request_id']==0)
				{
					$emailGRDetails['requestDetails'][$i]['request_id']=$rd['request_details_history_id'];
					$seriesRequeststatus="Y";
				}
			}
			$s=0;
				
			foreach($emailGRDetails['requestDetails'][$i]['seriesRequestDetails'] as $series)
			{	//To highlight horizon status in accept flight itinerary view
				if($CFG["settings"]["outOfHorizon"]['maskFlightNumber']=='Y'){
					$horizonStatus = $this->_checkHorizonRequest($requestMasterId,$series['series_request_id']);
					if($horizonStatus=='Y')
						$requestLevelHorizonStatus='Y';
						 
					if($modifyRequest=="Y" && $horizonStatus=='S'){
						$horizoneScheduleCount++;
					}	
					$emailGRDetails['requestDetails'][$i]['seriesRequestDetails'][$s]['horizonStatus']=$horizonStatus;
				}
				//storing the mapped series_request_id against series_request_id
				$emailGRDetails['mappedSeriesRequestId'][$series['series_request_id']]=$series['mapped_series_request_id'];
				
				/* Modified by Subalakshmi S 09-07-2018
				 To show the cabin name in the tender mail*/
				if(isset($CFG['site']['tenderRequest']) && $CFG['site']['tenderRequest']=='Y')
				{
					$_AcabinDetails = $this->_getCabinDetails($emailGRDetails['requestDetails'][$i]['seriesRequestDetails'][$s]['cabin'],'Y');
					$emailGRDetails['requestDetails'][$i]['seriesRequestDetails'][$s]['cabin']= $_AcabinDetails[$emailGRDetails['requestDetails'][$i]['seriesRequestDetails'][$s]['cabin']]['cabin_name'];
				}
				if($seriesRequeststatus=="Y")
					$emailGRDetails['requestDetails'][$i]['seriesRequestDetails'][$s]['request_id']=$series['request_details_history_id'];
				$emailGRDetails['requestDetails'][$i]['seriesRequestDetails'][$s]['expected_fare']=$this->_getRoundOffFare($series['expected_fare'],2,"displayFare");
				$_AfocValue['foc_pax'] = json_decode($series['foc_pax'],1);
				$emailGRDetails['requestDetails'][$i]['seriesRequestDetails'][$s]['focPax'] = ($_AfocValue['foc_pax']['edited']==0)?$_AfocValue['foc_pax']['requested']:$_AfocValue['foc_pax']['edited'];	

				$mealSql="SELECT 
							meal_description
						FROM 
							".$CFG['db']['tbl']['meal_code_details']."
						WHERE 
							meal_code='".$series['meals_code']."'";
												
				if(DB::isError($resultMeal=$this->_Oconnection->query($mealSql)))
				{
					fileWrite($mealSql,"SqlError","a+");
					return false;
				}
				$separateFlightTotal=array();
				$separateFlightAdultBaseFare=array();
				if($resultMeal->numRows() >0)
				{	
					$row=$resultMeal->fetchRow(DB_FETCHMODE_ASSOC);
					$emailGRDetails['requestDetails'][$i]['seriesRequestDetails'][$s]['meals_code']=$row['meal_description'];
				}
				$s++;
			}
			$i++;	
		}
		$testArray=array();
		//To display the sector details based on group in series request mails
		if(($emailGRDetails['request_type'] == "series") || ($emailGRDetails['request_type'] == "conference") || ($emailGRDetails['request_type']=="flexible"))
		{
			foreach($emailGRDetails['requestDetails'] as $values)
			{
				$sectorArray[$values['request_id']]['sector']=$values['origin_airport_code'].' - '.$values['dest_airport_code'];
				$sectorArray[$values['request_id']]['origin']=$values['origin_airport_code'];
				$sectorArray[$values['request_id']]['destination']=$values['dest_airport_code'];
				foreach($values['seriesRequestDetails'] as $subValues)
				{
					/*Add trip type in test array for the conference request
					 *The sector details not display due to combination of the trip type*/
					$subValues['trip_type']=$values['trip_type'];
					$testArray[]=$subValues;
					
				}
				
			}
			/*Order the request approved flight details based on series request id 
			  for group the sector details into respective groups*/		
			$testArrayOrderBy=array();			
			if($modifyRequest=='N')
				$testArrayOrderBy = array("inputArray"=>$testArray,"fieldName"=>"series_request_id","fieldType"=>"NUMBER","orderType"=>"ASC");
			else
				$testArrayOrderBy = array("inputArray"=>$testArray,"fieldName"=>"request_details_history_id","fieldType"=>"NUMBER","orderType"=>"ASC");
			$testArray = $this->_dynamicSortFunction($testArrayOrderBy);
			
			/*Prepare the array for the grouping the sector details*/
			$testArrayValues=$this->_sectorGroupDetails($testArray,$emailGRDetails,$seriesRequestId,$modifyRequest);

			foreach($testArrayValues as $key=>$values)
			{
				foreach($values as $subKey=>$subValues)
				{
					$testArrayValues[$key][$subKey]['sector']=$sectorArray[$subValues['request_id']]['sector'];
					$testArrayValues[$key][$subKey]['origin']=$sectorArray[$subValues['request_id']]['origin'];
					$testArrayValues[$key][$subKey]['destination']=$sectorArray[$subValues['request_id']]['destination'];
				}
			}
			$emailGRDetails['seriesRequestDetailsEmail']=$testArrayValues;
		}	
		if($CFG["settings"]["outOfHorizon"]['maskFlightNumber']=='Y'){
			if($horizoneScheduleCount>0)
				$requestLevelHorizonStatus='S';
		}
		//To display request level horizon status in accept page
		$emailGRDetails['requestLevelHorizonStatus'] = $requestLevelHorizonStatus;
		return $emailGRDetails;		
	}
	function _getSinglePnr($IrequestMasterId,$seriesRequestId)
	{

		global $CFG;

		if($IrequestMasterId == 0 || $IrequestMasterId == '' || $seriesRequestId == 0 || $seriesRequestId == '')
			return false;

		$sql="SELECT 
					DISTINCT pbd.pnr	
		      FROM 
				".$CFG['db']['tbl']['pnr_blocking_details']." pbd,
				".$CFG['db']['tbl']['request_approved_flight_details']." rafd,
				".$CFG['db']['tbl']['series_request_details']." srd
		      WHERE 
				pbd.request_master_id =".$IrequestMasterId." AND 
				pbd.request_approved_flight_id=rafd.request_approved_flight_id AND 
				rafd.series_request_id=srd.series_request_id";
		if(DB::isError($pnr=$this->_Oconnection->query($sql)))
		{
			fileWrite($sql,"SqlError","a+");
			return false;
		}
		
		if($pnr->numRows() >0)
		{
			$pnrDetails = $pnr->fetchRow(DB_FETCHMODE_ASSOC);
			
			return $pnrDetails['pnr'];								
		}
		
		return false;
	}
	function _getFlightControllerDetail($corporateId,$groupType)
	{
		global $CFG;
		$condition="";
		$condition.=" AND ud.group_id=15 ";
		$sql="SELECT 
					ud.user_id,
					ud.group_id,
					".encrypt::_decrypt('ud.title')." AS title,
					".encrypt::_decrypt('ud.first_name')." AS first_name,
					".encrypt::_decrypt('ud.last_name')." AS last_name, 
					".encrypt::_decrypt('ud.email_id')." AS email_id,
					".encrypt::_decrypt('ud.user_address')." AS user_address,
					".encrypt::_decrypt('ud.phone_number')." AS phone_number
				FROM 
					".$CFG['db']['tbl']['user_details']." ud,
					".$CFG['db']['tbl']['corporate_details']." cd
				WHERE 

					cd.corporate_id=".$corporateId.$condition;
		return $this->_executeQuery($sql);	
			
	}

	function _fetchUserDetails($requestMasterId,$iata="N")
	{
		global $CFG;
		$sqlselect=" 
			ud.user_id,
			ud.corporate_id,
			ud.group_id,
			ud.city_id AS city_id,
			".encrypt::_decrypt('ud.title')." AS title,
			".encrypt::_decrypt('ud.first_name')." AS first_name,
			".encrypt::_decrypt('ud.last_name')." AS last_name, 
			".encrypt::_decrypt('ud.email_id')." AS email_id,
			".encrypt::_decrypt('ud.user_address')." AS user_address,
			".encrypt::_decrypt('ud.phone_number')." AS phone_number,
			".encrypt::_decrypt('ud.country_code')." AS country_code,
			rm.user_currency";
		$sqltable=
			" ".$CFG['db']['tbl']['user_details']." ud,
			".$CFG['db']['tbl']['request_master']." rm";
		$sqlcondition=
			" rm.request_master_id = ".$requestMasterId." and
			ud.user_id = rm.user_id" ;
			
		if($iata="Y")
		{
			$sqlselect.=" ,".encrypt::_decrypt('cd.iata_code')." AS iata_code,".encrypt::_decrypt('cd.pos_code')." AS pos_code";
			$sqltable.=" ,".$CFG['db']['tbl']['corporate_details']." cd";
			$sqlcondition.=" AND cd.corporate_id=ud.corporate_id ";
		}
		$sql="SELECT".$sqlselect." FROM ".$sqltable." WHERE ".$sqlcondition;
		
		$userResult= $this->_executeQuery($sql);
		return $userResult;
	}




	function _getFlightControllerSectorDetail($corporateId,$_AuserIdDetails,$origin,$destination)
	{
		//To send mail to flight controller even the viewSectorBasedRequest config disabled 
		return $this->_getMappingDetailsBasedOnGroupId($corporateId,15,$origin,$destination,$_AuserIdDetails);	
	}
	function _getFinanceUserSectorDetail($corporateId,$_AuserIdDetails,$origin,$destination)
	{
		return $this->_getMappingDetailsBasedOnGroupId($corporateId,7,$origin,$destination,$_AuserIdDetails);	
	}
	public function _getUserInformation($_IcorporateId,$_IgroupId,$_AuserIdDetails)
	{
		global $CFG;
		if(empty($_IcorporateId)|| empty($_IgroupId))
			return false;

		//Checks from static array
		$_Svar = $_IcorporateId.'_'.$_IgroupId;
		$_AstaticData = $this->_staticData("_getUserInformation",$_Svar);
		if($_AstaticData !== false)
			return $_AstaticData;

		$sql="SELECT  
					ud.user_id,
					ud.group_id,
					".encrypt::_decrypt('ud.title')." AS title,
					".encrypt::_decrypt('ud.first_name')." AS first_name,
					".encrypt::_decrypt('ud.last_name')." AS last_name,
					".encrypt::_decrypt('ud.email_id')." AS email_id,
					".encrypt::_decrypt('ud.user_address')." AS user_address,
					".encrypt::_decrypt('ud.phone_number')."  AS phone_number
			 FROM
					".$CFG['db']['tbl']['corporate_details']." cd , 
					".$CFG['db']['tbl']['pos_user_mapping']." pum , 
					".$CFG['db']['tbl']['user_details']." ud 
			WHERE   
					cd.corporate_id='".$_IcorporateId."' AND
					(IF(".$_AuserIdDetails['group_id']."!=4 OR (".encrypt::_decrypt('cd.pos_code'). "!= NULL OR ".encrypt::_decrypt('cd.pos_code'). " != ''),".encrypt::_decrypt('cd.pos_code').",(select cm.pos_code from city_master cm,user_details ud where ud.city_id=cm.city_id and ud.user_id=".$_AuserIdDetails['user_id']." limit 1)) =pum.pos_code OR pum.pos_code='ALL') AND

					pum.user_id=ud.user_id AND
					pum.active_status='Y' AND
					ud.approved_status='Y' AND 
					ud.email_verification_status='Y' AND 
					ud.group_id=".$_IgroupId;
		$_AuserDetails = $this->_executeQuery($sql);
		//Stores the array in static value
		$this->_staticData('_getUserInformation',$_Svar,$_AuserDetails);
		return $_AuserDetails;

	}	
	function _getFligthInformationEmail($requestMasterId,$transactionMasterId,$modifyRequest="N",$pnr='')
	{
		fileRequire("dataModels/class.requestDetails.php");
		fileRequire("dataModels/class.transactionMaster.php");
		fileRequire("dataModels/class.fareValidityTypeDetails.php");
		fileRequire("dataModels/class.requestApprovedFlightDetails.php");
		fileRequire("dataModels/class.viaFlightDetails.php");
		fileRequire("dataModels/class.paymentRequestDetails.php");
		global $CFG;
		if($modifyRequest=="Y")
		{
			fileRequire("dataModels/class.seriesRequestDetailsHistory.php");
			$_OseriesRequestDetailsHistory=new seriesRequestDetailsHistory();
		}
		$requestLevelHorizonStatus="N";
		/* While sending email for accept response, all approved flight details are displayed 
		 * to avoid this fare acceptance id is considered */
		$_IfareAcceptanceId = 0;
		$_IadultTotalBF = 0;$_IadultTotaltax = 0;
		$_IchildTotalBF = 0;$_IchildTotaltax = 0;
		$_IinfantTotalBF = 0;$_IinfantTotaltax = 0;
		$_IadultTotalIP = 0;$_IadultTotaltaxIP = 0;
		$_IchildTotalIP = 0;$_IchildTotaltaxIP = 0;
		$_IinfantTotalIP = 0;$_IinfantTotaltaxIP = 0;
		$flight['alternate_flight']=0;
		//getting the sector details of the request
		$flight= $this->_getEmailGroupRequestDetails($requestMasterId,0,$modifyRequest);
		$_IfareAcceptanceId = $flight['fare_acceptance_transaction_id'];
		
		//For New request transaction master ID not exists
		if($transactionMasterId == 0)
			return $flight;
		$objTransactionMaster=new transactionMaster();
		$objTransactionMaster->_Oconnection=$this->_Oconnection;
		$objTransactionMaster->_ItransactionId=$transactionMasterId;
		
		/* Coded by Ganesan.S on 03-05-2018
		   Get payment validity date for each payment percentage to show in accept mail */
		$_OpaymentRequestDetails= new paymentRequestDetails();
		$_OpaymentRequestDetails->_Oconnection=$this->_Oconnection;
		$_OpaymentRequestDetails->_ItransactionId=$transactionMasterId;
		$flight['paymentRequestDetails']=$_OpaymentRequestDetails->_selectPaymentRequestDetails();
		/*getting the validities*/
		$flight['validity_details']=$this->_getValidityDetails($requestMasterId);
		$flight['transactionMaster']=$objTransactionMaster->_selectTransactionMaster();
		$flight['transactionMaster'][0]['fare_expiry_date'] = $this->_getUserDateFormatValue($flight['transactionMaster'][0]['fare_expiry_date']);
		$flight['transactionMaster'][0]['payment_expiry_date'] = $this->_getUserDateFormatValue($flight['transactionMaster'][0]['payment_expiry_date']);
		$flight['transactionMaster'][0]['passenger_expiry_date'] = $this->_getUserDateFormatValue($flight['transactionMaster'][0]['passenger_expiry_date']);
		if(isset($flight['transactionMaster'][0]))
			$flight['transactionMaster']=$flight['transactionMaster'][0];
		$objFareValidity=new fareValidityTypeDetails();
		$objFareValidity->_Oconnection=$this->_Oconnection;
		$objFareValidity->_IfareValidityTypeId=$flight['transactionMaster']['fare_validity_type_id'];
		$objFareValidity->_selectFareValidityTypeDetails();
		$fareTypeValue=$objFareValidity->_SfareValidityValues;
		$fareExpiryDate=date('Y-m-d H:i:s',strtotime("+".$flight['transactionMaster']['fare_validity']." ".$objFareValidity->_SfareValidityValues,strtotime($this->_getUTCDateValue())));
		$flight['transactionMaster']['showFareTypeValue']=$objFareValidity->_SfareValidityType;
		$flight['transactionMaster']['fareExpiryDate']=$fareExpiryDate;
		/* Author		: Madhan (2018-Jan-10 12:45 PM IST)
		 * Description	: Get Request Approved flight Id to get the correct flight itinerary information for provided PNR alerts
		 */
		$requestApprovedFlightIdString='';
		if($pnr!='')
		{
			if(is_array($pnr))
				$pnr=implode("','",$pnr);

			$_Scond = '';

			if(!empty($requestMasterId))
			{
				$_Scond = " AND request_master_id = ".$requestMasterId;
			}
				
			$_Ssql= "SELECT  request_approved_flight_id FROM ".$CFG['db']['tbl']['pnr_blocking_details']." 
			       WHERE pnr IN('".$pnr."')".$_Scond;
			 
			if(DB::isError($result = $this->_Oconnection->query($_Ssql)))
			{
				fileWrite($_Ssql,"SqlError","a+");
				return false;
			}
			$requestApprovedFlightIdArray=array();
			while($row=$result->fetchRow(DB_FETCHMODE_ASSOC))
			{
				$requestApprovedFlightIdArray[]=$row['request_approved_flight_id'];
			}    
			$requestApprovedFlightIdString=implode(",",$requestApprovedFlightIdArray);
		}
		/*End Get Request Approved flight Id to get the correct flight itinerary information for provided PNR*/
		$objRequestApprovedFlightDetails=new requestApprovedFlightDetails();
		$objRequestApprovedFlightDetails->_Oconnection=$this->_Oconnection;
		$objRequestApprovedFlightDetails->_ItransactionMasterId=$transactionMasterId;
		/* When the Request Approved flight Id is available to get the correct flight itinerary information for the given PNR */
		if($requestApprovedFlightIdString!='')
		{
			$objRequestApprovedFlightDetails->_IrequestApprovedFlightId=$requestApprovedFlightIdString;
			$objRequestApprovedFlightDetails->_INcondition='IN';
		}
		if($_IfareAcceptanceId !=0)
			$objRequestApprovedFlightDetails->_SacceptedFlightStatus = 'Y';
		$_ArequestApprovedFlightDetails=$objRequestApprovedFlightDetails->_selectRequestApprovedFlightDetails();
		/*Order the request approved flight details based on request id and series request id for group the flight details into reapective groups*/		
		$requestApprovedFlightDetailsOrderBy = array("inputArray"=>$_ArequestApprovedFlightDetails,"firstFieldName"=>"request_id","firstFieldOrder"=>"ASC","secondFieldName"=>"series_request_id","secondFieldOrder"=>"ASC");
		$flight['flightDetails'] =  $this->_multipleSortFunction($requestApprovedFlightDetailsOrderBy);
		$objViaFlightDetails=new viaFlightDetails();
		
		$i=0;
		global $CFG;		
	    foreach($flight['flightDetails'] as $rafd)
		{
			$_ArequestApprovedFareDetails=$this->_getRequestApprovedFareDetails($rafd['request_approved_flight_id']);
			/*To display the accepted flight number in mail content*/
			if(isset($flight['requestDetails'][$i]))
				$flight['requestDetails'][$i]['flight_number']=$rafd['flight_number'];
			//check for horizon request
			$horizonStatus = $this->_checkHorizonRequest($requestMasterId,$rafd['series_request_id']);
			 
			if($modifyRequest=="N")
			{
				//skip duplicate query execution
				if(!isset($_AwholeSeriesRequestDetails[$rafd['series_request_id']]))
					$_AwholeSeriesRequestDetails[$rafd['series_request_id']]=$this->_getSeriesRequestDetails($rafd['series_request_id'])[0];
				$_AseriesRequestDetails=$_AwholeSeriesRequestDetails[$rafd['series_request_id']];
			}
			else
			{
					if($rafd['request_id']==0)
						$flight['flightDetails'][$i]['request_id']=$rafd['request_details_history_id'];
					//series modify partial approval flow
					if($rafd['series_request_history_id']==0)
					{
						//skip duplicate query execution
						if(!isset($_AwholeSeriesRequestDetails[$rafd['series_request_id']]))
							$_AwholeSeriesRequestDetails[$rafd['series_request_id']]=$this->_getSeriesRequestDetails($rafd['series_request_id'])[0];
						$_AseriesRequestDetails=$_AwholeSeriesRequestDetails[$rafd['series_request_id']];
					}
					else
					{
						//skip duplicate query execution
						if(!isset($_AwholeSeriesRequestHistory[$rafd['series_request_history_id']]))
						{
							$_OseriesRequestDetailsHistory->__construct();
							$_OseriesRequestDetailsHistory->_Oconnection=$this->_Oconnection;
							$_OseriesRequestDetailsHistory->_IseriesRequestHistoryId=$rafd['series_request_history_id'];
							$_AwholeSeriesRequestHistory[$rafd['series_request_history_id']]=$_OseriesRequestDetailsHistory->_selectSeriesRequestDetailsHistory()[0];
						}
						$_AseriesRequestDetails=$_AwholeSeriesRequestHistory[$rafd['series_request_history_id']];
					}
			}
			$flight['flightDetails'][$i]['numberOfPassenger']=$_AseriesRequestDetails['number_of_adult']+$_AseriesRequestDetails['number_of_child']+$_AseriesRequestDetails['number_of_infant'];
			$flight['flightDetails'][$i]['numberOfAdult']=$_AseriesRequestDetails['number_of_adult'];
			$flight['flightDetails'][$i]['cabin']=$_AseriesRequestDetails['cabin'];
			$flight['flightDetails'][$i]['cabin_name']=$this->_getCabinDetails($_AseriesRequestDetails['cabin'],'Y')[$_AseriesRequestDetails['cabin']]['cabin_name'];
			$flight['flightDetails'][$i]['baggage_name'] = $this->_Osmarty->getConfigVars('COMMON_BAGGAGE_'.$flight['flightDetails'][$i]['baggage_code']);
			$flight['flightDetails'][$i]['meals_name'] = $this->_getMealDescription($flight['flightDetails'][$i]['meals_code']);
			$flight['flightDetails'][$i]['numberOfChild']=$_AseriesRequestDetails['number_of_child'];
			$flight['flightDetails'][$i]['numberOfInfant']=$_AseriesRequestDetails['number_of_infant'];
			$flight['flightDetails'][$i]['seriesGroudId']=$_AseriesRequestDetails['series_group_id'];
			$flight['flightDetails'][$i]['mapped_series_request_id']=$_AseriesRequestDetails['mapped_series_request_id'];
			$_AfocValue['foc_pax'] = json_decode($_AseriesRequestDetails['foc_pax'],1);
			$flight['flightDetails'][$i]['numberOfFoc'] = $flight['flightDetails'][$i]['focPax'] = ($_AfocValue['foc_pax']['edited']==0)?$_AfocValue['foc_pax']['requested']:$_AfocValue['foc_pax']['edited'];	
			/*For alternate option given flights*/
			if($rafd['request_option_id'] > 0){
				$flight['flightDetails'][$i]['numberOfPassenger']=$rafd['no_of_adult']+$rafd['no_of_child']+$rafd['no_of_infant'];
				$flight['flightDetails'][$i]['numberOfAdult']=$rafd['no_of_adult'];
				$flight['flightDetails'][$i]['numberOfChild']=$rafd['no_of_child'];
				$flight['flightDetails'][$i]['numberOfInfant']=$rafd['no_of_infant'];
				$flight['flightDetails'][$i]['focPax']=$rafd['free_cost_count'];
			}
			//$flight['flightDetails'][$i]['adultTotalAmountWithMeal']=$rafd['base_fare']+$rafd['tax']+$rafd['baggauge_fare']+$rafd['meals_fare'];
			$_AfareDetails=json_decode($_ArequestApprovedFareDetails['approved_fare'],1);
			$_AtaxDetails=json_decode($_ArequestApprovedFareDetails['approved_tax'],1);
			//Only the Basefare is sned as total amount in mails 
			if($CFG['site']['totalFareDisplay'] =='BF')
			{
				$flight['flightDetails'][$i]['adultTotalAmount']=$this->_getRoundOffFare($rafd['base_fare'],2,"displayFare");
				$flight['flightDetails'][$i]['childTotalAmount']=$this->_getRoundOffFare($rafd['child_base_fare'],2,"displayFare");
				$flight['flightDetails'][$i]['infantTotalAmount']=$this->_getRoundOffFare($rafd['infant_base_fare'],2,"displayFare");
				$flight['flightDetails'][$i]['adultIPTotalAmount']=$this->_getRoundOffFare($_AfareDetails['ADT'],2,"displayFare");
				$flight['flightDetails'][$i]['childIPTotalAmount']=$this->_getRoundOffFare($_AfareDetails['CHD'],2,"displayFare");
				$flight['flightDetails'][$i]['infantIPTotalAmount']=$this->_getRoundOffFare($_AfareDetails['INF'],2,"displayFare");
				$flight['flightDetails'][$i]['focTotalAmount']=$this->_getRoundOffFare($rafd['foc_base_fare'],2,"displayFare");
				//If policy is not applied then both base fare and instant fare will be same so in mail both fare will be visible to avoid that we have to check this condition
				if($flight['flightDetails'][$i]['adultTotalAmount'] ==  $flight['flightDetails'][$i]['adultIPTotalAmount'])
				{
					$flight['flightDetails'][$i]['adultIPTotalAmount'] = 0;
					$flight['flightDetails'][$i]['childIPTotalAmount'] = 0;
					$flight['flightDetails'][$i]['infantIPTotalAmount'] = 0;
				}

			}
			//Basefare+YQ amount  is sned as total amount in mails 
			elseif($CFG['site']['totalFareDisplay'] =='BFYQ')
			{
				//To get Bsefare+YQ amount for adult
				$yqTax='';
				$yqTaxIP='';
				$yqTax=$this->_getYqTaxByTaxbreakup($rafd['tax_breakup']);
				$flight['flightDetails'][$i]['adultTotalAmount']=$this->_getRoundOffFare($rafd['base_fare']+$yqTax,2,"displayFare");
				$yqTaxIP=$this->_getYqTaxByTaxbreakup($_AtaxDetails['taxBreakUp']['ADT']);
				$flight['flightDetails'][$i]['adultIPTotalAmount']=$this->_getRoundOffFare($_AfareDetails['ADT']+$yqTaxIP,2,"displayFare");
								
				//To get Bsefare+YQ amount for child
				$childYqTax='';
				$childYqTaxIP='';
				$childYqTax=$this->_getYqTaxByTaxbreakup($_AfareDetails['child_tax_breakup']);
				$flight['flightDetails'][$i]['childTotalAmount']=$this->_getRoundOffFare($rafd['child_base_fare']+$childYqTax,2,"displayFare");
				$childYqTaxIP=$this->_getYqTaxByTaxbreakup($_AtaxDetails['taxBreakUp']['CHD']);
				$flight['flightDetails'][$i]['childIPTotalAmount']=$this->_getRoundOffFare($_AfareDetails['CHD']+$childYqTaxIP,2,"displayFare");
				
				//To get Bsefare+YQ amount for infant
				$infantYqTax='';
				$infantYqTaxIP='';
				$infantYqTax=$this->_getYqTaxByTaxbreakup($rafd['infant_tax_breakup']);
				$flight['flightDetails'][$i]['infantTotalAmount']=$this->_getRoundOffFare($rafd['infant_base_fare']+$infantYqTax,2,"displayFare");
				$infantYqTaxIP=$this->_getYqTaxByTaxbreakup($_AtaxDetails['taxBreakUp']['INF']);
				$flight['flightDetails'][$i]['infantIPTotalAmount']=$this->_getRoundOffFare($_AfareDetails['INF']+$infantYqTaxIP,2,"displayFare");
				//If policy is not applied then both base fare and instant fare will be same so in mail both fare will be visible to avoid that we have to check this condition
				if($flight['flightDetails'][$i]['adultTotalAmount'] ==  $flight['flightDetails'][$i]['adultIPTotalAmount'])
				{
					$flight['flightDetails'][$i]['adultIPTotalAmount'] = 0;
					$flight['flightDetails'][$i]['childIPTotalAmount'] = 0;
					$flight['flightDetails'][$i]['infantIPTotalAmount'] = 0;
				}
				$focYqTax='';
				$focYqTax=$this->_getYqTaxByTaxbreakup($rafd['foc_tax_breakup']);
				$flight['flightDetails'][$i]['focTotalAmount']=$this->_getRoundOffFare($rafd['foc_base_fare']+$focYqTax,2,"displayFare");
				
			}
			else
			{
				$_AancillaryFare = $this->_getAncillaryInformation($rafd['ancillary_fare_array']);
				$flight['flightDetails'][$i]['adultTotalAmount']=$this->_getRoundOffFare($rafd['base_fare']+$rafd['tax']+$rafd['baggauge_fare']+$rafd['meals_fare']+$rafd['tiger_connect_fare']+$_AancillaryFare['adultTotalFare'],2,"displayFare");
				//$flight['flightDetails'][$i]['childTotalAmountWithMeal']=$rafd['child_base_fare']+$rafd['child_tax']+$rafd['baggauge_fare']+$rafd['meals_fare'];
				$flight['flightDetails'][$i]['childTotalAmount']=$this->_getRoundOffFare($rafd['child_base_fare']+$rafd['child_tax']+$rafd['baggauge_fare']+$rafd['meals_fare']+$rafd['tiger_connect_fare'],2,"displayFare");
				$flight['flightDetails'][$i]['ancillaryCharges']=$this->_getRoundOffFare($rafd['baggauge_fare']+$rafd['meals_fare']+$rafd['tiger_connect_fare'],2,"displayFare");
				$flight['flightDetails'][$i]['infantTotalAmount']=$this->_getRoundOffFare($rafd['infant_base_fare']+$rafd['infant_tax'],2,"displayFare");
				$flight['flightDetails'][$i]['adultIPTotalAmount']=$this->_getRoundOffFare($_AfareDetails['ADT']+$_AtaxDetails['ADT'],2,"displayFare");
				$flight['flightDetails'][$i]['childIPTotalAmount']=$this->_getRoundOffFare($_AfareDetails['CHD']+$_AtaxDetails['CHD'],2,"displayFare");
				$flight['flightDetails'][$i]['infantIPTotalAmount']=$this->_getRoundOffFare($_AfareDetails['INF']+$_AtaxDetails['INF'],2,"displayFare");
				//If policy is not applied then both base fare and instant fare will be same so in mail both fare will be visible to avoid that we have to check this condition
				if($flight['flightDetails'][$i]['adultTotalAmount'] ==  $flight['flightDetails'][$i]['adultIPTotalAmount'])
				{
					$flight['flightDetails'][$i]['adultIPTotalAmount'] = 0;
					$flight['flightDetails'][$i]['childIPTotalAmount'] = 0;
					$flight['flightDetails'][$i]['infantIPTotalAmount'] = 0;
				}
				$flight['flightDetails'][$i]['focTotalAmount']=$this->_getRoundOffFare($rafd['foc_base_fare']+$rafd['foc_tax'],2,"displayFare");
			}
			$_IadultTotalBF += $rafd['base_fare'];
			$_IadultTotaltax += $rafd['tax'];
			$_IchildTotalBF +=$rafd['child_base_fare'];
			$_IchildTotaltax += $rafd['child_tax'];
			$_IinfantTotalBF += $rafd['infant_base_fare'];
			$_IinfantTotaltax += $rafd['infant_tax'];
			$_IadultTotalIP += $_AfareDetails['ADT'];
			$_IadultTotaltaxIP += $_AtaxDetails['ADT'];
			$_IchildTotalIP += $_AfareDetails['CHD'];
			$_IchildTotaltaxIP += $_AtaxDetails['CHD'];
			$_IinfantTotalIP += $_AfareDetails['INF'];
			$_IinfantTotaltaxIP += $_AtaxDetails['INF'];
			$_ItotalStandardFare += (($rafd['base_fare']+$rafd['tax'])*$rafd['no_of_adult'])+(($rafd['child_base_fare']+$rafd['child_tax'])*$rafd['no_of_child'])+(($rafd['infant_base_fare']+$rafd['infant_tax'])*$rafd['no_of_infant']);
			$_ItotalInstantFare += (($_AfareDetails['ADT']+$_AtaxDetails['ADT'])*$rafd['no_of_adult'])+(($_AfareDetails['CHD']+$_AtaxDetails['CHD'])*$rafd['no_of_child'])+(($_AfareDetails['INF']+$_AtaxDetails['INF'])*$rafd['no_of_infant']);
			$objViaFlightDetails->__construct();
			$objViaFlightDetails->_Oconnection=$this->_Oconnection;
			$objViaFlightDetails->_IrequestApprovedFlightId=$rafd['request_approved_flight_id'];
			$flight['flightDetails'][$i]['viaFlight']=$objViaFlightDetails->_selectViaFlightDetails();
			
			$flightNameDisplay = $flight['flightDetails'][$i]['flight_number'];
			
		
			if(is_array($flight['flightDetails'][$i]['viaFlight']))
			{
				#To show airline code for all flights eg:GO-105/GO-104
				if(isset($CFG['site']['showAirlineCodeAllFlights']) && $CFG['site']['showAirlineCodeAllFlights']=="Y") 
				{
					$viaFlightNumber = array_map(function($el){ return $el['flight_number']; }, $flight['flightDetails'][$i]['viaFlight']);
					$flightNameDisplay=$flight['flightDetails'][$i]['airline_code']."-".implode("/",$viaFlightNumber);
				}
				else
				{			
					$viaFlightNumber = array_map(function($el){ return $el['airline_code'].'-'.$el['flight_number']; }, $flight['flightDetails'][$i]['viaFlight']);
					$flightNameDisplay=implode("/",$viaFlightNumber);
				}
			}
			if($CFG["settings"]["outOfHorizon"]['maskFlightNumber']=='Y'){
				if($horizonStatus=='Y'){
					$requestLevelHorizonStatus="Y";
					$flightNameDisplay=$flight['flightDetails'][$i]['airline_code'].'-'.$CFG["settings"]["outOfHorizon"]['maskFlightText'];
				}
				$flight['flightDetails'][$i]['horizonStatus']=$horizonStatus;
			}
			$flight['flightDetails'][$i]['flightNameDisplay']=$flightNameDisplay;
			/* To display pnr in mail content start*/
			fileRequire("dataModels/class.pnrBlockingDetails.php");
			$requestApprovedFlightId = array();
			$objpnrBlockingDetails=new pnrBlockingDetails();
			$objpnrBlockingDetails->__construct();
			$objpnrBlockingDetails->_Oconnection=$this->_Oconnection;
			$objpnrBlockingDetails->_IrequestApprovedFlightId=$rafd['request_approved_flight_id'];
			$_ApnrBlockingDetails=$objpnrBlockingDetails->_selectPnrBlockingDetails();
			if($objpnrBlockingDetails->_Spnr != ''){
				/*getting the pnr array for split PNR issue*/
				if(count($_ApnrBlockingDetails)>1)
				{	
					$_Apnrs=array_column($_ApnrBlockingDetails,'pnr');
					$flight['flightDetails'][$i]['pnr']=implode(",",$_Apnrs);
				}
				else
				$flight['flightDetails'][$i]['pnr'] = $objpnrBlockingDetails->_Spnr;
			}
			/* To display pnr in mail content start End*/
			$i++;
		}
		//To display the flight details based on group in series,conference,flexible
		if( ($flight['request_type']=="series") || ($flight['request_type']=="conference") || ($flight['request_type']=="flexible"))
		{
			foreach($flight['flightDetails'] as $key=>$value)
			{
				$testArrayFlightDetails[$key]=$value;
				if($modifyRequest=="N")
					$testArrayFlightDetails[$key]['mapped_series_request_id']=$flight['mappedSeriesRequestId'][$value['series_request_id']];	
			}
			$seriesGroupIdIndex=0;
			$previousRequestApprovedId=0;
			foreach($testArrayFlightDetails as $subKey=>$subValues)
			{
			
				if($modifyRequest=="N")
				{
					$testArrayFinal[$subValues['seriesGroudId']][]=$subValues;
				}
				else
				{
					if(isset($subValues['seriesGroudId']))
					{
						$testArrayFinal[$subValues['seriesGroudId']][]=$subValues;
					}
					else
					{
						/*Prepare the group id for the modified flight details
						 *Using the request details history id which is mapped to mapped series request id then form the group*/
						if($previousRequestApprovedId == 0)
						{
							$seriesGroupIdIndex++;							
							$subValues['seriesGroudId']=$seriesGroupIdIndex;
						}
						if($previousRequestApprovedId!=$subValues['mapped_series_request_id'] && $previousRequestApprovedId!=0)
						{	
							$seriesGroupIdIndex++;							
							$subValues['seriesGroudId']=$seriesGroupIdIndex;
						}
						else
							$subValues['seriesGroudId']=$seriesGroupIdIndex;
						
						$previousRequestApprovedId=$subValues['request_details_history_id'];
						$testArrayFinal[$seriesGroupIdIndex][]=$subValues;
					}
				}
			}
			ksort($testArrayFinal);		
			foreach($testArrayFinal as $value)
			{
				$testArrayFinalValues[]=$value;
			}
			if(count($testArrayFinalValues) > 0)
			{
				foreach($testArrayFinalValues as $key=>$value)
				{
						
					//Calling the fare trip wise means first flight only will have fares and rest of the flights will have fare as zero in a same group.so taking decision based on the first flight fare (weather to show or hide the child and infant fare in template)
					$_SshowZeroInChildTotalFare="N";
					$_SshowZeroInInfantTotalFare="N";
					if($value[0]["childTotalAmount"]>0)
						$_SshowZeroInChildTotalFare="Y";
					if($value[0]["infantTotalAmount"]>0)
						$_SshowZeroInInfantTotalFare="Y";
					
					$_AmatchedApprovedFlightIds=array();	
					foreach($value as $subkey=>$subValues)
					{
						$subValues["showZeroInChildTotalFare"]=$_SshowZeroInChildTotalFare;
						$subValues["showZeroInInfantTotalFare"]=$_SshowZeroInInfantTotalFare;
						
						if($subValues['request_option_id'] != 0)
						  	$flight['alternate_flight']=1;
						  
						//preparing the rowspan if multiple flights approved with different flights count in a same group
						if(!in_array($subValues['request_approved_flight_id'],$_AmatchedApprovedFlightIds))
						{
							$_AmatchedSameSecFlights=$this->_rowSpanPreparation($subkey,$value);
							$_IrowSpanCount=count($_AmatchedSameSecFlights);
							if($_IrowSpanCount>0)
							{
								$subValues['rowSpanCount']=$_IrowSpanCount;
								$_AmatchedApprovedFlightIds=array_merge($_AmatchedApprovedFlightIds,$_AmatchedSameSecFlights);
							}
						}
						$finalFlghtDetails[$key][$subValues['request_id']][]=$subValues;
						
					}
				}
				foreach($finalFlghtDetails as $value)
				{
					ksort($value);
					$testFinalValues[]=$value;
				}
				
				foreach($testFinalValues as $key=>$value)
				{
					
					foreach($value as $subkey=>$subValues)
					{	
						$finalFlghtDetailsValues[$key][]=$subValues;					
					}
				}
				$flight['flightDetailsEmail']=$finalFlghtDetailsValues;
			}
		}
		if($flight['request_type']=='series')
		{
			$_ItotalApprovedGroup=count($flight['flightDetailsEmail']);
			$_IadultTotalBF /= $_ItotalApprovedGroup;
			$_IadultTotaltax /= $_ItotalApprovedGroup;
			$_IchildTotalBF /= $_ItotalApprovedGroup;
			$_IchildTotaltax /= $_ItotalApprovedGroup;
			$_IinfantTotalBF /= $_ItotalApprovedGroup;
			$_IinfantTotaltax /= $_ItotalApprovedGroup;
		}
		$flight['requestLevelHorizonStatus']=$requestLevelHorizonStatus;
		$flight['showSmartFare']='N';
		if(in_array("BN1",$CFG["site"]["freeBaggageAllowed"]))
			$flight['showSmartFare']='Y';
		$flight['Payment_expiry_date']=$_ArequestApprovedFareDetails['payment_expiry'];
		$flight['adultTotalBF']=$_IadultTotalBF;
		$flight['adultTotaltax']=$_IadultTotaltax;
		$flight['childTotalBF']=$_IchildTotalBF;
		$flight['childTotaltax']=$_IchildTotaltax;
		$flight['infantTotalBF']=$_IinfantTotalBF;
		$flight['infantTotaltax']=$_IinfantTotaltax;
		$flight['adultTotalIP']=$_IadultTotalIP;
		$flight['adultTotaltaxIP']=$_IadultTotaltaxIP;
		$flight['childTotalIP']=$_IchildTotalIP;
		$flight['childTotaltaxIP']=$_IchildTotaltaxIP;
		$flight['infantTotalIP']=$_IinfantTotalIP;
		$flight['infantTotaltaxIP']=$_IinfantTotaltaxIP;
		$flight['totalStandardFare']=$_ItotalStandardFare;
		$flight['totalInstantPurchaseFare']=$_ItotalInstantFare;
		//Based on this condition payment validity will be set
		if($_IadultTotalBF == $_IadultTotalIP)
			$flight['adultTotalIP']=0;
		return $flight;
	}
	function _getRequestApprovedFareDetails($request_approved_flight_id)
	{
		global $CFG;
		$_ArequestApprovedFareDetails=array();
		$_ArequestTimelineId=array();
		$_Ssql="SELECT * 
			    from 
			     ".$CFG['db']['tbl']['request_approved_fare_details']." 
			   where request_approved_flight_id=".$request_approved_flight_id;
		if(DB::isError($resultVal = $this->_Oconnection->query($_Ssql)))
		{
			@fileWrite($_Ssql,"SqlError","a+");
			return false;
		}
		//If the query returns record
		if($resultVal->numRows()>0)
		{
			//Form an array based on the inputData
			while($row = $resultVal->fetchRow(DB_FETCHMODE_ASSOC))
			{
				if($row['fare_filter_method']=='IPF')
				  $_ArequestApprovedFareDetails=$row;
				//To get request_timeline_id when SpecificTimeline config is set
				if(!empty($CFG['site']['specialFareTypes']['specificTimeline']))
					$_ArequestTimelineId[$row['fare_filter_method']]=$row['request_timeline_id'];
			}
		}
		//It is used to get expiry date
		$_ArequestTimeline=$this->_getRequestTimeline($_ArequestTimelineId);

		$_ArequestApprovedFareDetails['payment_expiry']=$_ArequestTimeline;
		return $_ArequestApprovedFareDetails;

	}
	function _getRequestTimeline($_ArequestTimelineId)
	{

		global $CFG;
		$_ArequestTimelineDetails=array();
		foreach ($_ArequestTimelineId as $filterType => $_StimelineId) 
		{
			$_Ssql="SELECT * 
					FROM 
			          ".$CFG['db']['tbl']['request_timeline_details']."
			        WHERE 
			        request_timeline_id IN (".$_StimelineId.") AND timeline_type='PAYMENT' 
			        ORDER BY expiry_date desc";

			if(DB::isError($resultVal = $this->_Oconnection->query($_Ssql)))
			{
				@fileWrite($_Ssql,"SqlError","a+");
				return false;
			}
			//If the query returns record
			if($resultVal->numRows()>0)
			{
				//Form an array based on the inputData
				while($row = $resultVal->fetchRow(DB_FETCHMODE_ASSOC))
				{
					$_ArequestTimelineDetails[$filterType]=$this->_getUserDateFormatValue($row['expiry_date']);
				}
			}
		}
		return $_ArequestTimelineDetails;
	}

	function _getRequestTimeLineTransactionDetails($_ArequestTimelineId,$_Sstatus)
	{

		global $CFG;
		$_ArequestTimelineDetails=array();
		foreach ($_ArequestTimelineId as $filterType => $_StimelineId) 
		{
			$_Ssql="SELECT * 
					FROM 
			          ".$CFG['db']['tbl']['request_timeline_details']."
			        WHERE 
			        transaction_id  IN (".$_StimelineId.") AND timeline_type='".$_Sstatus."' 
			        ORDER BY expiry_date desc";

			if(DB::isError($resultVal = $this->_Oconnection->query($_Ssql)))
			{
				@fileWrite($_Ssql,"SqlError","a+");
				return false;
			}
			//If the query returns record
			if($resultVal->numRows()>0)
			{
				//Form an array based on the inputData
				while($row = $resultVal->fetchRow(DB_FETCHMODE_ASSOC))
				{
					$_ArequestTimelineDetails[$filterType]=$this->_getUserDateFormatValue($row['expiry_date']);
				}
			}
		}
		return $_ArequestTimelineDetails;
	}

	function _getRequestPaxCount($requestMasterId)
	{
		global $CFG;
		
		$reqGrpPax = array();
		$_ItotalPax = 0;
		$_AseriesRequestDetailsHistory = array();
		
		fileRequire("classes/class.requestModifyDetails.php");
		$_OrequestModifyDetails = new requestModifyDetails;
		$_OrequestModifyDetails->__construct();
		$_OrequestModifyDetails->_Oconnection = $this->_Oconnection;
		$_OrequestModifyDetails->_Osmarty = $this->_Osmarty;
		$_OrequestModifyDetails->_IrequestMasterId  = $requestMasterId;
		$_OrequestModifyDetails->_getModifyRequestDetails();
		if(in_array($_OrequestModifyDetails->_ArequestMasterHistory[0]['request_modify_status'],array(1,3)))
		{
			$_ArequestMasterHistory = $_OrequestModifyDetails->_ArequestMasterHistory[0];
			if(count($_ArequestMasterHistory) > 0)
				$_AseriesRequestDetailsHistory=$_OrequestModifyDetails->_AseriesRequestDetailsHistory;
		}
		if(!empty($_AseriesRequestDetailsHistory))
		{
			foreach($_AseriesRequestDetailsHistory AS $requestHistoryKey => $requestHistoryValue)
			{
				$_ApaxDetails = array();
				$_ApaxDetails['origin'] = $requestHistoryValue['origin_airport_code'];
				$_ApaxDetails['destination'] = $requestHistoryValue['dest_airport_code'];
				$_ApaxDetails['departure'] = date($CFG['date_format']['displayDate'],strtotime($requestHistoryValue['departure_date']));
				$_ApaxDetails['series_request_id'] = $requestHistoryValue['series_request_history_id'];
				if($requestHistoryValue['mapped_series_request_id']==0)
				{
					$_ItotalPax += ($requestHistoryValue['number_of_adult']+$requestHistoryValue['number_of_child']+$requestHistoryValue['number_of_infant']);
					$_ItotalAdult +=$requestHistoryValue['number_of_adult'];
					$_ItotalChild +=$requestHistoryValue['number_of_child'];
					$_ItotalInfant +=$requestHistoryValue['number_of_infant'];
				}
				$_ApaxDetails['totalPax'] = ($requestHistoryValue['number_of_adult']+$requestHistoryValue['number_of_child']+$requestHistoryValue['number_of_infant']);
				$_ApaxDetails['adult'] = $requestHistoryValue['number_of_adult'];
				$_ApaxDetails['child'] = $requestHistoryValue['number_of_child'];
				$_ApaxDetails['infant'] = $requestHistoryValue['number_of_infant'];
				$_ApaxDetails['mapped_series_request_id']=$requestHistoryValue['mapped_series_request_id'];
				$_ApaxDetails['trip_name']=$requestHistoryValue['series_group_id'];

				array_push($reqGrpPax,$_ApaxDetails);
			}
		}
		else
		{
			$_ArequestMater=$this->_getSectorDetails($requestMasterId);
			# remove the sector which is on renegotiation.
			$sql = "SELECT
						arm.current_status,
						sd.status_code
					FROM
						".$CFG['db']['tbl']['airlines_request_mapping']." arm
					INNER JOIN
						".$CFG['db']['tbl']['status_details']." sd
					ON arm.current_status = sd.status_id
					WHERE arm.request_master_id = '".$requestMasterId."'";
			$status = $this->_executeQuery($sql);
			if(!empty($status))
				{ 
					$status = !in_array($status[0]['status_code'],(array)["RN", "RS"]);
				}
			if($status){
				$groupsWithStatus = $this->_getGroupStatus
										( $_ArequestMater['airlines_request_id'],
				$this->_getLastTransactionMasterId($_ArequestMater['request_master_id']) );

				$_ArequestMater = $this->_filterNonNegotiation($_ArequestMater,$groupsWithStatus);
			}

			$TotalpaxDetails = $this->_fillupPaxDetails($_ArequestMater);
			$reqGrpPax = $TotalpaxDetails[0];$overallPax = $TotalpaxDetails[1];
			if($_ArequestMater['request_type_id'] == 3){
				$_ItotalPax = $overallPax['totalPax'];
				$_ItotalAdult =$overallPax['totalAdult'];
				$_ItotalChild =$overallPax['totalChild'];
				$_ItotalInfant =$overallPax['totalInfant'];
			}
		}
		$pax['requestPax']=$reqGrpPax;
		$pax['totalPax']=$_ItotalPax;
		$pax['totalAdult']=$_ItotalAdult;
		$pax['totalChild']=$_ItotalChild;
		$pax['totalInfant']=$_ItotalInfant;
		return $pax;
	}

	private function _getGroupStatus($_IparamAirlineReqId, $_IparamTransactionMasterId){
		fileRequire("dataModels/class.requestGroupDetails.php");
		$OreqGroupDetails = requestGroupDetails::_getObjReqGroupDetails($this->_Oconnection,$_IparamAirlineReqId,$_IparamTransactionMasterId);
		$allReqDetails = $OreqGroupDetails->_selectRequestGroupDetails();
		$statusDetails = $this->_getStatusDetails('',['RN','RS']);
		$toShowSeriesGroupId = []; /* RN-renegotiation, RS-requestResubmitted */
		foreach($allReqDetails as $key => $value){
			$groupWithOutNegotiation = ($allReqDetails[$key]['group_status']  != $statusDetails[0]
						&& $allReqDetails[$key]['group_status']  != $statusDetails[1]);
			if($groupWithOutNegotiation){
				$seriesGroupId = $allReqDetails[$key]['series_group_id'];
				array_push($toShowSeriesGroupId,$seriesGroupId);
			}		
		}
		return $toShowSeriesGroupId;
	}

	private function _filterNonNegotiation($_AOriginalArray,$_AgroupWithStatus){
		foreach($_AOriginalArray['requestDetails'] as $key => $val){
			$roundTripLevel =  $_AOriginalArray['requestDetails'][$key];
			foreach($roundTripLevel['seriesRequestDetails'] as $eachSeriesKey => $eachSeriesVal){
				$conditionCheck = in_array($roundTripLevel['seriesRequestDetails'][$eachSeriesKey]['series_group_id'],$_AgroupWithStatus);
				if(!$conditionCheck)
					unset($roundTripLevel['seriesRequestDetails'][$eachSeriesKey]);
			}
			$_AOriginalArray['requestDetails'][$key] = $roundTripLevel;
		}
		return $_AOriginalArray;
	}

	/**
	 * Desc: loops through request details, returns pax details.
	 * Author:Gopinath v,
	 * CreationData:11-APRIL-2019,
	 * params: array with request details, 
	 * Returns: pax details
	 */
	private function _fillupPaxDetails($_AparamRequestMaster){
		global $CFG;
		$_ArequestPaxDetails = []; $overAllPax = [];
		foreach($_AparamRequestMaster['requestDetails'] as $_ArequestDetails)
			{
				foreach($_ArequestDetails['seriesRequestDetails'] as $_AseriesRequestDetails)
				{
					$_ApaxDetails = array();
					$_ApaxDetails['origin'] = $_ArequestDetails['origin_airport_code'];
					$_ApaxDetails['destination'] = $_ArequestDetails['dest_airport_code'];
					$_ApaxDetails['series_request_id'] = $_AseriesRequestDetails['series_request_id'];
					$_ApaxDetails['departure'] = date($CFG['date_format']['displayDate'],strtotime($_AseriesRequestDetails['departure_date']));
					if($_AseriesRequestDetails['mapped_series_request_id']==0)
					{
						$overAllPax['totalPax'] += $_AseriesRequestDetails['number_of_passenger'];
						$overAllPax['totalAdult'] +=$_AseriesRequestDetails['number_of_adult'];
						$overAllPax['totalChild'] +=$_AseriesRequestDetails['number_of_child'];
						$overAllPax['totalInfant'] +=$_AseriesRequestDetails['number_of_infant'];
					}
					$_ApaxDetails['totalPax'] = $_AseriesRequestDetails['number_of_passenger'];
					$_ApaxDetails['adult'] = $_AseriesRequestDetails['number_of_adult'];
					$_ApaxDetails['child'] = $_AseriesRequestDetails['number_of_child'];
					$_ApaxDetails['infant'] = $_AseriesRequestDetails['number_of_infant'];
					$_ApaxDetails['mapped_series_request_id']=$_AseriesRequestDetails['mapped_series_request_id'];
					// $_ApaxDetails['trip_name']=$_ArequestDetails['trip_name'];
					$_ApaxDetails['trip_name']=$_AseriesRequestDetails['series_group_id'];
					array_push($_ArequestPaxDetails,$_ApaxDetails);
				}
			}
		return [$_ArequestPaxDetails,$overAllPax];
	}

	function _getFlightControllerRequestId($userId)
	{
		global $CFG;
		$userId = ($userId) ? $userId : $_SESSION['groupRM']['groupUserId'];
		$sql = "SELECT DISTINCT
					arm.request_master_id
				FROM
					".$CFG['db']['tbl']['review_status']." rs,
					".$CFG['db']['tbl']['transaction_master']." tm,
					".$CFG['db']['tbl']['airlines_request_mapping']." arm
				WHERE
					arm.airlines_request_id = tm.airlines_request_id AND
					tm.transaction_id = rs.transaction_id AND 
					rs.response_person_id = '".$userId."'";
		$reultArray = array();
		foreach($this->_executeQuery($sql) as $_ArequsetId)
			array_push($reultArray,$_ArequsetId['request_master_id']);
		return $reultArray;
	}
	
	function _getRequestIdFromStatus($currentStatus)
	{
		global $CFG;
		$sql = "SELECT DISTINCT
					request_master_id
				FROM
					".$CFG['db']['tbl']['airlines_request_mapping']."
				WHERE
					current_status IN (".$currentStatus.")";
		$reultArray = array();
		foreach($this->_executeQuery($sql) as $_ArequsetId)
			array_push($reultArray,$_ArequsetId['request_master_id']);
		return $reultArray;
	} 
	
	function _getProcessControlDetails($requestMasterId,$processType,$referenceId=0,$_StenderReq='')
	{
		global $CFG;
		if($referenceId=='')
			$referenceId=0;

		$sql = "SELECT DISTINCT
					tcd.take_control_id,
					tcd.reference_id,
					tcd.opened_by,
					tcd.opened_time,
					tcd.process_type,
					concat(".encrypt::_decrypt('ud.first_name').",' ',".encrypt::_decrypt('ud.last_name').") as open_person_name,
					".encrypt::_decrypt('ud.email_id')." as open_person_email,
					ud.group_id,
					tcd.control_status
				FROM
					".$CFG['db']['tbl']['take_control_details']." tcd,
					".$CFG['db']['tbl']['user_details']." ud
				WHERE
					ud.user_id = tcd.opened_by AND
					tcd.request_master_id  = ".$requestMasterId." AND
					tcd.reference_id=".$referenceId." AND 
					tcd.control_status!='Error' AND
					tcd.control_status!=''"
				;

		if($_StenderReq=='Y'){
			$sql = $sql." AND
					UPPER(tcd.process_type) IN (".strtoupper($processType).") ORDER BY tcd.take_control_id DESC";
		}
		else
		{
			if($processType=='PAYMENT')
				{
					$sql = $sql." AND
							UPPER(tcd.process_type) IN ('".strtoupper($processType)."','PAYMENTGATEWAY')  ORDER BY tcd.take_control_id DESC  LIMIT 1";
				}
			else
				{
					$sql = $sql." AND
							UPPER(tcd.process_type) = '".strtoupper($processType)."'  ORDER BY tcd.take_control_id DESC";
				}
		}
		$reultArray = $this->_executeQuery($sql);

		if(!empty($reultArray)) {

			foreach ($reultArray as $key => $value) {

				$reultArray[$key]['controlCount']=count($reultArray);
				$reultArray[$key]['utcOpenedTime']=$value['opened_time'];
				$reultArray[$key]['opened_time'] = $this->_getUserDateFormatValue($value['opened_time']);
				$reultArray[$key]['process_type']=$value['process_type'];
			}
			if($_StenderReq=='Y')
				return $reultArray;
			else
				return $reultArray[0];
		}
		return false;
	} 

	/*
	 * Function Name : _getSectorFCDetails
	 * Description: This function will return mapped RM analyst to the given sector
	 * Author: Ponseha M
	 * Created Date: 
	 * Modified Date: 11-07-2018
	 */
	function _getSectorFCDetails($origin,$destination)
	{
	        global $CFG;
	        $fetchFCSql="SELECT  
                                        ud.user_id,
                                        ud.group_id,
                                        ".encrypt::_decrypt('ud.title')." AS title,
                                        ".encrypt::_decrypt('ud.first_name')." AS first_name,
                                        ".encrypt::_decrypt('ud.last_name')." AS last_name,
                                        ".encrypt::_decrypt('ud.email_id')." AS email_id,
                                        ".encrypt::_decrypt('ud.user_address')." AS user_address,
                                        ".encrypt::_decrypt('ud.phone_number')." AS phone_number
                                 FROM 
                                        ".$CFG['db']['tbl']['user_details']." ud,
                                        ".$CFG['db']['tbl']['sector_management']." sm,
                                        ".$CFG['db']['tbl']['sector_user_mapping']." sum
                                 WHERE 
                                        sm.origin='".$origin."' AND 
                                        sm.destination='".$destination."' AND 
                                        ud.group_id=15 AND 
                                        sm.sector_id=sum.sector_id AND 
                                        sum.user_id=ud.user_id";

                return $this->_executeQuery($fetchFCSql);
	}

	function _getTotalRequestPassenger($requestMasterId)
	{
		global $CFG;
		$_ItransactionMasterId=0;
		$_AgroupStatus=array();
		$_Scondition='';
		$requiredTables='';
		#$currentStatus = $this->_Ocommon->_getStatusFromRequestId($key);
		$_InegoStatusId=$this->_getCurrentStatusId('RN');
		$_IresubmitStatusId=$this->_getCurrentStatusId('RS');
		$lastTransactionId=$this->_getModifyFareQuoteStatus($requestMasterId,'Y');
		if($lastTransactionId['lastTransactionId']>0)
			$_ItransactionMasterId=$lastTransactionId['lastTransactionId'];
		$_IairlinesRequestId=$this->_getAirlineRequestId($requestMasterId);
		$this->_OrequestGroupDetails=new requestGroupDetails();
		$this->_OrequestGroupDetails->_Oconnection=$this->_Oconnection;
		$this->_OrequestGroupDetails->_IairlineRequestId=$_IairlinesRequestId;
		$this->_OrequestGroupDetails->_ItransactionMasterId=$_ItransactionMasterId;
		$_AgroupStatus=$this->_OrequestGroupDetails->_selectRequestGroupDetails();
		$_AgroupStatus=array_column($_AgroupStatus,'group_status');
		$_IcurrentStatus=$this->_getStatusFromRequestId($requestMasterId);
		if(in_array($_InegoStatusId, $_AgroupStatus))
		{
			$requiredTables = ",".$CFG['db']['tbl']['request_group_details']." rgd,".$CFG['db']['tbl']['response_details']." rs";
			$_Scondition="AND srd.series_group_id=rgd.series_group_id
						  AND rgd.airlines_request_id=".$_IairlinesRequestId."
						  AND rgd.transaction_master_id=".$_ItransactionMasterId."
						  AND rs.transaction_master_id=".$_ItransactionMasterId."
						  AND rs.response_status=".$_InegoStatusId."
						  AND rs.response_id=(SELECT MAX(response_id) FROM ".$CFG['db']['tbl']['response_details']." WHERE transaction_master_id = ".$_ItransactionMasterId." AND response_status = ".$_InegoStatusId.")";
		}
		if(!in_array($_IcurrentStatus,array($_IresubmitStatusId)) && in_array($_IresubmitStatusId,$_AgroupStatus))
		{
			$requiredTables = ",".$CFG['db']['tbl']['request_group_details']." rgd";
			$_Scondition="AND srd.series_group_id=rgd.series_group_id
						  AND rgd.airlines_request_id=".$_IairlinesRequestId."
						  AND rgd.transaction_master_id=".$_ItransactionMasterId."
						AND rgd.group_status!=".$_IresubmitStatusId;
		}
		$totalPaxArray=array("totalPax"=>0,"totalAdult"=>0,"totalChild"=>0,"totalInfant"=>0,"totalFoc"=>0);

		$sqlSelectTotalPax="SELECT
						sum(srd.number_of_adult+srd.number_of_child+srd.number_of_infant) as totalPax,
						sum(srd.number_of_adult) as totalAdult,
						sum(srd.number_of_child) as totalChild,
						sum(srd.number_of_infant) as totalInfant
				    FROM
						".$CFG['db']['tbl']['request_master']." rm,
						".$CFG['db']['tbl']['request_details']." rd,
						".$CFG['db']['tbl']['series_request_details']." srd
						".$requiredTables."
				    WHERE
						rm.request_master_id=rd.request_master_id
						AND rd.request_id=srd.request_id
						AND rm.request_master_id='".$requestMasterId."'
						AND srd.mapped_series_request_id=0
						".$_Scondition;
		if(DB::isError($resultSelectTotalPax=$this->_Oconnection->query($sqlSelectTotalPax)))
		{
			fileWrite($sqlSelectTotalPax,"SqlError","a+");
			return false;
		}
		
		if($resultSelectTotalPax->numRows() >0)
		{
			while($rowSelectTotalPax=$resultSelectTotalPax->fetchRow(DB_FETCHMODE_ASSOC))
			{
				$totalPaxArray['totalFoc']=$this->_getFocPax($requestMasterId)['totalFoc'];
				$totalPaxArray['totalPax']=($totalPaxArray['totalFoc'])>0?($rowSelectTotalPax['totalPax']+$totalPaxArray['totalFoc']):$rowSelectTotalPax['totalPax'];
				$totalPaxArray['totalAdult']=$rowSelectTotalPax['totalAdult'];
				$totalPaxArray['totalChild']=$rowSelectTotalPax['totalChild'];
				$totalPaxArray['totalInfant']=$rowSelectTotalPax['totalInfant'];
			}
		}

		return $totalPaxArray;
	}
	
	function _getPageHtmlContent($url)
	{
		$file = fopen ($url, "r");
		$content = "";
		if (!$file) {
			return "<p>Unable to open remote file.\n";
		}
		$content .= '<base href="'.$url.'">';
		while (!feof ($file)) {
			$content .= fgets ($file, 1024);
		}
		fclose($file);
		return $content;
	}
	/*
	 * To round of the numbers
	 * Input  : Number, decimal precision, Currency code (return based on currency setting table decimal precision)
	 * Output : Round off value with Formatted
	 */
	function _getRoundOffFare($fare=0,$roundTo=2,$currencyCode='',$_SshowDecimal = 'Y')
	{
		global $CFG;		
		if(!$fare && (empty($CFG['limit']['zeroFareQuote']['status']) || $CFG['limit']['zeroFareQuote']['status']!="Y"))
		{
			$formattedFare=number_format((float)$fare,$roundTo,'.','');
			return ($formattedFare != "")?$formattedFare : $fare;
		}
		
		if(!$currencyCode)
			return number_format((float)$fare,$roundTo, '.', '');//round($fare,$roundTo);
			
		//To Display the fare with decimal values
		if($currencyCode=="displayFare") {
			$_SroundDigit = 0;
			if($_SshowDecimal == 'Y')
				$_SroundDigit = $CFG['limit']['fareValueRoundTo'];
			return number_format((float)$fare,$_SroundDigit,'.', ',');
		}
		// $fare = $this->_ceilTo($fare,$currencyCode);
		//Round off based on currency setting table decimal precision
		if(isset($CFG['limit']['decimalPrecision'][strtoupper($currencyCode)])) {
			return number_format((float)$fare,$CFG['limit']['decimalPrecision'][strtoupper($currencyCode)], '.', '');
		}
	}
	/*
	 * To round up the numbers to base 10.
	 * Input  : Number, Currency code (return based on currency Decimal percision value default 10)
	 * Output : Round up value with base10 (Ex: 171 will converted to 180)
	 */
	function _ceilTo($_Inumber=0,$_ScurrencyCode='',$_ItotalFare=0)
	{
		global $CFG;
		//For ZAR curreny, round off the value to ten's. So based on currency Decimal percision value(10) divided and multiplied
		if($_Inumber && $_ScurrencyCode && isset($CFG['limit']['currencyDecimalPrecision']['currency'][strtoupper($_ScurrencyCode)])) {
			$_IroundValue = $CFG['limit']['currencyDecimalPrecision']['currency'][strtoupper($_ScurrencyCode)];
			// i need to change it here
			switch (strtoupper($CFG['limit']['currencyDecimalPrecision']['type'])) 
			{
				case 'CEIL':
					//To round up ceil(171/10) * 10 = 180
					$_Inumber = ($_IroundValue > 0)?(ceil($_Inumber / $_IroundValue) * $_IroundValue) : ceil($_Inumber);
					// $_Inumber = ceil($_Inumber / $_IroundValue) * $_IroundValue;
					break;
				case 'FRACTION':
					if($_ItotalFare){
						$_ItempNumber = $_Inumber;
						#$_Inumber = round($_Inumber / $_IroundValue) * $_IroundValue;
						$_ItempTotalFare = $_ItotalFare;
						/*if($_ItempNumber != $_Inumber)
							$_ItotalFare = ($_ItotalFare -$_ItempNumber)+$_Inumber;*/
						$_ItotalFare = 	floor($_ItotalFare) + $CFG['limit']['currencyDecimalPrecision']['value'];
						$_Inumber = $_ItempNumber+($_ItotalFare - $_ItempTotalFare);
					}
					
					break;
				default:
					// To round up the value when the config contains type as round
					$_Inumber = round($_Inumber,$_IroundValue);
			}
		/*	// To round up the value when the config contains type as round
			if(isset($CFG['limit']['currencyDecimalPrecision']['type'])&&$CFG['limit']['currencyDecimalPrecision']['type']!="")
				$_Inumber = round($_Inumber / $_IroundValue) * $_IroundValue;
			//To round up ceil(171/10) * 10 = 180
			else
				$_Inumber = ceil($_Inumber / $_IroundValue) * $_IroundValue;*/
		}
		return $_Inumber;
	}
	
	
	/*
	 * Sort the multi-dimensional array
	 * 1st arguments : inputArray, 
	 * other arguments : sorting indexes
	 * Atleast pass two parameter
	 * return : sorted array
	 */
	function _getMultiSort()
	{
		//get args of the function
		
		$args = func_get_args();
		
		$c = count($args);
		if ($c < 2) {
			return false; 
		}
		
		//get the array to sort
		$array = array_splice($args, 0, 1);
		$array = $array[0];
		
		//sort with an anoymous function using args
		usort($array, function($a, $b) use($args) {
			$i = 0;
			$c = count($args);
			$cmp = 0;
			while($cmp == 0 && $i < $c) {
				
				//$cmp = strcmp($a[ $args[ $i ] ], $b[ $args[ $i ] ]);
				/*Subalakshmi S commented the above line and added below
				 * code because it returns wrong value. Ex., strcmp(99,100)
				 * returns 1 instead of returning -1*/
				if($a[ $args[ $i ] ]>$b[ $args[ $i ] ])
					$cmp = 1;
				else
					$cmp = -1;
				$i++;
			}
			return $cmp;
		});
		return $array;
	}
	
	function _getAirportCurrency($airportCode)
	{
		global $CFG;
		$sql="SELECT
					currency_code
				FROM
					".$CFG['db']['tbl']['airport_details']."
				WHERE
					airport_code = '".$airportCode."'";
		if (DB::isError($result = $this->_Oconnection->query($sql)))
		{
			fileWrite($sql,"SqlError","a+");
			return FALSE;
		}
		if($result->numRows() > 0)
		{
			$row = $result->fetchRow(DB_FETCHMODE_ASSOC);
			return $row['currency_code'];
		}
		return false;
	}

	function _getDepartureDateTran($_ItransactionMasterId,$_IseriesRequestId='')
	{
		global $CFG;

		$_AstrToTimeArray=[];
		$_AminDateArray=[];
		$_Scondition='';
		
		if($_IseriesRequestId!='')
			$_Scondition.=" AND rafd.series_request_id='".$_IseriesRequestId."'";

		$_SsqlSelectRequestDetailsFromDate="SELECT
								rafd.departure_date,
								rafd.dep_time,
								tm.transaction_id
							 FROM
								".$CFG['db']['tbl']['request_approved_flight_details']." rafd,
								".$CFG['db']['tbl']['transaction_master']." tm,
								".$CFG['db']['tbl']['airlines_request_mapping']." arm
							 WHERE
								arm.airlines_request_id = tm.airlines_request_id
								AND tm.transaction_id=rafd.transaction_master_id
								AND tm.transaction_id='".$_ItransactionMasterId."'
								".$_Scondition."
								AND rafd.accepted_flight_status='Y'";

		$_ArowValue=$this->_executeQuery($_SsqlSelectRequestDetailsFromDate);
		
		

		for($i=0;$i<count($_ArowValue);$i++)
		{
			$_SdateValue=strtotime($_ArowValue[$i]['departure_date']);
			array_push($_AstrToTimeArray,$_SdateValue);
		}

		$_SminValue=min($_AstrToTimeArray);

		for($i=0;$i<count($_ArowValue);$i++)
		{
			$_SdateValue=strtotime($_ArowValue[$i]['departure_date']);
			if($_SdateValue==$_SminValue)
			{
				$_SdateTime=$_ArowValue[$i]['departure_date']." ".$_ArowValue[$i]['dep_time'];
				array_push($_AminDateArray,$_SdateTime);
			}
		}

		$_SminValue=0;
		if(count($_AminDateArray) > 1)
		{
			for($j=0;$j<count($_AminDateArray);$j++)
			{
				$_SdateValue=strtotime($_AminDateArray[$j].":00");
				if($_SminValue > $_SdateValue || $_SminValue==0)
				{
					$_SminValue=$_SdateValue;
					$_SfinalDate=$_AminDateArray[$j].":00";
				}
				
			}
		}
		else
		{
			$_SdateValue=strtotime($_AminDateArray[0].":00");
			$_SfinalDate=$_AminDateArray[0].":00";

		}

		
			return $_SfinalDate;
	}

	function _getCountryName($countryCode)
	{
		global $CFG;

		$countryName="Singapore";

		if($countryCode!="")
		{
			$sqlSelectCountryName="SELECT
							citizenship_name
					       FROM
							".$CFG['db']['tbl']['citizenship_details']."
					       WHERE
							citizen_code='".$countryCode."'";

			if(DB::isError($resultSelectCountryName=$this->_Oconnection->query($sqlSelectCountryName)))
			{
				fileWrite($sqlSelectCountryName,"SqlError","a+");
				return false;
			}
		
			if($resultSelectCountryName->numRows() >0)
			{
				$rowSelectCountryName=$resultSelectCountryName->fetchRow(DB_FETCHMODE_ASSOC);
				$countryName=$rowSelectCountryName['citizenship_name'];
			}
		}

		$countryName=substr($countryName,0,30);

		return $countryName;
	}

	function _getSsrBreakupWithTotalAmount($requestMasterId,$requestApprovedFlightId=0)
	{
		global $CFG;

		$totalAmount=0;
		$transactionMasterId=0;
		$airlinesRequestId=0;

		$adultBaseFareTotal=0;
		$childBaseFareTotal=0;
		$infantBaseFareTotal=0;
		$adultTaxTotal=0;
		$childTaxTotal=0;
		$infantTaxTotal=0;
		$baggageTotal=0;
		$mealsTotal=0;
		$tigerConnectTotal=0;
		
		$splitArrayValue=array();

		$sqlSelectRequestType="SELECT
						request_type
				       FROM
						".$CFG['db']['tbl']['request_master']."
				       WHERE
						request_master_id='".$requestMasterId."'";

		if(DB::isError($resultSelectRequestType=$this->_Oconnection->query($sqlSelectRequestType)))
		{
			fileWrite($sqlSelectRequestType,"SqlError","a+");
			return false;
		}
		$requestType="ADHOC";
		if($resultSelectRequestType->numRows() >0)
		{
			$rowSelectRequestType=$resultSelectRequestType->fetchRow(DB_FETCHMODE_ASSOC);
			$requestType=strtoupper($rowSelectRequestType['request_type']);
		}

		

		$sqlSelectAirlinesRequestId="SELECT
							airlines_request_id
					     FROM
							".$CFG['db']['tbl']['airlines_request_mapping']."
					     WHERE
							request_master_id='".$requestMasterId."'";

		if(DB::isError($resultSelectAirlinesRequestId=$this->_Oconnection->query($sqlSelectAirlinesRequestId)))
		{
			fileWrite($sqlSelectAirlinesRequestId,"SqlError","a+");
			return false;
		}
	
		if($resultSelectAirlinesRequestId->numRows() >0)
		{
			$rowSelectAirlinesRequestId=$resultSelectAirlinesRequestId->fetchRow(DB_FETCHMODE_ASSOC);

			$airlinesRequestId=$rowSelectAirlinesRequestId['airlines_request_id'];

			$sqlSelectTransactionMasterId="SELECT
								transaction_id
						       FROM
								".$CFG['db']['tbl']['transaction_master']."
						       WHERE
								airlines_request_id='".$airlinesRequestId."'
								ORDER BY transaction_id DESC LIMIT 1";

			if(DB::isError($resultSelectTransactionMasterId=$this->_Oconnection->query($sqlSelectTransactionMasterId)))
			{
				fileWrite($sqlSelectTransactionMasterId,"SqlError","a+");
				return false;
			}
	
			if($resultSelectTransactionMasterId->numRows() >0)
			{
				$rowSelectTransactionMasterId=$resultSelectTransactionMasterId->fetchRow(DB_FETCHMODE_ASSOC);
				$transactionMasterId=$rowSelectTransactionMasterId['transaction_id'];
			}
		}

		$sqlSelectRequestApprovedFlightDetails="SELECT
								rafd.request_approved_flight_id,
								rafd.source,
								rafd.destination,
								rafd.base_fare,
								rafd.tax,
								rafd.fare_passenger,
								rafd.child_base_fare,
								rafd.child_tax,
								rafd.infant_base_fare,
								rafd.infant_tax,
								rafd.baggauge_fare,
								rafd.meals_fare,
								srd.series_request_id,
								srd.number_of_adult,
								srd.number_of_child,
								srd.number_of_infant
							FROM
								".$CFG['db']['tbl']['request_approved_flight_details']." rafd,
								".$CFG['db']['tbl']['series_request_details']." srd
							WHERE	
								rafd.airlines_request_id='".$airlinesRequestId."'
								AND rafd.transaction_master_id='".$transactionMasterId."'
								AND rafd.series_request_id=srd.series_request_id
								AND rafd.accepted_flight_status='Y'";

		if($requestApprovedFlightId!=0)
			$sqlSelectRequestApprovedFlightDetails.=" AND rafd.request_approved_flight_id='".$requestApprovedFlightId."'";

		if(DB::isError($resultSelectRequestApprovedFlightDetails=$this->_Oconnection->query($sqlSelectRequestApprovedFlightDetails)))
		{
			fileWrite($sqlSelectRequestApprovedFlightDetails,"SqlError","a+");
			return false;
		}
	
		if($resultSelectRequestApprovedFlightDetails->numRows() >0)
		{
			while($rowSelectRequestApprovedFlightDetails=$resultSelectRequestApprovedFlightDetails->fetchRow(DB_FETCHMODE_ASSOC))
			{
				
				$flightTotalAmont=0;

				$noOfAdult=$rowSelectRequestApprovedFlightDetails['number_of_adult'];
				$noOfChild=$rowSelectRequestApprovedFlightDetails['number_of_child'];
				$noOfInfant=$rowSelectRequestApprovedFlightDetails['number_of_infant'];

				$adultBaseFare=$rowSelectRequestApprovedFlightDetails['base_fare'];
				$adultTax=$rowSelectRequestApprovedFlightDetails['tax'];
				$adultTotal=$adultBaseFare+$adultTax;		

				$childBaseFare=$rowSelectRequestApprovedFlightDetails['child_base_fare'];
				$childTax=$rowSelectRequestApprovedFlightDetails['child_tax'];
				$childTotal=$childBaseFare+$childTax;

				$infantBaseFare=$rowSelectRequestApprovedFlightDetails['infant_base_fare'];
				$infantTax=$rowSelectRequestApprovedFlightDetails['infant_tax'];
				$infantTotal=$infantBaseFare+$infantTax;

				$baggageFare=$rowSelectRequestApprovedFlightDetails['baggauge_fare'];
				$mealsFare=$rowSelectRequestApprovedFlightDetails['meals_fare'];

				if($noOfAdult!=0)
				{
					$totalAmount+=$noOfAdult*$adultTotal;

					$adultBaseFareTotal+=$noOfAdult*$adultBaseFare;
					$adultTaxTotal+=$noOfAdult*$adultTax;
				}

				if($noOfChild!=0)
				{
					$totalAmount+=$noOfChild*$childTotal;

					$childBaseFareTotal+=$noOfChild*$childBaseFare;
					$childTaxTotal+=$noOfChild*$childTax;
				}

				if($noOfInfant!=0)
				{
					$totalAmount+=$noOfInfant*$infantTotal;

					$infantBaseFareTotal+=$noOfInfant*$infantBaseFare;
					$infantTaxTotal+=$noOfInfant*$infantTax;
				}

				if($baggageFare != 0)
				{
					if($noOfAdult!=0)
					{
						$totalAmount += $noOfAdult*$baggageFare;
						$baggageTotal += $noOfAdult*$baggageFare;
					}
					if($noOfChild!=0)
					{
						$totalAmount += $noOfChild*$baggageFare;
						$baggageTotal += $noOfChild*$baggageFare;
					}
				}
				if($mealsFare != 0)
				{
					if($noOfAdult!=0)
					{
						$totalAmount += $noOfAdult*$mealsFare;
						$mealsTotal += $noOfAdult*$mealsFare;
					}
					if($noOfChild!=0)
					{
						$totalAmount += $noOfChild*$mealsFare;
						$mealsTotal += $noOfChild*$mealsFare;
					}
				}		
			}
		}
		
		$splitArrayValue[0]['adultBaseFareTotal']=$adultBaseFareTotal;
		$splitArrayValue[0]['childBaseFareTotal']=$childBaseFareTotal;
		$splitArrayValue[0]['infantBaseFareTotal']=$infantBaseFareTotal;
		$splitArrayValue[0]['adultTaxTotal']=$adultTaxTotal;
		$splitArrayValue[0]['childTaxTotal']=$childTaxTotal;
		$splitArrayValue[0]['infantTaxTotal']=$infantTaxTotal;
		$splitArrayValue[0]['baggageTotal']=$baggageTotal;
		$splitArrayValue[0]['mealsTotal']=$mealsTotal;
		$splitArrayValue[0]['ssrUpdatedDate']=$this->_Osmarty->getConfigVars("COMMON_OFFER_ACCEPTED");
		$splitArrayValue[0]['requestTotal']=($adultBaseFareTotal+$childBaseFareTotal+$infantBaseFareTotal+$adultTaxTotal+$childTaxTotal+$infantTaxTotal+$tigerConnectTotal+$baggageTotal+$mealsTotal);
		$splitArrayValue[0]['requestType']=$requestType;

		$sqlSelectSsrMaster="SELECT
						ssr_master_id,
						ssr_updated_date
				     FROM
						".$CFG['db']['tbl']['ssr_master']."
				     WHERE
						request_master_id='".$requestMasterId."' ORDER BY ssr_master_id";

		if(DB::isError($resultSelectSsrMaster=$this->_Oconnection->query($sqlSelectSsrMaster)))
		{
			fileWrite($sqlSelectSsrMaster,"SqlError","a+");
			return false;
		}

		$ssrRequestApprovedValue=array();
		if($resultSelectSsrMaster->numRows() >0)
		{
			$k=1;
			while($rowSelectSsrMaster=$resultSelectSsrMaster->fetchRow(DB_FETCHMODE_ASSOC))
			{
				$rowSelectSsrMaster['ssr_updated_date']=$this->_getUserDateFormatValue($rowSelectSsrMaster['ssr_updated_date']);
				$rowSelectSsrMaster['ssr_updated_date']=date('d-M-Y H:i:s',strtotime($rowSelectSsrMaster['ssr_updated_date']));

				$baggageTotal=0;
				$mealsTotal=0;

				if($requestType=="SERIES")
				{
					$sqlSelectSsrDetails="SELECT
												request_approved_flight_id,
												sum(meals_fare) as mealsFare,
												sum(baggage_fare) as baggageFare
											FROM
												".$CFG['db']['tbl']['request_approved_flight_details']."
											WHERE
												transaction_master_id='".$transactionMasterId."' AND 
												accepted_flight_status='Y'";
						
					if(DB::isError($resultSelectSsrDetails=$this->_Oconnection->query($sqlSelectSsrDetails)))
					{
						fileWrite($sqlSelectSsrDetails,"SqlError","a+");
						return false;
					}
					if($resultSelectSsrDetails->numRows() >0)
					{
						while($rowSelectSsrDetails=$resultSelectSsrDetails->fetchRow(DB_FETCHMODE_ASSOC))
						{
							$requestApprovedFlightId=$rowSelectSsrDetails['request_approved_flight_id'];
							$mealsTotal += $rowSelectSsrDetails['mealsFare'];
							$baggageTotal += $rowSelectSsrDetails['baggageFare'];
						}
						$tempArrayValue=array();
						$tempArrayValue['requestApprovedFlightId']=$requestApprovedFlightId;
						$tempArrayValue['mealsTotal']=$mealsTotal;
						$tempArrayValue['baggageTotal']=$baggageTotal;
						$tempArrayValue['ssrUpdatedDate']=$rowSelectSsrMaster['ssr_updated_date'];
						$tempArrayValue['sector']="";
						$tempArrayValue['travelDate']="";

						$sqlSelectSectorInfo="SELECT
										source,
										destination,
										departure_date,
										dep_time
								      FROM
										".$CFG['db']['tbl']['request_approved_flight_details']."
								      WHERE
										request_approved_flight_id='".$requestApprovedFlightId."'";

						if(DB::isError($resultSelectSectorInfo=$this->_Oconnection->query($sqlSelectSectorInfo)))
						{
							fileWrite($sqlSelectSectorInfo,"SqlError","a+");
							return false;
						}
						if($resultSelectSectorInfo->numRows() >0)
						{
							$rowSelectSectorInfo=$resultSelectSectorInfo->fetchRow(DB_FETCHMODE_ASSOC);
							$tempArrayValue['sector']=$rowSelectSectorInfo['source']."-".$rowSelectSectorInfo['destination'];
							$tempArrayValue['travelDate']=$rowSelectSectorInfo['departure_date']." ".$rowSelectSectorInfo['dep_time'].":00";	
							$tempArrayValue['travelDate']=date('d-M-Y H:i:s',strtotime($tempArrayValue['travelDate']));
						}

						$ssrRequestApprovedValue[$requestApprovedFlightId][]=$tempArrayValue;
					}
	
				}
				else
				{
					$sqlSelectSsrDetails="SELECT
												sum(meals_fare) as mealsFare,
												sum(baggauge_fare) as baggageFare
											FROM
												".$CFG['db']['tbl']['request_approved_flight_details']."
											WHERE
												transaction_master_id='".$transactionMasterId."' AND 
												accepted_flight_status='Y'";

					if($requestApprovedFlightId!=0)
						$ssrDetails.=" AND request_approved_flight_id='".$requestApprovedFlightId."'";
						
					if(DB::isError($resultSelectSsrDetails=$this->_Oconnection->query($sqlSelectSsrDetails)))
					{
						fileWrite($sqlSelectSsrDetails,"SqlError","a+");
						return false;
					}
					if($resultSelectSsrDetails->numRows() >0)
					{
						while($rowSelectSsrDetails=$resultSelectSsrDetails->fetchRow(DB_FETCHMODE_ASSOC))
						{
							$mealsTotal += $rowSelectSsrDetails['mealsFare'];
							$baggageTotal += $rowSelectSsrDetails['baggageFare'];
						}
					}

					$splitArrayValue[$k]['adultBaseFareTotal']=$adultBaseFareTotal;
					$splitArrayValue[$k]['childBaseFareTotal']=$childBaseFareTotal;
					$splitArrayValue[$k]['infantBaseFareTotal']=$infantBaseFareTotal;
					$splitArrayValue[$k]['adultTaxTotal']=$adultTaxTotal;
					$splitArrayValue[$k]['childTaxTotal']=$childTaxTotal;
					$splitArrayValue[$k]['infantTaxTotal']=$infantTaxTotal;
					$splitArrayValue[$k]['tigerConnectTotal']=$tigerConnectTotal;
					$splitArrayValue[$k]['baggageTotal']=$baggageTotal;
					$splitArrayValue[$k]['mealsTotal']=$mealsTotal;
					$splitArrayValue[$k]['ssrUpdatedDate']=$rowSelectSsrMaster['ssr_updated_date'];
					$splitArrayValue[$k]['requestTotal']=($adultBaseFareTotal+$childBaseFareTotal+$infantBaseFareTotal+$adultTaxTotal+$childTaxTotal+$infantTaxTotal+$tigerConnectTotal+$baggageTotal+$mealsTotal);
					$k++;	
				}							
			}
		}

		$lastTotalAmount=0;
		foreach($ssrRequestApprovedValue as $key=>$value)
		{			
			foreach($value as $subKey=>$subValue)
			{
				$baggageTotal=$subValue['baggageTotal'];
				$mealsTotal=$subValue['mealsTotal'];
				$ssrUpdatedDate=$subValue['ssrUpdatedDate'];
				$sector=$subValue['sector'];
				$travelDate=$subValue['travelDate'];

				$splitArrayValue[$k]['sector']=$sector;
				$splitArrayValue[$k]['travelDate']=$travelDate;
				$splitArrayValue[$k]['adultBaseFareTotal']=$adultBaseFareTotal;
				$splitArrayValue[$k]['childBaseFareTotal']=$childBaseFareTotal;
				$splitArrayValue[$k]['infantBaseFareTotal']=$infantBaseFareTotal;
				$splitArrayValue[$k]['adultTaxTotal']=$adultTaxTotal;
				$splitArrayValue[$k]['childTaxTotal']=$childTaxTotal;
				$splitArrayValue[$k]['infantTaxTotal']=$infantTaxTotal;
				$splitArrayValue[$k]['tigerConnectTotal']=$tigerConnectTotal;
				$splitArrayValue[$k]['baggageTotal']=$baggageTotal;
				$splitArrayValue[$k]['mealsTotal']=$mealsTotal;
				$splitArrayValue[$k]['ssrUpdatedDate']=$ssrUpdatedDate;
				$splitArrayValue[$k]['requestTotal']=($adultBaseFareTotal+$childBaseFareTotal+$infantBaseFareTotal+$adultTaxTotal+$childTaxTotal+$infantTaxTotal+$tigerConnectTotal+$baggageTotal+$mealsTotal+$lastTotalAmount);
				$k++;
			}
			$lastTotalAmount=$splitArrayValue[$k-1]['baggageTotal']+$splitArrayValue[$k-1]['mealsTotal'];
		}
		$splitArrayValue[0]['sector']="";
		$splitArrayValue[0]['travelDate']="";

		$paymentTransactions=array();
		$sqlSelectPaymentDatails = "SELECT
							percentage_amount as paidAmt,
							paid_date paidDate,
							paid_date paidDateDisp
					    FROM
							".$CFG['db']['tbl']['payment_master']."
					    WHERE
							airlines_request_id='".$airlinesRequestId."' 
							AND (payment_status=10 OR payment_status=12)
							ORDER BY payment_master_id";

		if(DB::isError($resultSelectPaymentDatails = $this->_Oconnection->query($sqlSelectPaymentDatails))) 
		{
			fileWrite($sqlSelectPaymentDatails,"SqlError","a+");
			return false;
		}

		while($rowSelectPaymentDatails = $resultSelectPaymentDatails->fetchRow(DB_FETCHMODE_ASSOC)) 
		{
			$rowSelectPaymentDatails['paidDateDisp']=$this->_getUserDateFormatValue($rowSelectPaymentDatails['paidDateDisp']);
			$rowSelectPaymentDatails['paidDateDisp']=date('d-M-Y H:i:s',strtotime($rowSelectPaymentDatails['paidDateDisp']));
			$paymentTransactions[]=$rowSelectPaymentDatails;
		}

		$paidAmount=$this->_getPaidAmount($requestMasterId);
		$splitArrayValue[0]['paidAmount']=($paidAmount == "" ? 0 : $paidAmount);
		$splitArrayValue[0]['finalTotalAmount']=$splitArrayValue[count($splitArrayValue)-1]['requestTotal'];
		$splitArrayValue[0]['amountToPay']=round(($splitArrayValue[0]['finalTotalAmount']-$splitArrayValue[0]['paidAmount']),2);
		$splitArrayValue[0]['paymentTransactions']=$paymentTransactions;

		return $splitArrayValue;		
	}

	/*Modified By: Subalakshmi S 27-08-2018
		Desc     : The below lines are commented since it is called in 
		 			class.fetchPolicyDetails.php file*/
		 			
	/*function _fetchFareTypePolicy($givenPolicyArray)
	{
		global $CFG;
		$returnArray=array();
		$policyMasterValueArray=array();
		
		$_AstaticData = $this->_staticData('_fetchFareTypePolicy',$givenPolicyArray['requestedDate']);
		if($_AstaticData !== false)
		{
			$_AfareTypePolicyArray = $_AstaticData;
		}
		else
		{
			$_AfareTypePolicyArray = array();
			$sqlSelectFareTypePolicyMaster="SELECT
								fare_type_policy_id,
								fare_type_policy_name,
								fare_type_matrix_id,
								priority,
								policy_dow,
								created_date
							 FROM
								".$CFG['db']['tbl']['fare_type_policy_master']."
							 WHERE
								active_status='Y'
								AND ('".$givenPolicyArray['requestedDate']."' BETWEEN start_date AND end_date)";
								
			if(DB::isError($resultSelectFareTypePolicyMaster=$this->_Oconnection->query($sqlSelectFareTypePolicyMaster)))
			{
				fileWrite($sqlSelectFareTypePolicyMaster,"SqlError","a+");
				return false;
			}
			
			if($resultSelectFareTypePolicyMaster->numRows() > 0)
			{
				$policyDowStatus="Y";
				while($rowSelectFareTypePolicyMaster=$resultSelectFareTypePolicyMaster->fetchRow(DB_FETCHMODE_ASSOC))
				{
					$_AfareTypePolicyArray[] = $rowSelectFareTypePolicyMaster;
				}
			}
			$this->_staticData('_fetchFareTypePolicy',$givenPolicyArray['requestedDate'],$_AfareTypePolicyArray);
		}
		
		if(!empty($_AfareTypePolicyArray))
		{
			foreach($_AfareTypePolicyArray AS $key => $rowSelectFareTypePolicyMaster)
			{
				if($this->_getPolicyDayOfWeekStatus($givenPolicyArray['requestedDate'],$rowSelectFareTypePolicyMaster['policy_dow'])=="Y")
				{
					$_AstaticData = $this->_staticData('_fetchFareTypePolicy_policyDetails',$rowSelectFareTypePolicyMaster['fare_type_policy_id']);
					if($_AstaticData !== false)
					{
						$policyDetailsArray = $_AstaticData;
					}
					else
					{
						$sqlSelectFareTypePolicyDetails="SELECT
											ftpd.fare_type_policy_details_id,
											ftpd.fare_type_policy_id,
											ftpd.criteria_id,
											ftpd.loop_value,
											ftpcm.criteria_name,
											ftpcm.criteria_type,
											ftpcm.criteria_logical_id,
											ftpd.operator_id,
											om.operator_name,
											om.logical_value,
											om.operator_type,
											ftpd.policy_value
										 FROM
											".$CFG['db']['tbl']['fare_type_policy_details']." ftpd,
											".$CFG['db']['tbl']['fare_type_policy_criteria_master']." ftpcm,
											".$CFG['db']['tbl']['operator_master']." om
										 WHERE
											ftpd.fare_type_policy_id='".$rowSelectFareTypePolicyMaster['fare_type_policy_id']."'
											AND ftpd.criteria_id=ftpcm.criteria_id
											AND ftpd.operator_id=om.operator_id";
						if(DB::isError($resultSelectFareTypePolicyDetails=$this->_Oconnection->query($sqlSelectFareTypePolicyDetails)))
						{
							fileWrite($sqlSelectFareTypePolicyDetails,"SqlError","a+");
							return false;
						}
						
						$resultValue=0;
						$stringToExecute="";
						$policyDetailsArray = array();
						if($resultSelectFareTypePolicyDetails->numRows() > 0)
						{
							while($rowSelectFareTypePolicyDetails=$resultSelectFareTypePolicyDetails->fetchRow(DB_FETCHMODE_ASSOC))
							{
								$policyDetailsArray[] = $rowSelectFareTypePolicyDetails;
							}
							$this->_staticData('_fetchFareTypePolicy_policyDetails',$rowSelectFareTypePolicyMaster['fare_type_policy_id'],$policyDetailsArray);
						}
						
						$stringToExecute = $this->_getStringToExecuteForAllPolicy($policyDetailsArray,$givenPolicyArray);
					
						if($stringToExecute!="")
						{
							$resultStringToEval="IF( ".$stringToExecute." ){".'$resultValue'."=1;}";
							eval($resultStringToEval);
							if($resultValue==1)
							{
								$policyMasterValueArray[]=$rowSelectFareTypePolicyMaster;
							}
						}
					}
				}
			}
		}
		$minValue=0;
		if(count($policyMasterValueArray) > 0)
		{
			
			$finalInput=array("inputArray"=>$policyMasterValueArray,"firstFieldName"=>"priority","firstFieldOrder"=>"ASC","secondFieldName"=>"created_date","secondFieldOrder"=>"ASC");
			$finalArray=$this->_multipleSortFunction($finalInput);
			$fetchFareTypeForPolicyArray[0]=$finalArray[0];
			$fetchFareTypeForPolicyArray[0]['departureDate']=$givenPolicyArray['departureDate'];
			$fetchFareTypeForPolicyArray[0]['bookedLoad']=$givenPolicyArray['bookedLoad'];
			$fetchFareTypeForPolicyArray[0]['futureLoad']=$givenPolicyArray['futureLoad'];
			$fetchFareTypeForPolicyArray[0]['noOfPax']=$givenPolicyArray['noOfPax'];
			$fetchFareTypeForPolicyArray[0]['policyForecastLoadFactor']=$givenPolicyArray['policyForecastLoadFactor'];
			if(count($fetchFareTypeForPolicyArray) > 0)
			{
				$returnDiscountArray=$this->_getFareTYpeMatrixValue($fetchFareTypeForPolicyArray);
				if(count($returnDiscountArray) > 0)
					$returnArray=$returnDiscountArray;
			}
			/*for($i=0;$i<count($policyMasterValueArray);$i++)
			{
				if($minValue==0 || $policyMasterValueArray[$i]['priority']<=$minValue)
				{
					$minValue=$policyMasterValueArray[$i]['priority'];
				}
			}
			$minIndex="";
			$appendString="";
			for($i=0;$i<count($policyMasterValueArray);$i++)
			{
				if($minValue==$policyMasterValueArray[$i]['priority'])
				{
					$minIndex.=$appendString.$i;
					$appendString=",";
				}
			}

			if($minIndex!="")
			{
				$fetchFareTypeForPolicyArray=array();
				$explodeArray=explode(",",$minIndex);
				for($i=0;$i<count($explodeArray);$i++)
				{
					$fetchFareTypeForPolicyArray[$i]=$policyMasterValueArray[$explodeArray[$i]];
					$fetchFareTypeForPolicyArray[$i]['departureDate']=$givenPolicyArray['departureDate'];
					$fetchFareTypeForPolicyArray[$i]['bookedLoad']=$givenPolicyArray['bookedLoad'];
					$fetchFareTypeForPolicyArray[$i]['noOfPax']=$givenPolicyArray['noOfPax'];
					$fetchFareTypeForPolicyArray[$i]['policyForecastLoadFactor']=$givenPolicyArray['policyForecastLoadFactor'];
				}
				
				fileWrite(print_r($fetchFareTypeForPolicyArray,true),"fet","a+");

				
			}*/
		/*}	
		return $returnArray;
		
	}*/
	/*Modified By: Subalakshmi S 27-08-2018
		Desc     : The below lines are commented since it is called in 
		 			class.fetchPolicyDetails.php file*/
		 			
	/*function _getFareTYpeMatrixValue($givenPolicyDetailsArray)
	{
		global $CFG;

		$currentDate=date('Y-m-d');
		$resultArray=array();
		$k=0;
		for($i=0;$i<count($givenPolicyDetailsArray);$i++)
		{
			$departureDate=$givenPolicyDetailsArray[$i]['departureDate'];

			$daysToDeparture=strtotime($departureDate)-strtotime($currentDate);
			$daysToDeparture=floor($daysToDeparture/3600/24);

			$givenPolicyDetailsArray[$i]['daysToDeparture']=$daysToDeparture;
			
			#To check future load value as booked load factor is future load factor is enabled
			if($this->_getLoadFactorTypeDetails('_SfareTypeStatus','FLF')=="Y")
				$_SbookedLoadFactor=$givenPolicyDetailsArray[$i]['futureLoad'];
			else
				$_SbookedLoadFactor=$givenPolicyDetailsArray[$i]['bookedLoad'];
			
			$sqlSelectFareTypeMatrixDetails="SELECT
								ftm.fare_type_matrix_id,
								ftm.fare_type_matrix_name,
								ftmd.fare_type_mapping_id,
								ftmd.days_to_departure,
								ftmd.booked_load_factor,
								ftmd.forecast_load_factor
						  	 FROM
								".$CFG['db']['tbl']['fare_type_matrix']." ftm,
								".$CFG['db']['tbl']['fare_type_mapping_details']." ftmd
						  	 WHERE
								ftm.fare_type_matrix_id='".$givenPolicyDetailsArray[$i]['fare_type_matrix_id']."'
								AND ftm.fare_type_matrix_id=ftmd.fare_type_matrix_id";
								
			/*if($CFG['fareTypePolicy']['averageFareCaluculation']=="Y")
			{
				$daysToDepartureJoin=" AND (ftmd.days_to_departure=(SELECT days_to_departure FROM ".$CFG['db']['tbl']['fare_type_mapping_details']." WHERE fare_type_matrix_id='".$givenPolicyDetailsArray[$i]['fare_type_matrix_id']."' AND days_to_departure >='".$daysToDeparture."' order by days_to_departure limit 1) OR 
								ftmd.days_to_departure=(SELECT days_to_departure FROM ".$CFG['db']['tbl']['fare_type_mapping_details']." WHERE fare_type_matrix_id='".$givenPolicyDetailsArray[$i]['fare_type_matrix_id']."' AND days_to_departure <='".$daysToDeparture."' order by days_to_departure desc limit 1)) ";
				$bookedLoadJoin=" AND (ftmd.booked_load_factor=(SELECT booked_load_factor FROM ".$CFG['db']['tbl']['fare_type_mapping_details']." WHERE fare_type_matrix_id='".$givenPolicyDetailsArray[$i]['fare_type_matrix_id']."' AND booked_load_factor >='".$givenPolicyDetailsArray[$i]['bookedLoad']."' order by booked_load_factor limit 1) OR 
								ftmd.booked_load_factor=(SELECT booked_load_factor FROM ".$CFG['db']['tbl']['fare_type_mapping_details']." WHERE fare_type_matrix_id='".$givenPolicyDetailsArray[$i]['fare_type_matrix_id']."' AND booked_load_factor <='".$givenPolicyDetailsArray[$i]['bookedLoad']."' order by booked_load_factor desc limit 1))";
				$forecastLoadJoin=" AND ftmd.forecast_load_factor=(SELECT forecast_load_factor FROM ".$CFG['db']['tbl']['fare_type_mapping_details']." WHERE fare_type_matrix_id='".$givenPolicyDetailsArray[$i]['fare_type_matrix_id']."' AND forecast_load_factor <='".$givenPolicyDetailsArray[$i]['policyForecastLoadFactor']."' order by forecast_load_factor desc limit 1)";
				//$forecastLoadJoin=" AND (dmp.forecast_load_factor=(SELECT forecast_load_factor FROM ".$CFG['db']['tbl']['discount_mapping_details']." WHERE discount_matrix_id='".$givenPolicyDetailsArray[$i]['discount_matrix_id']."' AND forecast_load_factor >='".$givenPolicyDetailsArray[$i]['policyForecastLoadFactor']."' order by forecast_load_factor limit 1) OR 
								///dmp.forecast_load_factor=(SELECT forecast_load_factor FROM ".$CFG['db']['tbl']['discount_mapping_details']." WHERE discount_matrix_id='".$givenPolicyDetailsArray[$i]['discount_matrix_id']."' AND forecast_load_factor <='".$givenPolicyDetailsArray[$i]['policyForecastLoadFactor']."' order by forecast_load_factor desc limit 1))";
								
			}
			else*/
			/*{
				$daysToDepartureJoin=" AND (ftmd.days_to_departure=(SELECT days_to_departure FROM ".$CFG['db']['tbl']['fare_type_mapping_details']." WHERE fare_type_matrix_id='".$givenPolicyDetailsArray[$i]['fare_type_matrix_id']."' AND days_to_departure <='".$daysToDeparture."' order by days_to_departure desc limit 1))";
				$bookedLoadJoin=" AND (ftmd.booked_load_factor=(SELECT booked_load_factor FROM ".$CFG['db']['tbl']['fare_type_mapping_details']." WHERE fare_type_matrix_id='".$givenPolicyDetailsArray[$i]['fare_type_matrix_id']."' AND booked_load_factor <='".$_SbookedLoadFactor."' order by booked_load_factor desc limit 1))";
				$forecastLoadJoin=" AND (ftmd.forecast_load_factor=(SELECT forecast_load_factor FROM ".$CFG['db']['tbl']['fare_type_mapping_details']." WHERE fare_type_matrix_id='".$givenPolicyDetailsArray[$i]['fare_type_matrix_id']."' AND forecast_load_factor <='".$givenPolicyDetailsArray[$i]['policyForecastLoadFactor']."' order by forecast_load_factor desc limit 1))";
								
			}
			$sqlSelectFareTypeMatrixDetails.=$daysToDepartureJoin.$bookedLoadJoin.$forecastLoadJoin;
			if(DB::isError($resultSelectFareTypeMatrixDetails=$this->_Oconnection->query($sqlSelectFareTypeMatrixDetails)))
			{
				fileWrite($sqlSelectFareTypeMatrixDetails,"SqlError","a+");
				return false;
			}
			
			if($resultSelectFareTypeMatrixDetails->numRows() > 0)
			{
				
				while($rowSelectFareTypeMatrixDetails=$resultSelectFareTypeMatrixDetails->fetchRow(DB_FETCHMODE_ASSOC))
				{
					$sqlSelectFareTypeValueMapping="SELECT
										ftvm.fare_type_value_id,
										ftvm.group_size,
										ftvm.fare_type_alias
								        FROM
										".$CFG['db']['tbl']['fare_type_value_mapping']." ftvm
								        WHERE
										ftvm.fare_type_mapping_id='".$rowSelectFareTypeMatrixDetails['fare_type_mapping_id']."'";
										//AND (ftvm.group_size=(SELECT group_size FROM ".$CFG['db']['tbl']['fare_type_value_mapping']." WHERE fare_type_mapping_id='".$rowSelectFareTypeMatrixDetails['fare_type_mapping_id']."' AND group_size<='".$givenPolicyDetailsArray[$i]['noOfPax']."' order by group_size desc limit 1))";					
					/*if($CFG['fareTypePolicy']['averageFareCaluculation']=="Y")
					{
						$groupPaxJoin="	AND (ftvm.group_size=(SELECT group_size FROM ".$CFG['db']['tbl']['fare_type_value_mapping']." WHERE fare_type_mapping_id='".$rowSelectFareTypeMatrixDetails['fare_type_mapping_id']."' AND group_size>='".$givenPolicyDetailsArray[$i]['noOfPax']."' order by group_size limit 1) OR 
										ftvm.group_size=(SELECT group_size FROM ".$CFG['db']['tbl']['fare_type_value_mapping']." WHERE fare_type_mapping_id='".$rowSelectFareTypeMatrixDetails['fare_type_mapping_id']."' AND group_size<='".$givenPolicyDetailsArray[$i]['noOfPax']."' order by group_size desc limit 1))";
					}
					else*/
					/*{
						$groupPaxJoin="	AND ftvm.group_size=(SELECT group_size FROM ".$CFG['db']['tbl']['fare_type_value_mapping']." WHERE fare_type_mapping_id='".$rowSelectFareTypeMatrixDetails['fare_type_mapping_id']."' AND group_size<='".$givenPolicyDetailsArray[$i]['noOfPax']."' order by group_size desc limit 1)";
					}	
					$sqlSelectFareTypeValueMapping.=$groupPaxJoin;
					if(DB::isError($resultSelectFareTypeValueMapping=$this->_Oconnection->query($sqlSelectFareTypeValueMapping)))
					{
						fileWrite($sqlSelectFareTypeValueMapping,"SqlError","a+");
						return false;
					}
					
					if($resultSelectFareTypeValueMapping->numRows() > 0)
					{						
						while($rowSelectFareTypeValueMapping=$resultSelectFareTypeValueMapping->fetchRow(DB_FETCHMODE_ASSOC))
						{

							$resultArray[$k]=$givenPolicyDetailsArray[$i];							
							$resultArray[$k]['fareType']=$rowSelectFareTypeValueMapping['fare_type_alias'];
							if($rowSelectFareTypeValueMapping['group_size']==0)
								$rowSelectFareTypeValueMapping['group_size']="All";
							$resultArray[$k]['groupSize']=$rowSelectFareTypeValueMapping['group_size'];
							$k++;
						}

					}
				}
			}
		}
		return $resultArray;		
	}*/
	
	function _getAirlineRequestId($_IrequestMasterId)
	{
		global $CFG;
		
		$_Svariable = $_IrequestMasterId;
		$_AstaticData = $this->_staticData("_getAirlineRequestId",$_Svariable);
		if($_AstaticData !== false)
			return $_AstaticData;			
		
		$sql="SELECT 
					airlines_request_id
				FROM
					".$CFG['db']['tbl']['airlines_request_mapping']."
				WHERE
					request_master_id = ".$_IrequestMasterId;

		if(DB::isError($result=$this->_Oconnection->query($sql)))
		{
			fileWrite($sql,"SqlError","a+");
			return false;
		}
		
		if($result->numRows() >0)
		{
			$row = $result->fetchRow(DB_FETCHMODE_ASSOC);
			$this->_staticData("_getAirlineRequestId",$_Svariable,$row['airlines_request_id']);
			return $row['airlines_request_id'];
		}
		return 0;
	}

	function _splitSeriesPnrPayment($requestMasterId,$paymentPercent,$paymentAmount)
	{
		global $CFG;

		$sqlGetUserCurrency="SELECT
							user_currency
						 FROM
							".$CFG['db']['tbl']['request_master']."
						 WHERE
							request_master_id ='".$requestMasterId."'";
		if(DB::isError($resultOfUserCurrency=$this->_Oconnection->query($sqlGetUserCurrency)))
		{
			fileWrite($sqlGetUserCurrency,"SqlError","a+");
			return false;
		}
		if($resultOfUserCurrency->numRows() >0)
		{
			$rowOfUserCurrency=$resultOfUserCurrency->fetchRow(DB_FETCHMODE_ASSOC);
			$userCurrency=$rowOfUserCurrency['user_currency'];
		}

		$sql="SELECT 
				DISTINCT pnr 
			FROM 
				".$CFG['db']['tbl']['request_details']." 
			WHERE 
				request_master_id=".$requestMasterId; 

		if(DB::isError($result = $this->_Oconnection->query($sql)))
		{
			fileWrite($sql,"SqlError","a+");
			return false;
		}
		$countLoop=$result->numRows();

		$_Apnr = array();
		if ($result->numRows() > 0)
		{
			while($row=$result->fetchRow(DB_FETCHMODE_ASSOC))
			{
				if(strtoupper($row['pnr'])=="MULTIPLE") 
				{
					$pnrArray = explode(",",$this->_getMultiplePnr($requestMasterId));
					$_Apnr = $pnrArray;
				}
				else 
				{
					$_Apnr[] = $row['pnr'];
				}
			}
		}
		$_Apnr = array_unique($_Apnr);

		$pnrPayment=array();
		$_IpaidAmountVal=0;
		$_IpnrAmountVal=0;
		$_IpnrCount=0;
		$_IremainingAmountVal=0;
		$_ItotalPayableAmount=0;
		$_ItotalPnrAmount=0;

		foreach($_Apnr AS $_Ipnr)
		{
			$_Ipnr = trim($_Ipnr);
			$_IpnrAmountVal=$this->_getPnrAmountValue($_Ipnr,$requestMasterId);
			if($_IpnrAmountVal==0)
			{
				$_ApnrDetails = $this->_getPnrDetails($requestMasterId,$_Ipnr);
				if($_ApnrDetails && !empty($_ApnrDetails))
				{
					$_IpnrAmountVal = $this->_getTotalAmountProcess($requestMasterId,'Y',$_ApnrDetails[0]['noOfAdult'],$_ApnrDetails[0]['noOfChild'],$_ApnrDetails[0]['noOfInfant']);
				}
			}
			$_IpaidAmountVal = $this->_getPnrPaidAmount($requestMasterId,$_Ipnr);

			$_IremainingAmountVal = $_IpnrAmountVal - $_IpaidAmountVal;
			$pnrPayment[$_Ipnr]['payment_percentage'] = 0;
			$pnrPayment[$_Ipnr]['payment_amount'] = 0;

			if($_IremainingAmountVal>0)
			{
				$_ItotalPaidPercent = $this->_getPaidPercentage($requestMasterId);
				$_ItotalPaymentPercent = round($_ItotalPaidPercent + $paymentPercent);

				$pnrPayment[$_Ipnr]['payment_percentage'] = $_ItotalPaymentPercent;
				if($_ItotalPaymentPercent >= 100)
				{
					$pnrPayment[$_Ipnr]['payment_amount'] = $_IremainingAmountVal;
				}
				else
				{
					$pnrPayment[$_Ipnr]['payment_amount'] = $this->_getRoundOffFare(($_IpnrAmountVal*$paymentPercent)/100,2,$userCurrency);
				}
			}
			$_ItotalPayableAmount += $pnrPayment[$_Ipnr]['payment_amount'];
			$_IpnrCount++;
		}

		if(round($_ItotalPayableAmount,2) != round($paymentAmount,2))
		{
			$_IextraPayableAmount = ($_ItotalPayableAmount - $paymentAmount) / $_IpnrCount;

			foreach($pnrPayment AS $pnrIndx=>$pnrAmt)
			{
				if($pnrAmt['payment_amount'] > 0 && $pnrAmt['payment_percentage'] <= 100)
				{	
					$pnrPayment[$pnrIndx]['payment_amount'] = $pnrAmt['payment_amount'] - $_IextraPayableAmount;
					$pnrPayment[$pnrIndx]['payment_amount'] = $this->_getRoundOffFare($pnrPayment[$pnrIndx]['payment_amount'],2,$userCurrency);
					$_ItotalPnrAmount+=$pnrPayment[$pnrIndx]['payment_amount'];
				}
			}

			$lastPnrAmount=$paymentAmount-$_ItotalPnrAmount;
			$numItems = count($pnrPayment);
			$i = 0;
			foreach($pnrPayment AS $pnrIndx=>$pnrAmt)
			{
				if(++$i === $numItems)
				{
					$pnrPayment[$pnrIndx]['payment_amount']+=$lastPnrAmount;
				}
			}
		}
		return $pnrPayment;
	}

	
	function _getPnrPaidAmount($_IrequestMasterId,$_Spnr='')
	{
		global $CFG;
		
		$condition = '';
		
		if($_Spnr!='')
			$condition = " ppd.pnr = '".$_Spnr."' AND ";
			
		$_IairlinesRequestId = $this->_getAirlineRequestId($_IrequestMasterId);
		$sql="SELECT 
					round(sum(ppd.paid_amount),2) AS paid_amount
				FROM
					".$CFG['db']['tbl']['pnr_payment_details']." ppd,
					".$CFG['db']['tbl']['payment_master']." pm
				WHERE
					".$condition."
					UPPER(ppd.payment_status) = 'APPROVED' AND
					ppd.payment_master_id = pm.payment_master_id AND
					pm.payment_status = 10 AND
					pm.airlines_request_id = ".$_IairlinesRequestId;
		if(DB::isError($result=$this->_Oconnection->query($sql)))
		{
			fileWrite($sql,"SqlError","a+");
			return false;
		}
		
		$_IpnrPaidAmount = 0;
		
		if($result->numRows() >0)
		{
			$row = $result->fetchRow(DB_FETCHMODE_ASSOC);
			if($row['paid_amount'])
				$_IpnrPaidAmount = $row['paid_amount'];
		}
		return $_IpnrPaidAmount;
	}
	
	function _getPaidPercentage($_IrequestMasterId)
	{
		global $CFG;
		
		$_IairlinesRequestId = $this->_getAirlineRequestId($_IrequestMasterId);
		$sql = "SELECT
					round(sum(payment_percentage),2) as paidPercentage
				FROM
				".$CFG['db']['tbl']['payment_master']."
				WHERE
					airlines_request_id='".$_IairlinesRequestId."' AND 
					payment_status IN (10,12) ";

		if(DB::isError($result = $this->_Oconnection->query($sql))) 
		{
			fileWrite($sql,"SqlError","a+");
			return false;
		}
		
		$_IpaidPercentage = 0;
		while($row = $result->fetchRow(DB_FETCHMODE_ASSOC))
	    {
		    $_IpaidPercentage=$row['paidPercentage'];
	    }
	    return $_IpaidPercentage;
	}
	
	function _setPaymentPercentage($_IrequestMasterId)
	{
		global $CFG;
		$_IairlinesRequestId = $this->_getAirlineRequestId($_IrequestMasterId);
		$_IpaidAmount = $this->_getPaidAmount($_IairlinesRequestId);
		$_IpaidPercentage = $this->_getPaidPercentage($_IrequestMasterId);
		$_ItotalAmount = $this->_getRequestTotalAmount($_IrequestMasterId);
		if($_IpaidAmount == $_ItotalAmount && $_IpaidPercentage!=100)
		{
			$sql = "SELECT
						payment_master_id,
						payment_percentage
					FROM
						".$CFG['db']['tbl']['payment_master']."
					WHERE
						airlines_request_id='".$_IairlinesRequestId."' AND 
						payment_status IN (10,12)
					ORDER BY
						payment_master_id";

			if(DB::isError($result = $this->_Oconnection->query($sql))) 
			{
				fileWrite($sql,"SqlError","a+");
				return false;
			}
			
			if($result->numRows() >0)
			{
				$_IpaymentPercentage = 0;
				$_IlastPaymentPercentage = 0;
				$_IpaymentMasterId = 0;
				while($row = $result->fetchRow(DB_FETCHMODE_ASSOC))
				{
					$_IpaymentPercentage += round($row['payment_percentage'],2);
					$_IlastPaymentPercentage = round($row['payment_percentage'],2);
					$_IpaymentMasterId = $row['payment_master_id'];
				}
				
				if($_IpaymentMasterId !=0 && $_IpaymentPercentage != 100)
				{
					$_IadjPaidPercentage = $_IlastPaymentPercentage + round(100-$_IpaymentPercentage,2);
					
					if($_IadjPaidPercentage != $_IlastPaymentPercentage)
					{
						$sqlUpdate = "UPDATE 
										".$CFG['db']['tbl']['payment_master']."
									SET
										payment_percentage = ".$_IadjPaidPercentage."
									WHERE
										payment_master_id = ".$_IpaymentMasterId."
									LIMIT 1";
						if(DB::isError($resultUpdate = $this->_Oconnection->query($sqlUpdate))) 
						{
							fileWrite($sqlUpdate,"SqlError","a+");
							return false;
						}
					}
				}
			}
		}
		return true;
	}
	function _getRequestAirportCountryTime($requestMasterId)
	{
		global $CFG;

		$_AminTravelDateArray=array();
		$_AmodifyCheck = array();
		$_AmodifyCheck = $this->_checkIsModify($requestMasterId);

		if(!empty($_AmodifyCheck) && $_AmodifyCheck['requestModifyStatus'] == 'Y')
		{
			$sql = "SELECT 
						request_details_history_id as requestId,
						origin_airport_code
					FROM
						".$CFG['db']['tbl']['request_details_history']." 
					WHERE 
						request_master_history_id = ".$_AmodifyCheck['requestMasterHistoryId']."
					ORDER BY
						request_details_history_id";

		}
		else
		{
			$sql = "SELECT 
					request_id as requestId,
					origin_airport_code
				FROM
					".$CFG['db']['tbl']['request_details']." 
				WHERE 
					request_master_id = ".$requestMasterId." 
				ORDER BY
					request_id";
		}
		
		if(DB::isError($result=$this->_Oconnection->query($sql)))
		{
			fileWrite($sql,"SqlError","a+");
			return false;
		}

		if($result->numRows() >0)
		{
			while($row=$result->fetchRow(DB_FETCHMODE_ASSOC))
			{
				$_IrequestId=$row['requestId'];
				$_SairportCode=$row['origin_airport_code'];
				$_DcurrentTimeOfGivenCountry=$this->_getAirportCodeCurrentTime($_SairportCode);
				$_AminTravelDateArray[$_IrequestId]=array();
				$_AminTravelDateArray[$_IrequestId]['currentTime']=$_DcurrentTimeOfGivenCountry;
			}
		}
		return json_encode($_AminTravelDateArray);
	}

	function _getAirportCodeCurrentTime($givenAirportCode,$returnInterval = false)
	{
		global $CFG;		
		
		$_Svariable = $givenAirportCode."_".intval($returnInterval);
		$_AstaticData = $this->_staticData("_getAirportCodeCurrentTime",$_Svariable);
		if($_AstaticData !== false)
			return $_AstaticData;	
		
		if($givenAirportCode!="")
		{
			$sqlSelectCountryCode="SELECT
							country_code
					       FROM
							airport_details
					       WHERE
							airport_code='".$givenAirportCode."' LIMIT 1";

			if(DB::isError($resultSelectCountryCode=$this->_Oconnection->query($sqlSelectCountryCode)))
			{
				fileWrite($sqlSelectCountryCode,"SqlError","a+");
				return false;
			}

			if($resultSelectCountryCode->numRows() >0)
			{
				$rowSelectCountryCode=$resultSelectCountryCode->fetchRow(DB_FETCHMODE_ASSOC);
				$countryCode=$rowSelectCountryCode['country_code'];
				$timeZoneDetails=$this->_getTimeZoneForCountry($countryCode);

				$timeZoneInterval=$timeZoneDetails[0]['timeZone'];
				if($returnInterval == true) {
					$this->_staticData("_getAirportCodeCurrentTime",$_Svariable,$timeZoneInterval);
					return $timeZoneInterval;
				}
				$currenctUTCDate=$this->_getUTCDateValue();
				$currentTimeOfGivenCountry=$this->_getTimeZoneDateFormatValue($currenctUTCDate,$timeZoneInterval);
			}
		}else{
			$timeZoneDetails=$this->_getTimeZoneForCountry($CFG['site']['defaultCountryCode']);
			$timeZoneInterval=$timeZoneDetails[0]['timeZone'];
			if($returnInterval == true) {
				$this->_staticData("_getAirportCodeCurrentTime",$_Svariable,$timeZoneInterval);
				return $timeZoneInterval;
			}
			$currenctUTCDate=$this->_getUTCDateValue();
			$currentTimeOfGivenCountry=$this->_getTimeZoneDateFormatValue($currenctUTCDate,$timeZoneInterval);

		}
		$this->_staticData("_getAirportCodeCurrentTime",$_Svariable,$currentTimeOfGivenCountry);
		return $currentTimeOfGivenCountry;
	}
	function _getFareTypeName($_fareTypeCode)
	{
		global $CFG;
		
		$_AstaticData = $this->_staticData("_getFareTypeName",$_fareTypeCode);
		if($_AstaticData !== false)
			return $_AstaticData;
		
		$sql = "SELECT
					fare_type_name
				FROM 
					".$CFG['db']['tbl']['fare_type_master']."
				WHERE
					fare_type_alias = '".$_fareTypeCode."'
				LIMIT 1";
		if(DB::isError($result = $this->_Oconnection->query($sql))) 
		{
			fileWrite($sql,"SqlError","a+");
			return false;
		}
		$_SfareType = '';
		if($result->numRows() >0)
		{
			$row = $result->fetchRow(DB_FETCHMODE_ASSOC);
			$_SfareType = $row['fare_type_name'];
		}
		$this->_staticData("_getFareTypeName",$_fareTypeCode,$_SfareType);
		return $_SfareType;
	}

	#merge flight and fare and details
	function _mergeFlightFareDetails($_AsearchedFlights,$_AsearchedFares)
	{
		foreach($_AsearchedFlights as $totFlightKey => $totFlightVal)
		{
			$totFlightVal = json_decode($totFlightVal,true);
			foreach($_AsearchedFares as $totFareKey => $totFareVal)
			{
				if($totFlightKey==$totFareKey)
				{
					$totFareVal = json_decode($totFareVal,true);
					foreach($totFlightVal as $flightKey=>$flightVal)
					{
						foreach($totFareVal as $fareKey=>$fareVal)
						{
							if($flightVal['row_index'] == $fareVal['row_index'])
							{
								$totFlightVal[$flightKey]['fareDetails'] = $fareVal;
							}
						}
					}
				}
			}
			foreach($totFlightVal as $flightKey=>$flightVal)
			{
				if(!isset($flightVal['fareDetails']) && !is_array($flightVal['fareDetails']))
					unset($totFlightVal[$flightKey]);
			}
			$totFlightVal = array_values($totFlightVal);
			$_AsearchedFlights[$totFlightKey] = json_encode($totFlightVal);
		}
		return $_AsearchedFlights;
	}

	function _fetchStaticFarePolicy($givenPolicyArray)
	{
		global $CFG;
		
		$returnArray=array();
		$policyMasterValueArray=array();
		$sqlSelectFareTypePolicyMaster="SELECT
							sfpm.policy_id,
							sfpm.policy_name,
							sfpm.booking_profile_id,
							sfpm.priority,
							sfpm.created_date,
							bfd.booking_profile_name,
							bfd.booking_profile_type
						 FROM
							".$CFG['db']['tbl']['static_fare_policy_master']." sfpm,
							".$CFG['db']['tbl']['booking_profile_details']." bfd
						 WHERE
							sfpm.booking_profile_id=bfd.booking_profile_id
							AND sfpm.active_status='Y'
							AND ('".$givenPolicyArray['requestedDate']."' BETWEEN sfpm.start_date AND sfpm.end_date)";
							
		if(DB::isError($resultSelectFareTypePolicyMaster=$this->_Oconnection->query($sqlSelectFareTypePolicyMaster)))
		{
			fileWrite($sqlSelectFareTypePolicyMaster,"SqlError","a+");
			return false;
		}

		if($resultSelectFareTypePolicyMaster->numRows() > 0)
		{
			while($rowSelectFareTypePolicyMaster=$resultSelectFareTypePolicyMaster->fetchRow(DB_FETCHMODE_ASSOC))
			{
				$sqlSelectFareTypePolicyDetails="SELECT
									sfpd.policy_details_id,
									sfpd.policy_id,
									sfpd.criteria_id,
									sfcm.criteria_name,
									sfcm.criteria_type,
									sfcm.criteria_logical_id,
									sfpd.operator_id,
									om.operator_name,
									om.logical_value,
									om.operator_type,
									sfpd.policy_value
								 FROM
									".$CFG['db']['tbl']['static_fare_policy_details']." sfpd,
									".$CFG['db']['tbl']['static_fare_criteria_master']." sfcm,
									".$CFG['db']['tbl']['operator_master']." om
								 WHERE
									sfpd.policy_id='".$rowSelectFareTypePolicyMaster['policy_id']."'
									AND sfpd.criteria_id=sfcm.criteria_id
									AND sfpd.operator_id=om.operator_id";

				if(DB::isError($resultSelectFareTypePolicyDetails=$this->_Oconnection->query($sqlSelectFareTypePolicyDetails)))
				{
					fileWrite($sqlSelectFareTypePolicyDetails,"SqlError","a+");
					return false;
				}

				$resultValue=0;
				$stringToExecute="";
				$andCondition="";

				if($resultSelectFareTypePolicyDetails->numRows() > 0)
				{
					while($rowSelectFareTypePolicyDetails=$resultSelectFareTypePolicyDetails->fetchRow(DB_FETCHMODE_ASSOC))
					{
						if($rowSelectFareTypePolicyDetails['criteria_type']=="S")
						{
							$stringToExecute=$stringToExecute.$andCondition."( strtoupper('".$givenPolicyArray[$rowSelectFareTypePolicyDetails['criteria_logical_id']]."') ".$rowSelectFareTypePolicyDetails['logical_value']." strtoupper('".$rowSelectFareTypePolicyDetails['policy_value']."') )";
						}
						
						if($rowSelectFareTypePolicyDetails['criteria_type']=="D" && $rowSelectFareTypePolicyDetails['logical_value']=="BTWN")
						{
							$valueArray=explode("@%@",$rowSelectFareTypePolicyDetails['policy_value']);

							$stringToExecute=$stringToExecute.$andCondition."( strtotime('".$givenPolicyArray[$rowSelectFareTypePolicyDetails['criteria_logical_id']]."') >= strtotime('".$valueArray[0]."') && strtotime('".$givenPolicyArray[$rowSelectFareTypePolicyDetails['criteria_logical_id']]."') <= strtotime('".$valueArray[1]."') )";

						}
						if($rowSelectFareTypePolicyDetails['criteria_type']=="D" && $rowSelectFareTypePolicyDetails['logical_value']!="BTWN")
						{
							$stringToExecute=$stringToExecute.$andCondition."( strtotime('".$givenPolicyArray[$rowSelectFareTypePolicyDetails['criteria_logical_id']]."') ".$rowSelectFareTypePolicyDetails['logical_value']." strtotime('".$rowSelectFareTypePolicyDetails['policy_value']."') )";
						}
						

						if($rowSelectFareTypePolicyDetails['criteria_type']=="N" && $rowSelectFareTypePolicyDetails['logical_value']=="BTWN")
						{
							$valueArray=explode("@%@",$rowSelectFareTypePolicyDetails['policy_value']);

							$stringToExecute=$stringToExecute.$andCondition."( ".$givenPolicyArray[$rowSelectFareTypePolicyDetails['criteria_logical_id']]." >= ".$valueArray[0]." && ".$givenPolicyArray[$rowSelectFareTypePolicyDetails['criteria_logical_id']]." <= ".$valueArray[1]." )";

						}
						if($rowSelectFareTypePolicyDetails['criteria_type']=="N" && $rowSelectFareTypePolicyDetails['logical_value']!="BTWN")
						{
							$stringToExecute=$stringToExecute.$andCondition."( ".$givenPolicyArray[$rowSelectFareTypePolicyDetails['criteria_logical_id']]." ".$rowSelectFareTypePolicyDetails['logical_value']." ".$rowSelectFareTypePolicyDetails['policy_value']." )";
						}
						

						$andCondition=" && ";
					}
					if($stringToExecute!="")
					{
						$resultStringToEval="IF( ".$stringToExecute." ){".'$resultValue'."=1;}";
						#fileWrite("POLICY_MASTER_ID=".$rowSelectFareTypePolicyMaster['fare_type_policy_id']."--NEW=".$resultStringToEval,"STR								ING","a+");// REM
						eval($resultStringToEval);
						if($resultValue==1)
						{
							$policyMasterValueArray[]=$rowSelectFareTypePolicyMaster;
						}
					}

					
				}
			}
		}

		$minValue=0;

		if(count($policyMasterValueArray) > 0)
		{
			for($i=0;$i<count($policyMasterValueArray);$i++)
			{
				if($minValue==0 || $policyMasterValueArray[$i]['priority']<=$minValue)
				{
					$minValue=$policyMasterValueArray[$i]['priority'];
				}
			}
			$minIndex="";
			$appendString="";
			for($i=0;$i<count($policyMasterValueArray);$i++)
			{
				if($minValue==$policyMasterValueArray[$i]['priority'])
				{
					$minIndex.=$appendString.$i;
					$appendString=",";
				}
			}

			if($minIndex!="")
			{
				$fetchFareTypeForPolicyArray=array();
				$explodeArray=explode(",",$minIndex);
				for($i=0;$i<count($explodeArray);$i++)
				{
					$fetchFareTypeForPolicyArray[$i]=$policyMasterValueArray[$explodeArray[$i]];
					$fetchFareTypeForPolicyArray[$i]['departureDate']=$givenPolicyArray['departureDate'];
					$fetchFareTypeForPolicyArray[$i]['bookedLoad']=$givenPolicyArray['bookedLoad'];
					$fetchFareTypeForPolicyArray[$i]['noOfPax']=$givenPolicyArray['noOfPax'];
				}

				if(count($fetchFareTypeForPolicyArray) > 0)
				{
					$returnDiscountArray=$this->_getMatrixFareValueNew($fetchFareTypeForPolicyArray);

					if(count($returnDiscountArray) > 0)
					{
						$returnArray=array();
						$_IbookingProfileFareCheck = 0;
						foreach($returnDiscountArray AS $_AresultDiscountArray)
						{
							$_IbookingProfileAmount = $_AresultDiscountArray['profile']['fare'];
							if($CFG['settings']['bookingProfileFareTaken'] == "MIN")
							{
								if($_IbookingProfileFareCheck == 0 || $_IbookingProfileFareCheck > $_IbookingProfileAmount)
								{
									$_IbookingProfileFareCheck=$_IbookingProfileAmount;
									$returnArray=array(0=>$_AresultDiscountArray);
								}
							}
							else
							{
								if($_IbookingProfileFareCheck == 0 || $_IbookingProfileFareCheck < $_IbookingProfileAmount)
								{
									$_IbookingProfileFareCheck=$_IbookingProfileAmount;
									$returnArray=array(0=>$_AresultDiscountArray);
								}
							}
						}
					}
				}
			}
		}

		return $returnArray;
	}

	// fetching competitor fare policy

	function _fetchCompetitorFarePolicy($givenPolicyArray,$departureTime,$arrivalTime,$fromDate,$toDate)
	{
		
		global $CFG;
		$returnArray=array();
		$policyMasterValueArray=array();
		$this->_AcheckPolicy=array();
		$sql="SELECT
							cpm.policy_id,
							cpm.policy_name,
							cpm.competitor_rule_master_id,
							cpm.priority,
							cpm.created_date,
							cpm.policy_dow,
							crm.competitor_rule_name
						 FROM
							".$CFG['db']['tbl']['competitor_policy_master']." cpm,
							".$CFG['db']['tbl']['competitor_rule_master']." crm
						 WHERE
							cpm.competitor_rule_master_id=crm.competitor_rule_master_id
							AND cpm.active_status='Y'
							AND ('".$givenPolicyArray['requestedDate']."' BETWEEN cpm.start_date AND cpm.end_date)";
		
		if(DB::isError($result=$this->_Oconnection->query($sql)))
		{
			fileWrite($sql,"SqlError","a+");
			return false;
		}
		if($result->numRows() > 0)
		{
			while($row=$result->fetchRow(DB_FETCHMODE_ASSOC))
			{
				if($this->_getPolicyDayOfWeekStatus($givenPolicyArray['requestedDate'],$row['policy_dow'])=="Y")
				{
					$sqlSelectCompetitorPolicyDetails="SELECT
										cpd.policy_details_id,
										cpd.policy_id,
										cpd.criteria_id,
										cpd.loop_value,
										cpcm.criteria_name,
										cpcm.criteria_type,
										cpcm.logical_name as criteria_logical_id,
										cpd.operator_id,
										om.operator_name,
										om.logical_value,
										om.operator_type,
										cpd.policy_value
									 FROM
										".$CFG['db']['tbl']['competitor_policy_details']." cpd,
										".$CFG['db']['tbl']['competitor_policy_criteria_master']." cpcm,
										".$CFG['db']['tbl']['operator_master']." om
									 WHERE
										cpd.policy_id='".$row['policy_id']."'
										AND cpd.criteria_id=cpcm.criteria_id
										AND cpd.operator_id=om.operator_id";

					if(DB::isError($resultSelectCompetitorPolicyDetails=$this->_Oconnection->query($sqlSelectCompetitorPolicyDetails)))
					{
						fileWrite($sqlSelectCompetitorPolicyDetails,"SqlError","a+");
						return false;
					}
					$sourceValueArray=array();
					$destinationValueArray=array();
					$currencyTypeValueArray=array();
					$loginIdValueArray=array();
					$departureDateValueArray=array();
					$flightNumberValueArray=array();
					$airlineCodeValueArray=array();
					$countryValueArray=array();	
					$travelAgencyValueArray=array();
					$airlineCodeValueArray=array();
					$posValueArray=array();
					$cabinValueArray=array();
					
					$resultValue=0;
					$stringToExecute="";
					$andCondition="";
					if($resultSelectCompetitorPolicyDetails->numRows() > 0)
					{
						$tempIndex=0;
						while($rowSelectCompetitorPolicyDetails=$resultSelectCompetitorPolicyDetails->fetchRow(DB_FETCHMODE_ASSOC))
						{
							$this->_AcheckPolicy[$tempIndex]=$rowSelectCompetitorPolicyDetails;
							
							if($rowSelectCompetitorPolicyDetails['criteria_logical_id']=="source")
							{
								$sourceValueArray[]=$rowSelectCompetitorPolicyDetails;
							}

							if($rowSelectCompetitorPolicyDetails['criteria_logical_id']=="destination")
							{
								$destinationValueArray[]=$rowSelectCompetitorPolicyDetails;
							}
							
							if($rowSelectCompetitorPolicyDetails['criteria_logical_id']=="loginId")
							{
								$loginIdValueArray[]=$rowSelectCompetitorPolicyDetails;
							}
							if($rowSelectCompetitorPolicyDetails['criteria_logical_id']=="departureDate")
							{
								$departureDateValueArray[]=$rowSelectCompetitorPolicyDetails;
							}
							if($rowSelectCompetitorPolicyDetails['criteria_logical_id']=="currencyType")
							{
								$currencyTypeValueArray[]=$rowSelectCompetitorPolicyDetails;
							}
							if($rowSelectCompetitorPolicyDetails['criteria_logical_id']=="airlineCode")
							{
								$airlineCodeValueArray[]=$rowSelectCompetitorPolicyDetails;
							}
							if($rowSelectCompetitorPolicyDetails['criteria_logical_id']=="flightNumber")
							{
								$flightNumberValueArray[]=$rowSelectCompetitorPolicyDetails;
							}
							if($rowSelectCompetitorPolicyDetails['criteria_logical_id']=="countryCode")
							{
								$countryCodeValueArray[]=$rowSelectCompetitorPolicyDetails;
							}
							if($rowSelectCompetitorPolicyDetails['criteria_logical_id']=="travelAgency")
							{
								$travelAgencyValueArray[]=$rowSelectCompetitorPolicyDetails;
							}
							if($rowSelectCompetitorPolicyDetails['criteria_logical_id']=="pointOfSale")
							{
								$posValueArray[]=$rowSelectCompetitorPolicyDetails;
							}
							if($rowSelectCompetitorPolicyDetails['criteria_logical_id']=="cabin")
							{
								$cabinValueArray[]=$rowSelectCompetitorPolicyDetails;
							}
							if($rowSelectCompetitorPolicyDetails['criteria_logical_id']!="source" && $rowSelectCompetitorPolicyDetails['criteria_logical_id']!="destination" && $rowSelectCompetitorPolicyDetails['criteria_logical_id']!="departureDate" && $rowSelectCompetitorPolicyDetails['criteria_logical_id']!="loginId" && $rowSelectCompetitorPolicyDetails['criteria_logical_id']!="flightNumber" && $rowSelectCompetitorPolicyDetails['criteria_logical_id']!="airlineCode" && $rowSelectCompetitorPolicyDetails['criteria_logical_id']!="currencyType" && $rowSelectCompetitorPolicyDetails['criteria_logical_id']!="countryCode" && $rowSelectCompetitorPolicyDetails['criteria_logical_id']!="travelAgency" && $rowSelectCompetitorPolicyDetails['criteria_logical_id']!="pointOfSale" && $rowSelectCompetitorPolicyDetails['criteria_logical_id']!="cabin")
							{
								if($rowSelectCompetitorPolicyDetails['criteria_type']=="S")
								{
									if($rowSelectCompetitorPolicyDetails['criteria_logical_id']!='auto_pilot_status')
									{
										$stringToExecute=$stringToExecute.$andCondition."( strtoupper('".$givenPolicyArray[$rowSelectCompetitorPolicyDetails['criteria_logical_id']]."') ".$rowSelectCompetitorPolicyDetails['logical_value']." strtoupper('".$rowSelectCompetitorPolicyDetails['policy_value']."') )";
									}
								}
								
								if($rowSelectCompetitorPolicyDetails['criteria_type']=="D" && $rowSelectCompetitorPolicyDetails['logical_value']=="BTWN")
								{
									$valueArray=explode("@%@",$rowSelectCompetitorPolicyDetails['policy_value']);

									$stringToExecute=$stringToExecute.$andCondition."( strtotime('".$givenPolicyArray[$rowSelectCompetitorPolicyDetails['criteria_logical_id']]."') >= strtotime('".$valueArray[0]."') && strtotime('".$givenPolicyArray[$rowSelectCompetitorPolicyDetails['criteria_logical_id']]."') <= strtotime('".$valueArray[1]."') )";
								}
								if($rowSelectCompetitorPolicyDetails['criteria_type']=="D" && $rowSelectCompetitorPolicyDetails['logical_value']!="BTWN")
								{
									$stringToExecute=$stringToExecute.$andCondition."( strtotime('".$givenPolicyArray[$rowSelectCompetitorPolicyDetails['criteria_logical_id']]."') ".$rowSelectCompetitorPolicyDetails['logical_value']." strtotime('".$rowSelectCompetitorPolicyDetails['policy_value']."') )";
								}
								
								if($rowSelectCompetitorPolicyDetails['criteria_type']=="N" && $rowSelectCompetitorPolicyDetails['logical_value']=="BTWN")
								{
									$valueArray=explode("@%@",$rowSelectCompetitorPolicyDetails['policy_value']);

									$stringToExecute=$stringToExecute.$andCondition."( ".$givenPolicyArray[$rowSelectCompetitorPolicyDetails['criteria_logical_id']]." >= ".$valueArray[0]." && ".$givenPolicyArray[$rowSelectCompetitorPolicyDetails['criteria_logical_id']]." <= ".$valueArray[1]." )";

								}
								if($rowSelectCompetitorPolicyDetails['criteria_type']=="N" && $rowSelectCompetitorPolicyDetails['logical_value']!="BTWN")
								{
									$stringToExecute=$stringToExecute.$andCondition."( ".$givenPolicyArray[$rowSelectCompetitorPolicyDetails['criteria_logical_id']]." ".$rowSelectCompetitorPolicyDetails['logical_value']." ".$rowSelectCompetitorPolicyDetails['policy_value']." )";
								}
								
								if($stringToExecute!="")
									$andCondition=" && ";
							}
							$tempIndex++;
						}

						//sector
						$sourceDestinationString="";
						$orCondition="";
						foreach($sourceValueArray as $sourceKey=>$sourceValue)
						{
							$sourceDestinationString=$sourceDestinationString.$orCondition."( strtoupper('".$givenPolicyArray[$sourceValue['criteria_logical_id']]."') ".$sourceValue['logical_value']." strtoupper('".$sourceValue['policy_value']."') ";

							foreach($destinationValueArray as $destinationKey=>$destinationValue)
							{
								if($sourceValue['loop_value']==$destinationValue['loop_value'])
								{
									$sourceDestinationString=$sourceDestinationString." &&  strtoupper('".$givenPolicyArray[$destinationValue['criteria_logical_id']]."') ".$destinationValue['logical_value']." strtoupper('".$destinationValue['policy_value']."') ";
								}
							}

							$sourceDestinationString=$sourceDestinationString." )";
							$orCondition=" || ";
						}			

						if($sourceDestinationString=="")
						{
							$orCondition="";
							foreach($destinationValueArray as $destinationKey=>$destinationValue)
							{
								$sourceDestinationString=$sourceDestinationString.$orCondition." ( strtoupper('".$givenPolicyArray[$destinationValue['criteria_logical_id']]."') ".$destinationValue['logical_value']." strtoupper('".$destinationValue['policy_value']."')  )";
								$orCondition=" || ";
							}						
						}

						if($sourceDestinationString!="")
						{
							if($stringToExecute!="")
								$stringToExecute="( ".$sourceDestinationString." ) && ".$stringToExecute;
							else
								$stringToExecute="(".$sourceDestinationString.")";
						}
						//loginId
						$loginIdString="";
						$orCondition="";
						foreach($loginIdValueArray as $loginIdKey=>$loginIdValue)
						{
							$loginIdString=$loginIdString.$orCondition." ( strtoupper('".$givenPolicyArray[$loginIdValue['criteria_logical_id']]."') ".$loginIdValue['logical_value']." strtoupper('".$loginIdValue['policy_value']."')  )";
								$orCondition=" || ";
							
						}
						if($loginIdString!="")
						{
							if($stringToExecute!="")
								$stringToExecute="( ".$loginIdString." ) && ".$stringToExecute;
							else
								$stringToExecute="(".$loginIdString.")";
						}
						//departureDate
						$departureDateString="";
						$orCondition="";
						$_AandOperatorConstrain = array("!=","!BTWN");
						foreach($departureDateValueArray as $departureDateKey=>$departureDateValue)
						{
							if($departureDateString!="")
							{
								if(in_array($departureDateValue['logical_value'],$_AandOperatorConstrain))
									$orCondition=" && ";
								else
									$orCondition=" || ";
							}
							if($departureDateValue['criteria_type']=="D" && ($departureDateValue['logical_value']=="BTWN" || $departureDateValue['logical_value']=="!BTWN"))
							{
								$valueArray=explode("@%@",$departureDateValue['policy_value']);
								if($departureDateValue['logical_value']=="BTWN")
								{
									$departureDateString=$departureDateString.$orCondition."( strtotime('".$givenPolicyArray[$departureDateValue['criteria_logical_id']]."') >= strtotime('".$valueArray[0]."') && strtotime('".$givenPolicyArray[$departureDateValue['criteria_logical_id']]."') <= strtotime('".$valueArray[1]."')";
									if($valueArray[2]!='')
									{
										$requestDepartureDay = $this->_getDayOfWeek($givenPolicyArray[$departureDateValue['criteria_logical_id']]);
										$policyDepartureDow=explode(",",$valueArray[2]);
										$dowCondition="";
										$departureDOWString="";
										$openBracs=" ( ";
										
										foreach($policyDepartureDow as $dowKey => $dowValue)
										{
											$departureDOWString=$departureDOWString.$dowCondition.$openBracs." strtoupper('".$requestDepartureDay."') == strtoupper('".$dowValue."') ";
											$dowCondition=" || ";
											$openBracs=" ";
										}
										$departureDateString=$departureDateString." && ".$departureDOWString.")";
									}
									$departureDateString=$departureDateString." )";
								}
								if($departureDateValue['logical_value']=="!BTWN")
									$departureDateString=$departureDateString.$orCondition."( strtotime('".$givenPolicyArray[$departureDateValue['criteria_logical_id']]."') < strtotime('".$valueArray[0]."') || strtotime('".$givenPolicyArray[$departureDateValue['criteria_logical_id']]."') > strtotime('".$valueArray[1]."') )";
							}
							else
							{
								$departureDateString=$departureDateString.$orCondition."(strtoupper('".$givenPolicyArray[$departureDateValue['criteria_logical_id']]."')".$departureDateValue['logical_value']."strtoupper('".$departureDateValue['policy_value']."'))";
							}
						}
						if($departureDateString!="")
						{
							if($stringToExecute!="")
								$stringToExecute="( ".$departureDateString." ) && ".$stringToExecute;
							else
								$stringToExecute="(".$departureDateString.")";
						}
						
						if($givenPolicyArray['requestType']!=2)
						{
							//FlightNumber and airline code
							$airlineCodeFlightNumberString="";
							$orCondition="";
							foreach($airlineCodeValueArray as $airlineCodeKey=>$airlineCodeValue)
							{
								$airlineCodeFlightNumberString=$airlineCodeFlightNumberString.$orCondition."( strtoupper('".$givenPolicyArray[$airlineCodeValue['criteria_logical_id']]."') ".$airlineCodeValue['logical_value']." strtoupper('".$airlineCodeValue['policy_value']."') ";

								foreach($flightNumberValueArray as $flightNumberKey=>$flightNumberValue)
								{
									if($airlineCodeValue['loop_value']==$flightNumberValue['loop_value'])
									{
										if($flightNumberValue['logical_value']=="BTWN")
										{
											$valueArray=explode("@%@",$flightNumberValue['policy_value']);
											$airlineCodeFlightNumberString=$airlineCodeFlightNumberString." && (".$givenPolicyArray[$flightNumberValue['criteria_logical_id']].") >= (".$valueArray[0].") && (".$givenPolicyArray[$flightNumberValue['criteria_logical_id']].") <= (".$valueArray[1].")";
										}
										else
										{
											$airlineCodeFlightNumberString=$airlineCodeFlightNumberString. " && (".$givenPolicyArray[$flightNumberValue['criteria_logical_id']]." ".$flightNumberValue['logical_value']." ".$flightNumberValue['policy_value'].")";
										}
									}
								}
								$airlineCodeFlightNumberString=$airlineCodeFlightNumberString." )";
								$orCondition=" || ";
							}
							if($airlineCodeFlightNumberString=="")
							{
								$orCondition="";
								foreach($flightNumberValueArray as $flightNumberKey=>$flightNumberValue)
								{
									if($flightNumberValue['logical_value']=="BTWN")
									{
										$valueArray=explode("@%@",$flightNumberValue['policy_value']);
										$airlineCodeFlightNumberString=$airlineCodeFlightNumberString.$orCondition."(".$givenPolicyArray[$flightNumberValue['criteria_logical_id']].") >= (".$valueArray[0].") && (".$givenPolicyArray[$flightNumberValue['criteria_logical_id']].") <= (".$valueArray[1].")";
									}
									else
									{
										$airlineCodeFlightNumberString=$airlineCodeFlightNumberString.$orCondition."(".$givenPolicyArray[$flightNumberValue['criteria_logical_id']]." ".$flightNumberValue['logical_value']." ".$flightNumberValue['policy_value'].")";
									}
									$orCondition=" || ";
								}
							}
							if($airlineCodeFlightNumberString!="")
							{
								if($stringToExecute!="")
									$stringToExecute="( ".$airlineCodeFlightNumberString." ) && ".$stringToExecute;
								else
									$stringToExecute="(".$airlineCodeFlightNumberString.")";
							}
						}
						
						//country
						$countryCodeString="";
						$orCondition="";
							
						foreach($countryValueArray as $countryKey=>$countryValue)
						{
							$countryCodeString=$countryCodeString.$orCondition."(strtoupper('".$givenPolicyArray[$countryValue['criteria_logical_id']]."')".$countryValue['logical_value']."strtoupper('".$countryValue['policy_value']."'))";
							$orCondition=" || ";
						}
						if($countryCodeString!="")
						{
							if($stringToExecute!="")
								$stringToExecute="( ".$countryCodeString." ) && ".$stringToExecute;
							else
								$stringToExecute="(".$countryCodeString.")";
						}
						
						//currency type
						$currencyTypeString="";
						$orCondition="";
							
						foreach($currencyTypeValueArray as $countryKey=>$currencyTypeValue)
						{
							$currencyTypeString=$currencyTypeString.$orCondition."(strtoupper('".$givenPolicyArray[$currencyTypeValue['criteria_logical_id']]."')".$currencyTypeValue['logical_value']."strtoupper('".$currencyTypeValue['policy_value']."'))";
							$orCondition=" || ";
						}
						if($currencyTypeString!="")
						{
							if($stringToExecute!="")
								$stringToExecute="( ".$currencyTypeString." ) && ".$stringToExecute;
							else
								$stringToExecute="(".$currencyTypeString.")";
						}
						
						
						//point of sale
						$posString="";
						$orCondition="";
							
						foreach($posValueArray as $countryKey=>$posValue)
						{
							$posString=$posString.$orCondition."(strtoupper('".$givenPolicyArray[$posValue['criteria_logical_id']]."')".$posValue['logical_value']."strtoupper('".$posValue['policy_value']."'))";
							$orCondition=" || ";
						}
						if($posString!="")
						{
							if($stringToExecute!="")
								$stringToExecute="( ".$posString." ) && ".$stringToExecute;
							else
								$stringToExecute="(".$posString.")";
						}
						
						//cabin
						$cabinString="";
						$orCondition="";
							
						foreach($cabinValueArray as $cabinKey=>$cabinValue)
						{
							$cabinString=$cabinString.$orCondition."(strtoupper('".$givenPolicyArray[$cabinValue['criteria_logical_id']]."')".$cabinValue['logical_value']."strtoupper('".$cabinValue['policy_value']."'))";
							$orCondition=" || ";
						}
						if($cabinString!="")
						{
							if($stringToExecute!="")
								$stringToExecute="( ".$cabinString." ) && ".$stringToExecute;
							else
								$stringToExecute="(".$cabinString.")";
						}
						
						//travel agency
						$travelAgencyString="";
						$orCondition="";
							
						foreach($travelAgencyValueArray as $travelAgencyKey=>$travelAgencyValue)
						{
							$travelAgencyString=$travelAgencyString.$orCondition."(".$givenPolicyArray[$travelAgencyValue['criteria_logical_id']]." ".$travelAgencyValue['logical_value']." ".$travelAgencyValue['policy_value'].")";
							$orCondition=" || ";
						}
						if($travelAgencyString!="")
						{
							if($stringToExecute!="")
								$stringToExecute="( ".$travelAgencyString." ) && ".$stringToExecute;
							else
								$stringToExecute="(".$travelAgencyString.")";
						}
						if($stringToExecute!="")
						{
							$resultStringToEval="IF( ".$stringToExecute." ){".'$resultValue'."=1;}";
	
							eval($resultStringToEval);
							if($resultValue==1)
							{
								$policyMasterValueArray[]=$row;
							}
						}
					}
				}
			}
		}
		
		$minValue=0;

		if(count($policyMasterValueArray) > 0)
		{
			for($i=0;$i<count($policyMasterValueArray);$i++)
			{
				if($minValue==0 || $policyMasterValueArray[$i]['priority']<=$minValue)
				{
					$minValue=$policyMasterValueArray[$i]['priority'];
				}
			}
			$minIndex="";
			$appendString="";
			for($i=0;$i<count($policyMasterValueArray);$i++)
			{
				if($minValue==$policyMasterValueArray[$i]['priority'])
				{
					$minIndex.=$appendString.$i;
					$appendString=",";
				}
			}

			if($minIndex!="")
			{
				
				
				$fetchCompetitorPolicyArray=array();
				$explodeArray=explode(",",$minIndex);
				for($i=0;$i<count($explodeArray);$i++)
				{
					$dateArray[]=$policyMasterValueArray[$explodeArray[$i]]['created_date'];
				}
				$fetchCompetitorPolicyArray[0]=$policyMasterValueArray[array_search(max($dateArray),$dateArray)];
				$flag=0;
				foreach($this->_AcheckPolicy as $key=>$value)
				{
					if(in_array('auto_pilot_status',$this->_AcheckPolicy[$key]) && $value == "Y")
					{
						$flag++;
						$fetchCompetitorPolicyArray['autoPiotStatus']=$this->_AcheckPolicy[$key]['policy_value'];
					}
				}
				if($flag==0)
				{
					$fetchCompetitorPolicyArray['autoPiotStatus']='NA';
				}	
				if(count($fetchCompetitorPolicyArray) > 0)
				{
					$returnCompetitorArray=$this->_getCompetitorRule($fetchCompetitorPolicyArray,$departureTime,$arrivalTime,$fromDate,$toDate);

				}
			}
		}

		return $returnCompetitorArray;
		
	}

	//fetching competitor rule
	function _getCompetitorRule($fetchCompetitorPolicyArray,$departureTime,$arrivalTime,$fromDate,$toDate)
	{
		 
		global $CFG;
		$finalRuleArray = array();
		$urlDates=array();
		$getRuleSql = 	"SELECT
					crm.competitor_rule_name,                                       
					crm.minimum_fare,                                                        
					crm.maximum_fare,                                                        
					crm.calculate_using,                                       
					crm.include_connecting_flights,                                   
					crm.include_hub,                                                  
					crm.fare_taken,
					crm.active_status,                                
					crm.created_date,  
					crad.competitor_rule_airline_id,             
					crad.competitor_rule_master_id,                                 
					crad.airline_code,                                                
					crad.flight_number, 
					crad.departure_operator,                                              
					crad.depart_time_range ,
					(select fare_validity_values from fare_validity_type_details where fare_validity_type_id=crad.depart_fare_validity_type_id) as departureType,
					crad.arrival_operator,                                         
					crad.arrival_time_range,   
					(select fare_validity_values from fare_validity_type_details where fare_validity_type_id=crad.arrival_fare_validity_type_id ) as arrivalType,                                      
					crad.additive_factor,                                                     
					crad.multiplicative_factor,
					crad.priority,    
					crad.active_status    
				 FROM
					".$CFG['db']['tbl']['competitor_rule_master']." crm,
					".$CFG['db']['tbl']['competitor_rule_airline_details']." crad
					
				 WHERE
					crad.competitor_rule_master_id=crm.competitor_rule_master_id
					AND crm.active_status='Y'
					AND crad.active_status !='D'
					AND crm.competitor_rule_master_id=".$fetchCompetitorPolicyArray[0]['competitor_rule_master_id'];
			if (DB::isError($getRuleResult =$this->_Oconnection->query($getRuleSql)))
			{
				fileWrite($getRuleSql,"SqlError","a+");
				return FALSE;
			}
			//fileWrite($getRuleSql,"getRuleSql","a+");
			while($getRuleRow = $getRuleResult->fetchRow(DB_FETCHMODE_ASSOC))
			{
				$finalRuleArray[]=$getRuleRow;
				if($getRuleRow['departureType']=='days')
				{
					$getDate=$this->_getTimeAddSub($fromDate,$departureTime,$getRuleRow['depart_time_range'],$getRuleRow['departureType'],$getRuleRow['departure_operator']);
					//fileWrite($getDate,"Acompetitor","a+");
					$checkVal=explode(" ",$getDate);
					$urlDates[] = $checkVal[0];
				}
				if($getRuleRow['arrivalType']=='days')
				{
					$getDate=$this->_getTimeAddSub($fromDate,$arrivalTime,$getRuleRow['arrival_time_range'],$getRuleRow['arrivalType'],$getRuleRow['arrival_operator']);
					//fileWrite($getDate,"Acompetitor","a+");
					$checkVal=explode(" ",$getDate);
					$urlDates[] = $checkVal[0];
				}
			}
			foreach($finalRuleArray as $key=>$value)
			{
				$fetchCompetitorPolicyArray['compettitorRuleDetails'][$key]=$finalRuleArray[$key];
				
			}
			$fetchCompetitorPolicyArray['fetchDate']=array_unique($urlDates);
			return $fetchCompetitorPolicyArray;
	}

	// running service to get competitor data
	function _getCompetitorData($competitorUrl,$urlDepartureDate)
	{
		$urlArray = parse_url($competitorUrl);
		parse_str($urlArray['query'], $getURLArray);
		
		fileRequire("dataModels/class.competitorFlightDetails.php");
		fileRequire("dataModels/class.competitorViaFlightDetails.php");
		$this->_OcompetitorFlightDetails = new competitorFlightDetails();
		$this->_OcompetitorFlightDetails->_Oconnection = $this->_Oconnection;
		$this->_OcompetitorViaFlightDetails = new competitorViaFlightDetails();
		$this->_OcompetitorViaFlightDetails->_Oconnection = $this->_Oconnection;
		
		$this->_OcompetitorFlightDetails->_Sorigin=$getURLArray['origin'];
		$this->_OcompetitorFlightDetails->_Sdestination=$getURLArray['destination'];
		$this->_OcompetitorFlightDetails->_SonwardDepartureDate =$getURLArray['datedeparture'];
		$this->_OcompetitorFlightDetails->_selectCompetitorFlightDetails();
		if($this->_OcompetitorFlightDetails->_IcountLoop > 0)
			return $urlDepartureDate;
		
		$ch = curl_init();
		curl_setopt($ch, CURLOPT_URL, $competitorUrl); 
		curl_setopt($ch, CURLOPT_USERAGENT, $competitorUrl);
		curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
		curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);
		curl_setopt($ch, CURLOPT_ENCODING,'gzip');
		
		$content = curl_exec($ch);
		$Unserializer = new XML_Unserializer();
		$status = $Unserializer->unserialize($content);
		$urlArray=$Unserializer->getUnserializedData();
		for($i=0;$i<count($urlArray['FlightDetails']);$i++)
		{
			if(isset($urlArray['FlightDetails'][$i]['origin_airport_code'],$urlArray['FlightDetails'][$i]['dest_airport_code'],$urlArray['FlightDetails'][$i]['time_departure'],$urlArray['FlightDetails'][$i]['time_arrival'])
			 && !empty($urlArray['FlightDetails'][$i]['origin_airport_code']) && !empty($urlArray['FlightDetails'][$i]['dest_airport_code']) && !empty($urlArray['FlightDetails'][$i]['time_departure']) && !empty($urlArray['FlightDetails'][$i]['time_arrival']))						
			{	
				$this->_OcompetitorFlightDetails->__construct();
				$this->_OcompetitorFlightDetails->_Sorigin=$urlArray['FlightDetails'][$i]['origin_airport_code'];
				$this->_OcompetitorFlightDetails->_Sdestination=$urlArray['FlightDetails'][$i]['dest_airport_code'];

				$this->_OcompetitorFlightDetails->_SonwardDepartureDate =$urlArray['FlightDetails'][$i]['date_departure'];
				$this->_OcompetitorFlightDetails->_SonwardDepartureTime =$urlArray['FlightDetails'][$i]['time_departure'];
				$this->_OcompetitorFlightDetails->_SonwardArrivalTime = $urlArray['FlightDetails'][$i]['time_arrival'];
				$this->_OcompetitorFlightDetails->_SreturnDepartureDate =$urlArray['FlightDetails'][$i]['return_date_departure'];
				$this->_OcompetitorFlightDetails->_SreturnDepartureTime =$urlArray['FlightDetails'][$i]['return_time_departure'];
				$this->_OcompetitorFlightDetails->_SreturnArrivalTime = $urlArray['FlightDetails'][$i]['return_time_arrival'];
				$this->_OcompetitorFlightDetails->_IbaseFare =$urlArray['FlightDetails'][$i]['base_fare'];
				$this->_OcompetitorFlightDetails->_ItotalFare = $urlArray['FlightDetails'][$i]['netFare'];
				$this->_OcompetitorFlightDetails->_Itax = $urlArray['FlightDetails'][$i]['tax'] ;
				$this->_OcompetitorFlightDetails->_ScurrencyCode = $urlArray['FlightDetails'][$i]['currency_type'] ;
				$this->_OcompetitorFlightDetails->_Sstatus = 'Y';
				$this->_OcompetitorFlightDetails->_ScreatedDate = date('Y-m-d H:i:s');
				if(isset($urlArray['FlightDetails'][$i]['stops']) && $urlArray['FlightDetails'][$i]['stops'] == 0)
				{
					$this->_OcompetitorFlightDetails->_IonwardStop=$urlArray['FlightDetails'][$i]['stops'];
					$this->_OcompetitorFlightDetails->_SonwardArrivalDate=$urlArray['FlightDetails'][$i]['via_flights']['FlightDetails']['arrival_date'];
					$this->_OcompetitorFlightDetails->_SonwardFlight=$urlArray['FlightDetails'][$i]['via_flights']['FlightDetails']['flight_number'] ;
					$this->_OcompetitorFlightDetails->_Scarrier=$urlArray['FlightDetails'][$i]['via_flights']['FlightDetails']['airline_code'];
					$this->_OcompetitorFlightDetails->_StripType = $urlArray['FlightDetails'][$i]['via_flights']['FlightDetails']['trip_type'];
					$this->_OcompetitorFlightDetails->_SonwardClass = $urlArray['FlightDetails'][$i]['via_flights']['FlightDetails']['cabin_class'];				
				}
				else if(isset($urlArray['FlightDetails'][$i]['stops']) && $urlArray['FlightDetails'][$i]['stops']>0)
				{
					$this->_OcompetitorFlightDetails->_IonwardStop=$urlArray['FlightDetails'][$i]['stops'];
					$this->_OcompetitorFlightDetails->_SonwardArrivalDate=$urlArray['FlightDetails'][$i]['via_flights']['FlightDetails'][0]['arrival_date'];
					$this->_OcompetitorFlightDetails->_SonwardFlight=$urlArray['FlightDetails'][$i]['via_flights']['FlightDetails'][0]['flight_number'] ;
					$this->_OcompetitorFlightDetails->_Scarrier=$urlArray['FlightDetails'][$i]['via_flights']['FlightDetails'][0]['airline_code'];
					$this->_OcompetitorFlightDetails->_StripType = $urlArray['FlightDetails'][$i]['via_flights']['FlightDetails'][0]['trip_type'];
					$this->_OcompetitorFlightDetails->_SonwardClass = $urlArray['FlightDetails'][$i]['via_flights']['FlightDetails'][0]['cabin_class'];								
				}
				$this->_OcompetitorFlightDetails->_insertCompetitorFlightDetails();
				
					
					
					
					if(isset($urlArray['FlightDetails'][$i]['stops']) && $urlArray['FlightDetails'][$i]['stops'] == 0)
					{
						$this->_OcompetitorViaFlightDetails->__construct();
						$this->_OcompetitorViaFlightDetails->_IcompetitorFlightId = $this->_OcompetitorFlightDetails->_IcompetitorFlightId;
						$this->_OcompetitorViaFlightDetails->_IbaseFare =$urlArray['FlightDetails'][$i]['base_fare'];
						$this->_OcompetitorViaFlightDetails->_ItotalFare = $urlArray['FlightDetails'][$i]['netFare'];
						$this->_OcompetitorViaFlightDetails->_Itax = $urlArray['FlightDetails'][$i]['tax'];
						$this->_OcompetitorViaFlightDetails->_ScurrencyCode = $urlArray['FlightDetails'][$i]['currency_type'];
						$this->_OcompetitorViaFlightDetails->_Sorigin = $urlArray['FlightDetails'][$i]['via_flights']['FlightDetails']['origin_airport_code'];
						$this->_OcompetitorViaFlightDetails->_Sdestination = $urlArray['FlightDetails'][$i]['via_flights']['FlightDetails']['dest_airport_code'];
						$this->_OcompetitorViaFlightDetails->_Scarrier =$urlArray['FlightDetails'][$i]['via_flights']['FlightDetails']['airline_code'];
						$this->_OcompetitorViaFlightDetails->_Sflight = $urlArray['FlightDetails'][$i]['via_flights']['FlightDetails']['flight_number']; 
						$this->_OcompetitorViaFlightDetails->_SdepartureDate = $urlArray['FlightDetails'][$i]['via_flights']['FlightDetails']['departure_date'];
						$this->_OcompetitorViaFlightDetails->_SdepartureTime = $urlArray['FlightDetails'][$i]['via_flights']['FlightDetails']['time_departure'];
						$this->_OcompetitorViaFlightDetails->_SarrivalDate =$urlArray['FlightDetails'][$i]['via_flights']['FlightDetails']['time_departure'];
						$this->_OcompetitorViaFlightDetails->_SarrivalTime = $urlArray['FlightDetails'][$i]['via_flights']['FlightDetails']['time_arrival'];
						$this->_OcompetitorViaFlightDetails->_Sclass = $urlArray['FlightDetails'][$i]['via_flights']['FlightDetails']['cabin_class'];
						$this->_OcompetitorViaFlightDetails->_IsegmentOrder = 0;
						$this->_OcompetitorViaFlightDetails->_insertCompetitorViaFlightDetails();
					}
					
					else if(isset($urlArray['FlightDetails'][$i]['stops']) && $urlArray['FlightDetails'][$i]['stops'] > 0)
					{
						
						for($j=0;$j<count($urlArray['FlightDetails'][$i]['via_flights']['FlightDetails']);$j++)
						{
							$tmp=$j;
							$this->_OcompetitorViaFlightDetails->__construct();
							$this->_OcompetitorViaFlightDetails->_IcompetitorFlightId = $this->_OcompetitorFlightDetails->_IcompetitorFlightId;
							$this->_OcompetitorViaFlightDetails->_IbaseFare =$urlArray['FlightDetails'][$i]['base_fare'];
							$this->_OcompetitorViaFlightDetails->_ItotalFare = $urlArray['FlightDetails'][$i]['netFare'];
							$this->_OcompetitorViaFlightDetails->_Itax = $urlArray['FlightDetails'][$i]['tax'];
							$this->_OcompetitorViaFlightDetails->_ScurrencyCode = $urlArray['FlightDetails'][$i]['currency_type'];
							$this->_OcompetitorViaFlightDetails->_Sorigin = $urlArray['FlightDetails'][$i]['via_flights']['FlightDetails'][$j]['origin_airport_code'];
							$this->_OcompetitorViaFlightDetails->_Sdestination = $urlArray['FlightDetails'][$i]['via_flights']['FlightDetails'][$j]['dest_airport_code'];
							$this->_OcompetitorViaFlightDetails->_Scarrier =$urlArray['FlightDetails'][$i]['via_flights']['FlightDetails'][$j]['airline_code'];
							$this->_OcompetitorViaFlightDetails->_Sflight = $urlArray['FlightDetails'][$i]['via_flights']['FlightDetails'][$j]['flight_number']; 
							$this->_OcompetitorViaFlightDetails->_SdepartureDate = $urlArray['FlightDetails'][$i]['via_flights']['FlightDetails'][$j]['departure_date'];
							$this->_OcompetitorViaFlightDetails->_SdepartureTime = $urlArray['FlightDetails'][$i]['via_flights']['FlightDetails'][$j]['time_departure'];
							$this->_OcompetitorViaFlightDetails->_SarrivalDate =$urlArray['FlightDetails'][$i]['via_flights']['FlightDetails'][$j]['time_departure'];
							$this->_OcompetitorViaFlightDetails->_SarrivalTime = $urlArray['FlightDetails'][$i]['via_flights']['FlightDetails'][$j]['time_arrival'];
							$this->_OcompetitorViaFlightDetails->_Sclass = $urlArray['FlightDetails'][$i]['via_flights']['FlightDetails'][$j]['cabin_class'];
							$this->_OcompetitorViaFlightDetails->_IsegmentOrder =   $tmp++;	
							$this->_OcompetitorViaFlightDetails->_insertCompetitorViaFlightDetails();						
						}					
					}
					
					
			
			}
		}
		return $urlDepartureDate;
	}
	
	
	// to add hour(s) or day(s) to specific  time
	function _getTimeAddSub($fromdate,$fromTime,$gap,$type,$operator)
	{
		$start=$fromdate.' '.$fromTime;
		$addTime=$operator.$gap.' '.$type;
		return date('Y-m-d H:i',strtotime($addTime,strtotime($start)));
		
	}
	
	
	// to fetch competitor data as per rule
	
	function _fetchCompetitorData($_AcompetitorPolicyArray)
	{
		global $CFG;
		$sqlFare = "select distinct
						competitor_flight_id,
						carrier,
						onward_flight,
						base_fare,
						tax,
						total_fare,
						onward_departure_time,
						onward_arrival_time,
						CONCAT(onward_departure_date,' ',onward_departure_time) as departureTime,
						CONCAT(onward_arrival_date,' ',onward_arrival_time) as arrivalTime
					FROM
						".$CFG['db']['tbl']['competitor_flight_details']." WHERE ";
		if(count($_AcompetitorPolicyArray)>0)
		{
			$condition = " AND ";
		}
		for($i=0;$i<count($_AcompetitorPolicyArray['compettitorRuleDetails']);$i++)
		{

			if(isset($_AcompetitorPolicyArray['compettitorRuleDetails'][$i]['flight_number']) && $_AcompetitorPolicyArray['compettitorRuleDetails'][$i]['flight_number']=='') 
			{
				$sqlFare = $sqlFare."(carrier='".$_AcompetitorPolicyArray['compettitorRuleDetails'][$i]['airline_code']."' ";
				if(isset($_AcompetitorPolicyArray['compettitorRuleDetails'][$i]['departure_operator']) && trim($_AcompetitorPolicyArray['compettitorRuleDetails'][$i]['departure_operator'])!="All")
				{
					if($_AcompetitorPolicyArray['compettitorRuleDetails'][$i]['departure_operator']=='-/+')
					{

						$getTimePlus=$this->_getTimeAddSub($this->_SfromDate,$this->_AflightResult[$index]['departureTime'],$_AcompetitorPolicyArray['compettitorRuleDetails'][$i]['depart_time_range'],$_AcompetitorPolicyArray['compettitorRuleDetails'][$i]['departureType'],'+');
						$getTimeMinus=$this->_getTimeAddSub($this->_SfromDate,$this->_AflightResult[$index]['departureTime'],$_AcompetitorPolicyArray['compettitorRuleDetails'][$i]['depart_time_range'],$_AcompetitorPolicyArray['compettitorRuleDetails'][$i]['departureType'],'-');
						$dateAndTimePlus=explode(" ",$getTimePlus);
						$dateAndTimeMinus=explode(" ",$getTimeMinus);
						if($dateAndTimeMinus[0]==$this->_AflightResult[$index]['fromDate'] && $dateAndTimePlus[0]==$this->_AflightResult[$index]['fromDate']) 
						{
							$sqlFare = $sqlFare.$condition." onward_departure_time BETWEEN '".$dateAndTimeMinus[1]."' AND '".$dateAndTimePlus[1]."'";
						}
						else 
						{
							$sqlFare = $sqlFare.$condition." CONCAT(onward_departure_date,' ',onward_departure_time) BETWEEN '".$dateAndTimeMinus[0].' '.$dateAndTimeMinus[1]."' AND '".$dateAndTimePlus[0].' '.$dateAndTimePlus[1]."'";
						}

					}
					else
					{

						$getTime=$this->_getTimeAddSub($this->_SfromDate,$this->_AflightResult[$index]['departureTime'],$_AcompetitorPolicyArray['compettitorRuleDetails'][$i]['depart_time_range'],$_AcompetitorPolicyArray['compettitorRuleDetails'][$i]['departureType'],trim($_AcompetitorPolicyArray['compettitorRuleDetails'][$i]['departure_operator']));
						$dateAndTime=explode(" ",$getTime);
						if($dateAndTime[0]==$this->_AflightResult[$index]['fromDate'] && $dateAndTime[1]!=$this->_AflightResult[$index]['departureTime'])
						{
							if($this->_AflightResult[$index]['departureTime'] < $dateAndTime[1])
							{
								$sqlFare = $sqlFare.$condition." onward_departure_time BETWEEN '".$this->_AflightResult[$index]['departureTime']."' AND '".$dateAndTime[1]."'";
							}
							else
							{
								$sqlFare = $sqlFare.$condition." onward_departure_time BETWEEN '".$dateAndTime[1]."' AND '".$this->_AflightResult[$index]['departureTime']."'";
							}
						}
						else if($dateAndTime[1]==$this->_AflightResult[$index]['departureTime'] && $dateAndTime[0]!=$this->_AflightResult[$index]['fromDate'])
						{
							if($dateAndTime[0] < $this->_AflightResult[$index]['fromDate'])
							{
								//$sqlFare = $sqlFare.$condition." onward_departure_time='".$this->_AflightResult[$index]['departureTime']."' AND onward_departure_date BETWEEN '".$dateAndTime[0]."' AND '".$this->_AflightResult[$index]['fromDate']."'";
								$sqlFare = $sqlFare.$condition." CONCAT(onward_departure_date,' ',onward_departure_time) BETWEEN '".$dateAndTime[0].' '.$this->_AflightResult[$index]['departureTime']."' AND '".$this->_AflightResult[$index]['fromDate'].' '.$this->_AflightResult[$index]['departureTime']."'";
							}
							else
							{
								//$sqlFare = $sqlFare.$condition." onward_departure_time = '".$this->_AflightResult[$index]['departureTime']."' AND onward_departure_date BETWEEN '".$this->_AflightResult[$index]['fromDate']."' AND '".$dateAndTime[0]."'";
								$sqlFare = $sqlFare.$condition." CONCAT(onward_departure_date,' ',onward_departure_time) BETWEEN '".$this->_AflightResult[$index]['fromDate'].' '.$this->_AflightResult[$index]['departureTime']."' AND '".$dateAndTime[0].' '.$this->_AflightResult[$index]['departureTime']."'";
							}
						}	
						else 
						{
							if($this->_AflightResult[$index]['departureTime'] < $dateAndTime[1])
							{
								$sqlFare = $sqlFare.$condition." onward_departure_time BETWEEN '".$this->_AflightResult[$index]['departureTime']."' AND '".$dateAndTime[1]."'";
							}
							else
							{
								$sqlFare = $sqlFare.$condition." onward_departure_time BETWEEN '".$dateAndTime[1]."' AND '".$this->_AflightResult[$index]['departureTime']."'";
							}
							if($dateAndTime[0] < $this->_AflightResult[$index]['fromDate'])
							{
								$sqlFare = $sqlFare.$condition."onward_departure_date BETWEEN '".$dateAndTime[0]."' AND '".$this->_AflightResult[$index]['fromDate']."'";
							}
							else
							{
								$sqlFare = $sqlFare.$condition."onward_departure_date BETWEEN '".$this->_AflightResult[$index]['fromDate']."' AND '".$dateAndTime[0]."'";
							}
						}	
					}
				}
				if(isset($_AcompetitorPolicyArray['compettitorRuleDetails'][$i]['arrival_operator']) && trim($_AcompetitorPolicyArray['compettitorRuleDetails'][$i]['arrival_operator'])!="All")
				{

					if($_AcompetitorPolicyArray['compettitorRuleDetails'][$i]['arrival_operator']=='-/+')
					{
						$getTimePlus=$this->_getTimeAddSub($this->_AflightResult[$index]['toDate'],$this->_AflightResult[$index]['arrivalTime'],$_AcompetitorPolicyArray['compettitorRuleDetails'][$i]['arrival_time_range'],$_AcompetitorPolicyArray['compettitorRuleDetails'][$i]['arrivalType'],'+');
						$getTimeMinus=$this->_getTimeAddSub($this->_AflightResult[$index]['toDate'],$this->_AflightResult[$index]['arrivalTime'],$_AcompetitorPolicyArray['compettitorRuleDetails'][$i]['arrival_time_range'],$_AcompetitorPolicyArray['compettitorRuleDetails'][$i]['arrivalType'],'-');
						$dateAndTimePlus=explode(" ",$getTimePlus);
						$dateAndTimeMinus=explode(" ",$getTimeMinus);
						if($dateAndTimeMinus[0]==$this->_AflightResult[$index]['toDate'] && $dateAndTimePlus[0]==$this->_AflightResult[$index]['toDate']) 
						{
							$sqlFare = $sqlFare.$condition." onward_arrival_time BETWEEN '".$dateAndTimeMinus[1]."' AND '".$dateAndTimePlus[1]."'";
						}
						else 
						{
							$sqlFare = $sqlFare.$condition." CONCAT(onward_arrival_date,' ',onward_arrival_time) BETWEEN '".$dateAndTimeMinus[0].' '.$dateAndTimeMinus[1]."' AND '".$dateAndTimePlus[0].' '.$dateAndTimePlus[1]."'";
						}
					}
					else
					{
							$getTime=$this->_getTimeAddSub($this->_AflightResult[$index]['toDate'],$this->_AflightResult[$index]['arrivalTime'],$_AcompetitorPolicyArray['compettitorRuleDetails'][$i]['arrival_time_range'],$_AcompetitorPolicyArray['compettitorRuleDetails'][$i]['arrivalType'],trim($_AcompetitorPolicyArray['compettitorRuleDetails'][$i]['arrival_operator']));
							$dateAndTime=explode(" ",$getTime);
							if($dateAndTime[0]==$this->_AflightResult[$index]['toDate'] && $dateAndTime[1]!=$this->_AflightResult[$index]['arrivalTime'])
							{
								if($dateAndTime[1] <  $this->_AflightResult[$index]['arrivalTime'])
								{
									$sqlFare = $sqlFare.$condition." onward_arrival_time BETWEEN '".$dateAndTime[1]."' AND '".$this->_AflightResult[$index]['arrivalTime']."'";
								}
								else
								{
									$sqlFare = $sqlFare.$condition." onward_arrival_time BETWEEN '".$this->_AflightResult[$index]['arrivalTime']."' AND '".$dateAndTime[1]."'";
								}
							}
							else if($dateAndTime[0]!=$this->_AflightResult[$index]['toDate'] && $dateAndTime[1]==$this->_AflightResult[$index]['arrivalTime'])
							{
								if($dateAndTime[0] < $this->_AflightResult[$index]['toDate'])
								{
									$sqlFare = $sqlFare.$condition." CONCAT(onward_arrival_date,' ',onward_arrival_time) BETWEEN '".$dateAndTime[0].' '.$this->_AflightResult[$index]['arrivalTime']."' AND '".$this->_AflightResult[$index]['toDate'].' '.$this->_AflightResult[$index]['arrivalTime']."'";
								}
								else
								{
									$sqlFare = $sqlFare.$condition." CONCAT(onward_arrival_date,' ',onward_arrival_time) BETWEEN '".$this->_AflightResult[$index]['toDate'].' '.$this->_AflightResult[$index]['arrivalTime']."' AND '".$dateAndTime[0].' '.$this->_AflightResult[$index]['arrivalTime']."'";
								}
							}
							else 
							{
								if($this->_AflightResult[$index]['arrivalTime'] < $dateAndTime[1])
								{
									$sqlFare = $sqlFare.$condition." onward_arrival_time BETWEEN '".$this->_AflightResult[$index]['arrivalTime']."' AND '".$dateAndTime[1]."'";
								}
								else
								{
									$sqlFare = $sqlFare.$condition." onward_arrival_time BETWEEN '".$dateAndTime[1]."' AND '".$this->_AflightResult[$index]['arrivalTime']."'";
								}

								if($dateAndTime[0] < $this->_AflightResult[$index]['toDate'])
								{
									$sqlFare = $sqlFare.$condition." onward_arrival_date BETWEEN '".$dateAndTime[0]."' AND '".$this->_AflightResult[$index]['toDate']."'";
								}
								else
								{
									$sqlFare = $sqlFare.$condition." onward_arrival_date BETWEEN '".$this->_AflightResult[$index]['toDate']."' AND '".$dateAndTime[0]."'";
								}
							}
					}
				}
				if($i==count($_AcompetitorPolicyArray['compettitorRuleDetails'])-1)
				{
					$sqlFare = $sqlFare.')';
				}
				else
				{
					$sqlFare = $sqlFare.')'. 'OR';	
				}


			}



			if(isset($_AcompetitorPolicyArray['compettitorRuleDetails'][$i]['flight_number']) && $_AcompetitorPolicyArray['compettitorRuleDetails'][$i]['flight_number']!='') 
			{

				$sqlFare = $sqlFare."(carrier='".$_AcompetitorPolicyArray['compettitorRuleDetails'][$i]['airline_code']."' ";

				$sqlFare = $sqlFare.$condition."onward_flight='".$_AcompetitorPolicyArray['compettitorRuleDetails'][$i]['flight_number']."'";

				
				if($i==count($_AcompetitorPolicyArray['compettitorRuleDetails'])-1)
				{
					$sqlFare = $sqlFare.')';
				}
				else
				{
					$sqlFare = $sqlFare.')'. 'OR';	
				}
			


			}

		}
		if($_AcompetitorPolicyArray['compettitorRuleDetails'][0]['include_connecting_flights'] == 'N')
		{
			$viaSql="select
					cfd.competitor_flight_id,
					count(cvfd.competitor_flight_id) as countId
				from 
					competitor_flight_details cfd,
					competitor_via_flight_details cvfd
				where
					cfd.competitor_flight_id = cvfd.competitor_flight_id
					group by cvfd.competitor_flight_id
					having countId = 1";
			if(DB::isError($viaResult = $this->_Oconnection->query($viaSql)))
			{
				filewrite($viaSql,"SqlError","a+");
				return false;
			}
			if ($viaResult->numRows() > 0) 
			{	
				while($viaRow=$viaResult->fetchRow(DB_FETCHMODE_ASSOC))
				{
					$IviaId[]= $viaRow['competitor_flight_id'];
				}
				$sqlFare .=" and competitor_flight_id in (".implode(',',array_unique($IviaId)).")";
			}

		}
		else if($_AcompetitorPolicyArray['compettitorRuleDetails'][0]['include_connecting_flights'] == 'Y')
		{
			$ConnectingSql="select 
						competitor_flight_id,
						length(group_concat(DISTINCT carrier))-length(replace(group_concat(DISTINCT carrier),',',''))+1 as diffAirlineCode
					from 
						competitor_via_flight_details
						group by competitor_flight_id
						having diffAirlineCode > 1";

			if(DB::isError($connectingResult = $this->_Oconnection->query($ConnectingSql)))
			{
				filewrite($ConnectingSql,"SqlError","a+");
				return false;
			}
			if ($connectingResult->numRows() > 0) 
			{	
				while($connectingRow=$connectingResult->fetchRow(DB_FETCHMODE_ASSOC))
				{
					$IconnectingId[]= $connectingRow['competitor_flight_id'];
				}
				$sqlFare .=" and competitor_flight_id NOT in (".implode(',',array_unique($IconnectingId)).")";
			}		
		}

		if(DB::isError($resultFare=$this->_Oconnection->query($sqlFare)))
		{
			fileWrite($sqlFare,"SqlError","a+");
			return false;
		}
		$_AfareArray = array();
		if ($resultFare->numRows() > 0)
		{
			$fareArrayIndex=0;
			while($row=$resultFare->fetchRow(DB_FETCHMODE_ASSOC))
			{
				if($_AcompetitorPolicyArray['compettitorRuleDetails'][0]['calculate_using'] == 'B')
				{
					foreach($_AcompetitorPolicyArray['compettitorRuleDetails'] as $key=>$value)
					{
						if(in_array($row['carrier'],$_AcompetitorPolicyArray['compettitorRuleDetails'][$key]))
						{
							$row['factored_fare']=($row['base_fare']*$_AcompetitorPolicyArray['compettitorRuleDetails'][$key]['multiplicative_factor'])+$_AcompetitorPolicyArray['compettitorRuleDetails'][$key]['additive_factor'];
							$row['priority'] = $_AcompetitorPolicyArray['compettitorRuleDetails'][$key]['priority'];
						}
					}
				}
				else if($_AcompetitorPolicyArray['compettitorRuleDetails'][0]['calculate_using'] == 'T')
				{
					foreach($_AcompetitorPolicyArray['compettitorRuleDetails'] as $key=>$value)
					{
						if(in_array($row['carrier'],$_AcompetitorPolicyArray['compettitorRuleDetails'][$key]))
						{
							$row['factored_fare']=($row['total_fare']*$_AcompetitorPolicyArray['compettitorRuleDetails'][$key]['multiplicative_factor'])+$_AcompetitorPolicyArray['compettitorRuleDetails'][$key]['additive_factor'];
							$row['priority'] = $_AcompetitorPolicyArray['compettitorRuleDetails'][$key]['priority'];
						}
					}
				}
				$moveFare = true;
				if($_AcompetitorPolicyArray['compettitorRuleDetails'][0]['minimum_fare'] != 0 || $_AcompetitorPolicyArray['compettitorRuleDetails'][0]['maximum_fare'] != 0)
					$moveFare = false;
					
				if($_AcompetitorPolicyArray['compettitorRuleDetails'][0]['minimum_fare'] != 0 && $_AcompetitorPolicyArray['compettitorRuleDetails'][0]['maximum_fare'] != 0)
				{
					if(round($_AcompetitorPolicyArray['compettitorRuleDetails'][0]['minimum_fare'],2) <= round($row['factored_fare'],2) && round($_AcompetitorPolicyArray['compettitorRuleDetails'][0]['maximum_fare'],2) >= round($row['factored_fare'],2))
					{
						$moveFare = true;
					}
				}
				elseif($_AcompetitorPolicyArray['compettitorRuleDetails'][0]['minimum_fare'] != 0)
				{
					if(round($_AcompetitorPolicyArray['compettitorRuleDetails'][0]['minimum_fare'],2) <= round($row['factored_fare'],2))
					{
						$moveFare = true;
					}
				}
				elseif($_AcompetitorPolicyArray['compettitorRuleDetails'][0]['maximum_fare'] != 0)
				{
					if(round($_AcompetitorPolicyArray['compettitorRuleDetails'][0]['maximum_fare'],2) >= round($row['factored_fare'],2))
					{
						$moveFare = true;
					}
				}
				if($moveFare == true)
				{
					$_AfareArray[$fareArrayIndex]=$row;
					$fareArrayIndex++;
				}
			}
		}
		if(!empty($_AfareArray) && isset($_AcompetitorPolicyArray['compettitorRuleDetails'][0]['fare_taken']) && $_AcompetitorPolicyArray['compettitorRuleDetails'][0]['fare_taken']!="")
		{
			$_AfinalFares = array();
			$_ItotalFares = 0;
			$_IminPriority = 0;
			foreach($_AfareArray AS $_IfareIndex => $_Afares)
			{
				$_IfactoredFare = round($_Afares['factored_fare'],2);
				$_AfinalFares[] = $_IfactoredFare;
				$_ItotalFares += $_IfactoredFare;
				if($_AcompetitorPolicyArray['compettitorRuleDetails'][0]['fare_taken'] == "PRI" && ($_IminPriority == 0 || ($_IminPriority >= $_Afares['priority'])))
				{
					if(!isset($_AfareArray[0]['finalFare']) || $_AfareArray[0]['finalFare'] > $_IfactoredFare)
					{
						$_AfareArray[0]['finalFare'] = $_IfactoredFare;
						$_AfareArray[0]['finalSelectedCompetitorFlightId'] = $_Afares['competitor_flight_id'];
						$_IminPriority = $_Afares['priority'];
					}
				}
			}
			if($_AcompetitorPolicyArray['compettitorRuleDetails'][0]['fare_taken'] == "MIN")
			{
				$_AfareArray[0]['finalFare'] = min($_AfinalFares);
			}
			elseif($_AcompetitorPolicyArray['compettitorRuleDetails'][0]['fare_taken'] == "MAX")
			{
				$_AfareArray[0]['finalFare'] = max($_AfinalFares);
			}
			elseif($_AcompetitorPolicyArray['compettitorRuleDetails'][0]['fare_taken'] == "AVG")
			{
				$_AfareArray[0]['finalFare'] = round( ($_ItotalFares / count($_AfareArray)) , 2);
			}
		}
		return 	$_AfareArray;
	}//end 

	function _getMatrixFareValue($givenPolicyDetailsArray)
	{
		global $CFG;

		$currentDate=date('Y-m-d');
		$resultArray=array();

		for($myVal=0;$myVal<count($givenPolicyDetailsArray);$myVal++)
		{
			$bookingProfileId=$givenPolicyDetailsArray[$myVal]['booking_profile_id'];

			$departureDate=$givenPolicyDetailsArray[$myVal]['departureDate'];

			$daysToDeparture=strtotime($departureDate)-strtotime($currentDate);
			$daysToDeparture=floor($daysToDeparture/3600/24);

			$bookingCapacityPercentage=round($givenPolicyDetailsArray[$myVal]['bookedLoad']/100,2);
			$bookingProfileName=$givenPolicyDetailsArray[$myVal]['booking_profile_name'];
			$bookingProfileType=$givenPolicyDetailsArray[$myVal]['booking_profile_type'];

			$givenPolicyDetailsArray[$myVal]['daysToDeparture']=$daysToDeparture;

			$fareSql="SELECT 
						fsm.booking_profile_id,
						fsm.fare_suggested_id,
						fsm.days_to_departure,
						fsm.booking_capacity,
						fsm.fare_suggested
				  FROM 
						fare_suggested_matrix fsm 
				  WHERE
						(fsm.days_to_departure=(select days_to_departure from fare_suggested_matrix where days_to_departure >='".$daysToDeparture."' AND booking_profile_id='".$bookingProfileId."' order by days_to_departure limit 1) OR
						fsm.days_to_departure=(select days_to_departure from fare_suggested_matrix where days_to_departure <='".$daysToDeparture."' AND booking_profile_id='".$bookingProfileId."' order by days_to_departure desc limit 1)) AND
						(fsm.booking_capacity=(select booking_capacity from fare_suggested_matrix where booking_capacity >='".$bookingCapacityPercentage."' AND booking_profile_id='".$bookingProfileId."' order by booking_capacity limit 1) OR 
						fsm.booking_capacity=(select booking_capacity from fare_suggested_matrix where booking_capacity <='".$bookingCapacityPercentage."' AND booking_profile_id='".$bookingProfileId."' order by booking_capacity desc limit 1)) AND 
						fsm.booking_profile_id='".$bookingProfileId."' group by fsm.fare_suggested_id";


			if (DB::isError($fareResult =$this->_Oconnection->query($fareSql)))
			{
				fileWrite($fareSql,"SqlError","a+");
				return FALSE;
			}
			$i=0;
			$count=0;
			$fareSuggested=array();
			$profile=array();
			while($fareRow = $fareResult->fetchRow(DB_FETCHMODE_ASSOC))
			{
				$fareSuggested['bookingProfileId'][$i]=$fareRow['booking_profile_id'];
				$fareSuggested['fareSuggestedId'][$i]=$fareRow['fare_suggested_id'];
				$fareSuggested['daysToDeparture'][$i]=$fareRow['days_to_departure'];
				$fareSuggested['bookingCapacity'][$i]=$fareRow['booking_capacity'];
				$fareSuggested['fareSuggested'][$i]=$fareRow['fare_suggested'];

				if(($daysToDeparture==$fareSuggested['daysToDeparture'][$i]) && ($bookingCapacityPercentage==$fareSuggested['bookingCapacity'][$i]))
				{
					/*if($bookingProfileType=='FP')
					{
						$fareAmount=$productFare+($productFare*($fareSuggested['fareSuggested'][$i]));
						$profile['actualFare']=$productFare;
					}
					if($bookingProfileType=='FA')
					{
						$fareAmount=$productFare+($fareSuggested['fareSuggested'][$i]);
						$profile['actualFare']=$productFare;
					}
					if($bookingProfileType=='CP')
					{
						$fareAmount=$currentBookingFare+($currentBookingFare*($fareSuggested['fareSuggested'][$i]));
						$profile['actualFare']=$currentBookingFare;
					}
					if($bookingProfileType=='CA')
					{
						$fareAmount=$currentBookingFare+($fareSuggested['fareSuggested'][$i]);
						$profile['actualFare']=$currentBookingFare;
					}*/

					if($bookingProfileType=='FA')
					{
						$fareAmount=($fareSuggested['fareSuggested'][$i]);
						$profile['actualFare']=0;
					}
				}
				else
				{
					$count++;
				
				}
				$i++;
			}
			if($count!=0)
			{
				$minBookingCapacity=min($fareSuggested['bookingCapacity']);
				$maxBookingCapacity=max($fareSuggested['bookingCapacity']);
				$minFareSuggested=min($fareSuggested['fareSuggested']);
				$maxFareSuggested=max($fareSuggested['fareSuggested']);

				/*if($bookingProfileType=='FP')
				{
					$profile['actualFare']=$productFare;
					$minFareAmount=$productFare+($productFare*($minFareSuggested));
					$maxFareAmount=$productFare+($productFare*($maxFareSuggested));
				}
				if($bookingProfileType=='FA')
				{
					$profile['actualFare']=$productFare;
					$minFareAmount=$productFare+($minFareSuggested);
					$maxFareAmount=$productFare+($maxFareSuggested);
				}
				if($bookingProfileType=='CP')
				{
					$profile['actualFare']=$currentBookingFare;
					$minFareAmount=$currentBookingFare+($currentBookingFare*($minFareSuggested));
					$maxFareAmount=$currentBookingFare+($currentBookingFare*($maxFareSuggested));
				}
				if($bookingProfileType=='CA')
				{
					$profile['actualFare']=$currentBookingFare;
					$minFareAmount=$currentBookingFare+($minFareSuggested);
					$maxFareAmount=$currentBookingFare+($maxFareSuggested);
				}*/

				if($bookingProfileType=='FA')
				{
					$profile['actualFare']=0;
					$minFareAmount=$minFareSuggested;
					$maxFareAmount=$maxFareSuggested;
				}
				
				$tempCapacity=(($bookingCapacityPercentage-$minBookingCapacity)/($maxBookingCapacity-$minBookingCapacity));
				$tempAmount=($tempCapacity)*($maxFareAmount-$minFareAmount);
				$fareAmount=$minFareAmount+$tempAmount;	
			}
		
			$bookingProfileFare=round($fareAmount);
			$profile['fare']=$bookingProfileFare;
			$profile['bookingProfileId']=$bookingProfileId;
			$profile['bookingProfileName']=$bookingProfileName;
			#$profile['capacity']=$capacity;
			#$profile['bookingLoadFactor']=$currentBookings;
			$profile['profileType']=$bookingProfileType;
			$profile['booingCapacity']=$fareSuggested['bookingCapacity'];
			$profile['discountFareSuggested']=$fareSuggested['fareSuggested'];
			$profile['daysToDepature']=$fareSuggested['daysToDeparture'];
			$profile['bookingCapacityPercentage']=$bookingCapacityPercentage;

			$resultArray[$myVal]=$givenPolicyDetailsArray[$myVal];
			$resultArray[$myVal]['profile']=$profile;
		}

		return $resultArray;
	}
	
	function _getImplodeTaxBreakUp($taxBreakUp,$paxType)
	{
		$_StaxBreakUp = "";
		#If tax breakup is empty then return empty string
		if(empty($taxBreakUp))
			return $_StaxBreakUp;
		if(isset($taxBreakUp[$paxType]))
		{
			foreach($taxBreakUp[$paxType] AS $_AtaxBreakUp)
			{
				//No need to insert the tax break up if there is no tax code
				if($_AtaxBreakUp['taxCode'] != "")
				{
					if($_StaxBreakUp == "")
						$_StaxBreakUp = $_AtaxBreakUp['taxCode']."=".$this->_getRoundOffFare($_AtaxBreakUp['amount'],2);
					else
						$_StaxBreakUp .= "$$".$_AtaxBreakUp['taxCode']."=".$this->_getRoundOffFare($_AtaxBreakUp['amount'],2);
				}
			}
		}
		return $_StaxBreakUp;
	}
	
	function _getExplodeTaxBreakUp($taxBreakUp)
	{
		global $CFG;
		$currencyCode = '';
		$decimalPrecision = 2;

		if(isset($this->_SuserCurrency) && !empty($this->_SuserCurrency))
		{
			$currencyCode = $this->_SuserCurrency;
			if(isset($CFG["limit"]["decimalPrecision"][$this->_SuserCurrency]))
			{
				$decimalPrecision = $CFG["limit"]["decimalPrecision"][$this->_SuserCurrency];
			}
		}
		$_AtaxBreakUpResult = array();
		$_AtaxBreakUp = explode("$$",$taxBreakUp);
		if(!empty($_AtaxBreakUp))
		{
			foreach($_AtaxBreakUp AS $taxKey=>$_AtaxBreakUp)
			{
				$_StaxValue = explode("=",$_AtaxBreakUp);
				$_AtaxBreakUpResult['tax'.$taxKey]['taxCode']=$_StaxValue[0];
				$_AtaxBreakUpResult['tax'.$taxKey]['amount']=$this->_getRoundOffFare($_StaxValue[1],$decimalPrecision,$currencyCode['user_currency']);
			}
		}
		return $_AtaxBreakUpResult;
	}
	/*Modified By: Subalakshmi S 27-08-2018
		Desc     : The below lines are commented since it is called in 
		 			class.fetchPolicyDetails.php file*/
		 			
	/*function _getMatrixFareValueNew($givenPolicyDetailsArray)
	{
		global $CFG;

		$currentDate=date('Y-m-d');
		$resultArray=array();
		for($i=0;$i<count($givenPolicyDetailsArray);$i++)
		{
			$bookingProfileId=$givenPolicyDetailsArray[$i]['booking_profile_id'];
			
			$_currencyType=$givenPolicyDetailsArray[$i]['currency_type'];
			
			$departureDate=$givenPolicyDetailsArray[$i]['departureDate'];
			$bookedLoadFactor=$givenPolicyDetailsArray[$i]['bookedLoad'];
			
			if($this->_getLoadFactorTypeDetails('_SstaticFareStatus','FLF')=="Y")		
				$bookedLoadFactor=$givenPolicyDetailsArray[$i]['futureLoad'];
				
			$forecastDataLoadFactor=$givenPolicyDetailsArray[$i]['policyForecastLoadFactor'];

			$daysToDeparture=strtotime($departureDate)-strtotime($currentDate);
			$daysToDeparture=floor($daysToDeparture/3600/24);

			$bookingCapacityPercentage=round($givenPolicyDetailsArray[$i]['bookedLoad']/100,2);
			$bookingProfileName=$givenPolicyDetailsArray[$i]['booking_profile_name'];
			$bookingProfileType=$givenPolicyDetailsArray[$i]['booking_profile_type'];

			$groupSizeValue=$givenPolicyDetailsArray[$i]['noOfPax'];
			
			$_SfareType = $givenPolicyDetailsArray[$i]['fareType'];
			$daysToDepartureJoin = '';
			$bookedLoadJoin = '';
			$forecastLoadJoin = '';
			
			if($_SfareType == 'GAF')
			{
				$sqlSelectBookingProfileFare="SELECT
									gapd.profile_id as booking_profile_id,
									gapd.profile_name as booking_profile_name,
									gapd.load_factor_type as load_factor_type,
									gasm.suggested_matrix_id as fare_suggested_id,
									gasm.days_to_departure as days_to_departure,
									gasm.booking_capacity as booking_capacity,
									gasm.group_pax_fare,
									gasm.group_start_pax,
									gasm.group_end_pax,
									gapd.currency_type
								  FROM
									".$CFG['db']['tbl']['group_allocation_profile_details']." gapd,
									".$CFG['db']['tbl']['group_allocation_suggested_matrix']." gasm
								  WHERE
									gapd.profile_id='".$bookingProfileId."'
									AND gapd.profile_id=gasm.profile_id";
				if($CFG['farePolicy']['averageFareCaluculation']=="Y")
				{				
					$daysToDepartureJoin=" AND (gasm.days_to_departure=(SELECT days_to_departure FROM ".$CFG['db']['tbl']['group_allocation_suggested_matrix']." WHERE booking_profile_id='".$bookingProfileId."' AND days_to_departure >='".$daysToDeparture."' order by days_to_departure limit 1) OR 
										gasm.days_to_departure=(SELECT days_to_departure FROM ".$CFG['db']['tbl']['group_allocation_suggested_matrix']." WHERE booking_profile_id='".$bookingProfileId."' AND days_to_departure <='".$daysToDeparture."' order by days_to_departure desc limit 1))";
					$bookedLoadJoin=" AND (gasm.booking_capacity=(SELECT booking_capacity FROM ".$CFG['db']['tbl']['group_allocation_suggested_matrix']." WHERE booking_profile_id='".$bookingProfileId."' AND booking_capacity >='".$bookedLoadFactor."' order by booking_capacity limit 1) OR 
										gasm.booking_capacity=(SELECT booking_capacity FROM ".$CFG['db']['tbl']['group_allocation_suggested_matrix']." WHERE booking_profile_id='".$bookingProfileId."' AND booking_capacity <='".$bookedLoadFactor."' order by booking_capacity desc limit 1))";
					$forecastLoadJoin=" AND gasm.forecast_load_factor=(SELECT forecast_load_factor FROM ".$CFG['db']['tbl']['group_allocation_suggested_matrix']." WHERE booking_profile_id='".$bookingProfileId."' AND forecast_load_factor <='".$forecastDataLoadFactor."' order by forecast_load_factor desc limit 1)";
				}
				else
				{
					$daysToDepartureJoin=" AND gasm.days_to_departure=(SELECT days_to_departure FROM ".$CFG['db']['tbl']['group_allocation_suggested_matrix']." WHERE profile_id='".$bookingProfileId."' AND days_to_departure <='".$daysToDeparture."' order by days_to_departure desc limit 1)";
					$bookedLoadJoin=" AND gasm.booking_capacity=(SELECT booking_capacity FROM ".$CFG['db']['tbl']['group_allocation_suggested_matrix']." WHERE profile_id='".$bookingProfileId."' AND booking_capacity <='".$bookedLoadFactor."' order by booking_capacity desc limit 1)";
					$forecastLoadJoin=" AND gasm.forecast_load_factor=(SELECT forecast_load_factor FROM ".$CFG['db']['tbl']['group_allocation_suggested_matrix']." WHERE profile_id='".$bookingProfileId."' AND forecast_load_factor <='".$forecastDataLoadFactor."' order by forecast_load_factor desc limit 1)";
				}
			}
			else
			{
				$sqlSelectBookingProfileFare="SELECT
									bpd.booking_profile_id,
									bpd.booking_profile_name,
									bpd.booking_profile_type,
									bpd.load_factor_type,
									fsm.fare_suggested_id,
									fsm.days_to_departure,
									fsm.booking_capacity
								  FROM
									".$CFG['db']['tbl']['booking_profile_details']." bpd,
									".$CFG['db']['tbl']['fare_suggested_matrix']." fsm
								  WHERE
									bpd.booking_profile_id='".$bookingProfileId."'
									AND bpd.booking_profile_id=fsm.booking_profile_id";
								
								
				if($CFG['farePolicy']['averageFareCaluculation']=="Y")
				{				
					$daysToDepartureJoin=" AND (fsm.days_to_departure=(SELECT days_to_departure FROM ".$CFG['db']['tbl']['fare_suggested_matrix']." WHERE booking_profile_id='".$bookingProfileId."' AND days_to_departure >='".$daysToDeparture."' order by days_to_departure limit 1) OR 
										fsm.days_to_departure=(SELECT days_to_departure FROM ".$CFG['db']['tbl']['fare_suggested_matrix']." WHERE booking_profile_id='".$bookingProfileId."' AND days_to_departure <='".$daysToDeparture."' order by days_to_departure desc limit 1))";
					$bookedLoadJoin=" AND (fsm.booking_capacity=(SELECT booking_capacity FROM ".$CFG['db']['tbl']['fare_suggested_matrix']." WHERE booking_profile_id='".$bookingProfileId."' AND booking_capacity >='".$bookedLoadFactor."' order by booking_capacity limit 1) OR 
										fsm.booking_capacity=(SELECT booking_capacity FROM ".$CFG['db']['tbl']['fare_suggested_matrix']." WHERE booking_profile_id='".$bookingProfileId."' AND booking_capacity <='".$bookedLoadFactor."' order by booking_capacity desc limit 1))";
					$forecastLoadJoin=" AND fsm.forecast_load_factor=(SELECT forecast_load_factor FROM ".$CFG['db']['tbl']['fare_suggested_matrix']." WHERE booking_profile_id='".$bookingProfileId."' AND forecast_load_factor <='".$forecastDataLoadFactor."' order by forecast_load_factor desc limit 1)";
					//$forecastLoadJoin=" AND (fsm.forecast_load_factor=(SELECT forecast_load_factor FROM ".$CFG['db']['tbl']['fare_suggested_matrix']." WHERE booking_profile_id='".$bookingProfileId."' AND forecast_load_factor>='".$forecastDataLoadFactor."' ORDER BY forecast_load_factor desc limit 1) OR
										//fsm.forecast_load_factor=(SELECT forecast_load_factor FROM ".$CFG['db']['tbl']['fare_suggested_matrix']." WHERE booking_profile_id='".$bookingProfileId."' AND forecast_load_factor<='".$forecastDataLoadFactor."' ORDER BY forecast_load_factor desc limit 1))";
				}
				else
				{
					$daysToDepartureJoin=" AND fsm.days_to_departure=(SELECT days_to_departure FROM ".$CFG['db']['tbl']['fare_suggested_matrix']." WHERE booking_profile_id='".$bookingProfileId."' AND days_to_departure <='".$daysToDeparture."' order by days_to_departure desc limit 1)";
					$bookedLoadJoin=" AND fsm.booking_capacity=(SELECT booking_capacity FROM ".$CFG['db']['tbl']['fare_suggested_matrix']." WHERE booking_profile_id='".$bookingProfileId."' AND booking_capacity <='".$bookedLoadFactor."' order by booking_capacity desc limit 1)";
					$forecastLoadJoin=" AND fsm.forecast_load_factor=(SELECT forecast_load_factor FROM ".$CFG['db']['tbl']['fare_suggested_matrix']." WHERE booking_profile_id='".$bookingProfileId."' AND forecast_load_factor <='".$forecastDataLoadFactor."' order by forecast_load_factor desc limit 1)";
				}
			}	
			$sqlSelectBookingProfileFare.=$daysToDepartureJoin.$bookedLoadJoin.$forecastLoadJoin;
			if(DB::isError($resultSelectBookingProfileFare=$this->_Oconnection->query($sqlSelectBookingProfileFare)))
			{
				fileWrite($sqlSelectBookingProfileFare,"SqlError","a+");
				return false;
			}

			if($resultSelectBookingProfileFare->numRows() > 0)
			{
				$resultFareDetailsArray=array();
				$k=0;
				while($rowSelectBookingProfileFare=$resultSelectBookingProfileFare->fetchRow(DB_FETCHMODE_ASSOC))
				{
					$resultFareDetailsArray[$k]['booking_profile_id']=$rowSelectBookingProfileFare['booking_profile_id'];
					$resultFareDetailsArray[$k]['booking_profile_name']=$rowSelectBookingProfileFare['booking_profile_name'];
					$resultFareDetailsArray[$k]['booking_profile_type']=$rowSelectBookingProfileFare['booking_profile_type'];
					$resultFareDetailsArray[$k]['fare_suggested_id']=$rowSelectBookingProfileFare['fare_suggested_id'];
					$resultFareDetailsArray[$k]['days_to_departure']=$rowSelectBookingProfileFare['days_to_departure'];
					$resultFareDetailsArray[$k]['booking_capacity']=$rowSelectBookingProfileFare['booking_capacity'];
					$resultFareDetailsArray[$k]['load_factor_type']=$rowSelectBookingProfileFare['load_factor_type'];
					$resultFareDetailsArray[$k]['staticFare'] = $rowSelectBookingProfileFare['group_pax_fare']; 
					$resultFareDetailsArray[$k]['group_pax_fare'] = $rowSelectBookingProfileFare['group_pax_fare']; 
					$resultFareDetailsArray[$k]['group_start_pax'] = $rowSelectBookingProfileFare['group_start_pax']; 
					$resultFareDetailsArray[$k]['group_end_pax'] = $rowSelectBookingProfileFare['group_end_pax']; 
					$resultFareDetailsArray[$k]['currency_type'] = $rowSelectBookingProfileFare['currency_type']; 
					
					if($_SfareType != 'GAF')
					{
						$sqlSelectFareSuggestedMatrixValue="SELECT
												fsmv.fare_suggested_matrix_value_id,
												fsmv.group_size,
												fsmv.static_fare
										        FROM
												".$CFG['db']['tbl']['fare_suggested_matrix_value']." fsmv
										        WHERE
												fsmv.fare_suggested_id='".$resultFareDetailsArray[$k]['fare_suggested_id']."'";
												//AND (fsmv.group_size=(SELECT group_size FROM ".$CFG['db']['tbl']['fare_suggested_matrix_value']." WHERE fare_suggested_id='".$resultFareDetailsArray[$k]['fare_suggested_id']."' AND group_size>='".$groupSizeValue."' order by group_size limit 1) OR 
												//fsmv.group_size=(SELECT group_size FROM ".$CFG['db']['tbl']['fare_suggested_matrix_value']." WHERE fare_suggested_id='".$resultFareDetailsArray[$k]['fare_suggested_id']."' AND group_size<='".$groupSizeValue."' order by group_size desc limit 1))";

									if($CFG['farePolicy']['averageFareCaluculation']=="Y")
									{
										$groupPaxJoin="	AND (fsmv.group_size=(SELECT group_size FROM ".$CFG['db']['tbl']['fare_suggested_matrix_value']." WHERE fare_suggested_id='".$resultFareDetailsArray[$k]['fare_suggested_id']."' AND group_size>='".$groupSizeValue."' order by group_size limit 1) OR 
														fsmv.group_size=(SELECT group_size FROM ".$CFG['db']['tbl']['fare_suggested_matrix_value']." WHERE fare_suggested_id='".$resultFareDetailsArray[$k]['fare_suggested_id']."' AND group_size<='".$groupSizeValue."' order by group_size desc limit 1))";
									}
									else
									{
										$groupPaxJoin="	AND fsmv.group_size=(SELECT group_size FROM ".$CFG['db']['tbl']['fare_suggested_matrix_value']." WHERE fare_suggested_id='".$resultFareDetailsArray[$k]['fare_suggested_id']."' AND group_size<='".$groupSizeValue."' order by group_size desc limit 1)";
									}
						$sqlSelectFareSuggestedMatrixValue.=$groupPaxJoin;
						if(DB::isError($resultSelectFareSuggestedMatrixValue=$this->_Oconnection->query($sqlSelectFareSuggestedMatrixValue)))
						{
							fileWrite($sqlSelectFareSuggestedMatrixValue,"SqlError","a+");
							return false;
						}
					
						if($resultSelectFareSuggestedMatrixValue->numRows() > 0)
						{
							$fareSuggestedMappingArray=array();
							$indexX=0;
							while($rowSelectFareSuggestedMatrixValue=$resultSelectFareSuggestedMatrixValue->fetchRow(DB_FETCHMODE_ASSOC))
							{
								$fareSuggestedMappingArray[$indexX]['staticFare']=$rowSelectFareSuggestedMatrixValue['static_fare'];
								$fareSuggestedMappingArray[$indexX]['groupSize']=$rowSelectFareSuggestedMatrixValue['group_size'];
								$indexX++;
							}
							if(count($fareSuggestedMappingArray)==1)
							{
								$resultFareDetailsArray[$k]['staticFare']=$fareSuggestedMappingArray[0]['staticFare'];
							}
							else
							{

								if($fareSuggestedMappingArray[0]['groupSize']>$fareSuggestedMappingArray[1]['groupSize'])
								{
									$minGroupSizeValue=$fareSuggestedMappingArray[1]['groupSize'];
									$maxGroupSizeValue=$fareSuggestedMappingArray[0]['groupSize'];

									$minGroupSizeValueDiscountValue=$fareSuggestedMappingArray[1]['staticFare'];
									$maxGroupSizeValueDiscountValue=$fareSuggestedMappingArray[0]['staticFare'];
								}
								if($fareSuggestedMappingArray[0]['groupSize']<$fareSuggestedMappingArray[1]['groupSize'])
								{
									$minGroupSizeValue=$fareSuggestedMappingArray[0]['groupSize'];
									$maxGroupSizeValue=$fareSuggestedMappingArray[1]['groupSize'];

									$minGroupSizeValueDiscountValue=$fareSuggestedMappingArray[0]['staticFare'];
									$maxGroupSizeValueDiscountValue=$fareSuggestedMappingArray[1]['staticFare'];
								}

								$tempGroupSize=(($groupSizeValue-$minGroupSizeValue)/($maxGroupSizeValue-$minGroupSizeValue));
								$tempDiscountAmount=($tempGroupSize)*($maxGroupSizeValueDiscountValue-$minGroupSizeValueDiscountValue);

								$netDiscountAmount=round(($minGroupSizeValueDiscountValue+$tempDiscountAmount),2);

								$resultFareDetailsArray[$k]['staticFare']=$netDiscountAmount;
							
							}

						}
					}

					$k++;
				}

				if(count($resultFareDetailsArray) > 0)
				{
					
					if(count($resultFareDetailsArray) ==1)
					{
						$profile=array();
						$profile['fare']=$resultFareDetailsArray[0]['staticFare'];
						$profile['bookingProfileId']=$resultFareDetailsArray[0]['booking_profile_id'];
						$profile['bookingProfileName']=$resultFareDetailsArray[0]['booking_profile_name'];
						$profile['profileType']=$resultFareDetailsArray[0]['booking_profile_type'];
						$profile['booingCapacity']=$bookedLoadFactor;
						$profile['daysToDepature']=$daysToDeparture;
						$profile['forecastLoadFactor']=$forecastDataLoadFactor;
						$profile['loadFactorType']=$resultFareDetailsArray[0]['load_factor_type'];					
						$resultArray[$i]=$givenPolicyDetailsArray[$i];
						#Set the groupAllocationMatrix array when fare type is GAF
						if($_SfareType == 'GAF')
						{
							$profile['currency_type']=$resultFareDetailsArray[0]['currency_type'];
							$profile['groupAllocationMatrix']=$resultFareDetailsArray;
						}
						$resultArray[$i]['profile']=$profile;
					}
					else
					{						
						$bookedLaodArray=array();
						for($j=0;$j<count($resultFareDetailsArray);$j++)
						{
							$bookedLaodArray[$resultFareDetailsArray[$j]['booking_capacity']][]=$resultFareDetailsArray[$j];
						}
						$bookedLoadWiseArray=array();
						foreach($bookedLaodArray as $bookedLaodKey=>$bookedLoadValue)
						{
							$bookedLoadWiseArray[$bookedLaodKey]['booking_profile_id']=$bookedLoadValue[0]['booking_profile_id'];
							$bookedLoadWiseArray[$bookedLaodKey]['booking_profile_name']=$bookedLoadValue[0]['booking_profile_name'];
							$bookedLoadWiseArray[$bookedLaodKey]['booking_profile_type']=$bookedLoadValue[0]['booking_profile_type'];
							$bookedLoadWiseArray[$bookedLaodKey]['load_factor_type']=$bookedLoadValue[0]['load_factor_type'];

							if(count($bookedLoadValue)==1)
							{								
								$bookedLoadWiseArray[$bookedLaodKey]['staticFare']=$bookedLoadValue[0]['staticFare'];
							}
							else
							{
							
								$minimumDaysToDeparture=0;
								$minimumDaysToDetartureValue=0;
								$maximumDaysToDeparture=0;
								$maximumDaysToDetartureValue=0;
								foreach($bookedLoadValue as $key=>$value)
								{
									if($minimumDaysToDeparture==0 || $value['days_to_departure']<=$minimumDaysToDeparture)
									{
										$minimumDaysToDeparture=$value['days_to_departure'];
										$minimumDaysToDetartureValue=$value['staticFare'];
									}
									if($maximumDaysToDeparture==0 || $value['days_to_departure']>=$maximumDaysToDeparture)
									{
										$maximumDaysToDeparture=$value['days_to_departure'];
										$maximumDaysToDetartureValue=$value['staticFare'];
									}
								}								

								$tempDaysToDeparture=(($daysToDeparture-$minimumDaysToDeparture)/($maximumDaysToDeparture-$minimumDaysToDeparture));
								$tempDiscountAmountForDaysToDeparture=($tempDaysToDeparture)*($maximumDaysToDetartureValue-$minimumDaysToDetartureValue);
								$netDiscountAmountForDaysToDeparture=round(($minimumDaysToDetartureValue+$tempDiscountAmountForDaysToDeparture),2);
								$bookedLoadWiseArray[$bookedLaodKey]['staticFare']=$netDiscountAmountForDaysToDeparture;
							}
						}

						if(count($bookedLoadWiseArray)==1)
						{
							foreach($bookedLoadWiseArray as $bookedLoadWiseKey=>$bookedLaodWiseValue)
							{
								$bookingProfileIdTemp=$bookedLaodWiseValue['booking_profile_id'];
								$bookingProfileNameTemp=$bookedLaodWiseValue['booking_profile_name'];
								$bookingProfileTypeTemp=$bookedLaodWiseValue['booking_profile_type'];
								$bookingLoadFactorTypeTemp=$bookedLaodWiseValue['load_factor_type'];
								$netDiscountAmountForBookedLoad=$bookedLaodWiseValue['staticFare'];
							}
						}
						else
						{
							$minimumBookedLoad=0;
							$minimumBookedLoadValue=0;
							$maximumBookedLoad=0;
							$maximumBookedLoadValue=0;

							foreach($bookedLoadWiseArray as $bookedLoadWiseKey=>$bookedLaodWiseValue)
							{
								$bookingProfileIdTemp=$bookedLaodWiseValue['booking_profile_id'];
								$bookingProfileNameTemp=$bookedLaodWiseValue['booking_profile_name'];
								$bookingProfileTypeTemp=$bookedLaodWiseValue['booking_profile_type'];
								$bookingLoadFactorTypeTemp=$bookedLaodWiseValue['load_factor_type'];

								if(($minimumBookedLoad==0 && $minimumBookedLoadValue==0) || $bookedLoadWiseKey<=$minimumBookedLoad)
								{
									$minimumBookedLoad=$bookedLoadWiseKey;
									$minimumBookedLoadValue=$bookedLaodWiseValue['staticFare'];
								}

								if($maximumBookedLoad==0 || $bookedLoadWiseKey>=$maximumBookedLoad)
								{
									$maximumBookedLoad=$bookedLoadWiseKey;
									$maximumBookedLoadValue=$bookedLaodWiseValue['staticFare'];
								}
							}
					
							$tempBookedLoadValue=(($bookedLoadFactor-$minimumBookedLoad)/($maximumBookedLoad-$minimumBookedLoad));
							$tempDiscountAmountForBookedLoad=($tempBookedLoadValue)*($maximumBookedLoadValue-$minimumBookedLoadValue);
							$netDiscountAmountForBookedLoad=round(($minimumBookedLoadValue+$tempDiscountAmountForBookedLoad),2);
						}
						$profile=array();
						$profile['fare']=$netDiscountAmountForBookedLoad;
						$profile['bookingProfileId']=$bookingProfileIdTemp;
						$profile['bookingProfileName']=$bookingProfileNameTemp;
						$profile['profileType']=$bookingProfileTypeTemp;
						$profile['booingCapacity']=$bookedLoadFactor;
						$profile['daysToDepature']=$daysToDeparture;
						$profile['forecastLoadFactor']=$forecastDataLoadFactor;
						$profile['loadFactorType']=$bookingLoadFactorTypeTemp;
						#Set the groupAllocationMatrix array when fare type is GAF
						if($_SfareType == 'GAF')
						{
							$profile['currency_type']=$_currencyType;
							$profile['groupAllocationMatrix']=$resultFareDetailsArray;
						}	
						$resultArray[$i]=$givenPolicyDetailsArray[$i];
						$resultArray[$i]['profile']=$profile;
					}	
								
				}
			}
		}
		return $resultArray;
	}*/
	
	/*
	 * $baggageStatus is for adding the baggage fare into the base fare or not
	 */
	function _getAdultFare($requestMasterId,$baggageStatus="N",$transactionMasterId=0)
	{
		global $CFG;
		fileRequire("dataModels/class.seriesRequestDetails.php");
		$transactionIdPassed = false;
		
		$objSeriesRequestDetails=new seriesRequestDetails();
		$objSeriesRequestDetails->_Oconnection=$this->_Oconnection;
		
		//if transaction id passed then set flag as true
		if($transactionMasterId!=0)
			$transactionIdPassed = true;
		
		$noOfAdultGroups = 0;
		$noOfChildGroups = 0;
		$noOfInfantGroups = 0;

		#$totalAmount=0;
		$airlinesRequestId=0;
		
		$_IrequestTypeId = $this->_getRequestType($requestMasterId,"Y");
		$_ApaxCount = $this->_getRequestPaxCount($requestMasterId);

		$sqlSelectAirlinesRequestId="SELECT
										airlines_request_id
									FROM
										".$CFG['db']['tbl']['airlines_request_mapping']."
									WHERE
										request_master_id='".$requestMasterId."'";

		if(DB::isError($resultSelectAirlinesRequestId=$this->_Oconnection->query($sqlSelectAirlinesRequestId)))
		{
			fileWrite($sqlSelectAirlinesRequestId,"SqlError","a+");
			return false;
		}
	
		if($resultSelectAirlinesRequestId->numRows() >0)
		{
			$rowSelectAirlinesRequestId=$resultSelectAirlinesRequestId->fetchRow(DB_FETCHMODE_ASSOC);

			$airlinesRequestId=$rowSelectAirlinesRequestId['airlines_request_id'];
			
			if($transactionMasterId==0)
			{
				$sqlSelectTransactionMasterId="SELECT
													transaction_id
												FROM
													".$CFG['db']['tbl']['transaction_master']."
												WHERE
													airlines_request_id='".$airlinesRequestId."'
												ORDER BY
													transaction_id DESC
												LIMIT 1";

				if(DB::isError($resultSelectTransactionMasterId=$this->_Oconnection->query($sqlSelectTransactionMasterId)))
				{
					fileWrite($sqlSelectTransactionMasterId,"SqlError","a+");
					return false;
				}
		
				if($resultSelectTransactionMasterId->numRows() >0)
				{
					$rowSelectTransactionMasterId=$resultSelectTransactionMasterId->fetchRow(DB_FETCHMODE_ASSOC);
					$transactionMasterId=$rowSelectTransactionMasterId['transaction_id'];
				}
			}
		}

		$sqlSelectRequestApprovedFlightDetails="SELECT
													rafd.request_approved_flight_id,
													rafd.base_fare,
													rafd.tax,
													rafd.child_base_fare,
													rafd.child_tax,
													rafd.infant_base_fare,
													rafd.infant_tax,
													rafd.fare_passenger,
													rafd.baggauge_fare,
													rafd.no_of_adult,
													rafd.no_of_child,
													rafd.no_of_infant,
													rafd.series_request_id
												FROM
													".$CFG['db']['tbl']['request_approved_flight_details']." rafd
												WHERE	
													rafd.airlines_request_id='".$airlinesRequestId."'
													AND rafd.transaction_master_id='".$transactionMasterId."'
													AND rafd.accepted_flight_status='Y'";

		if(DB::isError($resultSelectRequestApprovedFlightDetails=$this->_Oconnection->query($sqlSelectRequestApprovedFlightDetails)))
		{
			fileWrite($sqlSelectRequestApprovedFlightDetails,"SqlError","a+");
			return false;
		}
		if($resultSelectRequestApprovedFlightDetails->numRows() >0)
		{
			$adultTotal =0;
			$childTotal = 0;
			$infantTotal = 0;
			while($rowSelectRequestApprovedFlightDetails=$resultSelectRequestApprovedFlightDetails->fetchRow(DB_FETCHMODE_ASSOC))
			{
				$adultBaseFare=$rowSelectRequestApprovedFlightDetails['base_fare'];
				$adultTax=$rowSelectRequestApprovedFlightDetails['tax'];
				$childBaseFare = $rowSelectRequestApprovedFlightDetails['child_base_fare'];
				$childTax = $rowSelectRequestApprovedFlightDetails['child_tax'];
				$infantBaseFare = $rowSelectRequestApprovedFlightDetails['infant_base_fare'];
				$infantTax = $rowSelectRequestApprovedFlightDetails['infant_tax'];
				$baggageFare = 0;
				if($transactionIdPassed == true && $rowSelectRequestApprovedFlightDetails['series_request_id']!=0 && $_IrequestTypeId==2)
				{
					$seriesRequestDetails = array();
					$objSeriesRequestDetails->__construct();
					$objSeriesRequestDetails->_IseriesRequestId = $rowSelectRequestApprovedFlightDetails['series_request_id'];
					$seriesRequestDetails = $objSeriesRequestDetails->_selectSeriesRequestDetails();
					if($rowSelectRequestApprovedFlightDetails['no_of_adult']!=0 && $seriesRequestDetails[0]['mapped_series_request_id']==0)
						$noOfAdultGroups++;
					if($rowSelectRequestApprovedFlightDetails['no_of_child']!=0 && $seriesRequestDetails[0]['mapped_series_request_id']==0)
						$noOfChildGroups++;
						
					if($rowSelectRequestApprovedFlightDetails['no_of_infant']!=0 && $seriesRequestDetails[0]['mapped_series_request_id']==0)
						$noOfInfantGroups++;
				}
				
				if($baggageStatus=="Y")
				{
					//Since fare_basis_code is moved to flight_cabin_mapping_details, 
					//retrieving from modified location, then assigning. 
					$rafid = $rowSelectRequestApprovedFlightDetails['request_approved_flight_id'];
					$rowSelectRequestApprovedFlightDetails['fare_basis_code'] = $this->_getFareBasisCodeOfMinBaseFareFromRAFId([$rafid])[$rafid];
					$_SisNobag = $this->_checkToFetchBaggageFare($rowSelectRequestApprovedFlightDetails['fare_basis_code']);
					
					if($_SisNobag == "N")
						$baggageFare = $rowSelectRequestApprovedFlightDetails['baggauge_fare'];
				}
					
				//This is for calculating the average base fare for conference and series request
				if(in_array($_IrequestTypeId,array(2)))
				{
					$adultTotal+=($adultBaseFare+$adultTax+$baggageFare);
					if($rowSelectRequestApprovedFlightDetails['no_of_child']>0)
						$childTotal+=($childBaseFare+$childTax+$baggageFare);
					$infantTotal+=($infantBaseFare+$infantTax);
				}
				else if(in_array($_IrequestTypeId,array(3)))
				{
					$adultTotal+=($adultBaseFare+$adultTax+$baggageFare)*$rowSelectRequestApprovedFlightDetails['no_of_adult'];
					if($rowSelectRequestApprovedFlightDetails['no_of_child']>0)
						$childTotal+=($childBaseFare+$childTax+$baggageFare)*$rowSelectRequestApprovedFlightDetails['no_of_child'];
					$infantTotal+=($infantBaseFare+$infantTax)*$rowSelectRequestApprovedFlightDetails['no_of_infant'];
				}
				else
				{
					$adultTotal+=$adultBaseFare+$adultTax+$baggageFare;
					if($rowSelectRequestApprovedFlightDetails['no_of_child']>0)
						$childTotal+=$childBaseFare+$childTax+$baggageFare;
					$infantTotal+=$infantBaseFare+$infantTax;
					
				}
			}
		}
		if(in_array($_IrequestTypeId,array(2)))
		{
			$totalAmount['adultTotal'] = $this->_getRoundOffFare($adultTotal/($noOfAdultGroups));
			$totalAmount['childTotal'] = $this->_getRoundOffFare($childTotal/($noOfChildGroups));
			$totalAmount['infantTotal'] = $this->_getRoundOffFare($infantTotal/($noOfInfantGroups));
		}
		else if(in_array($_IrequestTypeId,array(3)))
		{
			$totalAmount['adultTotal'] = $this->_getRoundOffFare($adultTotal/($_ApaxCount['totalAdult']));
			$totalAmount['childTotal'] = $this->_getRoundOffFare($childTotal/($_ApaxCount['totalChild']));
			$totalAmount['infantTotal'] = $this->_getRoundOffFare($infantTotal/($_ApaxCount['totalInfant']));
		}
		else
		{
			$totalAmount['adultTotal'] = $adultTotal;
			$totalAmount['childTotal'] = $childTotal;
			$totalAmount['infantTotal'] = $infantTotal;
		}
		return $totalAmount;
	}
	
	/*Modified By: Subalakshmi S 27-08-2018
		Desc     : The below lines are commented since it is called in 
		 			class.fetchPolicyDetails.php file*/
	/*function _fetchStaticFarePolicyNew($givenPolicyArray)
	{
		global $CFG;
		$returnArray=array();
		$policyMasterValueArray=array();
		$tableCondition = '';
		$tableJoin = '';
		$_ScolumnName = 'bfd.booking_profile_name, bfd.booking_profile_type';
		$_ScolumnCondition = 'sfpm.booking_profile_id=bfd.booking_profile_id';
		$tableJoin=" ,	".$CFG['db']['tbl']['booking_profile_details']." bfd ";
		if($givenPolicyArray['fareType'] == 'GAF')
		{
			$_ScolumnName = 'gapd.profile_name as booking_profile_name,gapd.currency_type';
			$_ScolumnCondition = 'sfpm.booking_profile_id=gapd.profile_id';
			$tableJoin=" ,	".$CFG['db']['tbl']['group_allocation_profile_details']." gapd	";
			$tableCondition.=" AND  sfpm.matrix_type = 'GAF'";
		}			
				
		$sqlSelectFareTypePolicyMaster="SELECT
							sfpm.policy_id,
							sfpm.policy_name,
							sfpm.booking_profile_id,
							sfpm.priority,
							sfpm.created_date,
							sfpm.policy_dow,
							".$_ScolumnName."
						 FROM
							".$CFG['db']['tbl']['static_fare_policy_master']." sfpm".$tableJoin."
						 WHERE
							".$_ScolumnCondition."
							AND sfpm.active_status='Y'
							AND (date('".$givenPolicyArray['requestedDate']."') BETWEEN sfpm.start_date and sfpm.end_date)".$tableCondition;
		if(DB::isError($resultSelectFareTypePolicyMaster=$this->_Oconnection->query($sqlSelectFareTypePolicyMaster)))
		{
			fileWrite($sqlSelectFareTypePolicyMaster,"SqlError","a+");
			return false;
		}

		if($resultSelectFareTypePolicyMaster->numRows() > 0)
		{
			while($rowSelectFareTypePolicyMaster=$resultSelectFareTypePolicyMaster->fetchRow(DB_FETCHMODE_ASSOC))
			{
				if($this->_getPolicyDayOfWeekStatus($givenPolicyArray['requestedDate'],$rowSelectFareTypePolicyMaster['policy_dow'])=="Y")
				{
					$sqlSelectFareTypePolicyDetails="SELECT
										sfpd.policy_details_id,
										sfpd.policy_id,
										sfpd.criteria_id,
										sfpd.loop_value,
										sfcm.criteria_name,
										sfcm.criteria_type,
										sfcm.criteria_logical_id,
										sfpd.operator_id,
										om.operator_name,
										om.logical_value,
										om.operator_type,
										sfpd.policy_value
									 FROM
										".$CFG['db']['tbl']['static_fare_policy_details']." sfpd,
										".$CFG['db']['tbl']['static_fare_criteria_master']." sfcm,
										".$CFG['db']['tbl']['operator_master']." om
									 WHERE
										sfpd.policy_id='".$rowSelectFareTypePolicyMaster['policy_id']."'
										AND sfpd.criteria_id=sfcm.criteria_id
										AND sfpd.operator_id=om.operator_id
										ORDER BY sfpd.criteria_id,sfpd.loop_value";

					if(DB::isError($resultSelectFareTypePolicyDetails=$this->_Oconnection->query($sqlSelectFareTypePolicyDetails)))
					{
						fileWrite($sqlSelectFareTypePolicyDetails,"SqlError","a+");
						return false;
					}

					$resultValue=0;
					$stringToExecute="";
					$policyDetailsArray = array();
					$policyMasterId=0;
					if($resultSelectFareTypePolicyDetails->numRows() > 0)
					{
						while($rowSelectFareTypePolicyDetails=$resultSelectFareTypePolicyDetails->fetchRow(DB_FETCHMODE_ASSOC))
						{
							$policyMasterId=$rowSelectFareTypePolicyDetails['policy_id'];
							$policyDetailsArray[] = $rowSelectFareTypePolicyDetails;
						}
						$stringToExecute = $this->_getStringToExecuteForAllPolicy($policyDetailsArray,$givenPolicyArray);
						if($stringToExecute!="")
						{
							$resultStringToEval="IF( ".$stringToExecute." ){".'$resultValue'."=1;}";
							#fileWrite("POLCY_ID=".$policyMasterId.";STRING=".$resultStringToEval,"STATICFAREPOLICYSTRING","a+");// REM
							eval($resultStringToEval);

							if($resultValue==1)
							{
								$policyMasterValueArray[]=$rowSelectFareTypePolicyMaster;
							}
						}
					}
				}
			}
		}

		$minValue=0;

		if(count($policyMasterValueArray) > 0)
		{
			$finalInput=array("inputArray"=>$policyMasterValueArray,"firstFieldName"=>"priority","firstFieldOrder"=>"ASC","secondFieldName"=>"created_date","secondFieldOrder"=>"ASC");
			$finalArray=$this->_multipleSortFunction($finalInput);
			
			$fetchFareTypeForPolicyArray[0]=$finalArray[0];
			$fetchFareTypeForPolicyArray[0]['departureDate']=$givenPolicyArray['departureDate'];
			$fetchFareTypeForPolicyArray[0]['bookedLoad']=$givenPolicyArray['bookedLoad'];
			$fetchFareTypeForPolicyArray[0]['futureLoad']=$givenPolicyArray['futureLoad'];
			$fetchFareTypeForPolicyArray[0]['noOfPax']=$givenPolicyArray['noOfPax'];
			$fetchFareTypeForPolicyArray[0]['policyForecastLoadFactor']=$givenPolicyArray['policyForecastLoadFactor'];
			$fetchFareTypeForPolicyArray[0]['fareType']=$givenPolicyArray['fareType'];
			//For static fare based on fare class
			$fetchFareTypeForPolicyArray[0]['fareClasses']=$givenPolicyArray['fareClasses'];
			if(count($fetchFareTypeForPolicyArray) > 0)
			{
				$returnDiscountArray=$this->_getMatrixFareValueNew($fetchFareTypeForPolicyArray);
				if(count($returnDiscountArray) > 0)
				{
					$returnArray=array();
					$_IbookingProfileFareCheck = 0;
					foreach($returnDiscountArray AS $_AresultDiscountArray)
					{
						$_IbookingProfileAmount = $_AresultDiscountArray['profile']['fare'];
						if($CFG['settings']['bookingProfileFareTaken'] == "MIN")
						{
							if($_IbookingProfileFareCheck == 0 || $_IbookingProfileFareCheck > $_IbookingProfileAmount)
							{
								$_IbookingProfileFareCheck=$_IbookingProfileAmount;
								$returnArray=array(0=>$_AresultDiscountArray);
							}
						}
						else
						{
							if($_IbookingProfileFareCheck == 0 || $_IbookingProfileFareCheck < $_IbookingProfileAmount)
							{
								$_IbookingProfileFareCheck=$_IbookingProfileAmount;
								$returnArray=array(0=>$_AresultDiscountArray);
							}
						}
					}
				}
			}*/
			/*
			for($i=0;$i<count($policyMasterValueArray);$i++)
			{
				if($minValue==0 || $policyMasterValueArray[$i]['priority']<=$minValue)
				{
					$minValue=$policyMasterValueArray[$i]['priority'];
				}
			}
			$minIndex="";
			$appendString="";
			for($i=0;$i<count($policyMasterValueArray);$i++)
			{
				if($minValue==$policyMasterValueArray[$i]['priority'])
				{
					$minIndex.=$appendString.$i;
					$appendString=",";
				}
			}

			if($minIndex!="")
			{
				$fetchFareTypeForPolicyArray=array();
				$explodeArray=explode(",",$minIndex);
				for($i=0;$i<count($explodeArray);$i++)
				{
					$fetchFareTypeForPolicyArray[$i]=$policyMasterValueArray[$explodeArray[$i]];
					$fetchFareTypeForPolicyArray[$i]['departureDate']=$givenPolicyArray['departureDate'];
					$fetchFareTypeForPolicyArray[$i]['bookedLoad']=$givenPolicyArray['bookedLoad'];
					$fetchFareTypeForPolicyArray[$i]['policyForecastLoadFactor']=$givenPolicyArray['policyForecastLoadFactor'];
					$fetchFareTypeForPolicyArray[$i]['noOfPax']=$givenPolicyArray['noOfPax'];
				}

				
			}*/
		/*}
		return $returnArray;
	}*/

	function _checkAccessToAirlineGroup()
	{
		global $CFG;
		$_BreturnStatus = true;
		$_Scomments = "";
		$_ItotalCount=0;
		$_IcurrentIpCount=0;
		$_AipAllowableArray=array();
		$_AipRestrictionArray=array();

		if($CFG['site']['airlineIpBasedAccess'] == "Y")
		{
			if(isset($_SESSION['groupRM']['groupId']) && in_array($_SESSION['groupRM']['groupId'],$CFG['default']['airlinesGroupId']) && in_array($_SESSION['groupRM']['groupId'],$CFG['default']['restrictionGroupId']))
			{
				$currentIpAddress=$_SERVER['REMOTE_ADDR'];
				$sql="SELECT 
						ip_address,
						user_id,
						group_id,
						status
					FROM 
						".$CFG['db']['tbl']['ip_restriction_details'];
				if(DB::isError($result=$this->_Oconnection->query($sql)))
				{
					fileWrite($sql,'SqlError','a+');
					return false;
				}
				if($result->numRows()>0)
				{
					$_ItotalCount=$result->numRows();

					#store all details from ip_restriction_details when status = 'N'
					while($totalIpRows=$result->fetchRow(DB_FETCHMODE_ASSOC)){
						if($totalIpRows['status']=='N')
							$_AipWithCondition[]=$totalIpRows;
					}

					$sql.=" WHERE ip_address='".$currentIpAddress."' AND status IN ('Y','N')";
					if(DB::isError($result=$this->_Oconnection->query($sql)))
					{
						fileWrite($sql,'SqlError','a+');
						return false;
					}
					if($result->numRows()>0)
					{
						$_IcurrentIpCount=$result->numRows();
						while($row=$result->fetchRow(DB_FETCHMODE_ASSOC))
						{
							if($row['status']=='N')
								$_AipAllowableArray[]=$row;
							else
								$_AipRestrictionArray[]=$row;
						}
					}
				}
				#If no ip address exist means user will logout
				if($_ItotalCount== 0)
				{
					$_BreturnStatus = false;
					$_Scomments = "No IP address exists for airline groups";
				}
				#If ip address not in the config list
				elseif($_IcurrentIpCount==0)
				{
					#If the user is allowed or restricted against the configuration of ip_restriction_details table.
					if(count($_AipWithCondition)>0)
					{
						for($i=0;$i<count($_AipWithCondition);$i++)
						{
							if((($_AipWithCondition[$i]['user_id']==$_SESSION['groupRM']['groupUserId']) || $_AipWithCondition[$i]['user_id'] == 0) && (($_AipWithCondition[$i]['group_id']==$_SESSION['groupRM']['groupId']) || $_AipWithCondition[$i]['group_id']== 0)){
								$_BreturnStatus = false;
								break;
							}
						}
					}
					else
					{
						$_BreturnStatus = false;
						$_Scomments = "IP address not in the config list";
					}
				}
				#If restricted ip address to airline persons
				else
				{
					$allowableStatus=0;
					$_Bskip = false;
					if(count($_AipAllowableArray)>0)
					{
						for($i=0;$i<count($_AipAllowableArray);$i++)
						{
							if(($_AipAllowableArray[$i]['user_id']==$_SESSION['groupRM']['groupUserId'] || $_AipAllowableArray[$i]['user_id']==0) && ($_AipAllowableArray[$i]['group_id']==$_SESSION['groupRM']['groupId'] || $_AipAllowableArray[$i]['group_id']==0)){
								$allowableStatus=1;
								if($_AipAllowableArray[$i]['user_id'] != 0)
									$_Bskip = true;
							}
						}

						#If the current user access only their user_id & also access other user_id
						if(in_array($currentIpAddress,array_column($_AipWithCondition,'ip_address')))
							$allowableStatus=1;
					}
					$restrictionStatus=0;
					if(count($_AipRestrictionArray)>0)
					{
						for($i=0;$i<count($_AipRestrictionArray);$i++)
						{
							if(($_AipRestrictionArray[$i]['user_id']==$_SESSION['groupRM']['groupUserId'] || $_AipRestrictionArray[$i]['user_id']==0) && ($_AipRestrictionArray[$i]['group_id']==$_SESSION['groupRM']['groupId'] || $_AipRestrictionArray[$i]['group_id']==0) && !$_Bskip){
								$restrictionStatus=1;
								break;
							}
						}
					}
					if($restrictionStatus || (!$allowableStatus))
					{
						$_BreturnStatus = false;
						$_Scomments = "IP address is restricted for this group";
					}
				}
			}
		}
		if($_BreturnStatus == false)
		{
			$airlineCode = $_SESSION['groupRM']['airlineCode'];
			fileWrite("\nGroup id : ".$_SESSION['groupRM']['groupId']."\nIP Address : ".$_SERVER['REMOTE_ADDR']."\nEmail id : ".$_SESSION['groupRM']['groupLoginId']."\nAccess Time : ".$this->_getUTCDateValue()."\nCommemts : ".$_Scomments."\n\n","failedAirlineAccess","a+");
			session_destroy();
		}
		return $_BreturnStatus;
	}
	
	/* password expiry */
	function _getPasswordExpiryDays($userId,$_DlastUpdatedDate='')
	{
		global $CFG;
		$_IpasswordExpiryDays = 0;
		$_DcurrentDate = $this->_getUTCDateValue();
		if($_DlastUpdatedDate != '')
		{
			$_IpasswordExpiryDays = round((strtotime($_DcurrentDate) - strtotime($_DlastUpdatedDate)) / (60*60*24));
		}
		else
		{
			$pwdsql="SELECT
						created_date
					FROM
						".$CFG['db']['tbl']['user_details']."
					WHERE
						user_id='".$userId."' ";

			if(DB::isError($pwdresult=$this->_Oconnection->query($pwdsql)))
			{
				fileWrite($pwdsql,'SqlError','a+');
				return false;
			}
			if($pwdresult->numRows() > 0)
			{
				$pwdrow = $pwdresult->fetchRow(DB_FETCHMODE_ASSOC);
				if($pwdrow['created_date'] == "0000-00-00 00:00:00")
				{
					$sql="UPDATE
								".$CFG['db']['tbl']['user_details']."
							SET
								created_date = UTC_TIMESTAMP
							WHERE
								user_id='".$userId."'
							LIMIT 1";

					if(DB::isError($result=$this->_Oconnection->query($sql)))
					{
						fileWrite($sql,'SqlError','a+');
						return false;
					}
					$pwdrow['created_date'] = $_DcurrentDate;
				}
				$_IpasswordExpiryDays = round((strtotime($_DcurrentDate) - strtotime($pwdrow['created_date'])) / (60*60*24));
			}
		}
		return $_IpasswordExpiryDays;
	}
	
	/*
	 * Y - Rows Found, N - No Rows Found, E - Already Exists
	 */
	function _checkOldPassword($userId,$newPassword='',$repeatcheck=1)
	{
		global $CFG;
		$_DcurrentDate = $this->_getUTCDateValue();
		$_DpreviousDate= date('Y-m-d H:m:s',strtotime("-".$CFG['settings']['passwordExpiry']." days"));
		$_totalCountQuery="SELECT
				count(*) as totalCount				
			FROM
				".$CFG['db']['tbl']['user_password_mapping']."
			WHERE
				user_id='".$userId."' AND 
				last_updated_date BETWEEN '".$_DpreviousDate."' AND '".$_DcurrentDate."'";
		if(DB::isError($res=$this->_Oconnection->query($_totalCountQuery)))
		{
			fileWrite($_totalCountQuery,'SqlError','a+');
			return false;
		}
		if($res->numRows()>0)
		{
			while($row= $res->fetchRow(DB_FETCHMODE_ASSOC))
				$_Icount =  $row['totalCount'];
		}
		$_Scondition='';
		$_Slimit='';
		if($_Icount>$repeatcheck)
			$_Scondition= " AND last_updated_date BETWEEN '".$_DpreviousDate."' AND '".$_DcurrentDate."'";
		else
			$_Slimit = " LIMIT 0,".$repeatcheck;
		$sql="SELECT
				last_updated_password,
				last_updated_date
			FROM
				".$CFG['db']['tbl']['user_password_mapping']."
			WHERE
				user_id='".$userId."'".$_Scondition."
			ORDER BY
				password_id DESC ".$_Slimit;
	
		if(DB::isError($result=$this->_Oconnection->query($sql)))
		{
			fileWrite($sql,'SqlError','a+');
			return false;
		}
		$_IfoundStatus = 'N';
		$this->_DlastUpdatedDate = '';
		if($result->numRows() > 0)
		{
			$_IfoundStatus = 'Y';
			$index = 0;
			while($row = $result->fetchRow(DB_FETCHMODE_ASSOC))
			{
				if($index == 0)
				{
					$this->_DlastUpdatedDate = $row['last_updated_date'];
					$this->_SmatchLastPassword="Y";
					if($row['last_updated_password']!=$newPassword)
						$this->_SmatchLastPassword="N";
				}
				$index++;
				if($newPassword == $row['last_updated_password'])
				{
					$_IfoundStatus = 'E';
					break;
				}
			}
		}
		return $_IfoundStatus;
	}
	
	/* slighty modified version of the above function to suite updated pwd.
	 * retrieve passwords of user and checks against current supplied Plain-text pwd
	 * Y - Rows Found, N - No Rows Found, E - Already Exists
	 */
	function _checkOldPasswordHash($userId,$newPasswordPlainText='',$repeatcheck=1)
	{
		global $CFG;
		$_DcurrentDate = $this->_getUTCDateValue();
		$_DpreviousDate= date('Y-m-d H:m:s',strtotime("-".$CFG['settings']['passwordExpiry']." days"));
		$_totalCountQuery="SELECT
				count(*) as totalCount				
			FROM
				".$CFG['db']['tbl']['user_password_mapping']."
			WHERE
				user_id='".$userId."' AND 
				last_updated_date BETWEEN '".$_DpreviousDate."' AND '".$_DcurrentDate."'";
		if(DB::isError($res=$this->_Oconnection->query($_totalCountQuery)))
		{
			fileWrite($_totalCountQuery,'SqlError','a+');
			return false;
		}
		if($res->numRows()>0)
		{
			while($row= $res->fetchRow(DB_FETCHMODE_ASSOC))
				$_Icount =  $row['totalCount'];
		}
		$_Scondition='';
		$_Slimit='';
		if($_Icount>$repeatcheck)
			$_Scondition= " AND last_updated_date BETWEEN '".$_DpreviousDate."' AND '".$_DcurrentDate."'";
		else
			$_Slimit = " LIMIT 0,".$repeatcheck;
		$sql="SELECT
				last_updated_password,
				last_updated_date
			FROM
				".$CFG['db']['tbl']['user_password_mapping']."
			WHERE
				user_id='".$userId."'".$_Scondition."
			ORDER BY
				password_id DESC ".$_Slimit;
	
		if(DB::isError($result=$this->_Oconnection->query($sql)))
		{
			fileWrite($sql,'SqlError','a+');
			return false;
		}
		$_IfoundStatus = 'N';
		$this->_DlastUpdatedDate = '';
		if($result->numRows() > 0)
		{
			$_IfoundStatus = 'Y';
			$index = 0;
			while($row = $result->fetchRow(DB_FETCHMODE_ASSOC))
			{
				if($index == 0)
				{
					$this->_DlastUpdatedDate = $row['last_updated_date'];
					$this->_SmatchLastPassword="Y";
					if(!encrypt::_verifyHash($newPasswordPlainText, $row['last_updated_password']))
						$this->_SmatchLastPassword="N";
				}
				$index++;
				if(encrypt::_verifyHash($newPasswordPlainText, $row['last_updated_password']))
				{ 
					$_IfoundStatus = 'E';
					break;
				}
			}
		}
		return $_IfoundStatus;
	}

	//function to encode a particular value
	function md5valueEncoder($idValue)
	{	
		
		$encodedId=md5($idValue);
		return $encodedId;
	}
	
//Fuction Common Email Process
	function _commonEmailDetails($actionType)
	{
		global $CFG;
		$emailDetails=array();
		$emailSql="SELECT 
					group_concat(from_email_id) as fromEmail,
					group_concat(to_email_id) as toEmail, 
					group_concat(cc_email_id) as ccEmail,
					group_concat(bcc_email_id) as bccEmail
				FROM 
					".$CFG['db']['tbl']['action_email_mapping']." 
				WHERE 
					action_master_id=".$actionType;
		if(DB::isError($resultEmail=$this->_Oconnection->query($emailSql)))
		{
			fileWrite($emailSql,"SqlError","a+");
			return false;
		}

		if($resultEmail->numRows() > 0)
		{
			$i=0;
			while($row=$resultEmail->fetchRow(DB_FETCHMODE_ASSOC))
			{
				if($row['toEmail']!="" || $row['ccEmail']!="" || $row['bccEmail']!="")
				{
					if($row['fromEmail']!="")
						$emailDetails[$i]['fromEmail']=$row['fromEmail'];
					else
						$emailDetails[$i]['fromEmail']=$CFG['email']['mail'];
					$emailDetails[$i]['toEmail']=$row['toEmail'];
					$emailDetails[$i]['ccEmail']=$row['ccEmail'];
					$emailDetails[$i]['bccEmail']=$row['bccEmail'];
					$i++;
				}
				else
					$emailDetails=array();
			}
		}
		else
		{
			$emailDetails=array();
		}
		return $emailDetails;
	}
	function _getMultiSortReport()
	{
		//get args of the function
		$args = func_get_args();
		$c = count($args);
		if ($c < 2) {
			return false; 
		}
		
		//get the array to sort
		$array = array_splice($args, 0, 1);
		$array = $array[0];
		
		//sort with an anoymous function using args
		usort($array, function($a, $b) use($args) {
			$i = 0;
			$c = count($args);
			$cmp = 0;
			while($cmp == 0 && $i < $c) {
				$cmp = $a[ $args[ $i ] ] < $b[ $args[ $i ] ];
				$i++;
			}
			return $cmp;
		});
		
		return $array;
	}
	function _getPointOfSaleDetails()
	{
		global $CFG;

		$posDetails=array();
                    //orderby will give 'all' value  in first index of array
		$sqlSelectPosDetails="SELECT
						pos_id,
						pos_code,
						pos_city
					FROM
						".$CFG['db']['tbl']['pos_details']."
					WHERE 
						status ='Y'
                                        ORDER BY 
                                                case pos_code 
                                                when 'All' then 0 else 1 end,
                                                pos_city";

		if(DB::isError($resultSelectPosDetails=$this->_Oconnection->query($sqlSelectPosDetails)))
		{
			fileWrite($sqlSelectPosDetails,"SqlError","a+");
			return false;
		}

		if($resultSelectPosDetails->numRows() >0)
		{
			$posDetails[0]['pos_id'] = 0;
			$posDetails[0]['pos_code'] = 'ALL';
			$posDetails[0]['pos_city'] = 'All';
			while($rowSelectPosDetails=$resultSelectPosDetails->fetchRow(DB_FETCHMODE_ASSOC))
			{
				$posDetails[]=$rowSelectPosDetails;
			}
		}

		return $posDetails;

	}
	
	
	/*
	 * Description: function to get the city details
	 */
	function _getCityDetails($_ScolumnValue="",$_ScolumnName="")
	{
		global $CFG;
		$cityDetails=array();
		$condition = "";
		
		// To get the details based on the condition such as country code,pos code is set
		if($_ScolumnValue !="" && $_ScolumnName!="")
		{
			$condition = "AND ".$_ScolumnName." = '".$_ScolumnValue."'" ;
		}
		$sqlSelectCityDetails="SELECT
									city_id,
									city_name,
									pos_code
								FROM
									".$CFG['db']['tbl']['city_master']."
								WHERE 1 "
									.$condition."
								ORDER BY city_name";
								// filewrite($sqlSelectCityDetails,"sqlSelectCityDetails","a+");
		if(DB::isError($resultSelectCityDetails=$this->_Oconnection->query($sqlSelectCityDetails)))
		{
			fileWrite($sqlSelectCityDetails,"SqlError","a+");
			return false;
		}

		if($resultSelectCityDetails->numRows() >0)
		{
			while($rowSelectCityDetails=$resultSelectCityDetails->fetchRow(DB_FETCHMODE_ASSOC))
			{
				$cityDetails[]=$rowSelectCityDetails;
			}
		}
		return $cityDetails;
	}

	//PNR split up function
	function _pnrSplitUpBasedOnPax($getAdult=0,$getChild=0,$getInfant=0,$getFoc=0)
	{
		global $CFG;
		
		$_ApnrSplitArray=array();

		if(($getAdult+$getChild+$getFoc)>$CFG['site']['maxPaxPerPnr'] && $CFG['site']['passengerSplit']=='Y')
		{
			$pnrSplit=ceil(($getAdult+$getChild+$getFoc)/$CFG['site']['maxPaxPerPnr']);
			
			$excessAdult=$getAdult%$pnrSplit;
			$excessChild=$getChild%$pnrSplit;
			$excessInfant=$getInfant%$pnrSplit;
			$excessFoc=$getFoc%$pnrSplit;
			
			 $remainingAdult=$getAdult-$excessAdult;
			 $remainingChild=$getChild-$excessChild;
			 $remainingInfant=$getInfant-$excessInfant;
			 $remainingFoc=$getFoc-$excessFoc;
			 
				$x=1;
				while($x<=$pnrSplit) 
				{
				  $data[]=array("adult"=>($remainingAdult/$pnrSplit),
								"child"=>($remainingChild/$pnrSplit),
								"infant"=>($remainingInfant/$pnrSplit),
								"foc"=>($remainingFoc/$pnrSplit));
				  $x++;
				} 
			
				$i=0;$k=0;
				$n=0;$m=$pnrSplit-1;$j=0;
				while($i<$pnrSplit)
				{
					$totalPax=$data[$i]['adult']+$data[$i]['child']+$data[$i]['foc'];
					if($totalPax<$CFG['site']['maxPaxPerPnr'])
					{	
						while($n<$excessAdult)
						{
							$data[$n]['adult']=$data[$n]['adult']+($excessAdult/$excessAdult);
							$n++;
						}
						while($m>=($pnrSplit-$excessChild))
						{
							$data[$m]['child']=$data[$m]['child']+($excessChild/$excessChild);
							$m--;
						}
						while($k<$excessInfant)
						{
							$data[$k]['infant']=$data[$k]['infant']+($excessInfant/$excessInfant);
							$k++;
						}
						while($j<$excessFoc)
						{
							$data[$j]['foc']=$data[$j]['foc']+($excessFoc/$excessFoc);
							$j++;
						}						
					}
					$totalPax=$data[$i]['adult']+$data[$i]['child']+$data[$i]['infant'];
					
					$_ApnrSplitArray[$i]['adult']=$data[$i]['adult'];
					$_ApnrSplitArray[$i]['child']=$data[$i]['child'];
					$_ApnrSplitArray[$i]['infant']=$data[$i]['infant'];
					$_ApnrSplitArray[$i]['foc']=$data[$i]['foc'];
					$i++;
				}
								
		}
		else
		{
			$_ApnrSplitArray[0]['adult']=$getAdult;
			$_ApnrSplitArray[0]['child']=$getChild;
			$_ApnrSplitArray[0]['infant']=$getInfant;
			$_ApnrSplitArray[0]['foc']=$getFoc;
			
		}
		
		return $_ApnrSplitArray;
		
	}


	function _getPassengerUploading($requestMasterId,$seriesRequestId=0,$pnrValue='',$IrequestApprovedFlightId=0)
	{
		global $CFG;
		fileRequire("dataModels/class.requestMaster.php");
		fileRequire("dataModels/class.userDetails.php");
		
		$_OrequestMaster = new requestMaster;
		$_OrequestMaster->_Oconnection = $this->_Oconnection;
		$_OrequestMaster->_IrequestMasterId = $requestMasterId;
		$_ArequestMaster=$_OrequestMaster->_selectRequestMaster();
		
		$requestTypeValue=strtoupper($_ArequestMaster[0]['request_type']);

		$_OuserDetails = new userDetails;
		$_OuserDetails->_Oconnection = $this->_Oconnection;
		$_OuserDetails->_IuserId = $_ArequestMaster[0]['user_id'];
		$_AuserDetails=$_OuserDetails->_selectUserDetails();

		$resultPnr = array();
		if($seriesRequestId!=0 && $requestTypeValue!="ADHOC")
		{
			$pnrValue = $this->_getSeriesRequestPnr($seriesRequestId);
		}
		#Query is order by departure date because only first departure date has the passenget detail (name) etc.
		$sqlSelectPnrBlockingDetails = "SELECT
								  pbd.request_approved_flight_id,
								  pbd.pnr_blocking_id,
								  pbd.request_master_id,
								  pbd.pnr,
								  rafd.request_id,
							      rafd.departure_date						  
								FROM
									".$CFG['db']['tbl']['request_approved_flight_details']." rafd,
									".$CFG['db']['tbl']['pnr_blocking_details']." pbd
								WHERE
									rafd.request_approved_flight_id=pbd.request_approved_flight_id 
									AND pbd.request_master_id = '".$requestMasterId."'
									AND pbd.pnr IN ('".$pnrValue."') order by rafd.departure_date ASC";
			
			if(DB::isError($result=$this->_Oconnection->query($sqlSelectPnrBlockingDetails)))
			{
				fileWrite($sqlSelectPnrBlockingDetails,"SqlError","a+");
				return false;
			}
			if($result->numRows() > 0) 
			{
				while($rowSelectPnrBlockingDetails=$result->fetchRow(DB_FETCHMODE_ASSOC))
				{
					$resultPnr[] = $rowSelectPnrBlockingDetails;
				}
			}
		
		$i=0;
		$passengerDetails=array();
		foreach($resultPnr as $rpnr)
		{
			$passengerSql="SELECT 
					pd.series_request_id,
					rafd.request_id,
					pd.airlines_request_id,
					pd.passenger_id,
					pd.pnr,
					pd.additional_details,
					".encrypt::_decrypt('pd.title')." AS title,
					".encrypt::_decrypt('pd.first_name')." AS first_name,
					".encrypt::_decrypt('pd.middle_name')." As middle_name,
					".encrypt::_decrypt('pd.last_name')." AS last_name,
					pd.passenger_type,
					".encrypt::_decrypt('pd.passport_no')." AS passport_no,
					".encrypt::_decrypt('pd.dob')." AS dob,
					".encrypt::_decrypt('pd.pax_email_id')." AS pax_email_id,
					".encrypt::_decrypt('pd.pax_mobile_number')." AS pax_mobile_number,
					if(".encrypt::_decrypt('pd.sex')."!='',".encrypt::_decrypt('pd.sex').",'Male') as sex,
                    if(".encrypt::_decrypt('pd.age')."!=0,".encrypt::_decrypt('pd.age').",0) as age,
                    if(".encrypt::_decrypt('pd.id_proof')."!='',".encrypt::_decrypt('pd.id_proof').",'P') as id_proof,
                    if(".encrypt::_decrypt('pd.id_proof_number')."!='',".encrypt::_decrypt('pd.id_proof_number').",'TN0042SR') as id_proof_number,
                    if(".encrypt::_decrypt('pd.dob')."!=NULL || ".encrypt::_decrypt('pd.dob')."!='0000-00-00',DATE_FORMAT(".encrypt::_decrypt('pd.dob').",'".$CFG['date_format']['date']."') ,'0000-00-00') as dob,
                    if(".encrypt::_decrypt('pd.citizenship')."!='NULL',".encrypt::_decrypt('pd.citizenship').",'IN') as citizenship,
                    if(".encrypt::_decrypt('pd.passport_no')."!='NULL',".encrypt::_decrypt('pd.passport_no').",'TNPR080234') as passport_no,
                    if(".encrypt::_decrypt('pd.date_of_expiry')."!=NULL || ".encrypt::_decrypt('pd.date_of_expiry')."!='0000-00-00',DATE_FORMAT(".encrypt::_decrypt('pd.date_of_expiry').",'".$CFG['date_format']['date']."') ,'0000-00-00') as date_of_expiry,
                    if(".encrypt::_decrypt('pd.date_of_issue')."!=NULL || ".encrypt::_decrypt('pd.date_of_issue')."!='0000-00-00',DATE_FORMAT(".encrypt::_decrypt('pd.date_of_issue').",'".$CFG['date_format']['date']."') ,'0000-00-00') as date_of_issue,
                    pd.submitted_date,
                    ('India') as citizenship_name
				FROM 
					".$CFG['db']['tbl']['passenger_details']." pd,
					".$CFG['db']['tbl']['pnr_blocking_details']." pbd,
					".$CFG['db']['tbl']['request_approved_flight_details']." rafd
				WHERE 
					rafd.request_approved_flight_id=pbd.request_approved_flight_id 
					AND	pbd.request_approved_flight_id='".$rpnr['request_approved_flight_id']."' 
					AND pd.pnr = pbd.pnr
					AND	pbd.pnr_blocking_id='".$rpnr['pnr_blocking_id']."'
					AND rafd.series_request_id = pd.series_request_id";

			if($seriesRequestId!=0 && $requestTypeValue!="ADHOC")
				$passengerSql.= " AND pd.series_request_id ='".$seriesRequestId."'";

			if($pnrValue!=0 && $pnrValue!="")
				$passengerSql.= " AND pbd.pnr ='".$pnrValue."'";
			//For not considering dummy rows
			if($CFG['nameUpdate']['insertDummyRowsForSeatSelection']=='Y' || $CFG['site']['doubleBilling']['status'] == 'Y')
				$passengerSql.= " AND pd.additional_details NOT LIKE '%insertedDummyRow\":\"Y%'";

			$passengerSql.=" ORDER BY rafd.departure_date ASC";
			if(DB::isError($paxResult=$this->_Oconnection->query($passengerSql)))
			{
				fileWrite($passengerSql,"SqlError","a+");
				return false;
			}
			$index=0;
			while($paxRow=$paxResult->fetchRow(DB_FETCHMODE_ASSOC))
			{	
				if($paxRow['sex']=='')
				{
					if($paxRow['title']=='Mr' || $paxRow['title']=='Master')
						$paxRow['sex']='Male';
					else
						$paxRow['sex']='Female';
				}
				$resultPnr[$i]['paxDetails'][$index]['request_id']=$paxRow['request_id'];
				$resultPnr[$i]['paxDetails'][$index]['series_request_id']=$paxRow['series_request_id'];
				$resultPnr[$i]['paxDetails'][$index]['airlines_request_id']=$paxRow['airlines_request_id'];
				$resultPnr[$i]['paxDetails'][$index]['passenger_id']=$paxRow['passenger_id'];
				$resultPnr[$i]['paxDetails'][$index]['title']=$paxRow['title'];
				$resultPnr[$i]['paxDetails'][$index]['first_name']=$paxRow['first_name'];
				$resultPnr[$i]['paxDetails'][$index]['middle_name']=$paxRow['middle_name'];
				$resultPnr[$i]['paxDetails'][$index]['last_name']=$paxRow['last_name'];
				$resultPnr[$i]['paxDetails'][$index]['id_proof']=$paxRow['id_proof'];
				$resultPnr[$i]['paxDetails'][$index]['id_proof_number']=$paxRow['id_proof_number'];
				$resultPnr[$i]['paxDetails'][$index]['passport_no']=$paxRow['passport_no'];
				$resultPnr[$i]['paxDetails'][$index]['date_of_expiry']=$paxRow['date_of_expiry'];
				$resultPnr[$i]['paxDetails'][$index]['date_of_issue']=$paxRow['date_of_issue'];
				$resultPnr[$i]['paxDetails'][$index]['submitted_date']=$paxRow['submitted_date'];
				$resultPnr[$i]['paxDetails'][$index]['citizenship']=$paxRow['citizenship'];
				$resultPnr[$i]['paxDetails'][$index]['citizenship_name']=$paxRow['citizenship_name'];
				$resultPnr[$i]['paxDetails'][$index]['passenger_type']=$paxRow['passenger_type'];
				$resultPnr[$i]['paxDetails'][$index]['age']=$paxRow['age'];
				$resultPnr[$i]['paxDetails'][$index]['dob']=$paxRow['dob'];
				$resultPnr[$i]['paxDetails'][$index]['sex']=$paxRow['sex'];
				$resultPnr[$i]['paxDetails'][$index]['address1']=$_AuserDetails[0]['user_address'];
				$resultPnr[$i]['paxDetails'][$index]['address2']="";
				$resultPnr[$i]['paxDetails'][$index]['city']="";
				$resultPnr[$i]['paxDetails'][$index]['state']="";
				$resultPnr[$i]['paxDetails'][$index]['postal']="";
				$resultPnr[$i]['paxDetails'][$index]['country']="";
				$resultPnr[$i]['paxDetails'][$index]['mobileNo']=$paxRow['pax_mobile_number'];
				$resultPnr[$i]['paxDetails'][$index]['emailAddress']=$paxRow['pax_email_id'];
				$resultPnr[$i]['paxDetails'][$index]['additional_details']=$paxRow['additional_details'];
				$index++;
			}
			$i++;
		}
		return $resultPnr;	
	}
	function _groupChangeRequestStatusCheck($requestMasterId,$seriesRequestId=0,$requestApprovedFlightId=0,$pnr='')
	{   
		global $CFG;
		$sql = "SELECT 
				gcrd.groupchange_request_id
				
			FROM
				".$CFG['db']['tbl']['groupchange_request_master']." gcrm,
				".$CFG['db']['tbl']['groupchange_request_details']." gcrd
			WHERE
				gcrm.groupchange_master_id=gcrd.groupchange_master_id
				AND gcrm.request_status='P' AND";
		$condition = "  ";

		if($requestMasterId != 0)
		{
			$sql = $sql.$condition." request_master_id = '".$requestMasterId."' ";
			$condition = " AND ";
		}

		if($seriesRequestId != 0)
		{
			$sql = $sql.$condition." series_request_id = '".$seriesRequestId."' ";
			$condition = " AND ";
		}
		if($requestApprovedFlightId != 0)
		{
			$sql = $sql.$condition." request_approved_flight_id = '".$requestApprovedFlightId."' ";
			$condition = " AND ";
		}
		
		if($pnr != '')
		{
			$sql = $sql.$condition." pnr = '".$pnr."' ";
			$condition = " AND ";
		}

		
		if(DB::isError($result = $this->_Oconnection->query($sql)))
		{
			filewrite($sql,"SqlError","a+");
			return false;
		}

		$this->_IcountLoop=$result->numRows();

		if ($result->numRows() > 0) 
		{	
			/*while($row=$result->fetchRow(DB_FETCHMODE_ASSOC))
			{
				
				$requestStatus[] = $row;
			}*/
			return true;
			
		}
	}
	
	function _getLastTransactionMasterId($_IrequestMasterId, $_IrequestMasterHistoryId = 0, $_SfetchDataFromDb = 'N')
	{
		global $CFG;
		$_ItransactionId = 0;
		$_Svariable1 = $_IrequestMasterId;
		$_AstaticData = $this->_staticData("_getLastTransactionMasterId",$_Svariable1);

		//added for offline pnrmigration facing issue while accept call
		if($_AstaticData==0)
			$_AstaticData=false;

		if($_AstaticData !== false && $_SfetchDataFromDb == 'N')
			$_ItransactionId = $_AstaticData;
		else
		{
			$sqlFareAcceptTxnId="SELECT
								fare_acceptance_transaction_id
							FROM
								".$CFG['db']['tbl']['request_master']."
							WHERE
								request_master_id = ".$_IrequestMasterId." AND
								fare_acceptance_transaction_id != 0
							LIMIT 1";
			

			if(DB::isError($resultFareAcceptTxnId = $this->_Oconnection->query($sqlFareAcceptTxnId)))
			{
				fileWrite($sqlFareAcceptTxnId,"SqlError","a+");
				return false;
			}
		
			if($resultFareAcceptTxnId->numRows() >0)
			{
				$rowFareAcceptTxnId=$resultFareAcceptTxnId->fetchRow(DB_FETCHMODE_ASSOC);
				$_ItransactionId = $rowFareAcceptTxnId['fare_acceptance_transaction_id'];
				$this->_staticData("_getLastTransactionMasterId",$_Svariable1,$_ItransactionId);
			}
			else{
				#If no transaction id present then assign 0 to static data so should not execute query again and again for same request even there is no data
				$this->_staticData("_getLastTransactionMasterId",$_Svariable1,$_ItransactionId);
			}
		}
	
		if($_ItransactionId == 0)
		{
			$_IairlineRequestId = $this->_getAirlineRequestId($_IrequestMasterId);

			$_Svariable2 = $_IairlineRequestId."_".$_IrequestMasterHistoryId;
			$_AstaticData1 = $this->_staticData("_getLastTransactionMasterId1",$_Svariable2);
			
			/*Changed !== to != due to transaction id gets inserted but returns previous record*/
			if($_AstaticData1 != false && $_SfetchDataFromDb == 'N')
				return $_AstaticData1;

			$sql = "SELECT
						transaction_id
					FROM
						".$CFG['db']['tbl']['transaction_master']."
					WHERE
						airlines_request_id = ".$_IairlineRequestId;
			if($_IrequestMasterHistoryId > 0)
				$sql .= " AND request_master_history_id = ".$_IrequestMasterHistoryId;

			$sql .=	" ORDER BY
						transaction_id DESC
					LIMIT 1";

			if(DB::isError($result = $this->_Oconnection->query($sql))) 
			{
				fileWrite($sql,'SqlError','a+');
				return false;
			}
			
			if($result->numRows() >0)
			{
				$row = $result->fetchRow(DB_FETCHMODE_ASSOC);
				$_ItransactionId = $row['transaction_id'];
				$this->_staticData("_getLastTransactionMasterId1",$_Svariable2,$_ItransactionId);
			}
			else{
				#If no transaction id present then assign 0 to static data so should not execute query again and again for same request even there is no data
				$this->_staticData("_getLastTransactionMasterId1",$_Svariable2,$_ItransactionId);
			}
		}
		return $_ItransactionId;
	}
	function _checkParentRequestPayment($_IrequestMasterId)
	{
		global $CFG;
		$_SparentRequestMasterId = "";
		//Parent request payment checking
		$_IparentRequestMasterId = $this->_getParentRequestMasterId($_IrequestMasterId);
		
		//Get Transactio id
		#$_IlastTransactionId = $this->_getLastTransactionMasterId($_IparentRequestMasterId);
	
		if($_IparentRequestMasterId != 0)
		{
			$_IpaidPercentage = $this->_getPaidPercentage($_IparentRequestMasterId);
			
			#$_IpaymentPercentage=$this->_getPaymentDetails($_IlastTransactionId);
			
			
			if($CFG['site']['paymentPercentage']=='Y')
			{
				if(round($_IpaidPercentage) <= 0)
				{
					$_SparentRequestMasterId = $this->_changeGroupRequestFormat($_IparentRequestMasterId);

				}
			}
			else
			{
				if(round($_IpaidPercentage) < 100)
				{
					$_SparentRequestMasterId = $this->_changeGroupRequestFormat($_IparentRequestMasterId);

				}
			}
		}
		return $_SparentRequestMasterId;
	}
	
	function _getParentRequestMasterId($_IrequestMasterId,$_SquoteType = 'N')
	{
		global $CFG;
		$_AstaticData = $this->_staticData("_getParentRequestMasterId",$_IrequestMasterId.'_'.$_SquoteType);
		if($_AstaticData !== false)
			$_IreferenceRequestMasterId = $_AstaticData;
		else
		{
			$sqlRequestMaster = "SELECT
									reference_request_master_id,
									quote_type as quoteType
								FROM
									".$CFG['db']['tbl']['request_master']."
								WHERE
									request_master_id = ".$_IrequestMasterId." AND
									reference_request_master_id != 0";
			if(DB::isError($resultRequestMaster = $this->_Oconnection->query($sqlRequestMaster))) 
			{
				fileWrite($sqlRequestMaster,'SqlError','a+');
				return false;
			}
			$_IreferenceRequestMasterId = 0;
			if($resultRequestMaster->numRows() >0)
			{
				$rowRequestMaster = $resultRequestMaster->fetchRow(DB_FETCHMODE_ASSOC);
				$_IreferenceRequestMasterId = $rowRequestMaster['reference_request_master_id'];
				if($_SquoteType == 'Y')
				{
					$_IreferenceRequestMasterId = array(
						'referenceRequestMasterId' => $rowRequestMaster['reference_request_master_id'],
						'quoteType' => $rowRequestMaster['quoteType']
					);
				}
			}
			$this->_staticData("_getParentRequestMasterId",$_IrequestMasterId.'_'.$_SquoteType,$_IreferenceRequestMasterId);
		}
		return $_IreferenceRequestMasterId;
	}
	/* Author: Venkey (2018-Jun-08 13:15:22)
	 * Input: $finalInput=array( "inputArray"=>$inputArray, "fieldName"=>"index",
	 *	 "fieldType"=>"DATE/NUMBER/STRING", "orderType"=>"ASC/DESC" );
	 * Description: To multi sort the array based on given data type.
	 */
	function _dynamicSortFunction()
	{
		$functionArgs = func_get_args();
		
		if(!isset($functionArgs[0]))
			return false;
		
		$functionArgs = $functionArgs[0];
		
		if(!isset($functionArgs['inputArray']) || !isset($functionArgs['fieldName']))
			return false;
		
		//To set the default value as "Number", when type not exists
		if(!isset($functionArgs['fieldType']))
			$functionArgs['fieldType']="NUMBER";
		
		//To set the default value as "ASC" (Ascending order), when type not exists
		if(!isset($functionArgs['orderType']))
			$functionArgs['orderType']="ASC";
		
		$finalInput=array(
			"inputArray" => $functionArgs['inputArray'],
			"firstFieldName" => $functionArgs['fieldName'],
			"firstFieldOrder" => $functionArgs['orderType'],
			"firstFieldType" => $functionArgs['fieldType']
		);
		
		return  $this->_multipleSortFunction($finalInput);
	}
	
	function _getResizeSummaryDetails($requestMasterId)
	{
		global $CFG;
		$resultArray=array();
		$getResultArray=array();
		$parentRequestMasterId=0;
		$resultRequestDetailsAfterAccept = array();
		$resultResizeBeforeAccept = array();

		//Get parent request master id
		$getParentRequestId = $this->_getParentUpsizeRequestIds($requestMasterId);
		
		$parentRequestMasterId = $getParentRequestId['parentRequestMasterId'];

		//Get resize (befor accept TA) request details
		$resultResizeBeforeAccept = $this->_getGroupResizeBeforeAccept($requestMasterId);

		//Get parent and resize (after accept TA) request details
		if(!empty($getParentRequestId['childRequestMasterId']))
			$resultRequestDetailsAfterAccept = $this->_getGroupResizeAfterAccept($requestMasterId);

		if(!empty($resultResizeBeforeAccept))
		{
			$getResultArray = array_merge($resultResizeBeforeAccept, $resultRequestDetailsAfterAccept);
			//$getResultArray = $this->_getMultiSort($getResultArray,"departure_date","request_master_id");
		}
		else
		{
			$getResultArray = $resultRequestDetailsAfterAccept;
		}
		$resultArray = $getResultArray;
		return $resultArray;
	}
	function _unLinkImages($filePath,$fileName)
	{
	
		$imagesNameUid = glob($filePath.$fileName. "*.png");
		
		if($imagesNameUid)
		{
			foreach($imagesNameUid as $imageUid)
			{
				unlink($imageUid);
			}
		}
		
		$imagesName = glob($filePath."*.png");
		
		foreach($imagesName as $image)
		{
			$strImage=$image;
		
			$substrImage= substr($strImage, strrpos($strImage, "_")+1,20);
			$date=explode("-",$substrImage);
			
			$imageDate= date("Y-m-d H:i:s", strtotime("$date[2]-$date[1]-$date[0] $date[3]:$date[4]:$date[5]"));
			
			$time=strtotime("-1 hour");
			$currentDate=date("Y-m-d H:i:s",$time) ; 
			if($imageDate<$currentDate)
			{
				unlink($image);
			}
		  
		}
	}
	
	function _getParentUpsizeRequestIds($requestMasterId)
	{
	   global $CFG;
	   $requestMasterIds = ''; 
	   //Get the parent request master id (upsize not possible for upsize request so there is no multi level)
		$getParentIdSql = "SELECT 
						  (IF(rm.reference_request_master_id!=0,rm.reference_request_master_id,rm.request_master_id )) as parentRequestMasterid
						  FROM
						  ".$CFG['db']['tbl']['request_master']." rm
						  WHERE
						  rm.request_master_id = ".$requestMasterId; 
		if(DB::isError($resultGetParentId = $this->_Oconnection->query($getParentIdSql)))
		{
			fileWrite($getParentIdSql,"SqlError","a+");
			return false;
		}
		if ($resultGetParentId->numRows() > 0)
		{			
			$rowGetParentId = $resultGetParentId->fetchRow(DB_FETCHMODE_ASSOC);	  
			$parentRequestMasterId = $rowGetParentId['parentRequestMasterid'];
		}
		//Get all upsizse request master id (upsize has a new request)
		$getResizeRequestIdsSql ="SELECT
							group_concat(request_master_id) as resizeRequestIds
							FROM
							".$CFG['db']['tbl']['request_master']."
							WHERE
							reference_request_master_id = ".$parentRequestMasterId;
		if(DB::isError($resultGetResizeRequestIds = $this->_Oconnection->query($getResizeRequestIdsSql)))
		{
			fileWrite($getResizeRequestIdsSql,"SqlError","a+");
			return false;
		}
		if ($resultGetResizeRequestIds->numRows() > 0)
		{
			$rowGetResizeRequestIds = $resultGetResizeRequestIds->fetchRow(DB_FETCHMODE_ASSOC); 
			$resizeRequestIds = implode(",",$rowGetResizeRequestIds);
		}
		if($resizeRequestIds!='')
		{
			$requestMasterIds = $parentRequestMasterId.",".$resizeRequestIds;
		}
		else
		{
			$requestMasterIds = $parentRequestMasterId;
		}
		return array("parentRequestMasterId"=>$parentRequestMasterId,"requestMasterIds"=>$requestMasterIds,"childRequestMasterId"=>$resizeRequestIds);
	}
	function _getGroupResizeAfterAccept($requestMasterId)
	{
		global $CFG;
		$resultArray = array();
		$resizeRequestIds = '';
		$triptype = '';
		$requestType ='';
		$departureDate = '';
		//Get departure date for series 
		$sqlSelectDepartureDate ="SELECT
								 rm.request_master_id,
								 rd.request_id,
								 srd.series_request_id,
								 srd.departure_date
								 FROM
							".$CFG['db']['tbl']['request_master']." rm,
							".$CFG['db']['tbl']['request_details']." rd,
							".$CFG['db']['tbl']['series_request_details']." srd
					  WHERE
							rm.request_master_id=rd.request_master_id
							AND rd.request_id=srd.request_id
							AND rm.request_master_id =".$requestMasterId;

		if(DB::isError($resultDepartureDate = $this->_Oconnection->query($sqlSelectDepartureDate)))
		{
			fileWrite($sqlSelectDepartureDate,"SqlError","a+");
			return false;
		}
		if ($resultDepartureDate->numRows() > 0)
		{
			$rowDepartureDate = $resultDepartureDate->fetchRow(DB_FETCHMODE_ASSOC);
			$departureDate = $rowDepartureDate['departure_date'];
		}
		
		$getParentUpsizeRequestIds = $this->_getParentUpsizeRequestIds($requestMasterId);
		$requestMasterIds = $getParentUpsizeRequestIds['requestMasterIds'];
		$parentRequestMasterId = $getParentUpsizeRequestIds['parentRequestMasterId'];
		
		$sqlSelectRequestDetails="SELECT
							rm.request_master_id,
							rm.request_type,
							rm.trip_type,
							rm.requested_date,
							rm.requested_date as requested_date_disp,
							arm.airlines_request_id,
							arm.current_status,
							rm.user_currency,
							rd.request_id,
							rd.origin_airport_code,
							rd.dest_airport_code,
							srd.series_request_id,
							srd.departure_date,
							srd.number_of_passenger,
							srd.number_of_adult,
							srd.number_of_child,
							srd.number_of_infant,
							srd.foc_pax,
							srd.baggage_allowance,
							srd.meals_code,
							srd.cabin,
							srd.expected_fare,
							srd.start_time,
							srd.end_time,
							rm.reference_request_master_id,
							rm.quote_type
					  FROM
							".$CFG['db']['tbl']['request_master']." rm,
							".$CFG['db']['tbl']['airlines_request_mapping']." arm,
							".$CFG['db']['tbl']['request_details']." rd,
							".$CFG['db']['tbl']['series_request_details']." srd
					  WHERE
							rm.request_master_id=rd.request_master_id
							AND rm.request_master_id=arm.request_master_id
							AND rd.request_id=srd.request_id
							AND (rm.request_master_id IN(".$getParentUpsizeRequestIds['childRequestMasterId'].")
							OR (rm.request_master_id = ".$parentRequestMasterId." AND srd.departure_date = '".$departureDate."'))
							AND srd.mapped_series_request_id =0 order by rm.request_master_id,srd.departure_date ASC";

		if(DB::isError($resultRequestDetails = $this->_Oconnection->query($sqlSelectRequestDetails)))
		{
			fileWrite($sqlSelectRequestDetails,"SqlError","a+");
			return false;
		}
		if ($resultRequestDetails->numRows() > 0)
		{
			while($rowRequestDetails = $resultRequestDetails->fetchRow(DB_FETCHMODE_ASSOC))
			{
				$triptype = $rowRequestDetails['trip_type'];
				$requestType = $rowRequestDetails['request_type'];
				$requestDetailsAfterAccept[] =  $rowRequestDetails;
			}
		}
		$j=0;
		for($i=0;$i<count($requestDetailsAfterAccept);$i++)
		{
			if($requestDetailsAfterAccept[$i]['request_master_id']!=$requestMasterId)
			{
				$resultRequestDetailsAfterAccept[$j]=$requestDetailsAfterAccept[$i];
				$resultRequestDetailsAfterAccept[$j]['request_master_group_id']=$this->_changeGroupRequestFormat($requestDetailsAfterAccept[$i]['request_master_id']);
				$resultRequestDetailsAfterAccept[$j]['total_amount']= $requestDetailsAfterAccept[$i]['user_currency'].' '.$this->_getRequestTotalAmount($requestDetailsAfterAccept[$i]['request_master_id']);
				if($parentRequestMasterId==$requestDetailsAfterAccept[$i]['request_master_id'])
					$resultRequestDetailsAfterAccept[$j]['resize_type']=$this->_Osmarty->getConfigVars("COMMON_PARENT");
				else
				{
					if($resultRequestDetailsAfterAccept[$j]['quote_type']=="U")
						$resultRequestDetailsAfterAccept[$j]['resize_type']="Upsize";
					elseif($resultRequestDetailsAfterAccept[$j]['quote_type']=="D")
						$resultRequestDetailsAfterAccept[$j]['resize_type']="Divide";
					elseif($resultRequestDetailsAfterAccept[$j]['quote_type']=="C")
						$resultRequestDetailsAfterAccept[$j]['resize_type']="Re-submit";
					elseif($resultRequestDetailsAfterAccept[$j]['quote_type']=="R")
						$resultRequestDetailsAfterAccept[$j]['resize_type']="Re-quote";
					elseif($resultRequestDetailsAfterAccept[$j]['quote_type']=="N")
						$resultRequestDetailsAfterAccept[$j]['resize_type']="Negotiate";
					elseif($resultRequestDetailsAfterAccept[$j]['quote_type']=="AD")
						$resultRequestDetailsAfterAccept[$j]['resize_type']="Add-on";
				}
				$resultRequestDetailsAfterAccept[$j]['sector_details'] = $requestDetailsAfterAccept[$i]['origin_airport_code']."-".$requestDetailsAfterAccept[$i]['dest_airport_code'];
				$_Sgetfoc = 0;
				if(!in_array('FOC',$CFG['settings']['hidePaxDetails']))
				{


					$_AfocPax = json_decode($requestDetailsAfterAccept[$i]['foc_pax'],1);
					if(is_array($_AfocPax))				
						$requestDetailsAfterAccept[$i]['number_of_foc'] = ($_AfocPax['edited']>0)?$_AfocPax['edited']:$_AfocPax['requested'];		
					else
						$requestDetailsAfterAccept[$i]['number_of_foc'] = $_AfocPax;
						if($requestDetailsAfterAccept[$i]['number_of_foc']>0)
							$_Sgetfoc =$requestDetailsAfterAccept[$i]['number_of_foc'];
				}
				$_SpassengerSummary=$requestDetailsAfterAccept[$i]['number_of_passenger']+$_Sgetfoc."(".$requestDetailsAfterAccept[$i]['number_of_adult']."A";
				if(!in_array('CHD',$CFG['settings']['hidePaxDetails']))
				{
					if($requestDetailsAfterAccept[$i]['number_of_child']>0 && $requestDetailsAfterAccept[$i]['number_of_adult']>0)
						$_SpassengerSummary.="+";
					if($requestDetailsAfterAccept[$i]['number_of_child']>0)
						$_SpassengerSummary.=$requestDetailsAfterAccept[$i]['number_of_child']."C";
				}
				if(!in_array('INFT',$CFG['settings']['hidePaxDetails']))
				{
					if($requestDetailsAfterAccept[$i]['number_of_child']>0 && $requestDetailsAfterAccept[$i]['number_of_infant']>0 || $requestDetailsAfterAccept[$i]['number_of_adult']>0 && $requestDetailsAfterAccept[$i]['number_of_infant']>0)
						$_SpassengerSummary.="+";
					if($requestDetailsAfterAccept[$i]['number_of_infant']>0)
						$_SpassengerSummary.=$requestDetailsAfterAccept[$i]['number_of_infant']."I";
				}
				if(!in_array('FOC',$CFG['settings']['hidePaxDetails']))
				{


					$_AfocPax = json_decode($requestDetailsAfterAccept[$i]['foc_pax'],1);
					if(is_array($_AfocPax))				
						$requestDetailsAfterAccept[$i]['number_of_foc'] = ($_AfocPax['edited']>0)?$_AfocPax['edited']:$_AfocPax['requested'];		
					else
						$requestDetailsAfterAccept[$i]['number_of_foc'] = $_AfocPax;
						if($requestDetailsAfterAccept[$i]['number_of_foc']>0)
							$_SpassengerSummary.="+".$requestDetailsAfterAccept[$i]['number_of_foc'].$this->_Osmarty->getConfigVars("COMMON_FOC");
				}
				$_SpassengerSummary.=")";
				$resultRequestDetailsAfterAccept[$j]['passenger_summary'] = $_SpassengerSummary;
				$resultRequestDetailsAfterAccept[$j]['pnr']=$this->_getMultiplePnr($requestDetailsAfterAccept[$i]['request_master_id']);
				$resultRequestDetailsAfterAccept[$j]['current_display_status']=$this->_getCurrentStatusName($requestDetailsAfterAccept[$i]['current_status']);
				$j++;
			}
			
		}
		
		$resultArray = $resultRequestDetailsAfterAccept;
		if($triptype==2 && $requestType == 'adhoc')
		{
			for($i=0;$i<count($resultArray);$i++)
			{
				if($i==0)
				{
					$resultArrayDetails[0] = $resultArray[$i];
					$resultArrayDetails[0]['sector_details'] =$resultArray[$i]['origin_airport_code'].'-'.$resultArray[$i]['dest_airport_code'].'-'.$resultArray[$i]['origin_airport_code'];
				}
				else
				{
					if(in_array($resultArray[$i]['resize_type'],array('Upsize','Divide','Re-submit','Re-quote','Negotiate')))
					{
						$resultArrayDetails[$i] = $resultArray[$i];
						$resultArrayDetails[$i]['sector_details'] =$resultArray[$i]['origin_airport_code'].'-'.$resultArray[$i]['dest_airport_code'].'-'.$resultArray[$i]['origin_airport_code'];
					}
				}
			}
			
		}
		else
			$resultArrayDetails = $resultArray;
		
		return $resultArrayDetails;
	}
	
	function _getGroupResizeBeforeAccept($requestMasterId)
	{
		global $CFG;
		$resultArray = array();
		$resizeRequestIds = '';
		$tripType = '';
		$requestType ='';
		$groupChangeResizeDetails = array();
		$resizeRequestSeriesRequestIds = array();
		$getParentUpsizeRequestIds = $this->_getParentUpsizeRequestIds($requestMasterId);
		# Displaying the resize summary details in process page	
		$_AtotReqMasterId=explode(',',$getParentUpsizeRequestIds['requestMasterIds']);
		$_AchildReqMasterId=explode(',',$getParentUpsizeRequestIds['childRequestMasterId']);
		foreach($_AtotReqMasterId as $key=>$val)
		{
			if(in_array($val,$_AchildReqMasterId))
				unset($_AtotReqMasterId[$key]);
		}
		$getParentUpsizeRequestIds['requestMasterIds']=implode(',',$_AtotReqMasterId);		
		$requestMasterIds = $getParentUpsizeRequestIds['requestMasterIds'];

		//get resize information from the group change request
		$parentRequestMasterId = $getParentUpsizeRequestIds['parentRequestMasterId'];
		
		$sqlGetResizeRequest = "SELECT
									gcrm.request_master_id,
									gcrd.request_id,
									gcrd.series_request_id,
									gcrm.resize_type_id
								  FROM
									".$CFG['db']['tbl']['groupchange_request_master']." gcrm,
									".$CFG['db']['tbl']['groupchange_request_details']." gcrd
								 WHERE
									gcrm.groupchange_master_id = gcrd.groupchange_master_id
									AND gcrm.request_master_id =".$parentRequestMasterId;

		if(DB::isError($resultGetResizeRequest = $this->_Oconnection->query($sqlGetResizeRequest)))
		{
			fileWrite($sqlGetResizeRequest,"SqlError","a+");
			return false;
		}
		
		if ($resultGetResizeRequest->numRows() > 0)
		{
			while($rowGetResizeRequest = $resultGetResizeRequest->fetchRow(DB_FETCHMODE_ASSOC))
			{
				$resizeRequestDetails[] =  $rowGetResizeRequest;
				$resizeRequestSeriesRequestIds[] = $rowGetResizeRequest['series_request_id'];
			}
		}

		$sqlSelectRequestDetails="SELECT
							rm.request_master_id,
							rm.request_type,
							rm.trip_type,
							rm.requested_date,
							rm.requested_date as requested_date_disp,
							arm.airlines_request_id,
							arm.current_status,
							rm.user_currency,
							rd.request_id,
							rd.origin_airport_code,
							rd.dest_airport_code,
							srd.series_request_id,
							srd.departure_date,
							srd.number_of_passenger,
							srd.number_of_adult,
							srd.number_of_child,
							srd.number_of_infant,
							srd.foc_pax,
							srd.baggage_allowance,
							srd.meals_code,
							srd.cabin,
							srd.expected_fare,
							srd.start_time,
							srd.end_time,
							rm.reference_request_master_id,
							grm.groupchange_master_id,
							grm.request_status,
							grm.pnr,
							grd.current_no_of_adult as current_no_of_adult,
							grd.current_no_of_child as current_no_of_child,
							grd.current_no_of_infant as current_no_of_infant,
							grd.current_no_of_foc as current_no_of_foc,
							grd.requested_no_of_adult as requested_no_of_adult,
							grd.requested_no_of_child as requested_no_of_child,
							grd.requested_no_of_infant as requested_no_of_infant,
							grd.requested_no_of_foc as requested_no_of_foc,
							grd.approved_no_of_adult as approved_no_of_adult,
							grd.approved_no_of_child as approved_no_of_child,
							grd.approved_no_of_infant as approved_no_of_infant,
							grd.approved_no_of_foc as approved_no_of_foc,
							grm.resize_type_id
					  FROM
							".$CFG['db']['tbl']['request_master']." rm,
							".$CFG['db']['tbl']['groupchange_request_master']." grm,
							".$CFG['db']['tbl']['groupchange_request_details']." grd,
							".$CFG['db']['tbl']['airlines_request_mapping']." arm,
							".$CFG['db']['tbl']['request_details']." rd,
							".$CFG['db']['tbl']['series_request_details']." srd
					  WHERE
							rm.request_master_id=rd.request_master_id
							AND rd.request_master_id = grm.request_master_id
							AND grm.groupchange_master_id = grd.groupchange_master_id
							AND grm.request_master_id=arm.request_master_id
							AND rd.request_id=srd.request_id
							AND srd.request_id=grd.request_id
							AND grm.resize_type_id not in (3,4,5) 
							AND srd.series_request_id=grd.series_request_id
							AND rm.request_master_id IN(".$requestMasterIds.") group by grm.groupchange_master_id order by srd.departure_date, rm.request_master_id";
		
		if(DB::isError($resultRequestDetails = $this->_Oconnection->query($sqlSelectRequestDetails)))
		{
			fileWrite($sqlSelectRequestDetails,"SqlError","a+");
			return false;
		}
		
		if ($resultRequestDetails->numRows() > 0)
		{
			$groupChangeMasterId=0;
			while($rowRequestDetails = $resultRequestDetails->fetchRow(DB_FETCHMODE_ASSOC))
			{
				if($groupChangeMasterId!=$rowRequestDetails['groupchange_master_id'] || $rowRequestDetails['request_type']=="flexible")
				{
					$groupChangeMasterId=$rowRequestDetails['groupchange_master_id'];
					$tripType = $rowRequestDetails['trip_type'];
					$requestType = $rowRequestDetails['request_type'];
					$requestDetailsBeforeAccept[] =  $rowRequestDetails;
				}
			}
			
			for($i=0;$i<count($requestDetailsBeforeAccept);$i++)
			{
				if($requestDetailsBeforeAccept[$i]['request_master_id']!=$requestMasterId)
				{
					$resultRequestDetailsBeforeAccept[$i]=$requestDetailsBeforeAccept[$i];
					$resultRequestDetailsBeforeAccept[$i]['request_master_group_id']=$this->_changeGroupRequestFormat($requestDetailsBeforeAccept[$i]['request_master_id']);
					$resultRequestDetailsBeforeAccept[$i]['sector_details'] = $requestDetailsBeforeAccept[$i]['origin_airport_code']."-".$requestDetailsBeforeAccept[$i]['dest_airport_code'];
					
					If($requestDetailsBeforeAccept[$i]['resize_type_id']==1)
					{
						
						$resultRequestDetailsBeforeAccept[$i]['resize_type']="Downsize";	
						if($requestDetailsBeforeAccept[$i]['request_status']=='P' OR $requestDetailsBeforeAccept[$i]['request_status']=='R')
						{
							$resultRequestDetailsBeforeAccept[$i]['current_display_status']=$requestDetailsBeforeAccept[$i]['request_status']=='P'?'Process':'Reject';
							$resultRequestDetailsBeforeAccept[$i]['number_of_adult'] = $requestDetailsBeforeAccept[$i]['current_no_of_adult'] - $requestDetailsBeforeAccept[$i]['requested_no_of_adult'];
							$resultRequestDetailsBeforeAccept[$i]['number_of_child'] = $requestDetailsBeforeAccept[$i]['current_no_of_child'] - $requestDetailsBeforeAccept[$i]['requested_no_of_child'];
							$resultRequestDetailsBeforeAccept[$i]['number_of_infant'] = $requestDetailsBeforeAccept[$i]['current_no_of_infant'] - $requestDetailsBeforeAccept[$i]['requested_no_of_infant'];
							$resultRequestDetailsBeforeAccept[$i]['number_of_foc'] = $requestDetailsBeforeAccept[$i]['current_no_of_foc'] - $requestDetailsBeforeAccept[$i]['requested_no_of_foc'];
						}
						if($requestDetailsBeforeAccept[$i]['request_status']=='A')
						{
							$resultRequestDetailsBeforeAccept[$i]['current_display_status']='Approved';
							$resultRequestDetailsBeforeAccept[$i]['number_of_adult'] = $requestDetailsBeforeAccept[$i]['current_no_of_adult'] - $requestDetailsBeforeAccept[$i]['approved_no_of_adult'];
							$resultRequestDetailsBeforeAccept[$i]['number_of_child'] = $requestDetailsBeforeAccept[$i]['current_no_of_child'] - $requestDetailsBeforeAccept[$i]['approved_no_of_child'];
							$resultRequestDetailsBeforeAccept[$i]['number_of_infant'] = $requestDetailsBeforeAccept[$i]['current_no_of_infant'] - $requestDetailsBeforeAccept[$i]['approved_no_of_infant'];
							$resultRequestDetailsBeforeAccept[$i]['number_of_foc'] = $requestDetailsBeforeAccept[$i]['current_no_of_foc'] - $requestDetailsBeforeAccept[$i]['approved_no_of_foc'];
						}
					}
					else
					{
						if($requestDetailsBeforeAccept[$i]['resize_type_id']==2)
							$resultRequestDetailsBeforeAccept[$i]['resize_type']="Upsize";
						else if($requestDetailsBeforeAccept[$i]['resize_type_id']==8)
							$resultRequestDetailsBeforeAccept[$i]['resize_type']="Add Infant";		
						else if($requestDetailsBeforeAccept[$i]['resize_type_id']==3)
							$resultRequestDetailsBeforeAccept[$i]['resize_type']="Divide";
						else if($requestDetailsBeforeAccept[$i]['resize_type_id']==4)
							$resultRequestDetailsBeforeAccept[$i]['resize_type']="Request Re-submitted";
						else if($requestDetailsBeforeAccept[$i]['resize_type_id']==6)
							$resultRequestDetailsBeforeAccept[$i]['resize_type']="Add-on";
						else if($requestDetailsBeforeAccept[$i]['resize_type_id']==8)
							$resultRequestDetailsBeforeAccept[$i]['resize_type']="Partial Re-submit";
						if($requestDetailsBeforeAccept[$i]['request_status']=='P' OR $requestDetailsBeforeAccept[$i]['request_status']=='R')
						{
							$resultRequestDetailsBeforeAccept[$i]['current_display_status']=$requestDetailsBeforeAccept[$i]['request_status']=='P'?'Process':'Reject';
							$resultRequestDetailsBeforeAccept[$i]['number_of_adult'] = $requestDetailsBeforeAccept[$i]['requested_no_of_adult'] - $requestDetailsBeforeAccept[$i]['current_no_of_adult'];
							$resultRequestDetailsBeforeAccept[$i]['number_of_child'] = $requestDetailsBeforeAccept[$i]['requested_no_of_child'] - $requestDetailsBeforeAccept[$i]['current_no_of_child'];
							$resultRequestDetailsBeforeAccept[$i]['number_of_infant'] = $requestDetailsBeforeAccept[$i]['requested_no_of_infant'] - $requestDetailsBeforeAccept[$i]['current_no_of_infant'];
							$resultRequestDetailsBeforeAccept[$i]['number_of_foc'] = $requestDetailsBeforeAccept[$i]['requested_no_of_foc'] - $requestDetailsBeforeAccept[$i]['current_no_of_foc'];
						}
						if($requestDetailsBeforeAccept[$i]['request_status']=='A')
						{
							if($resultRequestDetailsBeforeAccept[$i]['approved_no_of_adult']!=0)
							{
								$resultRequestDetailsBeforeAccept[$i]['current_display_status']='Approved';
								$resultRequestDetailsBeforeAccept[$i]['number_of_adult'] = $requestDetailsBeforeAccept[$i]['approved_no_of_adult'];
								$resultRequestDetailsBeforeAccept[$i]['number_of_child'] = $requestDetailsBeforeAccept[$i]['approved_no_of_child'];
								$resultRequestDetailsBeforeAccept[$i]['number_of_infant'] = $requestDetailsBeforeAccept[$i]['approved_no_of_infant'];
								$resultRequestDetailsBeforeAccept[$i]['number_of_foc'] = $requestDetailsBeforeAccept[$i]['approved_no_of_foc'];
							}
							else
							{
								$resultRequestDetailsBeforeAccept[$i]['current_display_status']='Approved';
								$resultRequestDetailsBeforeAccept[$i]['number_of_adult'] = $requestDetailsBeforeAccept[$i]['requested_no_of_adult'];
								$resultRequestDetailsBeforeAccept[$i]['number_of_child'] = $requestDetailsBeforeAccept[$i]['requested_no_of_child'];
								$resultRequestDetailsBeforeAccept[$i]['number_of_infant'] = $requestDetailsBeforeAccept[$i]['requested_no_of_infant'];
								$resultRequestDetailsBeforeAccept[$i]['number_of_foc'] = $requestDetailsBeforeAccept[$i]['requested_no_of_foc'];
							}
						}
					}
					$resultRequestDetailsBeforeAccept[$i]['number_of_passenger'] = $resultRequestDetailsBeforeAccept[$i]['number_of_adult']+$resultRequestDetailsBeforeAccept[$i]['number_of_child']+$resultRequestDetailsBeforeAccept[$i]['number_of_infant'];	
					#To display passenger_summary in resize request summery list
					$_SpassengerSummary=$resultRequestDetailsBeforeAccept[$i]['number_of_passenger']."(";
					if($resultRequestDetailsBeforeAccept[$i]['number_of_adult']>0)
						$_SpassengerSummary.= $resultRequestDetailsBeforeAccept[$i]['number_of_adult']."A";
					if(!in_array('CHD',$CFG['settings']['hidePaxDetails']))
					{
						if($resultRequestDetailsBeforeAccept[$i]['number_of_child']>0 && $resultRequestDetailsBeforeAccept[$i]['number_of_adult'] >0)
							$_SpassengerSummary.= "+";
						if($resultRequestDetailsBeforeAccept[$i]['number_of_child']>0)
							$_SpassengerSummary.= $resultRequestDetailsBeforeAccept[$i]['number_of_child']."C";
					}
					if(!in_array('INFT',$CFG['settings']['hidePaxDetails']))
					{
						if($resultRequestDetailsBeforeAccept[$i]['number_of_child']>0 && $resultRequestDetailsBeforeAccept[$i]['number_of_infant']>0 || $resultRequestDetailsBeforeAccept[$i]['number_of_adult']>0 && $resultRequestDetailsBeforeAccept[$i]['number_of_infant']>0)
							$_SpassengerSummary.= "+";					
						if($resultRequestDetailsBeforeAccept[$i]['number_of_infant']>0)
							$_SpassengerSummary.=$resultRequestDetailsBeforeAccept[$i]['number_of_infant']."I";
					}
					if(!in_array('FOC',$CFG['settings']['hidePaxDetails']))
			      	{
					if($resultRequestDetailsBeforeAccept[$i]['number_of_foc']>0)
						$_SpassengerSummary.= "+".$resultRequestDetailsBeforeAccept[$i]['number_of_foc']."TC";
				    }
					$_SpassengerSummary.=")";
					$resultRequestDetailsBeforeAccept[$i]['passenger_summary'] = $_SpassengerSummary;
				}
			}
			$resultArray = $resultRequestDetailsBeforeAccept;
		}
		if($tripType==2 && $requestType == 'adhoc')
		{
			for($i=0;$i<count($resultArray);$i++)
			{
				if($i==0)
				{
					$resultArrayDetails[0] = $resultArray[$i];
					//if($resultArray[$i]['resize_type']=='Upsize')
						//$resultArrayDetails[0]['sector_details'] =$resultArray[$i]['origin_airport_code'].'-'.$resultArray[$i]['dest_airport_code'].'-'.$resultArray[$i]['origin_airport_code'];
				}
				else
				{
					$resultArrayDetails[$i] = $resultArray[$i];
					if($resultArray[$i]['resize_type']=='Upsize')
					{
						//$resultArrayDetails[$i]['sector_details'] =$resultArray[$i]['origin_airport_code'].'-'.$resultArray[$i]['dest_airport_code'].'-'.$resultArray[$i]['origin_airport_code'];
						if($resultArrayDetails[0]['number_of_passenger']!=$resultArray[$i]['number_of_passenger'] || $resultArrayDetails[0]['number_of_adult']!=$resultArray[$i]['number_of_adult'] || $resultArrayDetails[0]['number_of_child']!=$resultArray[$i]['number_of_child'] || $resultArrayDetails[0]['number_of_infant']!=$resultArray[$i]['number_of_infant'])
						{
							$_SpassengerSummary=$resultArrayDetails[$i]['number_of_passenger']."(".$resultArrayDetails[$i]['number_of_adult']."A";
							if(!in_array('CHD',$CFG['settings']['hidePaxDetails']))
							{
								if($resultArrayDetails[$i]['number_of_child']>0 && $resultArrayDetails[$i]['number_of_adult']>0)
									$_SpassengerSummary.="+";
								if($resultArrayDetails[$i]['number_of_child']>0)
									$_SpassengerSummary.=$resultArrayDetails[$i]['number_of_child']."C";
							}
							if(!in_array('INFT',$CFG['settings']['hidePaxDetails']))
							{
								if($resultArrayDetails[$i]['number_of_infant']>0 && $resultArrayDetails[$i]['number_of_adult']>0  || $resultArrayDetails[$i]['number_of_infant']>0 && $resultArrayDetails[$i]['number_of_child']>0)
									$_SpassengerSummary.="+";
								if($resultArrayDetails[$i]['number_of_infant']>0)
									$_SpassengerSummary.=$resultArrayDetails[$i]['number_of_infant']."I";
							}
							if(!in_array('FOC',$CFG['settings']['hidePaxDetails']))
							{
								if($resultArrayDetails[$i]['number_of_foc']>0)
									$_SpassengerSummary.="+".$resultArrayDetails[$i]['number_of_foc']."I";
							}							
							$_SpassengerSummary.=")";
							
							$resultArrayDetails[$i]['passenger_summary'] = $_SpassengerSummary;
						}
					}
				}
			}
			
		}
		elseif($parentRequestMasterId!=$requestMasterId)
		{
			//Get departure date for series 
			$sqlSelectDepartureDate ="SELECT
									 rm.request_master_id,
									 rd.request_id,
									 srd.series_request_id,
									 srd.departure_date
									 FROM
								".$CFG['db']['tbl']['request_master']." rm,
								".$CFG['db']['tbl']['request_details']." rd,
								".$CFG['db']['tbl']['series_request_details']." srd
						  WHERE
								rm.request_master_id=rd.request_master_id
								AND rd.request_id=srd.request_id
								AND rm.request_master_id =".$requestMasterId;
			if(DB::isError($resultDepartureDate = $this->_Oconnection->query($sqlSelectDepartureDate)))
			{
				fileWrite($sqlSelectDepartureDate,"SqlError","a+");
				return false;
			}
			if ($resultDepartureDate->numRows() > 0)
			{
				$rowDepartureDate = $resultDepartureDate->fetchRow(DB_FETCHMODE_ASSOC);
				$departureDate = $rowDepartureDate['departure_date'];
			}
			for($i=0;$i<count($resultArray);$i++)
			{
				if($departureDate == $resultArray[$i]['departure_date'])
					$resultArrayDetails[$i] = $resultArray[$i];
			}
		}
		else
			$resultArrayDetails = $resultArray;
			
		return $resultArrayDetails;
	}
		
	function _getRequestTypeMaster($_IrequestTypeId = 0)
	{
		global $CFG;
		
		$_AfinalResult = array();
		$condition = "";
		if($_IrequestTypeId > 0)
			$condition = " AND request_type_id = ".$_IrequestTypeId;
		
		$sql = "SELECT
					request_type_id,
					request_type_name,
					request_type_status
				FROM
					".$CFG['db']['tbl']['request_type_master']."
				WHERE
					request_type_status = 'Y' ".$condition;
		$_Aresult = $this->_executeQuery($sql);
		
		if(!empty($_Aresult))
		{
			if($_IrequestTypeId == 0)
			{

				$_AfinalResult[0] = array(
											"request_type_id" => 0,
											"request_type_value" => "",
											"request_type_name" => "All",
											"request_type_status" => "Y"
										);
			}
			
			foreach($_Aresult AS $_IresultIndex=>$_AresultValue)
			{
				$_AtempResult = $_AresultValue;
				$_AtempResult["request_type_value"] = strtolower($_AresultValue['request_type_name']);
				$_AfinalResult[($_IresultIndex+1)]=$_AtempResult;
			}
                        /*if($_IrequestTypeId == 0)
                        {
                            $_AllVallue = array("request_type_id" => 0,"request_type_name" => "All","request_type_status" => "Y");
                            array_unshift($_Aresult, $_AllVallue);
                        }
                         $_AfinalResult = array_column($_Aresult, 'request_type_id', 'request_type_name');
                         $_AfinalResult = array_change_key_case($_AfinalResult,CASE_LOWER);*/
		}
		return $_AfinalResult;
	}
	function _getGroupResizeRequestDetails($requestMasterId)
	{
		global $CFG;
		$resultArray = array();
		$resizeRequestIds = '';
		$pnrSynStatus='Y';
		$getParentUpsizeRequestIds = $this->_getParentUpsizeRequestIds($requestMasterId);
		$requestMasterIds = $getParentUpsizeRequestIds['requestMasterIds'];
		$parentRequestMasterId = $getParentUpsizeRequestIds['parentRequestMasterId'];
		$sqlSelectRequestDetails="SELECT
							rm.request_master_id,
							rm.request_type,
							rm.requested_date,
							rm.requested_date as requested_date_disp,
							arm.airlines_request_id,
							arm.current_status,
							rm.user_currency,
							rd.request_id,
							rd.origin_airport_code,
							rd.dest_airport_code,
							srd.series_request_id,
							rafd.departure_date,
							(rafd.no_of_adult+ rafd.no_of_child + rafd.no_of_infant)  as number_of_passenger,
							rafd.no_of_adult as number_of_adult,
							rafd.no_of_child as number_of_child,
							rafd.no_of_infant as number_of_infant,
							srd.baggage_allowance,
							srd.meals_code,
							srd.cabin,
							srd.expected_fare,
							srd.start_time,
							srd.end_time,
							rm.reference_request_master_id,
							rafd.request_approved_flight_id
					  FROM
							".$CFG['db']['tbl']['request_master']." rm,
							".$CFG['db']['tbl']['airlines_request_mapping']." arm,
							".$CFG['db']['tbl']['request_details']." rd,
							".$CFG['db']['tbl']['series_request_details']." srd,
							".$CFG['db']['tbl']['request_approved_flight_details']." rafd,
							".$CFG['db']['tbl']['transaction_master']." tm
					  WHERE
							rm.request_master_id=rd.request_master_id
							AND rm.request_master_id=arm.request_master_id
							AND rd.request_id=srd.request_id
							AND srd.series_request_id=rafd.series_request_id
							AND rm.fare_acceptance_transaction_id=tm.transaction_id
							AND tm.transaction_id=rafd.transaction_master_id
							AND rafd.accepted_flight_status='Y'
							AND rm.request_master_id IN(".$requestMasterIds.") order by srd.departure_date, rm.request_master_id ASC";
		if(DB::isError($resultRequestDetails = $this->_Oconnection->query($sqlSelectRequestDetails)))
		{
			fileWrite($sqlSelectRequestDetails,"SqlError","a+");
			return false;
		}
		$requestMasterIdArray=array();
		if ($resultRequestDetails->numRows() > 0)
		{
			while($rowRequestDetails = $resultRequestDetails->fetchRow(DB_FETCHMODE_ASSOC))
			{
				$requestMasterId=$rowRequestDetails['request_master_id'];
				if(!in_array($requestMasterId,$requestMasterIdArray))
				{			
					$requestMasterIdArray[]=$requestMasterId;
					$requestDetailsAfterAccept[$requestMasterId] =  $rowRequestDetails;
					$requestDetailsAfterAccept[$requestMasterId]['pnrPaxCount']=0;
					$requestDetailsAfterAccept[$requestMasterId]['pnrAdultCount']=0;
					$requestDetailsAfterAccept[$requestMasterId]['pnrChildCount']=0;
					$requestDetailsAfterAccept[$requestMasterId]['pnrInfantCount']=0;
				}
				else
				{
					$requestDetailsAfterAccept[$requestMasterId]['number_of_passenger']=$requestDetailsAfterAccept[$requestMasterId]['number_of_passenger']+$rowRequestDetails['number_of_passenger'];
					$requestDetailsAfterAccept[$requestMasterId]['number_of_adult']=$requestDetailsAfterAccept[$requestMasterId]['number_of_adult']+$rowRequestDetails['number_of_adult'];
					$requestDetailsAfterAccept[$requestMasterId]['number_of_child']=$requestDetailsAfterAccept[$requestMasterId]['number_of_child']+$rowRequestDetails['number_of_child'];
					$requestDetailsAfterAccept[$requestMasterId]['number_of_infant']=$requestDetailsAfterAccept[$requestMasterId]['number_of_infant']+$rowRequestDetails['number_of_infant'];
				}
				$pnrBlockingDetails=$this->_getFlightSynPaxCount($rowRequestDetails['request_approved_flight_id']);		
				
				if(($pnrBlockingDetails['totalCount'])>0)
				{					
					$requestDetailsAfterAccept[$requestMasterId]['pnrPaxCount']=$requestDetailsAfterAccept[$requestMasterId]['pnrPaxCount']+($pnrBlockingDetails['totalCount']);
					$requestDetailsAfterAccept[$requestMasterId]['pnrAdultCount']=$requestDetailsAfterAccept[$requestMasterId]['pnrAdultCount']+$pnrBlockingDetails['adultCount'];
					$requestDetailsAfterAccept[$requestMasterId]['pnrChildCount']=$requestDetailsAfterAccept[$requestMasterId]['pnrChildCount']+$pnrBlockingDetails['childCount'];
					$requestDetailsAfterAccept[$requestMasterId]['pnrInfantCount']=$requestDetailsAfterAccept[$requestMasterId]['pnrInfantCount']+$pnrBlockingDetails['infantCount'];
				}
			}
		}
		$requestDetailsAfterAccept=array_values($requestDetailsAfterAccept);
		for($i=0;$i<count($requestDetailsAfterAccept);$i++)
		{
			$pnrBlockingDetails=array();
			$resultRequestDetailsAfterAccept[$i]=$requestDetailsAfterAccept[$i];
			
			$resultRequestDetailsAfterAccept[$i]['pnrStatus']="N";
			if($resultRequestDetailsAfterAccept[$i]['pnrPaxCount']==$resultRequestDetailsAfterAccept[$i]['number_of_passenger'])
			{
				$resultRequestDetailsAfterAccept[$i]['pnrStatus']="Y";
			}
			else
			{
				$pnrSynStatus='N';				
			}
			$resultRequestDetailsAfterAccept[$i]['request_master_group_id']=$this->_changeGroupRequestFormat($requestDetailsAfterAccept[$i]['request_master_id']);
			$resultRequestDetailsAfterAccept[$i]['total_amount']= $requestDetailsAfterAccept[$i]['user_currency'].' '.$this->_getRequestTotalAmount($requestDetailsAfterAccept[$i]['request_master_id']);
			if($parentRequestMasterId==$requestDetailsAfterAccept[$i]['request_master_id'])
				$resultRequestDetailsAfterAccept[$i]['resize_type']="Parent";
			else
				$resultRequestDetailsAfterAccept[$i]['resize_type']="Upsize";
			$resultRequestDetailsAfterAccept[$i]['sector_details'] = $requestDetailsAfterAccept[$i]['origin_airport_code']."-".$requestDetailsAfterAccept[$i]['dest_airport_code'];
			
			if($requestDetailsAfterAccept[$i]['current_status']==1)
				$resultRequestDetailsAfterAccept[$i]['current_display_status']='Process';
			if($requestDetailsAfterAccept[$i]['current_status']==2)
				$resultRequestDetailsAfterAccept[$i]['current_display_status']='Rejected';
			if($requestDetailsAfterAccept[$i]['current_status']==3)
				$resultRequestDetailsAfterAccept[$i]['current_display_status']='Approved';
			if($requestDetailsAfterAccept[$i]['current_status']==4)
				$resultRequestDetailsAfterAccept[$i]['current_display_status']='Accepted';
			if($requestDetailsAfterAccept[$i]['current_status']==5)
				$resultRequestDetailsAfterAccept[$i]['current_display_status']='Declined';

		}		
		$resultArray = $resultRequestDetailsAfterAccept;
		if(count($resultArray)>0)
		{
			$resultArray[0]['pnrSynStatus']=$pnrSynStatus;
		}
		return $resultArray;
		
	}
	function _checkPnrWithPersonOrgId($pnr,$personOrgId)
	{
		global $CFG;
		$sql="SELECT
					pbd.pnr_blocking_id,
					pbd.pnr				
				FROM
					".$CFG['db']['tbl']['pnr_blocking_details']." pbd,
					".$CFG['db']['tbl']['passenger_pnr_blocking_details']." ppbd
				WHERE
					pbd.pnr_blocking_id=ppbd.pnr_blocking_id
					AND pbd.pnr='".$pnr."'
					AND ppbd.personOrgID=".$personOrgId."
					AND ppbd.status='Y'";
		if(DB::isError($res = $this->_Oconnection->query($sql)))
		{
			fileWrite($sql,"SqlError","a+");
			return false;
		}
		if ($res->numRows() > 0)
		{
			return true;
		}
		return false;
	}
	function _getFlightSynPaxCount($requestApprovedFlightId)
	{
		global $CFG;
		$sqlPnr="SELECT 
						no_of_adult,
						no_of_child,
						no_of_infant,
						pnr
					FROM
					".$CFG['db']['tbl']['pnr_blocking_details']."
				WHERE
					request_approved_flight_id='".$requestApprovedFlightId."'";
		if(DB::isError($resultPnr=$this->_Oconnection->query($sqlPnr)))
		{
			fileWrite($sqlPnr,"SqlError","a+");
			return false;
		}
		$resultArray=array();
		$checkAdultCount=$checkChildCount=$checkInfantCount=0;
		if($resultPnr->numRows() >0)
		{
			while($rowPnr=$resultPnr->fetchRow(DB_FETCHMODE_ASSOC))
			{
				$checkAdultCount+=$rowPnr['no_of_adult'];
				$checkChildCount+=$rowPnr['no_of_child'];
				$checkInfantCount+=$rowPnr['no_of_infant'];
			}
		}
		$resultArray['totalCount']=$checkAdultCount+$checkChildCount+$checkInfantCount;
		$resultArray['adultCount']=$checkAdultCount;
		$resultArray['childCount']=$checkChildCount;
		$resultArray['infantCount']=$checkInfantCount;
		return $resultArray;
	}
	function _getRequestIds($pnr)
	{
		global $CFG;
		$sql="SELECT DISTINCT
					request_master_id
				FROM
					".$CFG['db']['tbl']['pnr_blocking_details']."
				WHERE
					pnr='".$pnr."'
				ORDER BY request_master_id";
		$resultArray=array();
		if(DB::isError($result=$this->_Oconnection->query($sql)))
		{
			fileWrite($sql,"SqlError","a+");
			return false;
		}	
		if($result->numRows() >0)
		{
			while($row=$result->fetchRow(DB_FETCHMODE_ASSOC))
			{
				$resultArray[]=$row['request_master_id'];
			}
		}
		return $resultArray;
	}
	function _getPaymentValidityDate($requestMasterId)
	{
		global $CFG;
		$existingValitityDate="";
		$paymentValidityDate="";
		$airlinesRequestId=$this->_getAirlineRequestId($requestMasterId);
		$this->_AstatusDetails = $this->_getStatusDetails('PR');
		$sqlPay="SELECT payment_validity_date FROM ".$CFG['db']['tbl']['payment_master']." WHERE airlines_request_id=".$airlinesRequestId." AND payment_status != ".$this->_AstatusDetails['status_id']." ORDER BY payment_master_id DESC LIMIT 1";
		if(DB::isError($resultPay=$this->_Oconnection->query($sqlPay)))
		{
			fileWrite($sqlPay,"SqlError","a+");
			return false;
		}
		if($resultPay->numRows() >0)
		{
			$rowPay=$resultPay->fetchRow(DB_FETCHMODE_ASSOC);
			$existingValitityDate=$rowPay['payment_validity_date'];
		}
		$paymentValidityDate=$existingValitityDate;
		
		$sql="SELECT 
						rm.fare_acceptance_transaction_id,
						prd.payment_request_id,
						prd.paid_status
				FROM
						".$CFG['db']['tbl']['request_master']." rm,
						".$CFG['db']['tbl']['payment_request_details'] ." prd
				WHERE
					request_master_id='".$requestMasterId."'
					AND rm.fare_acceptance_transaction_id=prd.transaction_id
				ORDER BY 
						prd.payment_request_id ASC";
		if(DB::isError($result=$this->_Oconnection->query($sql)))
		{
			fileWrite($sql,"SqlError","a+");
			return false;
		}				
		if($result->numRows()>1)
		{	
			$requestedDetails=array();
			while($row=$result->fetchRow(DB_FETCHMODE_ASSOC))
			{
				if(strtoupper($row['paid_status'])=="PENDING" && $paymentCheck==0)
				{
					$requestedDetails=$row;
					break;					
				}
			}
			if(count($requestedDetails)>0)
			{
				$sqlValitity="SELECT fare_validity_type,fare_validity_values FROM ".$CFG['db']['tbl']['fare_validity_type_details']." WHERE fare_validity_type_id=".$requestedDetails['payment_validity_type'];
				if(DB::isError($resultValitity=$this->_Oconnection->query($sqlValitity)))
				{
					fileWrite($sqlValitity,"SqlError","a+");
					return false;
				}
				if($resultValitity->numRows() >0)
				{
					$rowValitity=$resultValitity->fetchRow(DB_FETCHMODE_ASSOC);
					$paymentValidityDate=date('Y-m-d H:i:s',strtotime("+".$row['payment_validity']." ".$rowValitity['fare_validity_values'],strtotime(date('Y-m-d H:i:s',$existingValitityDate))));
				}
			}					
		}
		return $paymentValidityDate;
	}
	
	function _getRequestedUserId($_IrequestMasterId)
	{
		global $CFG;
		
		$_AuserInfo = $this->_staticData("_getRequestedUserId",$_IrequestMasterId);
		if($_AuserInfo !== false)
			return $_AuserInfo;
		
		$_IuserId = 0;
		$sql = "SELECT
					user_id
				FROM
					".$CFG['db']['tbl']['request_master']."
				WHERE
					request_master_id = ".$_IrequestMasterId;
		
		$result = $this->_executeQuery($sql);
		if(!empty($result) && isset($result[0]['user_id']))
			$_IuserId = $result[0]['user_id'];
		$this->_staticData("_getRequestedUserId",$_IrequestMasterId,$_IuserId);
		return $_IuserId;
	}
	
	/* Author: Balaji S (2018-Jun-19 02:11:31 PM IST)
	 * Description: Set/Get the static data
	 */
	public static function _staticData($_SfunctionName,$_Svariable,$_Aparams = NULL)
	{
		static $_Adata = array();
		if(func_num_args() == 3)
			$_Adata[$_SfunctionName][$_Svariable] = $_Aparams;
		
		if(!isset($_Adata[$_SfunctionName][$_Svariable]))
			return false;
		
		return $_Adata[$_SfunctionName][$_Svariable];
	}
	
	/**
	 * Author : Dilli Raj P
	 * Desc : If connection is not present then we create new connection and return
	 * Created on : 05-02-2019
	**/
	public function _reinitiateConnection($_Oconnection)
	{	
		if(!isset($_Oconnection->connection) || ($_Oconnection->connection == ""))
		{
			fileRequire("classes/class.dataBase.php");
			$_OdataBase = new dataBase();
			$_OdataBase->dataBaseConnection();
			$_Oconnection = $_OdataBase->_Oconnection;
		}
		return $_Oconnection;
	}
	
	function _getRequestPnrTotalAmount($pnr,$requestMasterId)
	{
		global $CFG;
		$sql="SELECT DISTINCT
					pnr_amount as amount
				FROM
					".$CFG['db']['tbl']['pnr_blocking_details']."
				WHERE
					pnr='".$pnr."'
					AND request_master_id=".$requestMasterId." LIMIT 1";
		$resultArray=array();
		if(DB::isError($result=$this->_Oconnection->query($sql)))
		{
			fileWrite($sql,"SqlError","a+");
			return false;
		}
		$totalAmount=0;	
		if($result->numRows() >0)
		{
			$row=$result->fetchRow(DB_FETCHMODE_ASSOC);
			$totalAmount=$row['amount'];	
		}

		if(isset($CFG['site']['enableGenericFees']) && $CFG['site']['enableGenericFees']=='Y')
		{
			$genricAmount = $this->_getTotalGenericChareAmount($requestMasterId,$pnr);
			
			if(abs($genricAmount) > 0)
			{
				$totalAmount = $totalAmount + $genricAmount;
			}
		}
		return $totalAmount;
	}
	function _getPersonOrgIdForProcess($pnr,$paxType="",$processType="")
	{
		global $CFG;
		fileRequire("dataModels/class.passengerDetails.php");
		$this->_OpassengerDetails = new passengerDetails();
		$this->_OpassengerDetails->_Oconnection = $this->_Oconnection;
		
		$sql="SELECT
					ppbd.personOrgID,
					pbd.request_approved_flight_id,
					pbd.request_master_id
				FROM
					".$CFG['db']['tbl']['pnr_blocking_details']." pbd,
					".$CFG['db']['tbl']['passenger_pnr_blocking_details']." ppbd
				WHERE
					pbd.pnr_blocking_id=ppbd.pnr_blocking_id
					AND pbd.pnr='".$pnr."'
					AND ppbd.status='Y'";
		if($paxType!="")
		{
			$sql.="  AND ppbd.passenger_type='".$paxType."'";
		}
		$sql.=" ORDER BY pbd.request_master_id,pbd.request_approved_flight_id,ppbd.personOrgID ASC";
		if(DB::isError($result = $this->_Oconnection->query($sql))) 
		{
			fileWrite($sql,"SqlError","a+");
			return false;
		}
		$personOrgId=array();
		$submittedPersonOrgId=array();
		$unSubmittedPersonOrgId=array();
		$requestApprovedFlightId=array();
		$requestMasterId=array();
		if($result->numRows() >0)
		{			
			while($row = $result->fetchRow(DB_FETCHMODE_ASSOC))
			{	
				if(!in_array($row['personOrgID'],$personOrgId))
				{
					$personOrgId[]=$row['personOrgID'];
					$requestApprovedFlightId[$row['personOrgID']]=$row['request_approved_flight_id'];
					$this->_OpassengerDetails->__construct();
					$this->_OpassengerDetails->_SinCondition = $row['personOrgID'];
					$this->_OpassengerDetails->_selectPassengerDetails();
					if($this->_OpassengerDetails->_IcountLoop>0)
					{
						$submittedPersonOrgId[]=$row['personOrgID'];
					}
					else
					{
						$unSubmittedPersonOrgId[]=$row['personOrgID'];
					}	
					$requestMasterId[$row['personOrgID']]=$row['request_master_id'];			
				}
				else
				{
					$requestApprovedFlightId[$row['personOrgID']]=$requestApprovedFlightId[$row['personOrgID']]."@%@".$row['request_approved_flight_id'];
				}
			}			
		}
		$resultArray=array();
		$resultArray['requestApproveFlightId']=array();
		$resultArray['requestMasterId']=array();
		$resultArray['personOrdId']=array();
		if($processType=="submitted")
		{
			foreach($submittedPersonOrgId as $key=>$value)
			{
				$resultArray['requestApproveFlightId'][]=$requestApprovedFlightId[$value];
				$resultArray['requestMasterId'][]=$requestMasterId[$value];
			}
			$resultArray['personOrdId']=$submittedPersonOrgId;
			
		}
		else if($processType=="unSubmitted")
		{
			
			foreach($unSubmittedPersonOrgId as $key=>$value)
			{
				$resultArray['requestApproveFlightId'][]=$requestApprovedFlightId[$value];
				$resultArray['requestMasterId'][]=$requestMasterId[$value];
			}
			$resultArray['personOrdId']=$unSubmittedPersonOrgId;
		}
		else
		{
			foreach($personOrgId as $key=>$value)
			{
				$resultArray['requestApproveFlightId'][]=$requestApprovedFlightId[$value];
				$resultArray['requestMasterId'][]=$requestMasterId[$value];
			}
			$resultArray['personOrdId']=$personOrgId;
			
		}	
		return $resultArray;
	}
	
	function _getParentRequestPerPaxFare($requestMasterId)
	{
		global $CFG;
		$resultArray = array();
		$getParentRequestId = $this->_getParentUpsizeRequestIds($requestMasterId);
		$parentRequestMasterId = $getParentRequestId['parentRequestMasterId'];
		if($requestMasterId != $parentRequestMasterId)
		{
			$sqlRequestPerPaxFareDetails="SELECT
						count(request_approved_flight_id) as noOfRow,
						sum(rafd.no_of_adult) as noOfAdult,
						sum(rafd.no_of_child) as noOfChild,
						sum(rafd.no_of_infant) as noOfInfant,
						sum(rafd.base_fare) as adultBaseFare,
						sum(rafd.tax) as adultTax,
						sum(rafd.child_base_fare) as childBaseFare,
						sum(rafd.child_tax) as childTax,
						sum(rafd.baggauge_fare) as baggaugeFare,
						sum(rafd.meals_fare) as mealsFare,
						rm.request_master_id,
						rm.user_currency,
						tm.transaction_id
					 FROM
						".$CFG['db']['tbl']['request_approved_flight_details']." rafd,
						".$CFG['db']['tbl']['request_master']." rm,
						".$CFG['db']['tbl']['transaction_master']." tm,
						".$CFG['db']['tbl']['airlines_request_mapping']." arm
					 WHERE
						arm.airlines_request_id = tm.airlines_request_id
						AND rm.fare_acceptance_transaction_id=tm.transaction_id
						AND tm.transaction_id=rafd.transaction_master_id
						AND arm.request_master_id = rm.request_master_id
						AND rm.request_master_id='".$parentRequestMasterId."'
						AND rafd.accepted_flight_status='Y' ";
						
			if(DB::isError($result = $this->_Oconnection->query($sqlRequestPerPaxFareDetails))) 
			{
				fileWrite($sqlRequestPerPaxFareDetails,"SqlError","a+");
				return false;
			}
			
			if($result->numRows() >0)
			{
				while($row = $result->fetchRow(DB_FETCHMODE_ASSOC))
				{
					$adultBaseFare = $row['adultBaseFare']/$row['noOfRow'];
					$adultTax = $row['adultTax']/$row['noOfRow'];
					$childBaseFare = $row['childBaseFare']/$row['noOfRow'];
					$childTax = $row['childTax']/$row['noOfRow'];
					$baggauageFare = $row['baggaugeFare']/$row['noOfRow'];
					$mealsFare = $row['mealsFare']/$row['noOfRow'];
					$defaultCurrency = ($CFG['site']['evalateUserCurrency']=='Y')?$row['user_currency']:$CFG['site']['currencyType'];
				}				
				$ssrTotla = $baggauageFare+$mealsFare;
				$adultTotalFare = $adultBaseFare+$adultTax+$ssrTotla;
				$childTotalFare = $childBaseFare+$childTax+$ssrTotla;
				if($adultBaseFare!=0)
					$resultArray['parentRequestAdultFare'] = "$adultTotalFare | $defaultCurrency $adultTotalFare ($adultBaseFare + $adultTax + $ssrTotla)";
				else
					$resultArray['parentRequestAdultFare'] = '';
				if($childBaseFare!=0)
					$resultArray['parentRequestChildFare'] = "$childTotalFare | $defaultCurrency $childTotalFare ($childBaseFare + $childTax + $ssrTotla)";
				else
					$resultArray['parentRequestChildFare'] = ''; 
			}
			return $resultArray;
		}
	}	
	function _getStatusFromRequestId($requestMasterId)
	{
		global $CFG;
		// $_Svariable = $requestMasterId;
		// $_AstaticData = $this->_staticData("_getStatusFromRequestId",$_Svariable);
		// if($_AstaticData !== false)
		// 	return $_AstaticData;
		$sql = "SELECT
					current_status
				FROM
					".$CFG['db']['tbl']['airlines_request_mapping']."
				WHERE
					request_master_id = '".$requestMasterId."'
				LIMIT 1";
		if(DB::isError($result=$this->_Oconnection->query($sql)))
		{
			fileWrite($sql,"SqlError","a+");
			return false;
		}
		$_IcurrentStatus = 0;
		if($result->numRows() >0)
		{
			$row=$result->fetchRow(DB_FETCHMODE_ASSOC);
			$_IcurrentStatus = $row['current_status'];
			//$this->_staticData("_getStatusFromRequestId",$_Svariable,$_IcurrentStatus);
		}
		return $_IcurrentStatus;
	} 
	/* Author: Venket (08-Jun-2018 13:21:26)
	 * Desc: Function to multisort an array 
	 * Input: $finalInput = array( "inputArray"=>$sortArray, "firstFieldName"=>"index1", "firstFieldOrder"=>"ASC/DESC", "secondFieldName"=>"index2", "secondFieldOrder"=>"ASC/DESC");
	 * Usage : $resultVal=multipleSortFunction($finalInput);
	 */
	function _multipleSortFunction()
	{
		$_Aarguments = func_get_args();
		
		//To check the arguments and input data exists
		if(!isset($_Aarguments[0]) || !isset($_Aarguments[0]['inputArray']))
			return false;
		
		$_Aarguments = $_Aarguments[0];
		$_AtoSort = $_Aarguments['inputArray'];
		
		//To check the first field name exists or not
		$_Asorting = array();
		if(isset($_Aarguments['firstFieldName']))
		{
			$_Tsorting = array();
			$_Tsorting['index'] = $_Aarguments['firstFieldName'];
			$_Tsorting['order'] = ($_Aarguments['firstFieldOrder'] == "DESC") ? SORT_DESC : SORT_ASC;
			if(isset($_Aarguments['firstFieldType']))
			   $_Tsorting['type'] = $_Aarguments['firstFieldType'];
			array_push($_Asorting,$_Tsorting);
		}
		//To check the second field name exists or not
		if(isset($_Aarguments['secondFieldName']))
		{
			$_Tsorting = array();
			$_Tsorting['index'] = $_Aarguments['secondFieldName'];
			$_Tsorting['order'] = ($_Aarguments['secondFieldOrder'] == "DESC") ? SORT_DESC : SORT_ASC;
			if(isset($_Aarguments['secondFieldType']))
			   $_Tsorting['type'] = $_Aarguments['secondFieldType'];
			array_push($_Asorting,$_Tsorting);
		}
		
		//To check the sorting array exists or not, when it not exists return false
		if(empty($_Asorting[0]))
			return false;
		
		$count = 0;
		$_Aparams = array(); //Frame the array for multi sorting
		foreach($_Asorting as $_AinnerSort)
		{
			$_Aparams[$count] = array_column($_AtoSort,$_AinnerSort['index']);
			$_Aparams[++$count] = $_AinnerSort['order'];
			if(isset($_AinnerSort['type']))
				$_Aparams[++$count] = $_AinnerSort['type'];
			$count++;
		}
		//Set the sorting array with address
		$_Aparams[] = &$_AtoSort;
		
		//Call the array_mulitsort built-in function using parameters
		call_user_func_array('array_multisort',$_Aparams);

		//return the sorted array
		return end($_Aparams);
	}

	//Request type store
	function _getRequestTypeDetails()
	{
		$this->_ArequestTypeDetails=array();
		$sqlSelectRequestType="SELECT request_type_id,request_type_name FROM request_type_master WHERE upper(request_type_status) !='N'";
		
		if(DB::isError($resultSelectRequestType=$this->_Oconnection->query($sqlSelectRequestType)))
		{
			fileWrite($sqlSelectRequestType,"SqlError","a+");
			return false;
		}
		
		if($resultSelectRequestType->numRows() >0)
		{
			while($rowSelectRequestType=$resultSelectRequestType->fetchRow(DB_FETCHMODE_ASSOC))
			{
				$this->_ArequestTypeDetails[]=$rowSelectRequestType;
			}
		}		
		return 	$this->_ArequestTypeDetails;
	}
		

	//User type store
	function _getUserTypeDetails()
	{		
		$this->_AuserTypeDetails=array();
		/*
		 * Modified by: Subalakshmi S 17-09-2018 
		 * To select both iata and non-iata travel agents
		 */
		$sqlSelectUserType="SELECT corporate_type_id,corporate_type_name FROM corporate_type_details WHERE status='Y'";
		
		if(DB::isError($resultSelectUserType=$this->_Oconnection->query($sqlSelectUserType)))
		{
			fileWrite($sqlSelectUserType,"SqlError","a+");
			return false;
		}
		
		if($resultSelectUserType->numRows() >0)
		{
			while($rowSelectUserType=$resultSelectUserType->fetchRow(DB_FETCHMODE_ASSOC))
			{
				$this->_AuserTypeDetails[]=$rowSelectUserType;
			}
		}
		
		return $this->_AuserTypeDetails;
	}
	function _calculateAverageFares($arrayVal)
	{
		$resultArray=array();
		$resultArray['indexVal']="";
		$resultArray['sector']="";
		$resultArray['avgBaseFare']=0;
		$resultArray['avgTax']=0;
		$resultArray['avgTotalFare']=0;
		$resultArray['avgDiscount']=0;
		$resultArray['avgNetAmount']=0;
		$totalBaseFare=$totalTax=$totalTotalFare=$totalDiscount=$totalNetAmount=0;
		foreach($arrayVal as $key=>$value) 
		{
			$totalBaseFare=$totalBaseFare+$value['originalBaseFare'];
			$totalTax=$totalTax+$value['originalTax'];
			$totalTotalFare=$totalTotalFare+$value['originalTotal'];
			$totalDiscount=$totalDiscount+$value['discountVal'];
			$totalNetAmount=$totalNetAmount+$value['netAmount'];
		}
		$arrayCount=count($arrayVal);
	
		if($arrayCount>0)
		{
			$resultArray['indexVal']=$arrayVal[0]['indexVal'];
			$resultArray['sector']=$arrayVal[0]['sector'];
			$resultArray['avgBaseFare']=$this->_getRoundOffFare($totalBaseFare/$arrayCount,2,"displayFare");
			$resultArray['avgTax']=$this->_getRoundOffFare($totalTax/$arrayCount,2,"displayFare");
			$resultArray['avgTotalFare']=$this->_getRoundOffFare($totalTotalFare/$arrayCount,2,"displayFare");
			$resultArray['avgDiscount']=$this->_getRoundOffFare($totalDiscount/$arrayCount,2,"displayFare");
			$resultArray['avgNetAmount']=$this->_getRoundOffFare($totalNetAmount/$arrayCount,2,"displayFare");
		}
		return $resultArray;
	}
	function _getRequestMasterId($airlinesRequestId)
	{
		global $CFG;
		
		$sql="SELECT 
					request_master_id 
				FROM
					".$CFG['db']['tbl']['airlines_request_mapping']."
				WHERE
					airlines_request_id= ".$airlinesRequestId;
					
		if(DB::isError($result=$this->_Oconnection->query($sql)))
		{
			fileWrite($sql,"SqlError","a+");
			return false;
		}
		
		if($result->numRows() >0)
		{
			$row = $result->fetchRow(DB_FETCHMODE_ASSOC);
			return $row['request_master_id'];
		}
		return 0;
	}
	function _getApprovedFlightPaxCount($requestMasterId,$requestId=0,$seriesRequestId=0,$requestApprovedFlightId=0,$mappedSeriesRequestId = 'Y')
	{
		
		global $CFG;
		$flightAdultArray=array();
		$flightChildArray=array();
		$flightInfantArray=array();
		
		$lastTransactionId=$this->_getLastTransactionMasterId($requestMasterId);
		
		$selectFlightDetailsPax="SELECT 
								no_of_adult,
								no_of_child,
								no_of_infant,
								free_cost_count
							FROM
								".$CFG['db']['tbl']['request_approved_flight_details']." rafd,
								".$CFG['db']['tbl']['series_request_details']." srd
							WHERE
								rafd.transaction_master_id='".$lastTransactionId."'
								AND rafd.series_request_id = srd.series_request_id
								AND rafd.accepted_flight_status='Y'";
		if($requestId!=0)
		{
			$selectFlightDetailsPax.= " AND rafd.request_id='".$requestId."'";
								
		}
		if($seriesRequestId!=0)
		{
			$selectFlightDetailsPax.= " AND rafd.series_request_id='".$seriesRequestId."'";
		}
		if($requestApprovedFlightId!=0)
		{
			$selectFlightDetailsPax.= " AND rafd.request_approved_flight_id='".$requestApprovedFlightId."'";
		}
		if($mappedSeriesRequestId == 'Y')
		{
			$selectFlightDetailsPax.=" AND srd.mapped_series_request_id = 0";
		}
		if(DB::isError($resultFlightPaxCount = $this->_Oconnection->query($selectFlightDetailsPax))) 
		{
			fileWrite($selectFlightDetailsPax,"SqlError","a+");
			return false;
		}
			
		if($resultFlightPaxCount->numRows() >0)
		{
			while($rowFlightDetailsPaxCount = $resultFlightPaxCount->fetchRow(DB_FETCHMODE_ASSOC))
			{
				$flightAdultArray[]=$rowFlightDetailsPaxCount['no_of_adult'];
				$flightChildArray[]=$rowFlightDetailsPaxCount['no_of_child'];
				$flightInfantArray[]=$rowFlightDetailsPaxCount['no_of_infant'];
				$flightFocArray=$rowFlightDetailsPaxCount['free_cost_count'];
				
			}
			$approvedFlightTotalAdult=array_sum($flightAdultArray);
			$approvedFlightTotalChild=array_sum($flightChildArray);
			$approvedFlightTotalInfant=array_sum($flightInfantArray);
			
			$approvedFlightTotalPaxArray[]=$approvedFlightTotalAdult;
			$approvedFlightTotalPaxArray[]=$approvedFlightTotalChild;
			$approvedFlightTotalPaxArray[]=$approvedFlightTotalInfant;
			$approvedFlightTotalPaxArray['freeCostCount']=$flightFocArray;
			
		}
		return $approvedFlightTotalPaxArray;
	}
	/*
	 * Function name: _setPassengerRequested
	 * Modified by : selvakumar.S
	 * Modified details : series_request_details joined for getting onward flight 
	 * 					  (mapped_series_request_id = 0) 
	 * Modified date : 03-06-2017 
	 */
	function _setPassengerRequested($requestMasterId,$_Spnr='',$currentStatus='')
	{
		global $CFG;
		$airlinesRequestId= $this->_getAirlineRequestId($requestMasterId);
		if($currentStatus == '')
			$currentStatus = $this->_getStatusFromRequestId($requestMasterId);
		$_allowRequest = 'N';
		$_ApnrInformation = array();
		$_SremoveDummyRows='';
		//For not considering dummy rows
		if($CFG['nameUpdate']['insertDummyRowsForSeatSelection']=='Y' || $CFG['site']['doubleBilling']['status'] == 'Y' || $CFG['passengerWiseEmd']['emdcreate']=='Y')
			$_SremoveDummyRows = " AND additional_details NOT LIKE '%insertedDummyRow\":\"Y%'";
		#getting saved number of passengers
		$savedPaxSql = "SELECT 
					passenger_id
				FROM 
					".$CFG['db']['tbl']['passenger_details']." 
				WHERE  
					airlines_request_id = ".$airlinesRequestId.$_SremoveDummyRows;

		if(DB::isError($result=$this->_Oconnection->query($savedPaxSql)))
		{
			fileWrite($savedPaxSql,'SqlError','a+');
			return false;
		}
		$submittedPassengers = $result->numRows();

		#getting requested number of passengers
		$requestedPaxSql = "SELECT
					rm.request_type_id,
					rm.trip_type,
					rafd.request_approved_flight_id,
					pbd.no_of_adult,
					pbd.no_of_child,
					pbd.no_of_infant,
					pbd.no_of_foc
				FROM
					".$CFG['db']['tbl']['request_master']." rm,
					".$CFG['db']['tbl']['request_approved_flight_details']." rafd,
					".$CFG['db']['tbl']['series_request_details']." srd,
					".$CFG['db']['tbl']['pnr_blocking_details']." pbd
				WHERE
					rafd.accepted_flight_status = 'Y'
					AND rm.fare_acceptance_transaction_id = rafd.transaction_master_id
					AND srd.series_request_id = rafd.series_request_id
					AND pbd.request_approved_flight_id = rafd.request_approved_flight_id
					AND srd.mapped_series_request_id = 0
					AND pbd.status NOT IN ('Cancelled','Closed')
					AND rm.request_master_id = ".$requestMasterId;

		$adt = 0; $chd = 0;$inf = 0;$foc=0;$ssrInfant=0;
		$requestedPaxResult = $this->_executeQuery($requestedPaxSql);

		# Get request's PNRs from pnr blocking details for check all PNRs gets submitted names
		$selectPnrBlockingDetails ="SELECT 
										DISTINCT pnr	
									FROM 
										".$CFG['db']['tbl']['pnr_blocking_details']."
									WHERE 
										request_master_id =".$requestMasterId." AND
										status NOT IN ('Cancelled','Closed')";
		$_ApnrBlockingDetails = $this->_executeQuery($selectPnrBlockingDetails);
		$roundtripSectorId = array();
		$requestTypeId = $requestedPaxResult[0]['request_type_id'];
		$tripType = strtoupper($requestedPaxResult[0]['trip_type']);

		foreach($requestedPaxResult as $requestDetail)
		{
			#get ssr infant count
			$_IssrInfantCount = $this->_getSSRInfantCount($requestDetail['request_approved_flight_id']);

			if($requestDetail['request_type_id'] == 1 && count($_ApnrBlockingDetails) == 1)
			{
				$adt = $requestDetail['no_of_adult'];
				$chd = $requestDetail['no_of_child'];
				$inf = $requestDetail['no_of_infant'];
				$foc = $requestDetail['no_of_foc'];
				$ssrInfant =$_IssrInfantCount;
			}
			else
			{
				$adt += $requestDetail['no_of_adult'];
				$chd += $requestDetail['no_of_child'];
				$inf += $requestDetail['no_of_infant'];
				$foc += $requestDetail['no_of_foc'];
				$ssrInfant +=$_IssrInfantCount;
			}
		}
		$requestedPax = $adt+$chd+$inf+$foc+$ssrInfant;

		// Get all pnr details information if ssr added after request submit then roll back the status if make payment for that SSR to passenger requested other wise pnr submitted
		if($CFG['nameUpdate']['multiSaveAndSubmit'] != 'Y')
		{
			fileRequire("dataModels/class.pnrDetails.php");
			$this->_OpnrDetails = new pnrDetails();
			$this->_OpnrDetails->__construct();
			$this->_OpnrDetails->_Oconnection = $this->_Oconnection;
			$this->_OpnrDetails->_IairlinesRequestId = $airlinesRequestId;
			if(!empty($_Spnr))
				$this->_OpnrDetails->_SpnrNumber = $_Spnr;
			$_ApnrInformation = $this->_OpnrDetails->_selectPnrDetails();
		}

		#updating request status to 13
		if((($submittedPassengers == $requestedPax) || (!empty($_ApnrInformation))) && ($currentStatus == 12))
		{
			fileRequire("dataModels/class.airlinesRequestMapping.php");
			$_OairlinesRequestMapping=new airlinesRequestMapping();
			$_OairlinesRequestMapping->_Oconnection = $this->_Oconnection;
			$_OairlinesRequestMapping->_IairlinesRequestId = $airlinesRequestId;
			
			if($CFG['nameUpdate']['multiSaveAndSubmit'] != 'Y' && !empty($_ApnrInformation))
			{
				# Check is all pnrs where submitted or not with pnr blocking details
				if(count($_ApnrInformation) == count($_ApnrBlockingDetails))
				{	
					foreach($_ApnrInformation as $_AvaluePnrInformation){
						if($_AvaluePnrInformation['pnr_status']==14){
							$_allowRequest = 'Y';
						}
						else{
							$_allowRequest = 'N';
							break;
						}
					}
				}
			}
			//To check ticket status in double billing flow
			if($CFG['site']['doubleBilling']['status']=='Y')
			{
				fileRequire("classesTpl/class.tpl.walletPayment.php");
				$this->_OwalletPayment =new walletPayment();
				$this->_OwalletPayment->_Oconnection = $this->_Oconnection;
				$this->_OwalletPayment->_Osmarty = $this->_Osmarty;
				$this->_OwalletPayment->_IrequestMasterId = $requestMasterId;
				$_allowRequest= $this->_OwalletPayment->_checkUpdateStatus();
			}
			#To check the condition for airlines which have save ,save and sumbit and  ticketing systems
			if($CFG["site"]["navitaireBasedAirline"]=='N' && $CFG["nameUpdate"]["multiSaveAndSubmit"]=="N")
				$_OairlinesRequestMapping->_IcurrentStatus=12;
			else
			{
				#To update the request status to passenger requested
				if($_allowRequest == 'Y' )
					$_OairlinesRequestMapping->_IcurrentStatus = 14;
			elseif($submittedPassengers == $requestedPax)
			{
					#view hisory process for passenger request-ISS720
					$this->_BpassengerSubmitted=true;
					$_OairlinesRequestMapping->_IcurrentStatus = 13;
			}

			}
			
			filewrite($requestMasterId.'>> request id '.$_Spnr.' pnr >>'.print_r($_OairlinesRequestMapping->_IcurrentStatus,1),"AirlineUpdate",'a+');
			$_OairlinesRequestMapping->_SlastUpdated=$this->_getUTCDateValue();
			if($_OairlinesRequestMapping->_IcurrentStatus != '')			
				$_OairlinesRequestMapping->_updateAirlinesRequestMapping();			
			
		}
	
	}

	
	function _pnrPaxSplitUp($pnrValueArray,$newAdultCount,$newChildCount,$newInfantCount)
	{
		global $CFG;
		
		for($i=0;$i<count($pnrValueArray);$i++)
		{
			$data[]=array("adult"=>($pnrValueArray[$i]['no_of_adult']),
							"child"=>($pnrValueArray[$i]['no_of_child']),
							"infant"=>($pnrValueArray[$i]['no_of_infant']));
			
			$totalAdult[]=$pnrValueArray[$i]['no_of_adult'];
			$totalChild[]=$pnrValueArray[$i]['no_of_child'];
			$totalInfant[]=$pnrValueArray[$i]['no_of_infant'];
		}
		//count of pnr rows
		$pnrCount=count($pnrValueArray);
		
		//for total pax count
		$totalNoOfAdult=array_sum($totalAdult);
		$totalNoOfChild=array_sum($totalChild);;
		$totalNoOfInfant=array_sum($totalInfant);;
		
		//downsized pax count from input
		$downsizeAdult=$newAdultCount;
		$downsizeChild=$newChildCount;
		$downsizeInfant=$newInfantCount;

		//diff between total pax count from downsize pax count
		$downsizeAdultCount=$totalNoOfAdult-$downsizeAdult;
		$downsizeChildCount=$totalNoOfChild-$downsizeChild;
		$downsizeInfantCount=$totalNoOfInfant-$downsizeInfant;
		
		//this is for avoiding decimal point for calculating the downsized count per pnr, we need to subtract this count separately
		$remainingAdult=$downsizeAdultCount%$pnrCount;
		$remainingChild=$downsizeChildCount%$pnrCount;
		$remainingInfant=$downsizeInfantCount%$pnrCount;
		
		//finding the even count for calculating downsized count per pnr
		$roundAdult=$downsizeAdultCount-$remainingAdult;
		$roundChild=$downsizeChildCount-$remainingChild;
		$roundInfant=$downsizeInfantCount-$remainingInfant;
		
		//downsize pax count per pnr
		$downsizeAdultPnr=$roundAdult/$pnrCount;
		$downsizeChildPnr=$roundChild/$pnrCount;
		$downsizeInfantPnr=$roundInfant/$pnrCount;

		
		$i=0;$k=0;
		$n=0;$m=0;
		$balanceAdult=0;
		$balanceChild=0;
		$balanceInfant=0;
		
		//looping upto pnr count
		while($i<$pnrCount)
		{
			$totalPaxinArray=$data[$i]['adult']+$data[$i]['child']+$data[$i]['infant'];

			if($downsizeAdultPnr>0)
			{
				if($data[$i]['adult']>0)
				{
					$data[$i]['adult']=$data[$i]['adult']-$downsizeAdultPnr;
				}
				//avoiding to reducing the count when the count has already zero
				else
				{
					$balanceAdult++;
				}
			}
				
			if($downsizeChildPnr>0)
			{
				if($data[$i]['child']>0)
				{
					$data[$i]['child']=$data[$i]['child']-$downsizeChildPnr;
				}
				else
				{
					$balanceChild++;
				}
			}
			
			if($downsizeInfantPnr>0)
			{
				if($data[$i]['infant']>0)
				{
					$data[$i]['infant']=$data[$i]['infant']-$downsizeInfantPnr;
				}
			
				else
				{
					$balanceInfant++;
				}
			}

			$totalPaxinArray=$data[$i]['adult']+$data[$i]['child']+$data[$i]['infant'];
			$i++;
		}
		
		$balADT=0;
		$balCHD=0;
		$balINF=0;
		// subtracted the balance count(unsubtracted count from above loop)from available pnr pax count
		if($balanceAdult>0)
		{
			while($balADT<$balanceAdult)
			{
				$data[$balADT]['adult']=$data[$balADT]['adult']-($balanceAdult/$balanceAdult);
				$balADT++;
			}
		}
		
		if($balanceChild>0)
		{
			while($balCHD<$balanceChild)
			{
				$data[$balCHD]['child']=$data[$balCHD]['child']-($balanceChild/$balanceChild);
				$balCHD++;
			}
		}
		
		if($balanceInfant>0)
		{
			while($balINF<$balanceInfant)
			{
				$data[$balINF]['infant']=$data[$balINF]['infant']-($balanceInfant/$balanceInfant);
				$balINF++;
			}
		}

		$remADT=0;
		$remCHD=0;
		$remINF=0;
		
		//subtracting the remaining pax count
		if($remainingAdult>0)
		{
			while($remADT<$remainingAdult)
			{
				$data[$remADT]['adult']=$data[$remADT]['adult']-($remainingAdult/$remainingAdult);
				$remADT++;
			}
		}

		if($remainingChild>0)
		{
			while($remCHD<$remainingChild)
			{
				$data[$remCHD]['child']=$data[$remCHD]['child']-($remainingChild/$remainingChild);
				$remCHD++;
			}
		}
		
		if($remainingInfant>0)
		{
			while($remINF<$remainingInfant)
			{
				$data[$remINF]['infant']=$data[$remINF]['infant']-($remainingInfant/$remainingInfant);
				$remINF++;
			}
		}
			
		return $data;
	}
	function _getUpsizeRequestCount($requestMasterId, $returnValues='N')
	{
		global $CFG;
		$sql="select
				request_master_id
			FROM
				".$CFG['db']['tbl']['request_master']."
			WHERE
				reference_request_master_id='".$requestMasterId."' AND quote_type='U'";

		if(DB::isError($result=$this->_Oconnection->query($sql)))
		{
			fileWrite($sql,'SqlError','a+');
			return false;
		}
		if($returnValues == 'Y'){
			$_AreferenceRequestMasterId = array();
			while($_Arow = $result->fetchRow(DB_FETCHMODE_ASSOC)){
				$_AreferenceRequestMasterId[] = $_Arow['request_master_id'];
			}
			return $_AreferenceRequestMasterId;
		}
		else
			return $result->numRows();
	
	}
    /**
	 * Desc - To get the no of upsize count in the groupchange_request_master
	 * Param - RequestMasterId
	 * Return - Integer -> No of upsize
	 * Created By - Gopinath.k.
	**/
    function _getUpsizeRequestCountForNewRequest($requestMasterId)
	{
			global $CFG;
			$sql="select
					request_master_id
				FROM
					".$CFG['db']['tbl']['groupchange_request_master']."
				WHERE
					request_master_id='".$requestMasterId."' AND resize_type_id = 2";

			if(DB::isError($result=$this->_Oconnection->query($sql)))
			{
				fileWrite($sql,'SqlError','a+');
				return false;
			}
				return $result->numRows();
		
	}
	/*
	 * TRAN_MASTER takes exchange rate from transaction_master table.
	 * PAY_MASTER takes exchange rate from payment_master.
	 * USER_CURRENCY takes exchange rate from currency_details.
	 * 
	 */
	function _getExchangeRateForRequestId($requestMasterId,$exchangeType='TRAN_MASTER')
	{
		global $CFG;
		
		$_AcurrencyInfo = $this->_staticData("_getExchangeRateForRequestId",$requestMasterId."_".$exchangeType);
		if($_AcurrencyInfo !== false)
			return $_AcurrencyInfo;
				
		$exchangeRate=0;			
		if($exchangeType=='TRAN_MASTER')
		{
			$lastTransactionId= $this->_getLastTransactionMasterId($requestMasterId);	
			$sqlGetExchangeRate="SELECT
								exchange_rate
							 FROM
								".$CFG['db']['tbl']['transaction_master']."
							 WHERE
								transaction_id ='".$lastTransactionId."'";
			if(DB::isError($resultOfExchangeRate=$this->_Oconnection->query($sqlGetExchangeRate)))
			{
				fileWrite($sqlGetExchangeRate,"SqlError","a+");
				return false;
			}
			if($resultOfExchangeRate->numRows() >0)
			{
				$rowOfExchangeRate=$resultOfExchangeRate->fetchRow(DB_FETCHMODE_ASSOC);
				$exchangeRate=$rowOfExchangeRate['exchange_rate'];
			}				
		}
		elseif($exchangeType=='PAY_MASTER')
		{
			$airlinesRequestId= $this->_getAirlineRequestId($requestMasterId);
			$this->_AstatusDetails = $this->_getStatusDetails('PR');			
			$sqlGetExchangeRate="SELECT
								exchange_rate
							 FROM
								".$CFG['db']['tbl']['payment_master']."
							 WHERE
								airlines_request_id ='".$airlinesRequestId."'
								AND payment_status != ".$this->_AstatusDetails['status_id'];
			if(DB::isError($resultOfExchangeRate=$this->_Oconnection->query($sqlGetExchangeRate)))
			{
				fileWrite($sqlGetExchangeRate,"SqlError","a+");
				return false;
			}
			if($resultOfExchangeRate->numRows() >0)
			{
				$rowOfExchangeRate=$resultOfExchangeRate->fetchRow(DB_FETCHMODE_ASSOC);
				$exchangeRate=$rowOfExchangeRate['exchange_rate'];
			}			
		}
		else
		{	
			$sqlGetUserCurrency="SELECT
								user_currency
							 FROM
								".$CFG['db']['tbl']['request_master']."
							 WHERE
								request_master_id ='".$requestMasterId."'";
			if(DB::isError($resultOfUserCurrency=$this->_Oconnection->query($sqlGetUserCurrency)))
			{
				fileWrite($sqlGetUserCurrency,"SqlError","a+");
				return false;
			}
			if($resultOfUserCurrency->numRows() >0)
			{
				$rowOfUserCurrency=$resultOfUserCurrency->fetchRow(DB_FETCHMODE_ASSOC);
				$userCurrency=$rowOfUserCurrency['user_currency'];
			}			
			$sqlGetExchangeRate="SELECT
								exchange_rate
							 FROM
								".$CFG['db']['tbl']['currency_details']."
							 WHERE
								currency_type ='".$userCurrency."'";
			if(DB::isError($resultOfExchangeRate=$this->_Oconnection->query($sqlGetExchangeRate)))
			{
				fileWrite($sqlGetExchangeRate,"SqlError","a+");
				return false;
			}
			if($resultOfExchangeRate->numRows() >0)
			{
				$rowOfExchangeRate=$resultOfExchangeRate->fetchRow(DB_FETCHMODE_ASSOC);
				$exchangeRate=$rowOfExchangeRate['exchange_rate'];
			}	
		}
		$this->_staticData("_getExchangeRateForRequestId",$requestMasterId."_".$exchangeType,$exchangeRate);
		return $exchangeRate;		
	}
	function _dateDifference($startDate,$endDate)
	{
		$difference=array();
		if($startDate!='' && $endDate!='')
		{
			$startDateStr=strtotime($startDate);
			$endDateStr=strtotime($endDate);
			$differanceStr=($endDateStr-$startDateStr);
			$difference['days']=$differanceStr/(60*60*24);
			$difference['hours']=$differanceStr/(60*60);
			$difference['minutes']=$differanceStr/60;
			$difference['seconds']=$differanceStr;
		}
		return $difference;
		
	}
	function _getSubmittedPassengerTotal($requestMasterId)
	{
		global $CFG;
		$airlineRequestId=$this->_getAirlineRequestId($requestMasterId);
		$_SremoveDummyRows='';
		//For not considering dummy rows
		if($CFG['nameUpdate']['insertDummyRowsForSeatSelection'] == 'Y' || $CFG['site']['doubleBilling']['status'] == 'Y')
			$_SremoveDummyRows = " AND additional_details NOT LIKE '%insertedDummyRow\":\"Y%'";
		$sqlSelectSubmitedPasseger="SELECT
								count(passenger_id) as submittedPassengers 
						    FROM 
								".$CFG['db']['tbl']['passenger_details']." 
						    WHERE 
								airlines_request_id='".$airlineRequestId."'".$_SremoveDummyRows;


			if(DB::isError($resultSelectSubmitedPasseger=$this->_Oconnection->query($sqlSelectSubmitedPasseger)))
			{
				fileWrite($sqlSelectSubmitedPasseger,"SqlError","a+");
				return false;
			}
			if($resultSelectSubmitedPasseger->numRows() > 0)
			{
				$rowSelectSubmitedPasseger=$resultSelectSubmitedPasseger->fetchRow(DB_FETCHMODE_ASSOC);
				$submitedPaxCount=$rowSelectSubmitedPasseger['submittedPassengers'];
				return 	$submitedPaxCount;			
			}
			else
			{
				return 0;				
			}
	}
	function _getConfirmedPaxCount($requestMasterId)
	{
		global $CFG;


		$totalPaxArray=array();
		
		$totalPaxArray['noOfAdult']=0;
		$totalPaxArray['noOfChild']=0;
		$totalPaxArray['noOfInfant']=0;
		$totalPaxArray['noOfAdultChild']=0;
		$totalPaxArray['noOfPax']=0;

		$sqlSelectAirlinesRequestId="SELECT
							airlines_request_id
					     FROM
							".$CFG['db']['tbl']['airlines_request_mapping']."
					     WHERE
							request_master_id='".$requestMasterId."'";

		if(DB::isError($resultSelectAirlinesRequestId=$this->_Oconnection->query($sqlSelectAirlinesRequestId)))
		{
			fileWrite($sqlSelectAirlinesRequestId,"SqlError","a+");
			return false;
		}
	
		if($resultSelectAirlinesRequestId->numRows() >0)
		{
			$rowSelectAirlinesRequestId=$resultSelectAirlinesRequestId->fetchRow(DB_FETCHMODE_ASSOC);

			$airlinesRequestId=$rowSelectAirlinesRequestId['airlines_request_id'];

			$sqlSelectTransactionMasterId="SELECT
								transaction_id
						       FROM
								".$CFG['db']['tbl']['transaction_master']."
						       WHERE
								airlines_request_id='".$airlinesRequestId."'
								ORDER BY transaction_id DESC LIMIT 1";

			if(DB::isError($resultSelectTransactionMasterId=$this->_Oconnection->query($sqlSelectTransactionMasterId)))
			{
				fileWrite($sqlSelectTransactionMasterId,"SqlError","a+");
				return false;
			}
	
			if($resultSelectTransactionMasterId->numRows() >0)
			{
				$rowSelectTransactionMasterId=$resultSelectTransactionMasterId->fetchRow(DB_FETCHMODE_ASSOC);
				$transactionMasterId=$rowSelectTransactionMasterId['transaction_id'];
			}
		

			$sqlSelectRequestApprovedFlightDetails="SELECT
									rafd.request_approved_flight_id,
									rafd.base_fare,
									rafd.tax,
									rafd.fare_passenger,
									rafd.child_base_fare,
									rafd.child_tax,
									rafd.infant_base_fare,
									rafd.infant_tax,
									rafd.baggauge_fare,
									rafd.meals_fare,
									srd.series_request_id,
									srd.number_of_adult,
									srd.number_of_child,
									srd.number_of_infant
								FROM
									".$CFG['db']['tbl']['request_approved_flight_details']." rafd,
									".$CFG['db']['tbl']['series_request_details']." srd
								WHERE	
									rafd.airlines_request_id='".$airlinesRequestId."'
									AND rafd.transaction_master_id='".$transactionMasterId."'
									AND rafd.accepted_flight_status='Y'
									AND rafd.series_request_id=srd.series_request_id";

			if(DB::isError($resultSelectRequestApprovedFlightDetails=$this->_Oconnection->query($sqlSelectRequestApprovedFlightDetails)))
			{
				fileWrite($sqlSelectRequestApprovedFlightDetails,"SqlError","a+");
				return false;
			}
	
			if($resultSelectRequestApprovedFlightDetails->numRows() >0)
			{
				while($rowSelectRequestApprovedFlightDetails=$resultSelectRequestApprovedFlightDetails->fetchRow(DB_FETCHMODE_ASSOC))
				{
					$noOfAdult=$rowSelectRequestApprovedFlightDetails['number_of_adult'];
					$noOfChild=$rowSelectRequestApprovedFlightDetails['number_of_child'];
					$noOfInfant=$rowSelectRequestApprovedFlightDetails['number_of_infant'];

					$totalPaxArray['noOfAdult']+=$noOfAdult;
					$totalPaxArray['noOfChild']+=$noOfChild;
					$totalPaxArray['noOfInfant']+=$noOfInfant;
					$totalPaxArray['noOfAdultChild']+=$noOfAdult+$noOfChild;
					$totalPaxArray['noOfPax']+=$noOfAdult+$noOfChild+$noOfInfant;
				}
			}
		}
		
		return $totalPaxArray;
	}
	/*
	Author :M.nivetha
	Desc   :To get the foc pax details for the request
	Date   :25-05-2021
	*/
	function _getFocPaxDetails($_IairlineRequestId,$_Spnr='')
	{
		if(!empty($_IairlineRequestId))
		{
			global $CFG;
			$selectFocSql="SELECT
								aes_decrypt(first_name,hex('infiniti')) as first_name,
								aes_decrypt(last_name,hex('infiniti'))as last_name,
								name_number,
								passenger_type
							FROM
								".$CFG['db']['tbl']['passenger_details']." 
							WHERE
							foc_status='Y' and pnr='".$_Spnr."' and  airlines_request_id=".$_IairlineRequestId." ";
			if(DB::isError($result=$this->_Oconnection->query($selectFocSql)))
			{
				fileWrite($selectFocSql,'SqlError','a+');
				return false;
			}
			$_AgetPaxType = array();
			if($result->numRows()>0)
			{	
					while($_Arow = $result->fetchRow(DB_FETCHMODE_ASSOC)){
					$_AgetPaxType['pax_type'][] = $_Arow['passenger_type'];
				}
			}
			$adtFocCount=0;
			$chdFocCount=0;
			foreach ($_AgetPaxType['pax_type'] as $key => $value) {
				if($_AgetPaxType['pax_type'][$key]=='Adult')
					$adtFocCount++;
				if($_AgetPaxType['pax_type'][$key]=='Child')
					$chdFocCount++;
				$_AgetPaxType['adtFocCount']=$adtFocCount;
				$_AgetPaxType['chdFocCount']=$chdFocCount;

			}
			return $_AgetPaxType;
		}
	}
	
	/*****
	    *Author     	: Nivetha M
	    *Created on 	: 21-02-2023
	    *Parameter      : request master id and pnr
	    *Description    : This function return adp pax ID ,passenger id against a pnr
	    *return         : Array
	******/
	function _getADPPaxId($_Spnr)
	{
		global $CFG;
		$_ApaxInfo=array();
		#To get adp pax details based  on passenger details
		fileRequire("dataModels/class.passengerDetails.php");
		$this->_OpassengerDetails = new passengerDetails();
		$this->_OpassengerDetails->_Oconnection=$this->_Oconnection;
		$this->_OpassengerDetails->_Spnr=$_Spnr;
		$this->_ApassengerDetails = $this->_OpassengerDetails->_selectPassengerDetails();
		foreach ($this->_ApassengerDetails as $key => $value) 
		{
			if(!empty($value['additional_details']))
				$_AaddtionalDetails=json_decode($value['additional_details'],1);
			#To get passenger id for  ADP pax details only 
			if(isset($_AaddtionalDetails['externalPax']) && $_AaddtionalDetails['externalPax']=='Y')
			{
				$_ApaxInfo['passengerId'][]=$value['passenger_id'];
				$_ApaxInfo['adpPaxReferenceId'][]=$_AaddtionalDetails['externalReferenceId'];
				$_ApaxInfo['PNR']=$value['pnr'];
			}
		}
		fileWrite('_ApaxInfo=>'.print_r($_ApaxInfo,1),"ADPPaxInfo","a+");
		return $_ApaxInfo;
	}

	/*****
	    *Author     	: Dhamu G
	    *Created on 	: 06-04-2023
	    *Parameter      : request master id and pnr
	    *Description    : This function return package informations available in package_details table against a pnr
	    *return         : Array
	******/
	function _getADPPackageInfo($_Spnr,$_IrequestMasterId)
	{
		global $CFG;		
		$_ApackageDetails = array();
		#requiring datamodel file
		fileRequire("dataModels/class.pnrBlockingDetails.php");
		$_ApnrBlockingDetails=new pnrBlockingDetails();
		$_ApnrBlockingDetails->_Oconnection=$this->_Oconnection;
		$_ApnrBlockingDetails->_IrequestMasterId=$_IrequestMasterId;
		$_ApnrBlockingDetails->_Spnr=$_Spnr;

		$_ApnrBlockingResult=$_ApnrBlockingDetails->_selectPnrBlockingDetails();		
		#To check adp pax details from package_details
		if(!empty($_ApnrBlockingResult)){
			$sqlPackageDetails="SELECT
							*
						FROM
							".$CFG['db']['tbl']['package_details']."
						WHERE
							pnr_blocking_id=".$_ApnrBlockingResult[0]['pnr_blocking_id']." 
							AND status='Y';";

			$_ApackageDetails=$this->_executeQuery($sqlPackageDetails);
		}
		fileWrite('_ApackageDetails=>'.print_r($_ApackageDetails,1),"ADPPaxInfo","a+");
		return $_ApackageDetails;
	}

	/*****
	    *Author     	: Nivetha M
	    *Created on 	: 21-02-2023
	    *Parameter      : request master id and pnr
	    *Description    : This function return adp pax details ticket info against a pnr
	    *return         : Array
		*modified		: 06-04-2023
	******/
	function _getADPPaxTicketDetails($_Spnr,$_IrequestMasterId)
	{
		global $CFG;
		$_AticketingInfoForAdpPax=array();
		#getting package details for input pnr and request masterid
		$_ApackageDetails = $this->_getADPPackageInfo($_Spnr,$_IrequestMasterId);
		#checking package information is available or not
		if(!empty($_ApackageDetails))
		{
			$_ApassengerIds=$this->_getADPPaxId($_Spnr);
			filewrite(print_r($_ApassengerIds,1),'filename','a+');
			#allow to proceed only passenger id present
			if(!empty($_ApassengerIds)){
				#Frame query to get the ticket number with refernce of  adp pax reference id
				$sqlADP="SELECT 
						pd.passenger_id,
						pd.name_number,
						ppm.pnr_id,
						ppm.ticketing_id,
						pd.additional_details,
						td.ticket_number						
					FROM 
						".$CFG['db']['tbl']['passenger_details']." pd
					INNER JOIN 
						".$CFG['db']['tbl']['passenger_pnr_mapping']." ppm
						ON pd.passenger_id=ppm.passenger_id
					LEFT JOIN ".
						$CFG['db']['tbl']['ticketing_details']." td
						ON ppm.ticketing_id=td.ticketing_id
					WHERE
						pnr='".$_Spnr."' AND ppm.ticketing_id>0 AND pd.passenger_id IN (".implode(',',$_ApassengerIds['passengerId']).")";

				fileWrite('sqlADP=>'.print_r($sqlADP,1),"ADPPaxInfo","a+");
				$_AticketingInfoForAdpPax=$this->_executeQuery($sqlADP);
			}			
			fileWrite("_AticketingInfoForAdpPax=>".print_r($_AticketingInfoForAdpPax,1),"ADPPaxInfo","a+");
			return $_AticketingInfoForAdpPax;
		}
	}

	function _getPaymentStatusValidity($_IairlineRequestId,$_Spnr)
	{
		global $CFG;
		$currentDate=$this->_getUTCDateValue();
		$sqlSelectPaymentValidityDate="SELECT 
												airlines_request_id,payment_percentage
										FROM
												".$CFG['db']['tbl']['payment_master']."	pm,
												".$CFG['db']['tbl']['pnr_payment_details']." ppd
										WHERE
												pm.payment_master_id=ppd.payment_master_id AND
												ppd.payment_status='PENDING' AND 
												pm.airlines_request_id='".$_IairlineRequestId."' AND
												ppd.pnr_payment_validity_date <='".$currentDate."'
										ORDER BY 
												pm.payment_master_id desc limit 1
										";
		if(DB::isError($result=$this->_Oconnection->query($sqlSelectPaymentValidityDate)))
		{
			fileWrite($sqlSelectPaymentValidityDate,'SqlError','a+');
			return false;
		}
		
		$countLoop=$result->numRows();
		return $countLoop;
	}
	function _fetchPolicySalesPromoMatrix($givenPolicyArray)
	{
		global $CFG;

		$returnArray=array();
		$policyMasterValueArray=array();

		/*Anboli M - To check IPF for sales promo policy*/
		fileRequire("classes/class.specialFareTypes.php");
		$_OspecialFares = new specialFareTypes();
		$_OspecialFares->_Oconnection = $this->_Oconnection;
		$specialFares = $_OspecialFares->_getSpecialFareTypes($givenPolicyArray['request_master_id']);
		if(isset($CFG['site']['specialFareTypes']) && $CFG['site']['specialFareTypes']['status']=='Y' && !empty($specialFares))
		{
			//To redirect to get the special fare type input
			
			$_OspecialFareType = specialFareTypes::_createObject('specialFareTypes',$this->_Oconnection,$this->_Osmarty);

			/*Assign the special fare types to get policy*/
			$_AspecialFareType = array();
			$_AspecialFareType = $specialFares;

			$_IrequestMasterId = $givenPolicyArray['request_master_id'];
			$returnArray = $_OspecialFareType->_callFarePolicySpecialFareTypes($_IrequestMasterId,$givenPolicyArray,$_AspecialFareType);
			specialFareTypes::_destroyObject($_OspecialFareType);

		}
		else
		{
			$sqlSelectPolicyMaster="SELECT
							sales_promo_policy_id,
							policy_name,
							sales_promo_matrix_id,
							priority,
							created_date
						FROM
							".$CFG['db']['tbl']['sales_promo_policy_master']."
						WHERE
							active_status='Y'
							AND date_format(start_date,'%Y-%m-%d') <= date('".$givenPolicyArray['policyRequestedDate']."')
							AND date_format(end_date,'%Y-%m-%d') >= date('".$givenPolicyArray['policyRequestedDate']."')";

			if(DB::isError($resultSelectPolicyMaster=$this->_Oconnection->query($sqlSelectPolicyMaster)))
			{
				fileWrite($sqlSelectPolicyMaster,"SqlError","a+");
				return false;
			}

			if($resultSelectPolicyMaster->numRows() > 0)
			{
				while($rowSelectPolicyMaster=$resultSelectPolicyMaster->fetchRow(DB_FETCHMODE_ASSOC))
				{
					$sqlSelectPolicyDetails="SELECT
									pd.sales_promo_policy_details_id,
									pd.sales_promo_policy_id,
									pd.criteria_id,
									pd.loop_value,
									cm.criteria_name,
									cm.criteria_type,
									cm.criteria_logical_id,
									pd.operator_id,
									om.operator_name,
									om.logical_value,
									om.operator_type,
									pd.policy_value
								 FROM
									".$CFG['db']['tbl']['sales_promo_policy_details']." pd,
									".$CFG['db']['tbl']['sales_promo_criteria_master']." cm,
									".$CFG['db']['tbl']['operator_master']." om
								 WHERE
									pd.sales_promo_policy_id='".$rowSelectPolicyMaster['sales_promo_policy_id']."'
									AND pd.criteria_id=cm.criteria_id
									AND pd.operator_id=om.operator_id";

					if(DB::isError($resultSelectPolicyDetails=$this->_Oconnection->query($sqlSelectPolicyDetails)))
					{
						fileWrite($sqlSelectPolicyDetails,"SqlError","a+");
						return false;
					}

					$resultValue=0;
					$stringToExecute="";
					$andCondition="";

					$totalPolicyDetailsArray=array();
					$sourceValueArray=array();
					$destinationValueArray=array();
					$loginIdValueArray=array();
					$departureDateValueArray=array();
					$flightNumberValueArray=array();
					$countryValueArray=array();
					$totalPolicyDetailsArray=array();

					if($resultSelectPolicyDetails->numRows() > 0)
					{
						while($rowSelectPolicyDetails=$resultSelectPolicyDetails->fetchRow(DB_FETCHMODE_ASSOC))
						{
							if(in_array(strtoupper($rowSelectPolicyDetails['criteria_logical_id']),array('NEGOTIATION','OVERRIDEDISCOUNT')))
							{
								$rowSelectPolicyMaster[$rowSelectPolicyDetails['criteria_logical_id']] = $rowSelectPolicyDetails['policy_value'];
								continue;
							}
								
							$totalPolicyDetailsArray[$rowSelectPolicyDetails['criteria_logical_id']][]=$rowSelectPolicyDetails;
							if($rowSelectPolicyDetails['criteria_logical_id']=="source")
							{
								$sourceValueArray[]=$rowSelectPolicyDetails;
							}

							if($rowSelectPolicyDetails['criteria_logical_id']=="destination")
							{
								$destinationValueArray[]=$rowSelectPolicyDetails;
							}
					
							if($rowSelectPolicyDetails['criteria_logical_id']=="loginId")
							{
								$loginIdValueArray[]=$rowSelectPolicyDetails;
							}
							
							if($rowSelectPolicyDetails['criteria_logical_id']=="departureDate")
							{
								$departureDateValueArray[]=$rowSelectPolicyDetails;
							}
				
							if($rowSelectPolicyDetails['criteria_logical_id']=="flightNumber")
							{
								$flightNumberValueArray[]=$rowSelectPolicyDetails;
							}
							if($rowSelectPolicyDetails['criteria_logical_id']=="pointOfSale")
							{
								$countryValueArray[]=$rowSelectPolicyDetails;
							}
							
							if($rowSelectPolicyDetails['criteria_logical_id']!="source" && $rowSelectPolicyDetails['criteria_logical_id']!="destination" && $rowSelectPolicyDetails['criteria_logical_id']!="loginId" &&  $rowSelectPolicyDetails['criteria_logical_id']!="departureDate" &&  $rowSelectPolicyDetails['criteria_logical_id']!="flightNumber" &&  $rowSelectPolicyDetails['criteria_logical_id']!="pointOfSale")
							{
							
								if($rowSelectPolicyDetails['criteria_type']=="S")
								{
									$stringToExecute=$stringToExecute.$andCondition."( strtoupper('".$givenPolicyArray[$rowSelectPolicyDetails['criteria_logical_id']]."') ".$rowSelectPolicyDetails['logical_value']." strtoupper('".$rowSelectPolicyDetails['policy_value']."') )";
								}
							
								if($rowSelectPolicyDetails['criteria_type']=="D" && $rowSelectPolicyDetails['logical_value']=="BTWN")
								{
									$valueArray=explode("@%@",$rowSelectPolicyDetails['policy_value']);

									$stringToExecute=$stringToExecute.$andCondition."( strtotime('".$givenPolicyArray[$rowSelectPolicyDetails['criteria_logical_id']]."') >= strtotime('".$valueArray[0]."') && strtotime('".$givenPolicyArray[$rowSelectPolicyDetails['criteria_logical_id']]."') <= strtotime('".$valueArray[1]."') )";

								}
								if($rowSelectPolicyDetails['criteria_type']=="D" && $rowSelectPolicyDetails['logical_value']!="BTWN")
								{
									$stringToExecute=$stringToExecute.$andCondition."( strtotime('".$givenPolicyArray[$rowSelectPolicyDetails['criteria_logical_id']]."') ".$rowSelectPolicyDetails['logical_value']." strtotime('".$rowSelectPolicyDetails['policy_value']."') )";
								}
							

								if($rowSelectPolicyDetails['criteria_type']=="N" && $rowSelectPolicyDetails['logical_value']=="BTWN")
								{
									$valueArray=explode("@%@",$rowSelectPolicyDetails['policy_value']);

									$stringToExecute=$stringToExecute.$andCondition."( ".$givenPolicyArray[$rowSelectPolicyDetails['criteria_logical_id']]." >= ".$valueArray[0]." && ".$givenPolicyArray[$rowSelectPolicyDetails['criteria_logical_id']]." <= ".$valueArray[1]." )";

								}
								if($rowSelectPolicyDetails['criteria_type']=="N" && $rowSelectPolicyDetails['logical_value']!="BTWN")
								{
									$stringToExecute=$stringToExecute.$andCondition."( ".$givenPolicyArray[$rowSelectPolicyDetails['criteria_logical_id']]." ".$rowSelectPolicyDetails['logical_value']." ".$rowSelectPolicyDetails['policy_value']." )";
								}
							

								$andCondition=" && ";
							}
						}


						$sourceDestinationString="";
						$orCondition="";
						foreach($sourceValueArray as $sourceKey=>$sorceValue)
						{
							$sourceDestinationString=$sourceDestinationString.$orCondition."( strtoupper('".$givenPolicyArray[$sorceValue['criteria_logical_id']]."') ".$sorceValue['logical_value']." strtoupper('".$sorceValue['policy_value']."') ";

							foreach($destinationValueArray as $destinationKey=>$destinationValue)
							{
								if($sorceValue['loop_value']==$destinationValue['loop_value'])
								{
									$sourceDestinationString=$sourceDestinationString." &&  strtoupper('".$givenPolicyArray[$destinationValue['criteria_logical_id']]."') ".$destinationValue['logical_value']." strtoupper('".$destinationValue['policy_value']."') ";
								}
							}

							$sourceDestinationString=$sourceDestinationString." )";
							$orCondition=" || ";
						}			

						if($sourceDestinationString=="")
						{
							$orCondition="";
							foreach($destinationValueArray as $destinationKey=>$destinationValue)
							{
								
								$sourceDestinationString=$sourceDestinationString.$orCondition." ( strtoupper('".$givenPolicyArray[$destinationValue['criteria_logical_id']]."') ".$destinationValue['logical_value']." strtoupper('".$destinationValue['policy_value']."')  )";
								$orCondition=" || ";
							}						
						}

						if($sourceDestinationString!="")
						{
							if($stringToExecute!="")
								$stringToExecute="( ".$sourceDestinationString." ) && ".$stringToExecute;
							else
								$stringToExecute=$sourceDestinationString;
						}
						
						//loginId
						$loginIdString="";
						$orCondition="";
						foreach($loginIdValueArray as $loginIdKey=>$loginIdValue)
						{
							$loginIdString=$loginIdString.$orCondition." ( strtoupper('".$givenPolicyArray[$loginIdValue['criteria_logical_id']]."') ".$loginIdValue['logical_value']." strtoupper('".$loginIdValue['policy_value']."')  )";
								$orCondition=" || ";
							
						}
						if($loginIdString!="")
						{
							if($stringToExecute!="")
								$stringToExecute="( ".$loginIdString." ) && ".$stringToExecute;
							else
								$stringToExecute=$loginIdString;
						}
						
						//departureDate
						$departureDateString="";
						$orCondition="";
						
						foreach($departureDateValueArray as $departureDateKey=>$departureDateValue)
						{
							
							if($departureDateValue['criteria_type']=="D" && $departureDateValue['logical_value']=="BTWN")
							{
								$valueArray=explode("@%@",$departureDateValue['policy_value']);

								$departureDateString=$departureDateString.$orCondition."( strtotime('".$givenPolicyArray[$departureDateValue['criteria_logical_id']]."') >= strtotime('".$valueArray[0]."') && strtotime('".$givenPolicyArray[$departureDateValue['criteria_logical_id']]."') <= strtotime('".$valueArray[1]."') )";
								$orCondition=" || ";
							}
							else
							{
								$departureDateString=$departureDateString.$orCondition."(strtoupper('".$givenPolicyArray[$departureDateValue['criteria_logical_id']]."')".$departureDateValue['logical_value']."strtoupper('".$departureDateValue['policy_value']."'))";
								$orCondition=" || ";
							}
						}
						if($departureDateString!="")
						{
							if($stringToExecute!="")
								$stringToExecute="( ".$departureDateString." ) && ".$stringToExecute;
							else
								$stringToExecute=$departureDateString;
						}
						
						//flightNumber
						$flightNumberString="";
						$orCondition="";
							
						foreach($flightNumberValueArray as $flightNumberKey=>$flightNumberValue)
						{
							if($flightNumberValue['logical_value']=="BTWN")
							{
								$valueArray=explode("@%@",$flightNumberValue['policy_value']);
								$flightNumberString=$flightNumberString.$orCondition."(".$givenPolicyArray[$flightNumberValue['criteria_logical_id']].") >= (".$valueArray[0].") && (".$givenPolicyArray[$flightNumberValue['criteria_logical_id']].") <= (".$valueArray[1].")";
							}
							else
							{
								$flightNumberString=$flightNumberString.$orCondition."(strtoupper('".$givenPolicyArray[$flightNumberValue['criteria_logical_id']]."')".$flightNumberValue['logical_value']."strtoupper('".$flightNumberValue['policy_value']."'))";
							}
							$orCondition=" || ";
						}
						if($flightNumberString!="")
						{
							if($stringToExecute!="")
								$stringToExecute="( ".$flightNumberString." ) && ".$stringToExecute;
							else
								$stringToExecute=$flightNumberString;
						}
						
						//country
						$countryCodeString="";
						$orCondition="";
							
						foreach($countryValueArray as $countryKey=>$countryValue)
						{
							$countryCodeString=$countryCodeString.$orCondition."(strtoupper('".$givenPolicyArray[$countryValue['criteria_logical_id']]."')".$countryValue['logical_value']."strtoupper('".$countryValue['policy_value']."'))";
							$orCondition=" || ";
						}
						if($countryCodeString!="")
						{
							if($stringToExecute!="")
								$stringToExecute="( ".$countryCodeString." ) && ".$stringToExecute;
							else
								$stringToExecute=$countryCodeString;
						}
						
						if($stringToExecute!="")
						{
							$resultStringToEval="IF( ".$stringToExecute." ){".'$resultValue'."=1;}";
							fileWrite($resultStringToEval,"SALESPROMOSTRING","a+");// REM
							//
							eval($resultStringToEval);
							if($resultValue==1)
							{
								$policyMasterValueArray[]=$rowSelectPolicyMaster;
							}
						}

						
					}
				}
			}

			$minValue=0;

			if(count($policyMasterValueArray) > 0)
			{
				for($i=0;$i<count($policyMasterValueArray);$i++)
				{
					if($minValue==0 || $policyMasterValueArray[$i]['priority']<=$minValue)
					{
						$minValue=$policyMasterValueArray[$i]['priority'];
					}
				}
				$minIndex="";
				$appendString="";
				for($i=0;$i<count($policyMasterValueArray);$i++)
				{
					if($minValue==$policyMasterValueArray[$i]['priority'])
					{
						$minIndex.=$appendString.$i;
						$appendString=",";
					}
				}

				$explodeArray=explode(",",$minIndex);
				if(count($explodeArray) >0)
				{
					$fetchDiscountForPolicyArray=array();
					$moveIndex=0;
					for($i=0;$i<count($explodeArray);$i++)
					{
						if(is_array($policyMasterValueArray[$explodeArray[$i]]) && isset($policyMasterValueArray[$explodeArray[$i]]))
						{
							$fetchDiscountForPolicyArray[$moveIndex]=$policyMasterValueArray[$explodeArray[$i]];
							$fetchDiscountForPolicyArray[$moveIndex]['departureDate']=$givenPolicyArray['departureDate'];
							$fetchDiscountForPolicyArray[$moveIndex]['policyBookedLoadFactor']=$givenPolicyArray['policyBookedLoadFactor'];
							$fetchDiscountForPolicyArray[$moveIndex]['policyRequestMasterId']=$givenPolicyArray['policyRequestMasterId'];
							#$fetchDiscountForPolicyArray[$moveIndex]['policyCurrencyType']=$givenPolicyArray['policyCurrencyType'];
							$fetchDiscountForPolicyArray[$moveIndex]['policyCurrencyType']=$CFG['salesPromo']['salesPromoMatrixCurrencyType'];
							$fetchDiscountForPolicyArray[$moveIndex]['policyPaxCount']=$givenPolicyArray['policyPaxCount'];
							$moveIndex++;
						}
					}

					if(count($fetchDiscountForPolicyArray) > 0)
					{
						$returnDiscountArray=$this->_getSalesPromoMatrixValues($fetchDiscountForPolicyArray);
						if(count($returnDiscountArray) > 0)
							$returnArray=$returnDiscountArray;
					}
				}
			}
		}
		return $returnArray;
	}

	#calculating number of hours for days to departure
	function _getPNRDepartureHours($requestMasterId,$pnr)
	{
		/*Fetch airport code of the request*/
		$_SdepartAirportCode = $this->_getFirstOrigin($requestMasterId);
		/*Calculate current datetime based on the airport code timezone*/
		$_DairportCurrentDateTime = $this->_getAirportCodeCurrentTime($_SdepartAirportCode);
		$pnrDetailsArray = $this->_getPnrDetails($requestMasterId,$pnr);
		$pnrDepartureDateTime = $pnrDetailsArray[0]['flightDetails'][0]['departure_date'].' '.$pnrDetailsArray[0]['flightDetails'][0]['dep_time'].':00';
		$hourdiff = round((strtotime($pnrDepartureDateTime) - strtotime($_DairportCurrentDateTime))/3600, 1);
		return $hourdiff;
	}

	#check if ticketing is done for a PNR
	function _checkTicketingStatus($requestMasterId,$pnr)
	{
		global $CFG;
		$airlinesRequestId = $this->_getAirlineRequestId($requestMasterId);
		$givenPnrDetailsValue=$this->_getPnrInformation($pnr,$requestMasterId);
		$requestedPax = $givenPnrDetailsValue['pnrDetails']['no_of_adult']+$givenPnrDetailsValue['pnrDetails']['no_of_child']+$givenPnrDetailsValue['pnrDetails']['no_of_infant']+$givenPnrDetailsValue['pnrDetails']['no_of_foc'];
		//getting the ticketed passengers count
		$ticketedPax=$this->_getTicketedPassengersCount($pnr,$airlinesRequestId);
		if($requestedPax == $ticketedPax)
			return 'Y';
		else
			return 'N';	
	}
	
	/*
     * @Author      :A.Kaviyarasan
     * @Created Date: 05-03-2019
     * @Description :This function is used to fetch the count of ticket issued passenger details(converted as 		function from the root function _checkTicketingStatus).
     * @param       :pnr,airlinesRequestId
     * @return      :count(Integer)
     */
	
	function _getTicketedPassengersCount($_Spnr,$_IairlineRequestId='',$_SticketedBy='N')
	{
		global $CFG;
		$_SsqlQuery="SELECT 
					pd.pnr_id,
					td.ticketing_id 
				FROM 
					".$CFG['db']['tbl']['pnr_details']." pd,
					".$CFG['db']['tbl']['passenger_pnr_mapping']." ppm,
					".$CFG['db']['tbl']['ticketing_details']." td
				WHERE 
					pd.pnr_number='".$_Spnr."' AND
					ppm.pnr_id = pd.pnr_id AND
					td.ticketing_id = ppm.ticketing_id";
					
		if($_IairlineRequestId!='')
			$_SsqlQuery.=" AND pd.airlines_request_id = ".$_IairlineRequestId;	
		if(DB::isError($_Ores=$this->_Oconnection->query($_SsqlQuery)))
		{
			fileWrite($_SsqlQuery,'sqlError','a+');
			return false;
		}	
		if($_SticketedBy=='Y')
		{
			While($row=$_Ores->fetchRow())
			$_AticketingId=$row['ticketing_id'];
			return $_AticketingId;
		}				
		return $_Ores->numRows();
	}

	function _getSalesPromoMatrixValues($givenPolicyDetailsArray)
	{
		global $CFG;

		$currentDate=date('Y-m-d');
		$resultArray=array();
		foreach ($givenPolicyDetailsArray as $key => $value)
		{
			$departureDate=$givenPolicyDetailsArray[$key]['departureDate'];

			$daysToDeparture=strtotime($departureDate)-strtotime($currentDate);
			$daysToDeparture=floor($daysToDeparture/3600/24);

			$sqlSelectDiscountDetails="SELECT
								dm.sales_promo_matrix_id,
								dm.sales_promo_matrix_name,
								dm.sales_promo_matrix_type,
								dmp.sales_promo_mapping_id,
								dmp.days_to_departure,
								dmp.booked_load_factor
						  FROM
								".$CFG['db']['tbl']['sales_promo_matrix']." dm,
								".$CFG['db']['tbl']['sales_promo_mapping_details']." dmp
						  WHERE
								dm.sales_promo_matrix_id='".$givenPolicyDetailsArray[$key]['matrix_id']."'
								AND dm.sales_promo_matrix_id=dmp.sales_promo_matrix_id";
								
			if($CFG['salesPromo']['averageFareCalculation'] == 'Y')
			{
				$_SdaysToDepartureConditon = " AND (dmp.days_to_departure=(SELECT days_to_departure FROM ".$CFG['db']['tbl']['sales_promo_mapping_details']." WHERE sales_promo_matrix_id='".$givenPolicyDetailsArray[$key]['matrix_id']."' AND days_to_departure >='".$daysToDeparture."' order by days_to_departure limit 1) OR 
				dmp.days_to_departure=(SELECT days_to_departure FROM ".$CFG['db']['tbl']['sales_promo_mapping_details']." WHERE sales_promo_matrix_id='".$givenPolicyDetailsArray[$key]['matrix_id']."' AND days_to_departure <='".$daysToDeparture."' order by days_to_departure desc limit 1))";
				$_SbookedLoadCondition = " AND (dmp.booked_load_factor=(SELECT booked_load_factor FROM ".$CFG['db']['tbl']['sales_promo_mapping_details']." WHERE sales_promo_matrix_id='".$givenPolicyDetailsArray[$key]['matrix_id']."' AND booked_load_factor >='".$givenPolicyDetailsArray[$key]['policyBookedLoadFactor']."' order by booked_load_factor limit 1) OR 
				dmp.booked_load_factor=(SELECT booked_load_factor FROM ".$CFG['db']['tbl']['sales_promo_mapping_details']." WHERE sales_promo_matrix_id='".$givenPolicyDetailsArray[$key]['matrix_id']."' AND booked_load_factor <='".$givenPolicyDetailsArray[$key]['policyBookedLoadFactor']."' order by booked_load_factor desc limit 1))";
			}
			else
			{
				$_SdaysToDepartureConditon = " AND dmp.days_to_departure=(SELECT days_to_departure FROM ".$CFG['db']['tbl']['sales_promo_mapping_details']." WHERE sales_promo_matrix_id='".$givenPolicyDetailsArray[$key]['matrix_id']."' AND days_to_departure <='".$daysToDeparture."' order by days_to_departure desc limit 1)";
				$_SbookedLoadCondition = " AND dmp.booked_load_factor=(SELECT booked_load_factor FROM ".$CFG['db']['tbl']['sales_promo_mapping_details']." WHERE sales_promo_matrix_id='".$givenPolicyDetailsArray[$key]['matrix_id']."' AND booked_load_factor <='".$givenPolicyDetailsArray[$key]['policyBookedLoadFactor']."' order by booked_load_factor desc limit 1)";
			}
			$sqlSelectDiscountDetails .= $_SdaysToDepartureConditon.$_SbookedLoadCondition;
			if(DB::isError($resultSelectDiscountDetails=$this->_Oconnection->query($sqlSelectDiscountDetails)))
			{
				fileWrite($sqlSelectDiscountDetails,"SqlError","a+");
				return false;
			}

			if($resultSelectDiscountDetails->numRows() > 0)
			{
				$resultDiscountDetailsArray=array();
				$k=0;
				while($rowSelectDiscountDetails=$resultSelectDiscountDetails->fetchRow(DB_FETCHMODE_ASSOC))
				{
					$resultDiscountDetailsArray[$k]['sales_promo_matrix_id']=$rowSelectDiscountDetails['sales_promo_matrix_id'];
					$resultDiscountDetailsArray[$k]['sales_promo_matrix_name']=$rowSelectDiscountDetails['sales_promo_matrix_name'];
					$resultDiscountDetailsArray[$k]['sales_promo_matrix_type']=$rowSelectDiscountDetails['sales_promo_matrix_type'];
					$resultDiscountDetailsArray[$k]['sales_promo_mapping_id']=$rowSelectDiscountDetails['sales_promo_mapping_id'];
					$resultDiscountDetailsArray[$k]['days_to_departure']=$rowSelectDiscountDetails['days_to_departure'];
					$resultDiscountDetailsArray[$k]['booked_load_factor']=$rowSelectDiscountDetails['booked_load_factor'];

					$sqlSelectDiscountFareMapping="SELECT
										dfm.sales_promo_fare_id,
										dfm.group_size,
										dfm.discount_fare
								       FROM
										".$CFG['db']['tbl']['sales_promo_fare_mapping']." dfm
								       WHERE
										dfm.sales_promo_mapping_id='".$resultDiscountDetailsArray[$k]['sales_promo_mapping_id']."'";
					if($CFG['salesPromo']['averageFareCalculation'] == 'Y')
					{
						$_SgroupPaxCondition = " AND (dfm.group_size=(SELECT group_size FROM ".$CFG['db']['tbl']['sales_promo_fare_mapping']." WHERE sales_promo_mapping_id='".$resultDiscountDetailsArray[$k]['sales_promo_mapping_id']."' AND group_size>='".$givenPolicyDetailsArray[$key]['policyPaxCount']."' order by group_size limit 1) OR 
						dfm.group_size=(SELECT group_size FROM ".$CFG['db']['tbl']['sales_promo_fare_mapping']." WHERE sales_promo_mapping_id='".$resultDiscountDetailsArray[$k]['sales_promo_mapping_id']."' AND group_size<='".$givenPolicyDetailsArray[$key]['policyPaxCount']."' order by group_size desc limit 1))";
					}
					else
					{
						$_SgroupPaxCondition = " AND dfm.group_size=(SELECT group_size FROM ".$CFG['db']['tbl']['sales_promo_fare_mapping']." WHERE sales_promo_mapping_id='".$resultDiscountDetailsArray[$k]['sales_promo_mapping_id']."' AND group_size<='".$givenPolicyDetailsArray[$key]['policyPaxCount']."' order by group_size desc limit 1)";
					}
					$sqlSelectDiscountFareMapping .= $_SgroupPaxCondition; 

					if(DB::isError($resultSelectDiscountFareMapping=$this->_Oconnection->query($sqlSelectDiscountFareMapping)))
					{
						fileWrite($sqlSelectDiscountFareMapping,"SqlError","a+");
						return false;
					}

					if($resultSelectDiscountFareMapping->numRows() > 0)
					{
						$discountFareMappingArray=array();
						$indexX=0;
						while($rowSelectDiscountDetails=$resultSelectDiscountFareMapping->fetchRow(DB_FETCHMODE_ASSOC))
						{
							$discountFareMappingArray[$indexX]['discountFare']=$rowSelectDiscountDetails['discount_fare'];
							$discountFareMappingArray[$indexX]['groupSize']=$rowSelectDiscountDetails['group_size'];
							$indexX++;
						}
						if(count($discountFareMappingArray)==1)
						{
							$resultDiscountDetailsArray[$k]['dicountFare']=$discountFareMappingArray[0]['discountFare'];
						}
						else
						{
							/*if($discountFareMappingArray[0]['discountFare']>$discountFareMappingArray[1]['discountFare'])
							{
								$minGroupSizeValueDiscountValue=$discountFareMappingArray[1]['discountFare'];
								$maxGroupSizeValueDiscountValue=$discountFareMappingArray[0]['discountFare'];
							}
							if($discountFareMappingArray[0]['discountFare']<$discountFareMappingArray[1]['discountFare'])
							{
								$minGroupSizeValueDiscountValue=$discountFareMappingArray[0]['discountFare'];
								$maxGroupSizeValueDiscountValue=$discountFareMappingArray[1]['discountFare'];
							}*/

							if($discountFareMappingArray[0]['groupSize']>$discountFareMappingArray[1]['groupSize'])
							{
								$minGroupSizeValue=$discountFareMappingArray[1]['groupSize'];
								$maxGroupSizeValue=$discountFareMappingArray[0]['groupSize'];

								$minGroupSizeValueDiscountValue=$discountFareMappingArray[1]['discountFare'];
								$maxGroupSizeValueDiscountValue=$discountFareMappingArray[0]['discountFare'];
							}
							if($discountFareMappingArray[0]['groupSize']<$discountFareMappingArray[1]['groupSize'])
							{
								$minGroupSizeValue=$discountFareMappingArray[0]['groupSize'];
								$maxGroupSizeValue=$discountFareMappingArray[1]['groupSize'];

								$minGroupSizeValueDiscountValue=$discountFareMappingArray[0]['discountFare'];
								$maxGroupSizeValueDiscountValue=$discountFareMappingArray[1]['discountFare'];
							}

							$tempGroupSize=(($givenPolicyDetailsArray[$key]['policyPaxCount']-$minGroupSizeValue)/($maxGroupSizeValue-$minGroupSizeValue));
							$tempDiscountAmount=($tempGroupSize)*($maxGroupSizeValueDiscountValue-$minGroupSizeValueDiscountValue);

							//if($tempDiscountAmount<0)
								//$tempDiscountAmount=-($tempDiscountAmount);

							$netDiscountAmount=round(($minGroupSizeValueDiscountValue+$tempDiscountAmount),2);

							$resultDiscountDetailsArray[$k]['dicountFare']=$netDiscountAmount;
						}

					}

					$k++;
				}

				if(count($resultDiscountDetailsArray) > 0)
				{
					if($resultDiscountDetailsArray[0]['sales_promo_matrix_type'] == "BP" || $resultDiscountDetailsArray[0]['sales_promo_matrix_type'] == "TP")
						$displayDiscount="%";
					if($resultDiscountDetailsArray[0]['sales_promo_matrix_type'] == "BA" || $resultDiscountDetailsArray[0]['sales_promo_matrix_type'] == "TA")
						$displayDiscount=$givenPolicyDetailsArray[$key]['policyCurrencyType'];


					if(count($resultDiscountDetailsArray) ==1)
					{
						$resultArray[$key][0]['policyId']=$givenPolicyDetailsArray[$key]['policy_id'];
						$resultArray[$key][0]['matrixId']=$resultDiscountDetailsArray[0]['sales_promo_matrix_id'];
						$resultArray[$key][0]['matrixName']=$resultDiscountDetailsArray[0]['sales_promo_matrix_name'];
						$resultArray[$key][0]['matrixType']=$resultDiscountDetailsArray[0]['sales_promo_matrix_type'];
						$resultArray[$key][0]['dicountFare']=$resultDiscountDetailsArray[0]['dicountFare'];
						$resultArray[$key][0]['daysToDeparture']=$daysToDeparture;
						$resultArray[$key][0]['bookedLoadFactor']=$givenPolicyDetailsArray[$i]['policyBookedLoadFactor'];
						$resultArray[$key][0]['policyCurrencyType']=$givenPolicyDetailsArray[$i]['policyCurrencyType'];
						$resultArray[$key][0]['displayDiscount']=$displayDiscount;
						$resultArray[$key][0]['policyName']=$givenPolicyDetailsArray[$key]['policy_name'];;
					}
					else
					{						
						$bookedLaodArray=array();
						for($j=0;$j<count($resultDiscountDetailsArray);$j++)
						{
							$bookedLaodArray[$resultDiscountDetailsArray[$j]['booked_load_factor']][]=$resultDiscountDetailsArray[$j];
						}
						$bookedLoadWiseArray=array();
						
						foreach($bookedLaodArray as $bookedLaodKey=>$bookedLoadValue)
						{
							$bookedLoadWiseArray[$bookedLaodKey]['sales_promo_matrix_id']=$bookedLoadValue[0]['sales_promo_matrix_id'];
							$bookedLoadWiseArray[$bookedLaodKey]['sales_promo_matrix_name']=$bookedLoadValue[0]['sales_promo_matrix_name'];
							$bookedLoadWiseArray[$bookedLaodKey]['sales_promo_matrix_type']=$bookedLoadValue[0]['sales_promo_matrix_type'];

							if(count($bookedLoadValue)==1)
							{								
								$bookedLoadWiseArray[$bookedLaodKey]['returnDiscountFare']=$bookedLoadValue[0]['dicountFare'];
							}
							else
							{
								
								$minimumDaysToDeparture=0;
								$minimumDaysToDetartureValue=0;
								$maximumDaysToDeparture=0;
								$maximumDaysToDetartureValue=0;
								
								$minMaxArrayDaysToDepartureTemp=array();
								foreach($bookedLoadValue as $_IbookedKey=>$_AbookedValue)
								{
									$minMaxArrayDaysToDepartureTemp[]=$_AbookedValue['days_to_departure'];
								}
								$minimumDaysToDeparture=min($minMaxArrayDaysToDepartureTemp);
								$maximumDaysToDeparture=max($minMaxArrayDaysToDepartureTemp);
								
								foreach($bookedLoadValue as $_IbookedKey=>$_AbookedValue)
								{
									if($minimumDaysToDeparture==$_AbookedValue['days_to_departure'])
									{
										$minimumDaysToDeparture=$_AbookedValue['days_to_departure'];
										$minimumDaysToDetartureValue=$_AbookedValue['dicountFare'];
									}
									if($maximumDaysToDeparture==$_AbookedValue['days_to_departure'])
									{
										$maximumDaysToDeparture=$_AbookedValue['days_to_departure'];
										$maximumDaysToDetartureValue=$_AbookedValue['dicountFare'];
									}
								}
								$tempDaysToDeparture=(($daysToDeparture-$minimumDaysToDeparture)/($maximumDaysToDeparture-$minimumDaysToDeparture));
								$tempDiscountAmountForDaysToDeparture=($tempDaysToDeparture)*($maximumDaysToDetartureValue-$minimumDaysToDetartureValue);
								//if($tempDiscountAmountForDaysToDeparture<0)
									//$tempDiscountAmountForDaysToDeparture=-($tempDiscountAmountForDaysToDeparture);

								$netDiscountAmountForDaysToDeparture=round(($minimumDaysToDetartureValue+$tempDiscountAmountForDaysToDeparture),2);

								$bookedLoadWiseArray[$bookedLaodKey]['returnDiscountFare']=$netDiscountAmountForDaysToDeparture;
							}
						}
						if(count($bookedLoadWiseArray)==1)
						{
							foreach($bookedLoadWiseArray as $bookedLoadWiseKey=>$bookedLaodWiseValue)
							{
								$discountMatrixId=$bookedLaodWiseValue['sales_promo_matrix_id'];
								$discountMatrixName=$bookedLaodWiseValue['sales_promo_matrix_name'];
								$discountMatrixType=$bookedLaodWiseValue['sales_promo_matrix_type'];
								$netDiscountAmountForBookedLoad=$bookedLaodWiseValue['returnDiscountFare'];
							}
						}
						else
						{
							$minimumBookedLoad=0;
							$minimumBookedLoadValue=0;
							$maximumBookedLoad=0;
							$maximumBookedLoadValue=0;
							
							$minMaxArrayBookedLoadTemp=array();
								
							foreach($bookedLoadWiseArray as $bookedLoadWiseKey=>$bookedLaodWiseValue)
							{
								$minMaxArrayBookedLoadTemp[]=$bookedLoadWiseKey;
							}
							$minimumBookedLoad=min($minMaxArrayBookedLoadTemp);
							$maximumBookedLoad=max($minMaxArrayBookedLoadTemp);

							foreach($bookedLoadWiseArray as $bookedLoadWiseKey=>$bookedLaodWiseValue)
							{
								$discountMatrixId=$bookedLaodWiseValue['sales_promo_matrix_id'];
								$discountMatrixName=$bookedLaodWiseValue['sales_promo_matrix_name'];
								$discountMatrixType=$bookedLaodWiseValue['sales_promo_matrix_type'];

								if($minimumBookedLoad==$bookedLoadWiseKey)
								{
									$minimumBookedLoad=$bookedLoadWiseKey;
									$minimumBookedLoadValue=$bookedLaodWiseValue['returnDiscountFare'];
								}
	
								if($maximumBookedLoad==$bookedLoadWiseKey)
								{
									$maximumBookedLoad=$bookedLoadWiseKey;
									$maximumBookedLoadValue=$bookedLaodWiseValue['returnDiscountFare'];
								}
							}
						
							$tempBookedLoadValue=(($givenPolicyDetailsArray[$i]['policyBookedLoadFactor']-$minimumBookedLoad)/($maximumBookedLoad-$minimumBookedLoad));
							$tempDiscountAmountForBookedLoad=($tempBookedLoadValue)*($maximumBookedLoadValue-$minimumBookedLoadValue);
							//if($tempDiscountAmountForBookedLoad<0)
								//$tempDiscountAmountForBookedLoad=-($tempDiscountAmountForBookedLoad);

							$netDiscountAmountForBookedLoad=round(($minimumBookedLoadValue+$tempDiscountAmountForBookedLoad),2);
						}
						$resultArray[$key][0]['policyId']=$givenPolicyDetailsArray[$key]['policy_id'];;
						$resultArray[$key][0]['matrixId']=$discountMatrixId;
						$resultArray[$key][0]['matrixName']=$discountMatrixName;
						$resultArray[$key][0]['matrixType']=$discountMatrixType;
						$resultArray[$key][0]['dicountFare']=$netDiscountAmountForBookedLoad;
						$resultArray[$key][0]['daysToDeparture']=$daysToDeparture;
						$resultArray[$key][0]['bookedLoadFactor']=$givenPolicyDetailsArray[$key]['policyBookedLoadFactor'];
						$resultArray[$key][0]['policyCurrencyType']=$givenPolicyDetailsArray[$key]['policyCurrencyType'];
						$resultArray[$key][0]['displayDiscount']=$displayDiscount;
						$resultArray[$key][0]['policyName']=$givenPolicyDetailsArray[$key]['policy_name'];;
					}
					
					if(isset($givenPolicyDetailsArray[$key]['negotiation']))
						$resultArray[$key][0]['negotiation']=$givenPolicyDetailsArray[$i]['negotiation'];
					if(isset($givenPolicyDetailsArray[$key]['overrideDiscount']))
						$resultArray[$key][0]['overrideDiscount']=$givenPolicyDetailsArray[$i]['overrideDiscount'];
				
				}
			}
		
		}
		if(count($resultArray)==1)
			return $resultArray;

		$percentageDiscountArray=array();
		$absoluteDiscountArray=array();

		if(count($resultArray)>1)
		{
			foreach($resultArray as $key => $value){
				for($k=0;$k<count($resultArray[$key]);$k++)
				{
					$tempArray=array();
					if($resultArray[$key][$k]['matrixType']=="BP" || $resultArray[$key][$k]['matrixType']=="TP")
					{
						$tempArray['index']=$k;
						$tempArray['dicountFare']=$resultArray[$key][$k]['dicountFare'];
						$percentageDiscountArray[]=$tempArray;
					}
					if($resultArray[$key][$k]['matrixType']=="BA" || $resultArray[$key][$k]['matrixType']=="TA")
					{
						$tempArray['index']=$k;
						$tempArray['dicountFare']=$resultArray[$key][$k]['dicountFare'];
						$absoluteDiscountArray[]=$tempArray;
					}
				}
			}
		}

		$returnValueType=$CFG['salesPromoPolicy']['returnValueType'];

		if(count($percentageDiscountArray)>0)
		{
			$minDiscountFarePercentage=0;
			$minDiscountFareIndex="";

			foreach($percentageDiscountArray as $key=>$value)
			{

				if($returnValueType=="MIN")
				{
					if($minDiscountFarePercentage==0 || $value['dicountFare']<=$minDiscountFarePercentage)
					{
						$minDiscountFarePercentage=$value['dicountFare'];
						$minDiscountFareIndex=$value['index'];
					}
				}
				if($returnValueType=="MAX")
				{
					if($minDiscountFarePercentage==0 || $value['dicountFare']>=$minDiscountFarePercentage)
					{
						$minDiscountFarePercentage=$value['dicountFare'];
						$minDiscountFareIndex=$value['index'];
					}
				}
			}

			$newReturnArray=array();
			$newReturnArray[0]=$resultArray[$minDiscountFareIndex];
		}

		if(count($absoluteDiscountArray)>0 && count($percentageDiscountArray)==0)
		{
			$minDiscountFareAbsolute=0;
			$minDiscountFareAbsoluteIndex="";

			foreach($absoluteDiscountArray as $key=>$value)
			{
				if($returnValueType=="MIN")
				{
					if($minDiscountFareAbsolute==0 || $value['dicountFare']<=$minDiscountFareAbsolute)
					{
						$minDiscountFareAbsolute=$value['dicountFare'];
						$minDiscountFareAbsoluteIndex=$value['index'];
					}
				}
				if($returnValueType=="MAX")
				{
					if($minDiscountFareAbsolute==0 || $value['dicountFare']>=$minDiscountFareAbsolute)
					{
						$minDiscountFareAbsolute=$value['dicountFare'];
						$minDiscountFareAbsoluteIndex=$value['index'];
					}
				}
			}
			$newReturnArray=array();
			$newReturnArray[0]=$resultArray[$minDiscountFareAbsoluteIndex];
		}
		return $newReturnArray;
	}
	function _getUserType($emailId='',$_userId=0,$_IrequestMasterId=0)
	{
		global $CFG;
		$_SuserTypeId = '';
		$tableJoin = '';
		$condition = '';
		$_Svariable = 'user_type';
		if($_IrequestMasterId!=0)
		{
			$_Svariable .= '_'.$_IrequestMasterId;
			$tableJoin = "INNER JOIN
								".$CFG['db']['tbl']['request_master']." rm
							ON
								rm.user_id = ud.user_id ";
			
			$condition = " AND rm.request_master_id = ".$_IrequestMasterId;
		}
		if($_userId!=0)
		{
			$_Svariable .= '_'.$_userId;
			$condition .= " AND ud.user_id = ".$_userId;
		}
		if($emailId!='')
		{
			$_Svariable .= '_'.$emailId;
			$condition .= " AND ".encrypt::_decrypt('ud.email_id')." = '".$emailId."'";
		}
		$_IuserType = $this->_staticData("_getUserType",$_Svariable);
		if($_IuserType !== false)
			return $_IuserType;
			
		$sql = "SELECT
					cd.corporate_type_id
				FROM
					".$CFG['db']['tbl']['corporate_details']." cd
				INNER JOIN
					".$CFG['db']['tbl']['user_details']." ud
				ON
					cd.corporate_id = ud.corporate_id
					".$tableJoin."
				WHERE
					1 ".$condition."
				LIMIT 1";
		
		$result = $this->_executeQuery($sql);
		if(!empty($result) && isset($result[0]['corporate_type_id']) && $result[0]['corporate_type_id']!=0)
			$_SuserTypeId = $result[0]['corporate_type_id'];
		$this->_staticData("_getUserType",$_Svariable,$_SuserTypeId);
		return $_SuserTypeId;
	}
	function _getTransactionFee($requestMasterId)
	{
		global $CFG;
		$sql = "SELECT
					transaction_fee
				FROM
					".$CFG['db']['tbl']['transaction_master']." tm,
					".$CFG['db']['tbl']['request_master']." rm
				WHERE
					tm.transaction_id = rm.fare_acceptance_transaction_id AND
					rm.request_master_id = '".$requestMasterId."'
				ORDER BY
					tm.transaction_id DESC
				LIMIT 1";
		if(DB::isError($result = $this->_Oconnection->getOne($sql)))
		{
			fileWrite($sql,'SqlError','a+');
			return FALSE;
		}
		return $result;
	}
	function _getUserDetails($userId=0,$userMailId='',$groupId=0)
	{
		global $CFG;
		$userDetails = array();
		$condition = '';
		$_SmultipleUser = "N";
		if($userMailId!='')
			$condition.=" AND ".encrypt::_decrypt('ud.email_id')."= '".$userMailId."'";
		
		/*added for pnr migration sync, for 6e same email mapped for retail user & travel agency, hence while retail user fetch added groupid to skip TA profile 
			and as userid will not be passed and will be 0 hence added limit 1 */
		if($groupId>0)
			$condition .=" AND ud.group_id = ".$groupId." limit 1";

			//Check the type of the variable $userId , If it is array IN condition is set.
		if(is_array($userId))
		{
			$userId = implode(',',$userId);
			$condition .= " AND ud.user_id IN (".$userId.")";
			$_SmultipleUser = "Y";
		}
		//if type of variable $userId is not array
		else if($userId!=0)
		{
			$condition .= " AND ud.user_id = ".$userId." limit 1";
		}
		
		if($_SmultipleUser == "N")
		{
			$_Svariable = $userId."_".$userMailId;
			$_AstaticData = $this->_staticData("_getUserDetails",$_Svariable);
			if($_AstaticData !== false)
				return $_AstaticData;
		}
		$userSql = "SELECT
				".encrypt::_decrypt('ud.title')." AS title,
				".encrypt::_decrypt('ud.first_name')." AS first_name,
				".encrypt::_decrypt('ud.last_name')." AS last_name,
				".encrypt::_decrypt('ud.email_id')." AS email_id,
				".encrypt::_decrypt('ud.country_code')." AS country_code,
				IF(ud.group_id != 4 OR (".encrypt::_decrypt('cd.pos_code'). "!= NULL OR ".encrypt::_decrypt('cd.pos_code'). " !='') ,".encrypt::_decrypt('cd.pos_code').",(select cm.pos_code from ".$CFG['db']['tbl']['city_master']." cm where cm.city_id = ud.city_id limit 1)) AS pos_code,
				".encrypt::_decrypt('cd.corporate_name')." AS corporate_name,
				".encrypt::_decrypt('cd.pcc_code')." AS agent_id,
				".encrypt::_decrypt('cd.iata_code')." AS iata_code,
				".encrypt::_decrypt('ud.phone_number')." AS phone_number,
				".encrypt::_decrypt('ud.user_address')." AS user_address,
				".encrypt::_decrypt('ud.user_name')." AS user_name,
				ud.approved_status,
				ud.email_verification_status,
				cd.corporate_type_id,
				cd.corporate_id,
				cd.corporate_status,
				ud.last_login_date,
				ud.user_id,
				ud.city_id,
				ud.user_password,
				ud.group_id,
				ud.confirm_code,
				ud.created_date,
				ud.time_zone_interval,
				ud.time_zone_key,
				".encrypt::_decrypt('ud.user_zip_code')." AS user_zip_code
			    FROM 
				".$CFG['db']['tbl']['user_details']." ud,
				".$CFG['db']['tbl']['corporate_details']." cd
			    WHERE
				cd.corporate_id = ud.corporate_id "
				.$condition."";
		if(DB::isError($userDetailResult=$this->_Oconnection->query($userSql)))
		{
			fileWrite($userSql,"SqlError","a+");
			return false;
		}
		if($userDetailResult->numRows() >0)
		{
			while($userDetailsRow = $userDetailResult->fetchRow(DB_FETCHMODE_ASSOC))
			{
				//When the type of $userId is array
				if($_SmultipleUser=='Y')
					$userDetails[] = $userDetailsRow;
				//When  the type of $userId is not array
				else
					$userDetails = $userDetailsRow;
			}
		}
		if($_SmultipleUser == "N")
			$this->_staticData("_getUserDetails",$_Svariable,$userDetails);
		return $userDetails;
	}
	function _getPaymentTransactionDetails($airlineRequestId,$totalAmount)
	{
		global $CFG;
		
		$i = 0;
		$userDetails = array();
		#$paymentStatusDetails = array();
		$transactionDetails = array();
		$this->_AstatusDetails = $this->_getStatusDetails('PR');
		$sqlPaymentTransaction = "SELECT
						pm.payment_master_id, 
						pm.payment_validity_date,
						pm.payment_status,
						pm.payment_percentage,
						ptd.paid_amount,
						ptd.status,
						ptd.receipt_number,
						ptd.payment_transaction_date,
						ptd.payment_received_by
					FROM 
						".$CFG['db']['tbl']['payment_master']." pm,
						".$CFG['db']['tbl']['payment_transaction_details']." ptd
					WHERE
						ptd.payment_master_id = pm.payment_master_id AND
						pm.airlines_request_id =".$airlineRequestId."
						AND pm.payment_status != ".$this->_AstatusDetails['status_id'];
                
		if(DB::isError($transactionResult=$this->_Oconnection->query($sqlPaymentTransaction)))
		{
			fileWrite($sqlPaymentTransaction,"SqlError","a+");
			return false;
		}
		if($transactionResult->numRows() > 0)
		{
			while($transactionRow = $transactionResult->fetchRow(DB_FETCHMODE_ASSOC))
			{
				$transactionDetails[$i]['paymentMasterId'] = $transactionRow['payment_master_id'];
				$transactionDetails[$i]['paidAmount'] = $this->_getRoundOffFare($transactionRow['paid_amount'],'','displayFare');
				// $transactionDetails[$i]['paidPercent'] = 0;
				$transactionDetails[$i]['receiptNumber'] = $transactionRow['receipt_number'];
				$transactionDetails[$i]['paymentValidityDate'] = $this->_getUserDateFormatValue($transactionRow['payment_validity_date']);
				$transactionDetails[$i]['paymentTransactionDate'] = $transactionRow['payment_transaction_date'];
				$transactionDetails[$i]['paymentTransactionDateDisplay'] = date($CFG['date_format']['displayDate'],strtotime($transactionRow['payment_transaction_date']))." ".date($CFG['date_format']['displayTime'],strtotime($transactionRow['payment_transaction_date']));
				$transactionDetails[$i]['transactionStatus'] = $transactionRow['status'];
				$transactionDetails[$i]['paymentStatus'] = $transactionRow['payment_status'];
				$transactionDetails[$i]['paidPercent'] = $transactionRow['payment_percentage'];
				$transactionDetails[$i]['userId'] = $transactionRow['payment_received_by'];
				$i++;
			}
		}

		$sqlPaymentMaster = "SELECT
						payment_master_id, 
						payment_validity_date,
						percentage_amount,
						payment_percentage,
						payment_status
					FROM
						".$CFG['db']['tbl']['payment_master']." 
					WHERE
						airlines_request_id=".$airlineRequestId."
						AND payment_status != ".$this->_AstatusDetails['status_id'];
		if(DB::isError($paymentResult=$this->_Oconnection->query($sqlPaymentMaster)))
		{
			fileWrite($sqlPaymentMaster,"SqlError","a+");
			return false;
		}
		if($paymentResult->numRows() > 0)
		{
			while($paymentRow = $paymentResult->fetchRow(DB_FETCHMODE_ASSOC))
			{
				$addTransaction = 'Y';
				$tempTransactionDetails = array();
				$tempTransactionDetails['paymentMasterId'] = $paymentRow['payment_master_id'];
				$tempTransactionDetails['paidAmount'] = $this->_getRoundOffFare($paymentRow['percentage_amount'],'','displayFare');
				$tempTransactionDetails['paidPercent'] = $paymentRow['payment_percentage'];
				$tempTransactionDetails['receiptNumber'] = 'NA';
				$tempTransactionDetails['paymentValidityDate'] = $this->_getUserDateFormatValue($paymentRow['payment_validity_date']);
				$tempTransactionDetails['paymentTransactionDate'] = 'NA';
				$tempTransactionDetails['paymentTransactionDateDisplay'] = '----';
				$tempTransactionDetails['transactionStatus'] = 'NA';
				$tempTransactionDetails['paymentStatus'] = $paymentRow['payment_status'];
				$tempTransactionDetails['userId'] = 0;

				if(!empty($transactionDetails))
				{
					foreach($transactionDetails as $transactionDetailsValues)
					{
						if($transactionDetailsValues['paymentMasterId'] == $paymentRow['payment_master_id'])
							$addTransaction = 'N';
					}
				}

				if($addTransaction == 'Y')
					$transactionDetails[] = $tempTransactionDetails;
			}
		}

		if(is_array($transactionDetails) && !empty($transactionDetails))
		{
			foreach($transactionDetails as &$transactionVal)
			{
				if($transactionVal['paidPercent'] == 0)
				{
					$transactionVal['paidPercent'] = ($transactionVal['paidAmount']/$totalAmount) * 100;
					$transactionVal['paidPercent'] = $this->_getRoundOffFare($transactionVal['paidPercent'],2,"displayFare");
				}
				if(in_array($transactionVal['paymentStatus'],$CFG['site']['pnrWisePaymentCompletedStatus']))
					$transactionVal['paymentStatus']=12;
				$currentStatus=$this->_getCurrentStatusName($transactionVal['paymentStatus']);
				$transactionStatus = $currentStatus;
				if($transactionVal['transactionStatus'] == 'Y')
					$transactionStatus = 'Approved';
				else if($transactionVal['transactionStatus'] == 'D')
					$transactionStatus = 'Rejected';
				else if($transactionVal['transactionStatus'] == 'N')
					$transactionStatus = 'Waiting for approval';

				$transactionVal['transactionStatusName'] = $transactionStatus;

				if($transactionVal['userId'] !=0)
				{
					$userId = $transactionVal['userId'];
					if(isset($userDetails[$userId]))
					{
						$transactionVal['emailId'] = $userDetails[$userId]['email_id'];
						$transactionVal['corporateTypeId'] = $userDetails[$userId]['corporate_type_id'];
					}
					else
					{
						$user = $this->_getUserDetails($userId);
						$transactionVal['emailId'] = $user['email_id'];
						$transactionVal['corporateTypeId'] = $user['corporate_type_id'];
						$userDetails[$userId] = array();
						$userDetails[$userId] = $user;
					}
				}
				else
					$transactionVal['emailId'] = '----';
			}
		}
		return $transactionDetails;

	}
	/*Modified By: Subalakshmi S 27-08-2018
		Desc     : The below lines are commented since it is called in 
		 			class.fetchPolicyDetails.php file*/
		 			
	/*function _fetchNegotiationPolicy($requestMasterId)
	{
		global $CFG;
		
		$sqlSelectRequestType="SELECT 
								request_type_id as requestType
							FROM
								".$CFG['db']['tbl']['request_master']."
							WHERE
								request_master_id='".$requestMasterId."'";
		
		if(DB::isError($resultRequestType=$this->_Oconnection->query($sqlSelectRequestType)))
		{
			fileWrite($sqlSelectRequestType,"sqlError","a+");
		}
		if($resultRequestType->numRows()>0)
		{
			$row=$resultRequestType->fetchRow(DB_FETCHMODE_ASSOC);
			$requestTypeId=$row['requestType'];
		}
		
		if($requestTypeId==1)
		{
			$noofPassenger="rm.number_of_passenger as noOfPassengers";
		}
		else
		{
			$noofPassenger="srd.number_of_passenger as noOfPassengers";
		}
		
		$sqlSelectNegotiationDetails="SELECT
								rm.request_master_id,
								rm.request_type as requestType,
								rm.trip_type as tripType,
								rm.user_currency  as currencyType,
								rm.requested_date as requestedDate,
                                                                rm.reference_request_master_id,
								rd.origin_airport_code as source,
								rd.dest_airport_code as destination,
								rd.flight_number as flightNumber,
								rd.cabin,
								rd.from_date as departureDate,
								srd.group_category_id as groupCategory,
								srd.current_load_factor,
								srd.forecast_load_factor,
								srd.future_load_factor,
								ud.user_id,
								".encrypt::_decrypt('ud.email_id')." as loginId,
								".encrypt::_decrypt('ud.country_code')." as countryCode,
								".$noofPassenger."
							FROM
								".$CFG['db']['tbl']['request_master']."  rm,
								".$CFG['db']['tbl']['request_details']." rd,
								".$CFG['db']['tbl']['series_request_details']." srd,
								".$CFG['db']['tbl']['user_details']." ud
							WHERE
								rm.request_master_id=rd.request_master_id
								AND rd.request_id=srd.request_id
								AND rm.user_id=ud.user_id
								AND rm.request_master_id='".$requestMasterId."'";
		
		if(DB::isError($result=$this->_Oconnection->query($sqlSelectNegotiationDetails)))
		{
			fileWrite($sqlSelectNegotiationDetails,"SqlError","a+");
		}
		$index=0;
		if($result->numRows()>0)
		{
                    $bookingType='PARENT';
			while($row=$result->fetchRow(DB_FETCHMODE_ASSOC))
			{
				$sqlUserType="SELECT 
									cd.corporate_type_id as userType,
									cd.corporate_id  as travelAgency,
									".encrypt::_decrypt('cd.pos_code')." as pointOfSale,
									".encrypt::_decrypt('cd.pcc_code')." as skyAgentId
								FROM
									".$CFG['db']['tbl']['user_details']." ud,
									".$CFG['db']['tbl']['corporate_details']." cd
								WHERE
									ud.corporate_id=cd.corporate_id
									AND ud.user_id='".$row['user_id']."'";
				
				if(DB::isError($userTypeResult=$this->_Oconnection->query($sqlUserType)))
				{
					fileWrite($sqlUserType,"sqlError","a+");
				}
				
				if($userTypeResult->numRows()>0)
				{
					$userTypeRow=$userTypeResult->fetchRow(DB_FETCHMODE_ASSOC);
					$userType=$userTypeRow['userType'];
					$travelAgency=$userTypeRow['travelAgency'];
					$pointOfSale=$userTypeRow['pointOfSale'];
					$skyAgentId=$userTypeRow['skyAgentId'];
				}
				
				$tripType=$row['tripType'];
					
				if($tripType==1)
					$tripType='O';
				elseif($tripType==2)
					$tripType='R';
				elseif($tripType==3)
					$tripType='M';
					
				$flightDetailsArray=$loadFactorDetails=array();
				if($index==0)
				{
					$flightNumber=$row['flightNumber'];
					$flightDetails=explode(",",$row['flightNumber']);
					$forecastLoadFactor=explode(",",$row['forecast_load_factor']);
					$currentLoadFactor=explode(",",$row['current_load_factor']);
					$futureLoadFactor=explode(",",$row['future_load_factor']);
					$policySource=$row['source'];
					$policyDestination=$row['destination'];
					$noOfPassengers=$row['noOfPassengers'];
                    $bookingType = $this->_getBookingTypeOfRequest($pointOfSale,$row['reference_request_master_id'],$row['source']);//Get Booking type of this request
					
					$policyDepartureDate=$row['departureDate'];
				}
				
				if(count($flightDetails)>0)
				{
					for($i=0;$i<count($flightDetails);$i++)
					{
						$flightDetailsArray[$i]['flightNumber']=trim(str_replace($_SESSION['groupRM']['airlineCode'].'-','',$flightDetails[$i]));
						$flightDetailsArray[$i]['airlineCode']=strtoupper($_SESSION['groupRM']['airlineCode']);
						$clfDet=explode("/",$currentLoadFactor[$i]);
						$flfDet=explode("/",$forecastLoadFactor[$i]);							
						$futureLF = explode("/",$futureLoadFactor[$i]);
						$loadFactorDetails[$i]['forecastLoadFactor']=max($flfDet);
						$loadFactorDetails[$i]['currentLoadFactor']=max($clfDet);
						$loadFactorDetails[$i]['futureLoadFactor']=max($futureLF);
					}
				}
				else
				{
					$flightDetailsArray[0]['flightNumber']=trim(str_replace($_SESSION['groupRM']['airlineCode'].'-','',$flightNumber));
					$flightDetailsArray[0]['airlineCode']=strtoupper($_SESSION['groupRM']['airlineCode']);
					$clfDet=explode("/",$rowSelectRequestDetails['current_load_factor']);
					$flfDet=explode("/",$rowSelectRequestDetails['forecast_load_factor']);
					$futureLF=explode("/",$rowSelectRequestDetails['future_load_factor']);
					$loadFactorDetails[0]['forecastLoadFactor']=max($flfDet);
					$loadFactorDetails[0]['currentLoadFactor']=max($clfDet);
					$loadFactorDetails[0]['futureLoadFactor']=max($futureLF);
					
				}
				
				$policyPaxCount=$noOfPassengers;
				$policyTripType=$tripType;
				$policyCurrencyType=$row['currencyType'];
				$policyFlightDetails=$flightDetailsArray;
				$policyLoadFactor=$loadFactorDetails;
				$policyCountryCode=$row['countryCode'];
				$policyLoginId=$row['loginId'];
				$policyCabin=$row['cabin'];
				$policyUserType=$userType;
				$policyTravelAgency=$travelAgency;
				$policyRequestedDate=date('Y-m-d',strtotime($row['requestedDate']));
				
				$negotiationPolicyInputArray=array();
				$negotiationPolicyInputArray['source']=$policySource;
				$negotiationPolicyInputArray['destination']=$policyDestination;
                                $_IparentRequestMasterid = $this->_getParentRequestMasterId($requestMasterId);    
                                //Applying the  parent policies to child policies if the config enabled
                                if((isset($CFG['site']['applyParentRequestPolicy']) && $CFG['site']['applyParentRequestPolicy'] == 'Y') && (!empty($_IparentRequestMasterid) && $_IparentRequestMasterid !=0 ))
                                { 
                                    $_AseriesRequestId =  $this->_getSeriesRequestId($requestMasterId);
                                    $_IparentPaxCount = $this->_getParentOriginalPaxCount($_AseriesRequestId[0]['series_request_id']);
                                    $negotiationPolicyInputArray['noOfPax'] = $_IparentPaxCount;
                                }
                                else
				{
                                    $negotiationPolicyInputArray['noOfPax']=$policyPaxCount;
                                }
				$negotiationPolicyInputArray['tripType']=$policyTripType;
				$negotiationPolicyInputArray['currencyType']=$policyCurrencyType;
				$negotiationPolicyInputArray['departureDate']=$policyDepartureDate;
				$negotiationPolicyInputArray['flightDetails']=$policyFlightDetails;
				$negotiationPolicyInputArray['loadFactorDetails']=$policyLoadFactor;
				$negotiationPolicyInputArray['countryCode']=$policyCountryCode;
				$negotiationPolicyInputArray['loginId']=$policyLoginId;
				$negotiationPolicyInputArray['pointOfSale']=$pointOfSale;
				$negotiationPolicyInputArray['cabin']=$policyCabin;
				$negotiationPolicyInputArray['userType']=$policyUserType;
				$negotiationPolicyInputArray['travelAgency']=$policyTravelAgency;
				$negotiationPolicyInputArray['requestedDate']=$policyRequestedDate;
				$negotiationPolicyInputArray['requestType']=$requestTypeId;
				$negotiationPolicyInputArray['tripCategory']=$this->_isDomestic($requestMasterId);
				$negotiationPolicyInputArray['groupCategory']=$this->_getGroupCategoryName($requestMasterId,"Y");
                $negotiationPolicyInputArray['bookingType']=$bookingType;
				$negotiationPolicyInputArray['countryOfOrigin']=$this->_getAirportDetails($policySource)['country_code'];
				$negotiationPolicyInputArray['countryOfDestination']=$this->_getAirportDetails($policyDestination)['country_code'];
				$negotiationPolicyInputArray['skyAgentId']=$skyAgentId;
				$index++;
			}
		}
		
		$returnArray=array();
		$policyMasterValueArray=array();
		$selectNegotiationPolicyMaster="SELECT
								negotiation_policy_id,
								negotiation_policy_name,
								priority,
								active_status,
								negotiation_status,
								negotiation_limit,
								start_date,
								end_date,
								created_date,
								policy_dow
							FROM
								".$CFG['db']['tbl']['negotiation_policy_master']." 
							WHERE
								active_status='Y'
							AND	('".$negotiationPolicyInputArray['requestedDate']."' BETWEEN start_date AND end_date)";
							
		if(DB::isError($result=$this->_Oconnection->query($selectNegotiationPolicyMaster)))
		{
			fileWrite($selectNegotiationPolicyMaster,"SqlError","a+");
			return false;
		}		
		if($result->numRows()>0)
		{
			while($negotiationPolicyMasterRow=$result->fetchRow(DB_FETCHMODE_ASSOC))
			{
				if($this->_getPolicyDayOfWeekStatus($requestMasterArray[0]['requested_date'],$rowSelectAutoPilotPolicyMaster['policy_dow'])=="Y")
				{
					$sqlSelectNegotiationPolicyDetails="SELECT
									ncm.criteria_id,
									ncm.criteria_name,
									ncm.criteria_type,
									ncm.display_status,
									ncm.criteria_logical_id,
									npd.negotiation_policy_details_id,
									npd.negotiation_policy_id,
									npd.criteria_id,
									npd.loop_value,
									npd.operator_id,
									npd.policy_value,
									om.operator_name,
									om.logical_value,
									om.operator_type
								FROM
									".$CFG['db']['tbl']['negotiation_criteria_master']." ncm,
									".$CFG['db']['tbl']['negotiation_policy_details']." npd,
									".$CFG['db']['tbl']['operator_master']." om
								WHERE
									npd.criteria_id=ncm.criteria_id
									AND npd.operator_id=om.operator_id
									AND npd.negotiation_policy_id='".$negotiationPolicyMasterRow['negotiation_policy_id']."'";
					
					if(DB::isError($resultSelectNegotiationPolicyDetails=$this->_Oconnection->query($sqlSelectNegotiationPolicyDetails)))
					{
						fileWrite($sqlSelectNegotiationPolicyDetails,"SqlError","a+");
						return false;
					}
					$resultValue=0;
					$stringToExecute="";
					$policyDetailsArray = array();
					if($resultSelectNegotiationPolicyDetails->numRows() > 0)
					{
						while($rowSelectNegotiationPolicyDetails=$resultSelectNegotiationPolicyDetails->fetchRow(DB_FETCHMODE_ASSOC))
						{
							$policyDetailsArray[] = $rowSelectNegotiationPolicyDetails;
						}		
						$stringToExecute = $this->_getStringToExecuteForAllPolicy($policyDetailsArray,$negotiationPolicyInputArray);
						if($stringToExecute!="")
						{
							$resultStringToEval="IF( ".$stringToExecute." ){".'$resultValue'."=1;}";
							#fileWrite($resultStringToEval,"NEGOTIATIONSTR","a+");// REM
							
							eval($resultStringToEval);
							if($resultValue==1)
							{
								$policyMasterValueArray[]=$negotiationPolicyMasterRow;
							}
						}
					}
				}
			}
		}
		
		$minValue=0;

		if(count($policyMasterValueArray) > 0)
		{
			$finalInput=array("inputArray"=>$policyMasterValueArray,"firstFieldName"=>"priority","firstFieldOrder"=>"ASC","secondFieldName"=>"created_date","secondFieldOrder"=>"ASC");
			$finalArray=$this->_multipleSortFunction($finalInput);
			$returnArray[]=$finalArray[0];
			/*for($i=0;$i<count($policyMasterValueArray);$i++)
			{
				if($minValue==0 || $policyMasterValueArray[$i]['priority']<=$minValue)
				{
					$minValue=$policyMasterValueArray[$i]['priority'];
				}
			}
			
			$minIndex="";
			$appendString="";
			for($i=0;$i<count($policyMasterValueArray);$i++)
			{
				if($minValue==$policyMasterValueArray[$i]['priority'])
				{
					$minIndex.=$appendString.$i;
					$appendString=",";
				}
			}
			
			$explodeArray=explode(",",$minIndex);
			
			if(count($explodeArray) >0)
			{
				$fetchNegotiationPolicyArray=array();
				
				$moveIndex=0;
				for($i=0;$i<count($explodeArray);$i++)
				{
					if(is_array($policyMasterValueArray[$explodeArray[$i]]) && isset($policyMasterValueArray[$explodeArray[$i]]))
					{
						$fetchNegotiationPolicyArray[$moveIndex]=$policyMasterValueArray[$explodeArray[$i]];
						$moveIndex++;
					}
				}
				
				if(count($fetchNegotiationPolicyArray) > 0)
				{
					$returnArray=$fetchNegotiationPolicyArray;
				}
			}*/
		/*}
		
		return $returnArray;
	}*/
	
	function _getConferenceRequestDetails($conferenceRequestDetails)
	{   
		$this->_ArequestDetails=array();
		$this->_AconferenceRequestDetails=array();
		$requestDetailsArray=array();	
		$this->_ArequestDetails=$conferenceRequestDetails;		
		$index=0;
		$i=0;
		foreach($this->_ArequestDetails as $reqKey=>$requestDetailsValue)
		{	
			if(!in_array($requestDetailsValue['request_id'],$requestDetailsArray))
			{
				if($requestDetailsValue['mapped_series_request_id'] != 0)
				{   
					$requestDetailsArray[]=$requestDetailsValue['request_id'];
					$subIndex=$i+1;						
					
					foreach($this->_ArequestDetails as $subReqKey=>$subRequestDetailsValue)
					{
						if($requestDetailsValue['mapped_series_request_id'] == $subRequestDetailsValue['series_request_id'])
						{
							if(!in_array($subRequestDetailsValue['request_id'],$requestDetailsArray))
							{
								#$this->_ArequestDetails[$reqKey]['flight_number'].="/".$this->_ArequestDetails[$subReqKey]['flight_number'];
								#$this->_ArequestDetails[$reqKey]['to_date']=$this->_ArequestDetails[$subReqKey]['from_date'];
								$this->_AconferenceRequestDetails[($this->_ArequestDetails[$subReqKey]['mapped_series_request_id'] != 0)?$this->_ArequestDetails[$subReqKey]['mapped_series_request_id']:$this->_ArequestDetails[$subReqKey]['series_request_id']][$index]=$this->_ArequestDetails[$subReqKey];
								$requestDetailsArray[]=$subRequestDetailsValue['request_id'];
								$index++;
							}	
						}
					}
					$i++;
														
					$this->_AconferenceRequestDetails[($this->_ArequestDetails[$reqKey]['mapped_series_request_id'] != 0)?$this->_ArequestDetails[$reqKey]['mapped_series_request_id']:$this->_ArequestDetails[$reqKey]['series_request_id']][$index]=$this->_ArequestDetails[$reqKey];
					$index++;
				}
				else
				{
					$mappedId=true;
					foreach($this->_ArequestDetails as $subReqKey=>$subRequestDetailsValue)
					{
						if($requestDetailsValue['series_request_id'] == $subRequestDetailsValue['mapped_series_request_id'])
						{
							$mappedId=false;	
						}
													
					}

					if($mappedId)
					{
						$requestDetailsArray[]=$requestDetailsValue['request_id'];
						$subIndex=$i+1;	
						
						$this->_ArequestDetails[$reqKey]=$this->_ArequestDetails[$reqKey];				
						$this->_AconferenceRequestDetails[($this->_ArequestDetails[$reqKey]['mapped_series_request_id'] != 0)?$this->_ArequestDetails[$reqKey]['mapped_series_request_id']:$this->_ArequestDetails[$reqKey]['series_request_id']][$index]=$this->_ArequestDetails[$reqKey];
						$index++;			
						$i++;
					}
				}
			}
		}
	}
	
	function _getUserCurrency($requestMasterId)
	{
		global $CFG;
		$_SarrayFlag="N";
		$_AreturnResult=array();
		if(is_array($requestMasterId)){
			$_SarrayFlag="Y";
			$requestMasterId=implode(",", $requestMasterId);
		}
		$sqlCurrency = " SELECT 
								cd.exchange_rate,
								rm.user_currency,
								rm.request_master_id
						FROM 
							".$CFG['db']['tbl']['currency_details']." cd,
							".$CFG['db']['tbl']['request_master']." rm
						WHERE 
							cd.currency_type = rm.user_currency AND
							rm.request_master_id IN (".$requestMasterId.")";			
		if(DB::isError($resultCurrency=$this->_Oconnection->query($sqlCurrency)))
		{
			fileWrite($sqlCurrency,"SqlError","a+");
			return false;
		}
		while($rowCurrency=$resultCurrency->fetchRow(DB_FETCHMODE_ASSOC)){
			$_AreturnResult[$rowCurrency['request_master_id']]=$rowCurrency; 
		}
		if($_SarrayFlag=='N')
			return $_AreturnResult[$requestMasterId];
		else
			return $_AreturnResult;
	}

	
	function _loadModuleLanguage($objSmarty,$moduleName='',$lang="")
	{
		global $CFG;
		
		if($moduleName=='')
			return $objSmarty;
		
		//To overwrite the language based on language parameter
		$tempLang = '';
		if($lang && $lang != strtolower($_COOKIE['groupRMLan'])) {
			$tempLang = $_COOKIE['groupRMLan'];
			$_COOKIE['groupRMLan']=$lang;
		}
		
		fileRequire("classes/class.systemSetup.php");
		$objSecurity=new systemSetup();
		if(!is_array($moduleName))
			$_AmoduleName=array($moduleName);
		else
			$_AmoduleName=$moduleName;
		$objSecurity->_loadLanguage($objSmarty,$_AmoduleName);
		if($tempLang != '')
			$_COOKIE['groupRMLan']=$tempLang;
		
		return $objSmarty;
	}
	
	function _getPnrSubmitStatus($requestMasterId,$_SgroupWiseStatus='N')
	{
		global $CFG;
		//To check whether the requestMasterId is array or not
		$_ScheckRequestIdArray = 'N';
		if(!empty($requestMasterId['airlines_request_id'])||!is_array($requestMasterId)){
			if(!empty($requestMasterId) && isset($requestMasterId['airlines_request_id']))
				$airlinesRequestId=$requestMasterId['airlines_request_id'];
			else
				$airlinesRequestId=$this->_getAirlineRequestId($requestMasterId);
			if(!empty($requestMasterId['request_master_id']))
				$requestMasterId=$requestMasterId['request_master_id'];
		}else{
			//The request id is in array
			$_ScheckRequestIdArray = 'Y';
			$_ArequestMasterId=$requestMasterId;
			$requestMasterId=implode(",", array_column($_ArequestMasterId, 'request_master_id'));
			$airlinesRequestId=implode(",", array_column($_ArequestMasterId, 'airlines_request_id'));
		}

		$pnrCount=0;
		$uploadedPnrCount=0;
		$sql="SELECT 
				pnr ,
				request_master_id
			FROM 
				".$CFG['db']['tbl']['pnr_blocking_details']."
			WHERE 				
				request_master_id IN (".$requestMasterId.")
			GROUP BY pnr";
		if(DB::isError($result=$this->_Oconnection->query($sql)))
 		{
			fileWrite($sql,'sqlError','a');
			return false;
 		}
		if($_ScheckRequestIdArray == 'N'){
			if($result->numRows() > 0) 
				$pnrCount=$result->numRows();
		}else{
			if($result->numRows() > 0){
				while($row=$result->fetchRow(DB_FETCHMODE_ASSOC))
				{
	               $_ApnrCount[$row['request_master_id']][]= $row['pnr'];
	            }
	            $_ApnrCount[$row['request_master_id']]=sizeof($_ApnrCount[$row['request_master_id']]);
			}
		}
		$sql="SELECT 
				pnr_number,
				airlines_request_id
			FROM 
				".$CFG['db']['tbl']['pnr_details']."
			WHERE 
				airlines_request_id IN (".$airlinesRequestId.")
			GROUP BY pnr_number";
		if(DB::isError($result=$this->_Oconnection->query($sql)))
		{
			fileWrite($sql,'sqlError','a+');
			return false;
		}
		if($_ScheckRequestIdArray == 'N'){
			if($result->numRows() > 0) 
				$uploadedPnrCount=$result->numRows();
			#To check any groups 
			if($pnrCount>0 && $uploadedPnrCount>0 && ($pnrCount==$uploadedPnrCount || $_SgroupWiseStatus != 'N'))
				return true;
			else
				return false;
		}else{
			if($result->numRows() > 0){
				while($row=$result->fetchRow(DB_FETCHMODE_ASSOC))
				{
	               $_AuploadedPnrCount[$row['airlines_request_id']][]= $row['pnr_number'];
	            }
	            $_AuploadedPnrCount[$row['airlines_request_id']]=sizeof($_AuploadedPnrCount[$row['airlines_request_id']]);
			} 	 
			foreach ($_ArequestMasterId as $requestMasterIdvalue) {
				$pnrCount=$_ApnrCount[$requestMasterIdvalue['request_master_id']];
				$uploadedPnrCount=$_AuploadedPnrCount[$requestMasterIdvalue['airlines_request_id']];
				if($pnrCount>0 && $uploadedPnrCount>0 && ($pnrCount==$uploadedPnrCount || $_SgroupWiseStatus != 'N'))
					$_AreturnResult[$requestMasterIdvalue['request_master_id']]= true;
				else
					$_AreturnResult[$requestMasterIdvalue['request_master_id']]= false;	
			}
			return $_AreturnResult;
		}
		return false;
	}
	function _getConfigRequestType($requestTypeId,$requestType)
	{
		global $CFG;
		
		$configRequestType = 'COMMON_REQUESTTYPE_';
			
		if(strtolower($requestType) == 'flexible')
			$configRequestType .= 'FLEXIBLE_' ;

		$configRequestType .= $requestTypeId;
		
		$this->_setSiteLanguage();
		
		$configRequestTypeDetails =$this->objSiteSmarty->getConfigVars($configRequestType);
		
		$configRequestTypeDetails=strtolower($configRequestTypeDetails);
				
		return $configRequestTypeDetails;
	}

	function _getRequestType($_IrequestMasterId,$getRequestTypeId="N")
	{
		global $CFG;
		
		$_Svariable = $_IrequestMasterId."_".$getRequestTypeId;
		$_AstaticData = $this->_staticData("_getRequestType",$_Svariable);
		if($_AstaticData !== false)
			return $_AstaticData;
		
		$_SrequestType = '';
		$_IrequestTypeId = 0;
		$sql = "SELECT
					request_type,
					request_type_id
				FROM
					".$CFG['db']['tbl']['request_master']."
				WHERE
					request_master_id = ".$_IrequestMasterId;
		$result = $this->_executeQuery($sql);
		if(!empty($result) && isset($result[0]['request_type']) && $result[0]['request_type']!='')
			$_SrequestType = $result[0]['request_type'];
		if($_SrequestType=='conference'){
			//preparing smarty object if it is empty
			if(empty($this->_Osmarty))
				$this->_Osmarty = smartyCall();
			
			$_SrequestTypeLang = strtolower($this->_Osmarty->getConfigVars('COMMON_REQUESTTYPE_'.$result[0]['request_type_id']));
			$_SrequestType = empty($_SrequestTypeLang) ? $_SrequestType: $_SrequestTypeLang;
			//$_SrequestType='Multiple Departure';
		}					
		
		if(!empty($result) && isset($result[0]['request_type_id']) && $result[0]['request_type_id']!=0)
			$_IrequestTypeId = $result[0]['request_type_id'];
		
		$returnData = '';
		if($getRequestTypeId=="Y")
			$returnData = $_IrequestTypeId;
		else
			$returnData = $_SrequestType;
		$this->_staticData("_getRequestType",$_Svariable,$returnData);
		return $returnData;
	}
	/*
	 *Function name :  _getCabinDetails
	 * Description : It will return all cabin details if $_ScabinValue not specified
	 * Modified by : Selvakumar.S
	 * Modified Date : 02-06-2017
	 * 
	 */
	function _getCabinDetails($_ScabinValue ='',$_SsetCabinIndex ='N')
	{
		global $CFG;

		$sql="SELECT 
              cabin_id, 
              cabin_name,
              cabin_value
              FROM 
				".$CFG['db']['tbl']['cabin_details']."
              WHERE
				cabin_status='Y'
              ";
		if($_ScabinValue != '')
			$sql = $sql." AND cabin_value = '".$_ScabinValue."'";		
        if(DB::isError($result = $this->_Oconnection->query($sql))) 
	    {
		    fileWrite($sql,'SqlError','a+');
		    return false;
	    }
	     
		$_AcabinDisplay=array();
		$_AcabinDetails=array();

		if($result->numRows() >0)
		{
			while($row=$result->fetchRow(DB_FETCHMODE_ASSOC))
			{
				
				$_AcabinDisplay[]=$row['cabin_name'];
				if($_SsetCabinIndex=="Y")
					$_AcabinDetails[$row['cabin_value']]=$row;
				else
					$_AcabinDetails[]=$row;
			}
		}

		return $_AcabinDetails;
	}
	
	function _changeIssueIdFormat($issueDetailsId)
	{
		$showIssueId="00000";
		$showIssueDetailsId=$issueDetailsId;
		$showIssueDetailsIdCount=strlen($showIssueDetailsId);
		$issueId='Issue'.substr($showIssueId,$showIssueDetailsIdCount).$issueDetailsId;
		return $issueId;
	}	

	
	
	function _getPassengerSsrInfant($requestMasterId,$seriesRequestId)
	{
		$infantCount=0;
		$viaFlightId=0;
		$requestApprovedFlightId=0;
		$sqlFlight="SELECT request_approved_flight_id,stops FROM request_approved_flight_details WHERE series_request_id='".$seriesRequestId."' AND accepted_flight_status='Y'";
		if(DB::isError($resultFlight=$this->_Oconnection->query($sqlFlight)))
		{
			fileWrite($sqlFlight,"SqlError","a+");
			return false;
		}

		if($resultFlight->numRows() > 0)
		{
			$rowFlight = $resultFlight->fetchRow(DB_FETCHMODE_ASSOC);
			$requestApprovedFlightId=$rowFlight['request_approved_flight_id'];
			if($rowFlight['stops']>0)
			{
				$sqlViaFlight="SELECT via_flight_id FROM via_flight_details WHERE request_approved_flight_id='".$rowFlight['request_approved_flight_id']."' LIMIT 1";
				if(DB::isError($resultViaFlight=$this->_Oconnection->query($sqlViaFlight)))
				{
					fileWrite($sqlViaFlight,"SqlError","a+");
					return false;
				}

				if($resultViaFlight->numRows() > 0)
				{
					$rowViaFlight = $resultViaFlight->fetchRow(DB_FETCHMODE_ASSOC);
					$viaFlightId=$rowViaFlight['via_flight_id'];
				}
			}
		}
		$condition='';
		$sql="SELECT
				ssr_master_id
			FROM
				ssr_master
			WHERE 
				request_master_id='".$requestMasterId."'
			ORDER BY ssr_master_id DESC LIMIT 1";
		
		if(DB::isError($result=$this->_Oconnection->query($sql)))
		{
			fileWrite($sql,"SqlError","a+");
			return false;
		}
		$passengerIdArray=array();
		if($result->numRows() > 0)
		{
			$row = $result->fetchRow(DB_FETCHMODE_ASSOC);
			if($requestApprovedFlightId>0)
				$condition=" AND request_approved_flight_id='".$requestApprovedFlightId."'";

			if($viaFlightId>0)
				$condition.=" AND via_flight_id='".$viaFlightId."'";

			$sqlInfant="SELECT
						infant_code,
						passenger_id
					FROM 
						ssr_details
					WHERE
						ssr_master_id='".$row['ssr_master_id']."'
						AND series_request_id='".$seriesRequestId."'
						AND infant_fare!=0 ".$condition;
			
			if(DB::isError($resultInfant=$this->_Oconnection->query($sqlInfant)))
			{
				fileWrite($sqlInfant,"SqlError","a+");
				return false;
			}
			$i=0;
			if($resultInfant->numRows() > 0)
			{
				while($rowInfant = $resultInfant->fetchRow(DB_FETCHMODE_ASSOC))
				{
					$checkVal=explode('A',$rowInfant['passenger_id']);
					$passengerIdArray[$i]['passengerId']=$checkVal[0];
					$passengerIdArray[$i]['paxNo']=$checkVal[1]-1;
					$i++;
				}
				
			}
		}
		return $passengerIdArray;
	}

	function addDateTime($_DfromTime="UTC", $_Irange=0, $_Stype="hour")
	{
		if($_DfromTime == "UTC")
			$_DfromTime = $this->_getUTCDateValue();
		elseif($_DfromTime == "NOW")
			$_DfromTime = date("Y-m-d H:i:s");
			
		$_SfromTime = strtotime($_DfromTime);
		$_Srange = sprintf("%+d",$_Irange);
		$_Stype = strtolower($_Stype);
		return date("Y-m-d H:i:s",strtotime($_Srange." ".$_Stype,$_SfromTime));
	}
	
	function _checkDownsizeMinimumDate($seriesRequestId)
	{
		global $CFG;
		$resultValue="Y";
		
		$sqlSelectRequestDetailsFromDate="SELECT
								srd.departure_date,
								rd.request_master_id
						  FROM
								".$CFG['db']['tbl']['series_request_details']." srd,
								".$CFG['db']['tbl']['request_details']." rd
						  WHERE
						  		srd.request_id = rd.request_id AND
								srd.series_request_id=".$seriesRequestId;
		
		if(DB::isError($result=$this->_Oconnection->query($sqlSelectRequestDetailsFromDate)))
		{
			fileWrite($sqlSelectRequestDetailsFromDate,"SqlError","a+");
			return false;
		}
		if($result->numRows() > 0)
		{
			$rowValue=$result->fetchRow(DB_FETCHMODE_ASSOC);
			$departureDate=$rowValue['departure_date'];
			$_IrequestMasterId=$rowValue['request_master_id'];
		}
		
		$todayDate=date("Y-m-d");		
		$configDays=$this->_getResizeSettings('downsize','downsizeDepartureCheck',$_IrequestMasterId);

		if($configDays>0)
		{
			$calculatedDate=strtotime('-'.$configDays.' days',strtotime($departureDate));
			
			if(strtotime($todayDate) > $calculatedDate)
				$resultValue="N";
		}
		
		return $resultValue;
	}
	function _getPnrMinDepartureDate($pnr,$requestMasterId=0)
	{
		global $CFG;
		$strToTimeArray=array();
		$originArray=array();
		$minDateArray=array();
		$_condition="";
		if(!empty($requestMasterId['request_approved_flight_details']))
		{
			foreach ($requestMasterId['request_approved_flight_details'] as $requestApprovedFlightDetailsvalue) {
				if($pnr==$requestApprovedFlightDetailsvalue['pnr']){
					$rowValue[]=$requestApprovedFlightDetailsvalue;
				}
			}
		} else {
			
			if((is_array($requestMasterId) && !empty($requestMasterId))|| $requestMasterId!=0)
			{
				if(is_array($requestMasterId))
					$requestMasterId = $requestMasterId['request_master_id'];

				$_condition=" AND arm.request_master_id IN (".$requestMasterId.")";
			}
			$sql="SELECT
					rafd.source,
					rafd.departure_date,
					rafd.dep_time,
					pbd.pnr
				 FROM
					".$CFG['db']['tbl']['request_approved_flight_details']." rafd,
					".$CFG['db']['tbl']['pnr_blocking_details']." pbd,
					".$CFG['db']['tbl']['airlines_request_mapping']." arm
				 WHERE
					arm.airlines_request_id = rafd.airlines_request_id
					AND arm.request_master_id=pbd.request_master_id
					AND pbd.request_approved_flight_id=rafd.request_approved_flight_id
					AND pbd.pnr='".$pnr."'
					AND rafd.accepted_flight_status='Y'";
			if($_condition!="")
				$sql.=$_condition;
			$rowValue=$this->_executeQuery($sql);
		}
		for($i=0;$i<count($rowValue);$i++)
		{
			$originArray[$rowValue[$i]['departure_date']]=$rowValue[$i]['source'];
			$dateValue=strtotime($rowValue[$i]['departure_date']);
			array_push($strToTimeArray,$dateValue);
		}

		$minValue=min($strToTimeArray);

		for($i=0;$i<count($rowValue);$i++)
		{
			$dateValue=strtotime($rowValue[$i]['departure_date']);
			if($dateValue==$minValue)
			{
				$dateTime=$rowValue[$i]['departure_date']." ".$rowValue[$i]['dep_time'];
				array_push($minDateArray,$dateTime);
			}
		}
		$minValue=0;
		if(count($minDateArray) > 1)
		{
			for($j=0;$j<count($minDateArray);$j++)
			{
				$dateValue=strtotime($minDateArray[$j].":00");
				if($minValue > $dateValue || $minValue==0)
				{
					$minValue=$dateValue;
					$finalDate=$minDateArray[$j].":00";
				}
				
			}
		}
		else
		{
			$dateValue=strtotime($minDateArray[0].":00");
			$finalDate=$minDateArray[0].":00";

		}
		$dateValue=explode(" ",$finalDate);
		$temDate=$dateValue[0];
		$this->_SoriginValue=$originArray[$temDate];
		return $finalDate;
	}
	/*
	 * Function Name : _getCountryAllDetails
	 * Description: This function will return all data of city details
	 * Author: Venket V
	 * Created Date: 30-05-2018
	 * Modified Date: 30-05-2018
	 */
	function _getCountryAllDetails()
	{
		global $CFG;

		$countryNumberSql="SELECT 
						citizenship_id as country_number_id, 
						citizenship_name as country_name,
						phone_code as country_number,
						citizen_code 
				   FROM 
						".$CFG['db']['tbl']['citizenship_details']." 
				   WHERE
						phone_code!='' AND status='Y'
						ORDER BY citizenship_name";

		if(DB::isError($resultCountryNumber = $this->_Oconnection->query($countryNumberSql))) 
		{
			fileWrite($countryNumberSql,'SqlError','a+');
			return false;
		}
		$index=0;

		while($row = $resultCountryNumber->fetchRow(DB_FETCHMODE_ASSOC)) 
		{
			$this->_AcountryNumberDetails['countryCode'][$index]=$row['citizen_code'];
			$this->_AcountryNumberDetails['countryName'][$index]=$this->_Osmarty->getConfigVars('COMMON_CITIZENSHIP_DETAILS_'.strtoupper($row['citizen_code']));
			$this->_AcountryNumberDetails['countryNumber'][$index]=$row['country_number'];
			#$this->_AcountryNumberDetails[$index]=$row;
			$index++;
		}
		return $this->_AcountryNumberDetails;
	}
	
	function _getCountryNumberDetails()
	{
		global $CFG;

		$countryNumberSql="SELECT 
						citizenship_id as country_number_id, 
						citizenship_name as country_name,
						phone_code as country_number 
				   FROM 
						".$CFG['db']['tbl']['citizenship_details']." 
				   WHERE
						phone_code!=''
						ORDER BY citizenship_name";

		if(DB::isError($resultCountryNumber = $this->_Oconnection->query($countryNumberSql))) 
		{
			fileWrite($countryNumberSql,'SqlError','a+');
			return false;
		}
		$index=0;

		while($row = $resultCountryNumber->fetchRow(DB_FETCHMODE_ASSOC)) 
		{
			$this->_AcountryNumberDetails['countryNumber'][$index]=$row['country_number'];
			$this->_AcountryNumberDetails['countryNameDetails'][$index]=$row['country_name']." ".$row['country_number'];
			#$this->_AcountryNumberDetails[$index]=$row;
			$index++;
		}
		return $this->_AcountryNumberDetails;
	}
	

	function _getFormatedAddressValue($givenAddress,$_IendLength=32,$_IstartLength=0)
	{
		global $CFG;
		//for some string pdo adding escape string thus, \\ added
		$replaceValueArray=array("\\n","\n","'","\"","<",">");
		$newAddress = $CFG['agency']['address'];
		if($givenAddress!="")
		{
			$newAddress=$givenAddress;
			$newAddress=str_replace($replaceValueArray," ",$newAddress);
			$newAddress=str_replace("&","and",$newAddress);
			if($_IendLength > 0)
				$newAddress=substr($newAddress,$_IstartLength,$_IendLength);
			else
				$newAddress=substr($newAddress,$_IstartLength);
			// To allow only alphanumerics and some special characters ("." and ",")
			$newAddress = $this->_stringFilter($newAddress,0);
		}
		return $newAddress;
	}

	function _getPaxDetails($adult,$child,$infant,$foc=0)
	{
		global $CFG;
		$paxDetails='';
		$paxDetails=$adult."<abbr title='adult'>A</abbr>";
		$paxDetails.=($child>0) ? ",".$child."<abbr title='child'>C</abbr>" : '';
		$paxDetails.=($infant>0) ? ",".$infant."<abbr title='infant'>I</abbr>" : '';
		if($CFG["settings"]["freeOfCost"]['nameUpdate']=='Y')
			$paxDetails.=($foc>0) ? ",".$foc."<abbr title='foc'>TC</abbr>" : '';
		return 	$paxDetails;
	}
	
	
	function getDiffTimezoneOffset($originTz, $remoteTz) 
	{
		$originDtz = new DateTimeZone($originTz);
		$remoteDtz = new DateTimeZone($remoteTz);
		$originDt = new DateTime("now", $originDtz);
		$remoteDt = new DateTime("now", $remoteDtz);
		$offSet = $remoteDtz->getOffset($remoteDt) - $originDtz->getOffset($originDt);
		return $offSet;
	}
	
	
	/*Modified By   : Subalakshmi.S 17-04-2018
	  Desc			: To get the display value of user time zone interval
	  Input			: ---
	  Return		: User time zone interval with the prefix of GMT */
	
	function _getUserTimeZoneVal()
	{
		$_StimeZone = $this->_getTimeZone();
		$_SdisplayTimeZoneInterval = $this->_getTimeZoneDisplay($_StimeZone);
		return $_SdisplayTimeZoneInterval;
	}
	
	function _getRequestGroupName($_IrequestMasterId)
    {
        global $CFG;
        $sql = "SELECT
                request_group_name
            FROM
                ".$CFG['db']['tbl']['request_master']."
            WHERE
                request_master_id=".$_IrequestMasterId;
                
        if(DB::isError($result = $this->_Oconnection->query($sql))) 
		{
			fileWrite($sql,'SqlError','a+');
			return false;
		}
         $row = $result->fetchRow(DB_FETCHMODE_ASSOC);
		 $requestGroupName=$row['request_group_name'];
		 
		 
		 return  $requestGroupName;
        
    }
	function _getFormatedAmount($givenAmount,$countryCode="IN",$displayCurrency="N",$decimal="N")
	{
		global $CFG;
		
		$amount = $givenAmount;
		
		$countryString='en_'.$countryCode;
		
		$currencyString="";
		$decimalDisplay="i";
		
		if($displayCurrency=="N")
			$currencyString="!";
			
		if($decimal=="N")
			$decimalDisplay=".0n";
			
		$finalString='%'.$currencyString.$decimalDisplay;
		
		
		setlocale(LC_MONETARY, $countryString);
		$amount = money_format($finalString, $givenAmount);
		
		return $amount;
	}
	/*
	 * Altered to get the request type name
	 */
	function _getRequestTypeId($_SrequestTypeName='',$_IrequestTypeId=0)
	{
		global $CFG;
		$_Svar = $_SrequestTypeName.'_'.$_IrequestTypeId;
		$_AstaticData = $this->_staticData('_getRequestTypeId',$_Svar);
		if($_AstaticData !== false)
			$_SrequestTypeId = $_AstaticData;
		else
		{
			if($_IrequestTypeId != 0)
				$_ScondField = 'request_type_id = '.$_IrequestTypeId;
			if($_SrequestTypeName != '')
				$_ScondField .= 'request_type_name = "'.$_SrequestTypeName.'"';
			$sqlSelectRequestType= "SELECT
										request_type_id,
										request_type_name
									FROM
										".$CFG['db']['tbl']['request_type_master']."
									WHERE 
										".$_ScondField;
										// filewrite($sqlSelectRequestType,"sqlSelectRequestType","a+");
			$result = $this->_executeQuery($sqlSelectRequestType);
			if(!empty($result) && isset($result[0]['request_type_id']) && $result[0]['request_type_id']!='')
			{
				$_SrequestTypeId = $result[0]['request_type_id'];
				if($_IrequestTypeId > 0)
					$_SrequestTypeId = $result[0]['request_type_name'];
			}
			$_Svar = $_SrequestTypeName.'_'.$_IrequestTypeId;
			$this->_staticData('_getRequestTypeId',$_Svar,$_SrequestTypeId);
		}
		return $_SrequestTypeId;
	}
	
	function _getRequestedCabin($_IrequestMasterId)
	{
		global $CFG;
		
		$_AstaticData = $this->_staticData('_getRequestedCabin',$_IrequestMasterId);
		if($_AstaticData !== false)
			return $_AstaticData;
		
		$sql = "SELECT
					cabin
			FROM
				".$CFG['db']['tbl']['request_details']." rd
			WHERE
				rd.request_master_id=".$_IrequestMasterId;
				
		if(DB::isError($result = $this->_Oconnection->query($sql))) 
		{
			fileWrite($sql,'SqlError','a+');
			return false;
		}
		$row = $result->fetchRow(DB_FETCHMODE_ASSOC);
		$cabin=$row['cabin'];
		$this->_staticData('_getRequestedCabin',$_IrequestMasterId,$cabin);
		return $cabin;
		
		
	}
	
	function _getDeclineRemarks($airlineRequestId)
	{
		global $CFG;
		$sql="SELECT
					remarks
				FROM
					".$CFG['db']['tbl']['response_details']."
				WHERE 
					airlines_request_id=".$airlineRequestId."
				ORDER BY transaction_master_id  DESC LIMIT 1";
		$remarks="";
		$result = $this->_executeQuery($sql);
		if(!empty($result) && isset($result[0]['remarks']) && $result[0]['remarks']!='')
			$remarks = $result[0]['remarks'];
		return $remarks;
	}
	function _getLastPaymentDetails($requestMasterId,$status="")
	{
		global $CFG;
		$_IairlinesRequestId = $this->_getAirlineRequestId($requestMasterId);
		$this->_AstatusDetails = $this->_getStatusDetails('PR');
		$sql="SELECT
					payment_master_id,
					payment_percentage,
					percentage_amount,
					exchange_rate,
					payment_validity_date,
					payment_requested_date,
					payment_remarks,
					payment_status,
					paid_date
				FROM
					".$CFG['db']['tbl']['payment_master']."
				WHERE 
					airlines_request_id='".$_IairlinesRequestId."'
					AND payment_status != ".$this->_AstatusDetails['status_id'];
		if($status!="")
			$sql .= " AND payment_status = ".$status;
		$sql .= " ORDER BY payment_master_id DESC LIMIT 1";
		
		if(DB::isError($payment=$this->_Oconnection->query($sql)))
		{
			fileWrite($sql,"SqlError","a+");
			return false;
		}
		$paymentDetails = array();
		if($payment->numRows() >0)
		{
			$paymentDetails = $payment->fetchRow(DB_FETCHMODE_ASSOC);
		}
		return $paymentDetails;
	}
	
	function _getDayOfWeek($requestDate)
	{
		global $CFG;
		
		$requestedDay = strtolower(date('D', strtotime($requestDate)));
		
		return $requestedDay;
	}
	
	function _getPolicyDayOfWeekStatus($requestedDate,$policyDowInput='')
	{
		global $CFG;
		$policyDowStatus="Y";
		
		if($policyDowInput!='')
		{
			$requestedDay=$this->_getDayOfWeek($requestedDate);
			$policyDow=explode(",",$policyDowInput);
		
			if(in_array($requestedDay,$policyDow))
				$policyDowStatus="Y";
			else
				$policyDowStatus="N";
		}
		return $policyDowStatus;
	}
	function _setUserDetails($_AinputData)
	{
		global $CFG;
		fileRequire("dataModels/class.userDetails.php");
		$_OuserDetails = new userDetails;
		$_OuserDetails->_Oconnection = $this->_Oconnection;
		if(isset($_AinputData['salesPersonRequest']) && ($_AinputData['salesPersonRequest'] == 'Y') && ($_AinputData['emailIdHidden'] ==0))
		{
			$_AinputData['emailId'] = trim($_AinputData['emailId']);			
			fileRequire("dataModels/class.corporateDetails.php");			
			$_OuserDetails->_SemailId = $_AinputData['emailId'];
			$_AuserDetails=$_OuserDetails->_selectUserDetails();
			if($_OuserDetails->_IcountLoop == 0)
			{
				#getting sales person user and corporate details
				$_OuserDetails->__construct();
				$_OuserDetails->_IuserId = $_SESSION['groupRM']['groupUserId'];
				$_ArequestorDetails=$_OuserDetails->_selectUserDetails();

				$_OcorporateDetails = new corporateDetails;
				$_OcorporateDetails->_Oconnection = $this->_Oconnection;
				$_OcorporateDetails->_IuserId = $_SESSION['groupRM']['groupUserId'];
				$_AcorporateDetails=$_OcorporateDetails->_selectCorporateDetails();

				#creating a new user
				$_OuserDetails->__construct();
				$_OuserDetails->_IgroupId = 11;
				$_OuserDetails->_IcorporateId = $_AcorporateDetails[0]['corporate_id'];
				$_OuserDetails->_Stitle = $_ArequestorDetails[0]['title'];
				$_OuserDetails->_SfirstName = $_ArequestorDetails[0]['first_name'];
				$_OuserDetails->_SlastName = $_ArequestorDetails[0]['last_name'];
				$_OuserDetails->_SemailId = $_AinputData['emailId'];
				$_OuserDetails->_SuserPassword = $_AinputData['emailId'];
				$_OuserDetails->_SuserAddress = $_ArequestorDetails[0]['user_address'];
				$_OuserDetails->_SphoneNumber = $_ArequestorDetails[0]['phone_number'];
				$_OuserDetails->_SapprovedStatus = $_ArequestorDetails[0]['approved_status'];
				$_OuserDetails->_SemailVerificationStatus = 'N';
				$_OuserDetails->_StimeZoneInterval = $_ArequestorDetails[0]['time_zone_interval'];
				$_OuserDetails->_StimeZoneKey = $_ArequestorDetails[0]['time_zone_key'];
				$_OuserDetails->_ScountryCode = $_ArequestorDetails[0]['country_code'];
				$_OuserDetails->_SlastLoginIpAddress = $_SERVER['REMOTE_ADDR '];
				$_OuserDetails->_ScountryNumber = $_ArequestorDetails[0]['country_number'];
				$_OuserDetails->_insertUserDetails();

				$userId = $_OuserDetails->_IuserId;
				$_Spassword = $_AcorporateDetails[0]['pos_code'].'@'.$_AcorporateDetails[0]['corporate_id'].'_'.$userId;
				$_Spassword = $this->md5valueEncoder($_Spassword);
				#updating password
				$_OuserDetails->__construct();
				$_OuserDetails->_IuserId = $userId;
				$_OuserDetails->_SuserPassword = $_Spassword;
				$_OuserDetails->_updateUserDetails();

				#selecting the created user information
				$_OuserDetails->__construct();
				$_OuserDetails->_IuserId = $userId;
				$_AuserDetails=$_OuserDetails->_selectUserDetails();
			}
			else
			{
				if(in_array($_AuserDetails[0]['group_id'],$CFG['default']['airlinesGroupId']))
				{
					return false;
				}				
			}
			$_SuserId = $_AuserDetails[0]['user_id'];			
			$_AinputData['emailIdHidden'] = $_SuserId;
			$_AinputData['userDetails'] = $_SuserId;
		}
		if(!isset( $_AuserDetails[0]['corporate_id']))
		{
			$_OuserDetails->__construct();
			$_OuserDetails->_IuserId = $_AinputData['emailIdHidden'];
			$_AuserDetails=$_OuserDetails->_selectUserDetails();
		}
		fileRequire("dataModels/class.corporateSalespersonMapping.php");
		$_OcorporateSalesPersonMapping = new corporateSalespersonMapping;
		$_OcorporateSalesPersonMapping->_Oconnection = $this->_Oconnection;
		$_OcorporateSalesPersonMapping->_IcorporateId = $_AuserDetails[0]['corporate_id'];
		$_OcorporateSalesPersonMapping->_IuserId  =  $_SESSION['groupRM']['groupUserId'];
		$_OcorporateSalesPersonMapping->_selectCorporateSalespersonMapping();
		if($_OcorporateSalesPersonMapping->_IcountLoop == 0)
		{
			$_OcorporateSalesPersonMapping->__construct();
			$_OcorporateSalesPersonMapping->_IcorporateId =$_AuserDetails[0]['corporate_id'];
			$_OcorporateSalesPersonMapping->_IuserId  = $_SESSION['groupRM']['groupUserId'];
			$_OcorporateSalesPersonMapping->_insertCorporateSalespersonMapping();
		}		
		return $_AinputData;
	}
	function _getAirportDetails($airportCode)
	{
		global $CFG;
		$_AstaticData = $this->_staticData('_getAirportDetails',$airportCode);
		if($_AstaticData !== false)
		{
			$airportDetails = $_AstaticData;
		}
		else
		{
			$sqlSelectAirportDetails="SELECT
							ad.airport_name,
							ad.country_code,
							cd.citizenship_name,
							cd.citizen_code,
							cd.currency_code as airportCurrencyCode
						   FROM
							".$CFG['db']['tbl']['airport_details']." ad,
							".$CFG['db']['tbl']['citizenship_details']." cd
						   WHERE
							ad.airport_code='".$airportCode."'
							AND cd.citizen_code=ad.country_code";
			if(DB::isError($resultAirportDetails=$this->_Oconnection->query($sqlSelectAirportDetails)))
			{
				fileWrite($sqlSelectAirportDetails,"SqlError","a+");
				return false;
			}
		
			if($resultAirportDetails->numRows() >0)
			{
				$airportDetails = $resultAirportDetails->fetchRow(DB_FETCHMODE_ASSOC);
			}
			$this->_staticData('_getAirportDetails',$airportCode,$airportDetails);
		}
		return $airportDetails;
	}
	/* get payment deposit types */
	function _getPaymentDepositTypes()
	{
		global $CFG;
		$_ApaymentTypes = array();
		foreach($CFG['deposit']['depositType'] as $val)
		{
			$_AdepositType = array();
			$_AdepositType['type'] = $val;
			if($val == 'Percentage')
				$_AdepositType['depositInpercent'] = 'Y';
			else
				$_AdepositType['depositInpercent'] = 'N';

			$_ApaymentTypes[] = $_AdepositType;
		}
		return $_ApaymentTypes;
	}
	function _getConvertedValidities($toCurrency,$timeLineMatrix)
	{

		if(isset($timeLineMatrix['payment_in_percent']) && $timeLineMatrix['payment_in_percent'] == 'N')
		{
			$fromCurrency = $timeLineMatrix['payment_currency'];
			$currencyInfo = $this->_currencyConversion($fromCurrency,$toCurrency);
			$currencyRate = $currencyInfo['amount'];

			$timeLineMatrix['payment_currency'] = $toCurrency;
			$amount = $timeLineMatrix['payment_percentage']*$currencyRate;
			$timeLineMatrix['payment_percentage'] = $this->_getRoundOffFare($amount,"",$toCurrency);

			foreach($timeLineMatrix['paymentValidityCount'] as &$paymentValidity)
			{
				$amount = $paymentValidity['payment_percentage']*$currencyRate;
				$paymentValidity['payment_percentage'] = $this->_getRoundOffFare($amount,"",$toCurrency);
			}

			if(isset($timeLineMatrix['paymentRequestDetails']) && !empty($timeLineMatrix['paymentRequestDetails']))
			{
				$timeLineMatrix['paymentRequestDetails'] = json_decode($timeLineMatrix['paymentRequestDetails'],true);
				foreach($timeLineMatrix['paymentRequestDetails'] as &$requestDetailVal)
				{
					$amount = $requestDetailVal['payment_percentage']*$currencyRate;
					$requestDetailVal['payment_percentage'] = $this->_getRoundOffFare($amount,"",$toCurrency);
				}
				$timeLineMatrix['paymentRequestDetails'] = json_encode($timeLineMatrix['paymentRequestDetails']);
			}			
		}

		return $timeLineMatrix;
	}
	function _currencyConversion($fromCurrency,$toCurrency,$paymentMasterIds='',$requestMasterId='',$_SregistrationPayment='N')
	{

		global $CFG;
		$currencyDetails = array();
		$_ArequestStatusArray = array();

		//Stores the parameter in a variable
		$_Svar = $fromCurrency.'_'.$toCurrency;
		//Calls the staticData function and checks its not empty and return the result here
		$_AstaticData = $this->_staticData("_currencyConversion",$_Svar);
		if($_AstaticData !== false)
			return $_AstaticData;
		if(trim($fromCurrency) != trim($toCurrency))
		{
			$currencyRate = 0;
			$toExchangeRate = 0;
			$fromExchangeRate = 0; 

			$currencies = $this->_getCurrencyDetails();
			foreach($currencies as $val)
			{
				if($fromCurrency == $val['currency_type'])
					$fromExchangeRate = $val['exchange_rate'];
				else if($toCurrency == $val['currency_type'])
					$toExchangeRate = $val['exchange_rate'];
			}
			$currencyRate = $fromExchangeRate/$toExchangeRate;
		}
		else
			$currencyRate = 1;

		/* Getting currency details from pnr payment transactions if already status is in fund verify. only get the initiated exchange rate */
		$exchangeRateFromPnrTransaction = array();

		if(!empty($paymentMasterIds) && $paymentMasterIds != 0 && $_SregistrationPayment != 'Y')
		{	

			/* Get pnr payment details*/
			$selectPnrPaymentTransactionsIds = "SELECT * FROM ".$CFG['db']['tbl']['payment_transaction_details']." WHERE payment_master_id IN (".implode(",", $paymentMasterIds).") ORDER BY payment_transaction_id DESC";

			if(DB::isError($resultPnrPaymentTransactionsIds=$this->_Oconnection->query($selectPnrPaymentTransactionsIds)))
			{
				fileWrite($selectPnrPaymentTransactionsIds,"SqlError","a+");
				return false;
			} 
			if($resultPnrPaymentTransactionsIds->numRows() > 0)
			{
				while($rowPaymentTransactionsIds=$resultPnrPaymentTransactionsIds->fetchRow(DB_FETCHMODE_ASSOC))
				{
					$paymentTransactionIds[] = $rowPaymentTransactionsIds;
				}
				
			}


			if($requestMasterId != '' && $requestMasterId != 0)
			{
				$_AgetPnrPaymentDetails = $this->_getPnrPaymentDetails($requestMasterId,'','','','','Y'); 

				foreach($_AgetPnrPaymentDetails as $key => $value)
				{
					if(in_array($value['paymentStatus'],array('APPROVED')))
					{
						$_ApprovedStatusArray[] = $value['pnrPaymentId'];
					}
					if(in_array($value['paymentStatus'],array('REQUEST')))
					{
						$_ArequestStatusArray[] = $value['pnrPaymentId'];
					}
					if(in_array($value['paymentStatus'],array('PENDING')))
					{
						$_ApaymentPendingIds[] = $value['pnrPaymentId'];
					}
				}
			}
			if(!empty($_ApprovedStatusArray))
			{
				$approvedCond = "pnr_payment_id IN (".implode(",", $_ApprovedStatusArray).")";
				$ApprovedPnrPaymentTransactions = "SELECT * FROM ".$CFG['db']['tbl']['pnr_payment_transactions']." WHERE ".$approvedCond." ORDER BY pnr_payment_transaction_id DESC";

				if(DB::isError($resultApprovedPnrPaymentTransactions=$this->_Oconnection->query($ApprovedPnrPaymentTransactions)))
				{
					fileWrite($ApprovedPnrPaymentTransactions,"SqlError","a+");
					return false;
				} 
				if($resultApprovedPnrPaymentTransactions->numRows() > 0)
				{
					while($rowApprovedPnrPaymentTransactions=$resultApprovedPnrPaymentTransactions->fetchRow(DB_FETCHMODE_ASSOC))
					{
						$ApprovedExchangeRate[] = $rowApprovedPnrPaymentTransactions;
					}
					
				}	
				if($ApprovedExchangeRate[0]['status'] != 'N')
				{
					$approvedCurrencyRate = $ApprovedExchangeRate[0]['exchange_rate'];
				}
			}
			$cond = '';
			if(!empty($paymentTransactionIds))
			{
				/* Get payment transaction id from payment transaction details table*/ 
				$_ApaymentTransIds = array_column($paymentTransactionIds,"payment_transaction_id");
				$cond = "payment_transaction_id IN (".implode(",", $_ApaymentTransIds).")";
			}	

			if(empty($_ArequestStatusArray) && !empty($_ApaymentPendingIds))
			{
				$cond = "pnr_payment_id IN (".implode(",", $_ApaymentPendingIds).")";
			}

			if($cond != '')
			{
				$selectPnrPaymentTransactions = "SELECT * FROM ".$CFG['db']['tbl']['pnr_payment_transactions']." WHERE ".$cond." ORDER BY pnr_payment_transaction_id DESC";

				if(DB::isError($resultPnrPaymentTransactions=$this->_Oconnection->query($selectPnrPaymentTransactions)))
				{
					fileWrite($selectPnrPaymentTransactions,"SqlError","a+");
					return false;
				} 
				if($resultPnrPaymentTransactions->numRows() > 0)
				{
					while($rowPnrPaymentTransactions=$resultPnrPaymentTransactions->fetchRow(DB_FETCHMODE_ASSOC))
					{
						$exchangeRateFromPnrTransaction[] = $rowPnrPaymentTransactions;
					}
					
				}
				if(isset($exchangeRateFromPnrTransaction[0]['status']) && $exchangeRateFromPnrTransaction[0]['status'] != 'N')
				{
					$currencyRate = $exchangeRateFromPnrTransaction[0]['exchange_rate'];
				}
			}
			
		}
		if(empty($_ArequestStatusArray) || $_SregistrationPayment == 'Y')
		{
			//getting exchange rate from service
			if($CFG['payment']['getServiceExchangeRate']=="Y" && trim($fromCurrency) != trim($toCurrency))
			{
				fileRequire("classes/class.airlineService.php");
				$_OairlineService=new airlineService();
				if($CFG['site']['amountCurrencyConversion'] == 'Y')
				{
					$_OairlineService->_SfromCurrency=$fromCurrency;
					$_OairlineService->_StoCurrency=$toCurrency;
					$_OairlineService->_Iamount=1;
					$response=$_OairlineService->_currencyConversionService();
					if($response['responseCode']==0)
					{
						$currencyRate=$response['response']['conversionDetails']['conversionRate'];
						$serviceExchangeRate = $currencyRate;
					}
				}
				else
				{
					fileRequire("dataModels/class.citizenshipDetails.php");
					$_OcitizenshipDetails = new citizenshipDetails();
					$_OcitizenshipDetails->_Oconnection = $this->_Oconnection;
					$_OcitizenshipDetails->_ScurrencyCode=$fromCurrency;
					$_AcountryDetails = $_OcitizenshipDetails->_selectCitizenshipDetails();
					//from currency country as countryCode
					$_OairlineService->_ScountryCode = $_AcountryDetails[0]['citizen_code'];
					//to currency is currencyCode
					$_OairlineService->_ScurrencyCode = $toCurrency;
					$response=$_OairlineService->_currencyConversionService();
					if($response['responseCode']==0)
					{
						$currencyRate=$response['response']['body']['Country'][0]['Rate'];
						$serviceExchangeRate = $currencyRate;
					}
				}
				if($serviceExchangeRate && $approvedCurrencyRate!='')
				{
					$currencyRate = $approvedCurrencyRate;

					if($approvedCurrencyRate < $serviceExchangeRate)
					{
						$currencyRate = $serviceExchangeRate;
					}
				}
			}
		}
		$currencyDetails['from'] = $fromCurrency;
		$currencyDetails['to'] = $toCurrency;
		$currencyDetails['amount'] = $currencyRate;
		$currencyDetails['text'] = '1 '.$fromCurrency.' = '.$currencyRate.' '.$toCurrency;
		//Calls the _staticData and store the result in a variable
		$this->_staticData("_currencyConversion",$_Svar,$currencyDetails);
		return $currencyDetails;
	}
	function _updatePaymentRequestDetailsForAmount($requestMasterId,$percentInput='N',$genericFeeStatus='N',$pamentMasterIndex='')
	{

		global $CFG;

		$paymentAmount = 0;

		$transactionIdSql = "SELECT 
					tm.transaction_id,
					tm.payment_in_percent,
					arm.airlines_request_id 
				FROM 
					".$CFG['db']['tbl']['transaction_master']." tm,
					".$CFG['db']['tbl']['airlines_request_mapping']." arm
				WHERE
					tm.airlines_request_id = arm.airlines_request_id AND
					arm.request_master_id =".$requestMasterId."
				ORDER BY
					tm.transaction_id DESC LIMIT 1";
		
		if(DB::isError($resultTransactionId=$this->_Oconnection->query($transactionIdSql)))
		{
			fileWrite($transactionIdSql,"SqlError","a+");
			return false;
		} 
		if($resultTransactionId->numRows() > 0)
		{
			$_ItransactionDetails = $resultTransactionId->fetchRow(DB_FETCHMODE_ASSOC);
			
			if($_ItransactionDetails['payment_in_percent'] == 'N')
			{
				$totalFareAmt = $this->_getRequestTotalAmount($requestMasterId);
		
				$seriesRequestIdSql = "SELECT
								series_request_id  
							FROM 
								".$CFG['db']['tbl']['request_approved_flight_details']." 
							WHERE
								transaction_master_id = '".$_ItransactionDetails['transaction_id']."' and 
								airlines_request_id = '".$_ItransactionDetails['airlines_request_id']."' and 
								accepted_flight_status = 'Y'";

				
				if(DB::isError($resultSeriesRequestId=$this->_Oconnection->query($seriesRequestIdSql)))
				{
					fileWrite($seriesRequestIdSql,"SqlError","a+");
					return false;
				} 

				$seriesRequestIds = array();
				if($resultSeriesRequestId->numRows() > 0)
				{
					while($rowSelectRequestMaster=$resultSeriesRequestId->fetchRow(DB_FETCHMODE_ASSOC))
					{
						$seriesRequestIds[] = $rowSelectRequestMaster['series_request_id'];
					}
				}

				$seriesRequestIds = implode(',',$seriesRequestIds);

				

				$sqlPassengers = "SELECT
							sum(number_of_adult) as adultCount,
							sum(number_of_child) as childCount,
							sum(number_of_infant) as infantCount
						FROM
							".$CFG['db']['tbl']['series_request_details']."							
						WHERE
							series_request_id in (".$seriesRequestIds.")";

				if(DB::isError($resultPax=$this->_Oconnection->query($sqlPassengers)))
				{
					fileWrite($sqlPassengers,"SqlError","a+");
					return false;
				}
				$rowPassengers=$resultPax->fetchRow(DB_FETCHMODE_ASSOC);
				$totalPaxCount = $rowPassengers['adultCount'] + $rowPassengers['childCount'] + $rowPassengers['infantCount'];

				$selectPaymentRequestSql = "SELECT
									payment_request_id,
									transaction_id,
									payment_percentage,
									payment_absolute_amount
								FROM
									".$CFG['db']['tbl']['payment_request_details']."							
								WHERE
									transaction_id = ".$_ItransactionDetails['transaction_id'];

				if(DB::isError($resultPaymentRequest=$this->_Oconnection->query($selectPaymentRequestSql)))
				{
					fileWrite($selectPaymentRequestSql,"SqlError","a+");
					return false;
				} 

				$seriesRequestIds = array();
				if($resultPaymentRequest->numRows() > 0)
				{
					$paymentPercentages = array();
					$paymentAmounts = array();
					$paymentRequestDetails = array();
					while($paymentRequestRow=$resultPaymentRequest->fetchRow(DB_FETCHMODE_ASSOC))
					{

						$validityPercent = array_sum($paymentPercentages);
						$remainingPercent = 100 - $validityPercent;

						$paymentPercent = 0;
						$absoluteAmount = $paymentRequestRow['payment_absolute_amount'];
						
						if($absoluteAmount != 0)
						{
							$fareAmount = ($absoluteAmount * $totalPaxCount);

							$tempPayment = $fareAmount+array_sum($paymentAmounts);
							if($tempPayment > $totalFareAmt)
								$fareAmount = $totalFareAmt - array_sum($paymentAmounts);
							
							$paymentPercent = (($fareAmount / $totalFareAmt) * 100);
							$paymentPercent = $this->_getRoundOffFare($paymentPercent,2);
						}
						elseif($absoluteAmount == 0)
						{
							$fareAmount = $totalFareAmt - array_sum($paymentAmounts);
							if($fareAmount < 0)
								$fareAmount = 0;
							$paymentPercent = 100 - array_sum($paymentPercentages);
						}

						if($paymentPercent > $remainingPercent)
							$paymentPercent = $remainingPercent;


						//if($fareAmount > $totalFareAmt)
						//	$fareAmount = $totalFareAmt;

						$paymentPercentages[] = $paymentPercent;
						$paymentAmounts[] = $fareAmount;
						$paymentRequestRow['calculatedAmount'] = $fareAmount;
						$paymentRequestRow['calculatedPercent'] = $paymentPercent;
						$paymentRequestDetails[] = $paymentRequestRow;
					}

					if($percentInput == 'N')
					{
						foreach($paymentRequestDetails as $paymentRequestVal)
						{
							
							$sqlUpdatePaymentRequest = "UPDATE 
												".$CFG['db']['tbl']['payment_request_details']."							
											SET
												payment_percentage = ".$paymentRequestVal['calculatedPercent']."
											WHERE
												payment_request_id = ".$paymentRequestVal['payment_request_id']." AND
												transaction_id = ".$paymentRequestVal['transaction_id'];

							if(DB::isError($resultUpdatePaymentRequest=$this->_Oconnection->query($sqlUpdatePaymentRequest)))
							{
								fileWrite($sqlUpdatePaymentRequest,"SqlError","a+");
								return false;
							}
						}
					}
					else
					{
						foreach($paymentRequestDetails as $paymentRequestKey=>$paymentRequestVal)
						{
							$paymentRequestVal['payment_percentage'] = $this->_getRoundOffFare($paymentRequestVal['payment_percentage'],2);
							$percentInput = $this->_getRoundOffFare($percentInput,2);

							if($paymentRequestVal['payment_percentage'] == $percentInput || ($genericFeeStatus=='Y' && $paymentRequestKey==$pamentMasterIndex))
							{
								$paymentAmount = $paymentRequestVal['calculatedAmount'];
							}
						}
					}
				}
			}
		}
		if($percentInput != 'N')
			return $paymentAmount;
		
	}

	// The same functionality of the below function is also in the  _getConvertToUTCDateValue().Hence the below function is commented
	/*function _getUtcDateTimeFromServiceOffet($givenDateValue,$offset)
	{
		global $CFG;
		$offsetOperator=substr($offset,0,1);
		$offsetTime=substr($offset,1);
		$offsetSpilt=explode(":",$offsetTime);
		$offsetVal=($offsetSpilt[0]*60)+$offsetSpilt[1];		
		return $this->_getConvertToUTCDateValue($givenDateValue,$offsetOperator.$offsetVal);
	}*/

	function _calculateHourMins($minutes)
	{			
		$returnVal=explode(":",$this->_convertToHoursMins($minutes));
	
		if($returnVal[0]<10)
			$returnVal[0]="0".$returnVal[0];
		if($returnVal[1]<10)
			$returnVal[1]="0".$returnVal[1];

		return implode(":",$returnVal);
	}
	
	function _getPnrPaymentDetails($_IrequestMasterId,$_Spnr='',$_paymentStatus="",$_SadvanceExp='N',$_SnoRefund='N',$_getApproved='N',$_SallowMultiple = "")
	{
		
		global $CFG;
		if($_SallowMultiple == '') {
			$_Svariable = $_IrequestMasterId . "_" . $_Spnr . "_" . $_paymentStatus . "_" . $_SadvanceExp . "_" . $_SnoRefund. "_" . $_getApproved;
			$_AstaticData = $this->_staticData("_getPnrPaymentDetails", $_Svariable);
			if ($_AstaticData !== false) {
				return $_AstaticData;
			}
		}
		$UTCDateAndTime=$this->_getUTCDateValue();
		$_IairlinesRequestId = (!empty($_IrequestMasterId['airlines_request_id']))?$_IrequestMasterId['airlines_request_id']:$this->_getAirlineRequestId($_IrequestMasterId);
		if(!empty($_IrequestMasterId['request_master_id'])){
			$_ArequestMasterId = $_IrequestMasterId;
			$_IrequestMasterId=$_IrequestMasterId['request_master_id'];
		}
		$_ArestrictStatus=$this->_getStatusDetails('',$CFG["payment"]["paymentRestrictStatus"]);
		$_SrefundCondition='';
		//To take record with payment percentage >0(ie.,not to take refund details)
		if($_SnoRefund=='Y')
			$_SrefundCondition=" AND payment_percentage>0";
		if(empty($_ArequestMasterId['payment_master']))
		{
			$paymentMasterQuery="SELECT 
						payment_master_id
					FROM
						".$CFG['db']['tbl']['payment_master']." 
					WHERE
						airlines_request_id = ".$_IairlinesRequestId."
						AND payment_status NOT IN('".implode( "', '",$_ArestrictStatus)."') ".$_SrefundCondition;
						
			if(DB::isError($result=$this->_Oconnection->query($paymentMasterQuery)))
			{
				fileWrite($paymentMasterQuery,"SqlError","a+");
				return false;
			}
			if($result->numRows() >0)
			{
				while($row=$result->fetchRow(DB_FETCHMODE_ASSOC))
				{
					$paymentMasterIdArray[] = $row['payment_master_id'];
				}	
			}
		} else {
			foreach ($_ArequestMasterId['payment_master'] as $paymentMasterValue) {
				if($this->_AstatusDetails!=$paymentMasterValue['payment_status'])
					$paymentMasterIdArray[] = $paymentMasterValue['payment_master_id'];		
			}
		}
		$condition='';
		if($_Spnr!='')
			$condition.=" AND pnr= '".$_Spnr."' ";
		if($_paymentStatus!="")
		{
			#Checking multiple status passed
			$checkMultipleStatus = explode(",",$_paymentStatus);
			if(count($checkMultipleStatus)>1)
				$condition.=" AND payment_status IN (".$_paymentStatus.")";
			else
				$condition.=" AND payment_status = '".$_paymentStatus."'";
				
			if(!empty($_ArequestMasterId['pnr_payment_details'])){
				$_ArequestMasterPnrPaymentDetails=array();
				foreach ($_ArequestMasterId['pnr_payment_details'] as $pnrPaymentValue) {
					if(in_array($pnrPaymentValue['payment_status'], $checkMultipleStatus) && (($_Spnr!=""&&$_Spnr==$pnrPaymentValue['pnr']) || $_Spnr==""))
						$_ArequestMasterPnrPaymentDetails[] = $pnrPaymentValue;	
				}
				$_ArequestMasterId['pnr_payment_details']=$_ArequestMasterPnrPaymentDetails;
			}
		}
		else
		{
			if($_getApproved == 'Y')
			{
				$_AnotInCondition = array('TIMELINEEXTEND','CLOSED');
			}
			else
			{
				$_AnotInCondition = array('TIMELINEEXTEND','APPROVED','CLOSED','PR');
			}
			
			$condition.=(" AND payment_status NOT IN ('".implode("','",$_AnotInCondition)."') ");
			if(!empty($_ArequestMasterId['pnr_payment_details'])){
				$_ArequestMasterPnrPaymentDetails=array();
				foreach ($_ArequestMasterId['pnr_payment_details'] as $pnrPaymentValue) {
					if(!in_array($pnrPaymentValue['payment_status'], $_AnotInCondition)&& (($_Spnr!=""&&$_Spnr==$pnrPaymentValue['pnr']) || $_Spnr==""))
						$_ArequestMasterPnrPaymentDetails[] = $pnrPaymentValue;	
				}
				$_ArequestMasterId['pnr_payment_details']=$_ArequestMasterPnrPaymentDetails;
			}
		}
		$pnrPaymentDetailsArray = array();
		if(!empty($_ArequestMasterId['pnr_payment_details'])){
			$_ApnrPaymentDeatils=$_ArequestMasterId['pnr_payment_details'];
		}else{	
			$_ApnrPaymentDeatils=array();
			$_ApnrPaymentDeatilsRow=array();
			foreach($paymentMasterIdArray as $paymentMasterIdVal)
			{
				$pnrPaymentQuery="SELECT 
										pnr_payment_id,
										payment_master_id,
										pnr,
										paid_amount,
										pnr_payment_validity_date,
										request_timeline_id,
										payment_status,
										pnr_percentage_amount
									FROM ".$CFG['db']['tbl']['pnr_payment_details']." 
									WHERE payment_master_id = ".$paymentMasterIdVal." ".$condition;
				if(DB::isError($result=$this->_Oconnection->query($pnrPaymentQuery)))
				{
					fileWrite($pnrPaymentQuery,"SqlError","a+");
					return false;
				}
				
				if($result->numRows() >0)
				{		
					// $_ApnrPaymentDeatilsRow=array();
					while($row=$result->fetchRow(DB_FETCHMODE_ASSOC))
					{
						$_ApnrPaymentDeatilsRow[]=$row;
					}
					$_ApnrPaymentDeatils=$_ApnrPaymentDeatilsRow;
				}
			}
		}
		foreach ($_ApnrPaymentDeatils as $row) {
			$pnrPaymentDetails=array();
			$pnrPaymentDetails['pnrPaymentId'] = $row['pnr_payment_id'];
			$pnrPaymentDetails['paidAmount'] = $row['paid_amount'];
			$pnrPaymentDetails['paymentMasterId'] = $row['payment_master_id'];
			$pnrPaymentDetails['pnr'] = $row['pnr'];
			$pnrPaymentDetails['paymentValidityDisplay']=$this->_getUserDateFormatValue($row['pnr_payment_validity_date']);
			$pnrPaymentDetails['paymentValidity'] = $row['pnr_payment_validity_date'];
			$pnrPaymentDetails['paymentRequestId'] = $row['payment_request_id'];
			$pnrPaymentDetails['paymentStatus'] = $row['payment_status'];
			$pnrPaymentDetails['requestTimeLineId'] = $row['request_timeline_id'];
			$pnrPaymentDetails['paymentExpiryStatus'] = 'N';
			$pnrPaymentDetails['pnrPercentageAmount'] = $row['pnr_percentage_amount'];
			#Check for payment expiry date
			//echo $row['pnr_payment_validity_date'];
			//No of days before consider as expiry
			$_InoOfDaysBeforeExpiry=$CFG['settings']['paymentAdvanceExpiry'];
			if(!in_array($_SESSION['groupRM']['groupId'],$CFG['default']['airlinesGroupId']))
				$_InoOfDaysBeforeExpiry = $CFG['settings']['agentPaymentAdvanceExpiry'];
			$diff = $this->_dateDifference($UTCDateAndTime,$row['pnr_payment_validity_date']);
			if(($this->_SextendLinkBeforeExpiry=='Y' && ($CFG['settings']['paymentAdvanceExpiry']==0)) || $CFG['settings']['agentPaymentAdvanceExpiry'] == 0)
			{
				//$_SadvanceExp condition added when requested is accepted will display payment expired icon
				$pnrPaymentDetails['paymentExpiryStatus'] = 'Y';
			}
			elseif($_SadvanceExp == 'Y' && $_InoOfDaysBeforeExpiry>0 && ($diff['days']<=$_InoOfDaysBeforeExpiry) && ($UTCDateAndTime < $row['pnr_payment_validity_date']))
			{
				//$_SadvanceExp condition added in the below condtion sequesnce to display payment expired icon alone
				$pnrPaymentDetails['paymentExpiryStatus'] = 'Y';
			}
			else
			{
				if($UTCDateAndTime>$row['pnr_payment_validity_date'])
					$pnrPaymentDetails['paymentExpiryStatus'] = 'Y';
				/**
				 * To hide the extend timeline when the payment validity expires
				**/
				if(isset($CFG['settings']['extendLinkBeforeExpiry']) && ($CFG['settings']['extendLinkBeforeExpiry'] == 'Y')) 
					$pnrPaymentDetails['paymentExpiryStatus'] = 'N';
			}

			/*if($_SadvanceExp=='Y'){
				$diff = $this->_dateDifference($UTCDateAndTime,$row['pnr_payment_validity_date']);
				if(($CFG["settings"]["paymentAdvanceExpiry"]>0 && round($diff['days'])<=$CFG["settings"]["paymentAdvanceExpiry"]) || round($diff['minutes'])<=$CFG["settings"]["paymentAdvanceExpiry"]){
					$pnrPaymentDetails['paymentExpiryStatus'] = 'Y';
				}
			}else{
				if($UTCDateAndTime>$row['pnr_payment_validity_date'])
					$pnrPaymentDetails['paymentExpiryStatus'] = 'Y';
			}*/
			 
			$pnrPaymentDetailsArray[]=$pnrPaymentDetails;
		}
		if($_SallowMultiple == '') {
			$this->_staticData("_getPnrPaymentDetails", $_Svariable, $pnrPaymentDetailsArray);
		}
		return $pnrPaymentDetailsArray;
	}
	
	function _getFirstOrigin($_IrequestMasterId,$_IseriesRequestId="")
	{
		
		global $CFG;
		$_Svar = $_IrequestMasterId . '_' . $_IseriesRequestId;
		$_AstaticData = $this->_staticData("_getFirstOrigin", $_Svar);
		if ($_AstaticData !== false) {
			return $_AstaticData;
		}
		if(!empty($_IrequestMasterId['transaction_id']))
			$_IlastTransactionId = $_IrequestMasterId['transaction_id'];
		else
			$_IlastTransactionId = $this->_getLastTransactionMasterId($_IrequestMasterId);

		if(!empty($_IrequestMasterId['request_master_id'])){
			$_ArequestMasterId=$_IrequestMasterId;
			$_IrequestMasterId=$_IrequestMasterId['request_master_id'];
		}
		
		
		$fieldName = "";
		$condition="";
		$_SarrayFlag="N";
		if($_IseriesRequestId!="")
			$condition=" AND series_request_id=".$_IseriesRequestId."";
		if($_IlastTransactionId != 0)
		{
			if(!empty($_ArequestMasterId['source'])){
				$_SoriginAirportCode=$_ArequestMasterId['source'];
				$_SarrayFlag="Y";
			}else{

				$sql = "SELECT
							source
						FROM
							".$CFG['db']['tbl']['request_approved_flight_details']."
						WHERE
							transaction_master_id = ".$_IlastTransactionId." AND
							accepted_flight_status = 'Y'
							".$condition."
						ORDER BY
							departure_date ASC, request_id ASC
						LIMIT 1";
				$fieldName = "source";
			}
		}
		else
		{
			$sql = "SELECT
						origin_airport_code
					FROM
						".$CFG['db']['tbl']['request_details']."
					WHERE
						request_master_id = ".$_IrequestMasterId."
					ORDER BY
						from_date ASC, request_id ASC
					LIMIT 1";
			$fieldName = "origin_airport_code";
		}
		if($_SarrayFlag=="N"){
			if(DB::isError($result = $this->_Oconnection->query($sql))) 
			{
				fileWrite($sql,'SqlError','a+');
				return false;
			}
			
			$_SoriginAirportCode = "";
			if($result->numRows() >0)
			{
				$row = $result->fetchRow(DB_FETCHMODE_ASSOC);
				$_SoriginAirportCode = $row[$fieldName];
			}
		}
		$this->_staticData("_getFirstOrigin", $_Svar, $_SoriginAirportCode);	
		return $_SoriginAirportCode;
	}	
	
	function _getTripType($requestMasterId)
	{
		global $CFG;
		
		$_AstaticData = $this->_staticData("_getTripType",$requestMasterId);
		if($_AstaticData !== false)
			return $_AstaticData;
		
		$sql="SELECT
					trip_type
			FROM
					".$CFG['db']['tbl']['request_master']."
			WHERE
					request_master_id='".$requestMasterId."'";
		if(DB::isError($result = $this->_Oconnection->query($sql))) 
		{
			fileWrite($sql,"SqlError","a+");
			return false;
		}
		if($result->numRows() >0)
		{
			while($row = $result->fetchRow(DB_FETCHMODE_ASSOC))
			{
				$tripType=$row['trip_type'];
			}
		}
		$this->_staticData("_getTripType",$requestMasterId,$tripType);
		return $tripType;
	}

	/**
	 * Desc - To get the no of trip in the request
	 * Param - RequestMasterId and Series group id(For conference)
	 * Return - Integer -> No of trips
	 * Created By - Dilli Raj P.
	**/
	function _getTripCount($_IrequestMasterId,$_IseriesGroupId = 1)
	{
		global $CFG;
		
        $_SmodifyStatus = $this->_checkIsModify($_IrequestMasterId)['requestModifyStatus'];
		$_Svar = $_IrequestMasterId.'_'.$_IseriesGroupId.'_'.$_SmodifyStatus;
		$_AstaticData = $this->_staticData("_getTripType",$_Svar);
		if($_AstaticData !== false)
			return $_AstaticData;
		$_Scondition3 = '';
		if($_SmodifyStatus == 'Y')
		{
			$_Stable1 = $CFG['db']['tbl']['request_master_history'];
			$_Stable2 = $CFG['db']['tbl']['request_details_history'];
			$_Stable3 = $CFG['db']['tbl']['series_request_details_history'];
			$_Scondition1 = "t1.request_master_history_id = t2.request_master_history_id";
			$_Scondition2 = "t2.request_details_history_id = t3.request_details_history_id";
			$_Scondition3 = " AND t1.request_master_history_id = (SELECT MAX(request_master_history_id) FROM ".$_Stable1." WHERE request_master_id = ".$_IrequestMasterId.")";
		}
		else
		{
			$_Stable1 = $CFG['db']['tbl']['request_master'];
			$_Stable2 = $CFG['db']['tbl']['request_details'];
			$_Stable3 = $CFG['db']['tbl']['series_request_details'];
			$_Scondition1 = "t1.request_master_id = t2.request_master_id";
			$_Scondition2 = "t2.request_id = t3.request_id";            
		}
		$_Ssql = "SELECT 
					count(*) as trip_count
				FROM ".
					$_Stable1." t1 
				INNER JOIN 
					".$_Stable2." t2 
				ON 
					".$_Scondition1."
				INNER JOIN 
					".$_Stable3." t3
				ON 
					".$_Scondition2."
				WHERE 
					t1.request_master_id = ".$_IrequestMasterId;
		if(!empty($_IseriesGroupId))
		{
			$_Ssql .= " AND 
						t3.series_group_id = ".$_IseriesGroupId;
		}
		$_Ssql .= $_Scondition3;
		if(DB::isError($result = $this->_Oconnection->query($_Ssql))) 
		{
			fileWrite($_Ssql,"SqlError","a+");
			return false;
		}
		if($result->numRows() >0)
		{
			$row = $result->fetchRow(DB_FETCHMODE_ASSOC);
			$_ItripCount=$row['trip_count'];
		}
		$this->_staticData("_getTripCount",$_Svar,$_ItripCount);
		return $_ItripCount;
	}
	/**
	 * Desc - To get the request details of the request
	 * Param - RequestMasterId 
	 * Return - Array --> Request details
	 * Created By - Dilli Raj P.
	**/
	function _getRequestDetails($_IrequestMasterId)
	{
		global $CFG;
		
		$_Svar = $_IrequestMasterId;
		$_AstaticData = $this->_staticData("_getRequestDetails",$_Svar);
		if($_AstaticData !== false)
			return $_AstaticData;
		
		fileRequire('dataModels/class.requestDetails.php');
		$_OrequestDetails = new requestDetails();
		$_OrequestDetails->__construct();
		$_OrequestDetails->_Oconnection = $this->_Oconnection;
		$_OrequestDetails->_IrequestMasterId = $_IrequestMasterId;
		$_ArequestDetails = $_OrequestDetails->_selectRequestDetails();
		
		$this->_staticData("_getRequestDetails",$_Svar,$_ArequestDetails);
		return $_ArequestDetails;
	}
	
	function _getPnrWiseDetails($pnr,$requestMasterId=0)
	{

		global $CFG;
		$_Svariable = $pnr . "_" . $requestMasterId;
		$_AstaticData = $this->_staticData("_getPnrWiseDetails", $_Svariable);
		if ($_AstaticData !== false) {
			return $_AstaticData;
		}
		
		$pnrDetails=array();
		
		$sqlSelectPNRWiseDetails="SELECT
									DISTINCT pnr,pnr_amount,status,no_of_adult,no_of_child,no_of_infant,no_of_foc
								FROM
									".$CFG['db']['tbl']['pnr_blocking_details']."
								WHERE
									pnr='".$pnr."'";
		if($requestMasterId>0)		
				$sqlSelectPNRWiseDetails .= " AND request_master_id = '".$requestMasterId."'";
									
				if(DB::isError($resultPNR =$this->_Oconnection->query($sqlSelectPNRWiseDetails)))
				{
					fileWrite($sqlSelectPNRWiseDetails,"SqlError","a+");
					return false;
				}
				if($resultPNR->numRows()>0)
				{
					while($rowPNR=$resultPNR->fetchRow(DB_FETCHMODE_ASSOC))
					{
							$pnrDetails[]=$rowPNR;
							
					}	
				}
			$this->_staticData("_getPnrWiseDetails", $_Svariable, $pnrDetails);	
			return $pnrDetails;
	}
	
	function _getPnrAmountDetails($IrequestMasterId)
	{
		global $CFG;
		
		$pnrDetails=array();
		
		$sqlSelectPnrDetails="SELECT
									pnr,pnr_amount,request_approved_flight_id,status,no_of_adult,no_of_child,no_of_infant
								FROM
									".$CFG['db']['tbl']['pnr_blocking_details']."
								WHERE
									request_master_id='".$IrequestMasterId."'";
				if(DB::isError($resultPNR =$this->_Oconnection->query($sqlSelectPnrDetails)))
				{
					fileWrite($sqlSelectPnrDetails,"SqlError","a+");
					return false;
				}	
				if($resultPNR->numRows()>0)
				{
					while($rowPNR=$resultPNR->fetchRow(DB_FETCHMODE_ASSOC))
					{
							$pnrDetails[]=$rowPNR;
							
					}	
				}
			return $pnrDetails;
	}
	
	function _getPnrPaidPercentage($pnr,$_IairlinesRequestId=0)
	{
		global $CFG;
		$_Svariable = $pnr.'_'.$_IairlinesRequestId;
		// $_AstaticData = $this->_staticData("_getPnrPaidPercentage",$_Svariable);
		// if($_AstaticData !== false)
		// 	return $_AstaticData;
		$condition = '';
		/*if duplicate pnr present for more than one request then
		* using payment master id sort seperate request.
		* */
		if($_IairlinesRequestId==0 && $pnr!='')
		{
			fileRequire('dataModels/class.pnrBlockingDetails.php');
			$_OpnrBlockingDetails=new pnrBlockingDetails();
			$_OpnrBlockingDetails->_Oconnection=$this->_Oconnection;
			$_OpnrBlockingDetails->_Spnr=$pnr;
			// Divide parent/child -PNR and Req id wrongly setting - issue fixing
			// $_OpnrBlockingDetails->_SdummyPNR='N';
			$_ApnrBlockingDetails=$_OpnrBlockingDetails->_selectPnrBlockingDetails();
			$_IairlinesRequestId=$this->_getAirlineRequestId($_ApnrBlockingDetails[0]['request_master_id']);
		}
		if (isset($_IairlinesRequestId) && $_IairlinesRequestId != 0) {
			fileRequire('dataModels/class.paymentMaster.php');
			$_OpaymentMaster = new paymentMaster();
			$_OpaymentMaster->_Oconnection = $this->_Oconnection;
			$_OpaymentMaster->_IairlinesRequestId = $_IairlinesRequestId;
			$_ApaymentMasterIds = array_column($_OpaymentMaster->_selectPaymentMaster(), 'payment_master_id');
			if (count($_ApaymentMasterIds) > 0) {
				$condition = " AND payment_master_id IN ('" . implode("','", $_ApaymentMasterIds) . "')";
			}
		}
		$sql = "SELECT
					round(sum(pnr_percentage_amount),2) as pnrPaidPercentage
				FROM
				".$CFG['db']['tbl']['pnr_payment_details']."
				WHERE
					pnr='".$pnr."' AND 
					payment_status = 'Approved'".$condition;
		if(DB::isError($result = $this->_Oconnection->query($sql))) 
		{
			fileWrite($sql,"SqlError","a+");
			return false;
		}
		$_IpnrPaidPercentage = 0;
		if($result->numRows()>0)
		{
			while($row = $result->fetchRow(DB_FETCHMODE_ASSOC))
			{
				/**
				 * We are using the aggregate function so it returns NULL so that we enable this condition to return pnrpaidpercentage 
				 	as zero
				**/
				if($row['pnrPaidPercentage'] != '')
					$_IpnrPaidPercentage=$row['pnrPaidPercentage'];
			}
		}
		//$this->_staticData("_getPnrPaidPercentage",$_Svariable,$_IpnrPaidPercentage);
	    return $_IpnrPaidPercentage;
	}

	function _getAgentIdDetails()
	{
		global $CFG;		
		$sql="SELECT
					".encrypt::_decrypt('pcc_code')." AS pcc_code
			FROM
					".$CFG['db']['tbl']['corporate_details']."
				";
		if(DB::isError($result=$this->_Oconnection->query($sql)))
		{
			fileWrite($sql,'sqlError',"a+");
		}
		if($result->numRows() >0)
		{
			while($rowAgentIdDetails=$result->fetchRow(DB_FETCHMODE_ASSOC))
			{
				if(!empty($rowAgentIdDetails['pcc_code']))
					$this->_AagetIdDetails[]=$rowAgentIdDetails;
			}
			return $this->_AagetIdDetails;
		}
		
	}
	/*Modified By: Subalakshmi S 27-08-2018
		Desc     : The below lines are commented since it is called in 
		 			class.fetchPolicyDetails.php file*/
	/*function _getSurchargeDetails($givenPolicyArray)
	{
		global $CFG;
		
		$returnArray=array();
		$policyMasterValueArray=array();
		
		$_AstaticData = $this->_staticData('_getSurchargeDetails',$givenPolicyArray['policyRequestedDate']);
		if($_AstaticData !== false)
		{
			$_AsurchargePolicyMaster = $_AstaticData;
		}
		else
		{
			$sqlSelectPolicyMaster="SELECT
								surcharge_policy_id,
								surcharge_policy_name,
								surcharge_matrix_id,
								priority,
								created_date
						FROM
							".$CFG['db']['tbl']['surcharge_policy_master']."
						WHERE
							active_status='Y'
							AND ('".$givenPolicyArray['policyRequestedDate']."' BETWEEN start_date AND end_date)";

			if(DB::isError($resultSelectPolicyMaster=$this->_Oconnection->query($sqlSelectPolicyMaster)))
			{
				fileWrite($sqlSelectPolicyMaster,"SqlError","a+");
				return false;
			}

			if($resultSelectPolicyMaster->numRows() > 0)
			{
				while($rowSelectPolicyMaster=$resultSelectPolicyMaster->fetchRow(DB_FETCHMODE_ASSOC))
				{
					$_AsurchargePolicyMaster[] = $rowSelectPolicyMaster;
				}
			}
			$this->_staticData('_getSurchargeDetails',$givenPolicyArray['policyRequestedDate'],$_AsurchargePolicyMaster);
		}
		if(!empty($_AsurchargePolicyMaster))
		{
			foreach($_AsurchargePolicyMaster AS $key => $rowSelectPolicyMaster)
			{
				$_AstaticData = $this->_staticData('_getSurchargeDetails_policyDetails',$rowSelectPolicyMaster['surcharge_policy_id']);
				if($_AstaticData !== false)
				{
					$policyDetailsArray = $_AstaticData;
				}
				else
				{
					$sqlSelectPolicyDetails="SELECT
									pd.surcharge_policy_details_id,
									pd.surcharge_policy_id,
									pd.criteria_id,
									pd.loop_value,
									cm.criteria_name,
									cm.criteria_type,
									cm.criteria_logical_id,
									pd.operator_id,
									om.operator_name,
									om.logical_value,
									om.operator_type,
									pd.policy_value
								 FROM
									".$CFG['db']['tbl']['surcharge_policy_details']." pd,
									".$CFG['db']['tbl']['criteria_master']." cm,
									".$CFG['db']['tbl']['operator_master']." om
								 WHERE
									pd.surcharge_policy_id='".$rowSelectPolicyMaster['surcharge_policy_id']."'
									AND pd.criteria_id=cm.criteria_id
									AND pd.operator_id=om.operator_id";

					if(DB::isError($resultSelectPolicyDetails=$this->_Oconnection->query($sqlSelectPolicyDetails)))
					{
						fileWrite($sqlSelectPolicyDetails,"SqlError","a+");
						return false;
					}
					
					$resultValue=0;
					$stringToExecute="";
					
					if($resultSelectPolicyDetails->numRows() > 0)
					{
						while($rowSelectPolicyDetails=$resultSelectPolicyDetails->fetchRow(DB_FETCHMODE_ASSOC))
						{
							$policyDetailsArray[] = $rowSelectPolicyDetails;
						}
						$this->_staticData('_getSurchargeDetails_policyDetails',$rowSelectPolicyMaster['surcharge_policy_id'],$policyDetailsArray);
					}
				}
					
				$stringToExecute = $this->_getStringToExecuteForAllPolicy($policyDetailsArray,$givenPolicyArray);
				
				if($stringToExecute!="")
				{
					$resultStringToEval="IF( ".$stringToExecute." ){".'$resultValue'."=1;}";
					#fileWrite($resultStringToEval,"SURCHARGE","a+");// REM
					eval($resultStringToEval);
					if($resultValue==1)
					{
						$policyMasterValueArray[]=$rowSelectPolicyMaster;
					}
				}
				
			}
		}
		$minValue=0;
		
		if(count($policyMasterValueArray) > 0)
		{
			$finalInput=array("inputArray"=>$policyMasterValueArray,"firstFieldName"=>"priority","firstFieldOrder"=>"ASC","secondFieldName"=>"created_date","secondFieldOrder"=>"ASC");
			$finalArray=$this->_multipleSortFunction($finalInput);
			
			$fetchPolicyArray[0]=$finalArray[0];
			$fetchPolicyArray[0]['departureDate']=$givenPolicyArray['departureDate'];
			$fetchPolicyArray[0]['policyBookedLoadFactor']=$givenPolicyArray['policyBookedLoadFactor'];
			$fetchPolicyArray[0]['policyFutureLoadFactor']=$givenPolicyArray['policyFutureLoadFactor'];
			$fetchPolicyArray[0]['policyForecastLoadFactor']=$givenPolicyArray['policyForecastLoadFactor'];
			$fetchPolicyArray[0]['policyRequestMasterId']=$givenPolicyArray['policyRequestMasterId'];
			$fetchPolicyArray[0]['policyCurrencyType']=$givenPolicyArray['currencyType'];
			$fetchPolicyArray[0]['policyPaxCount']=$givenPolicyArray['noOfPax'];
			
			if(count($fetchPolicyArray) > 0)
			{
				$returnMatrixArray=$this->_getSurchargeMatrixValues($fetchPolicyArray);
				if(count($returnMatrixArray) > 0)
					$returnArray=$returnMatrixArray;
			}
			/*for($i=0;$i<count($policyMasterValueArray);$i++)
			{
				if($minValue==0 || $policyMasterValueArray[$i]['priority']<=$minValue)
				{
					$minValue=$policyMasterValueArray[$i]['priority'];
				}
			}
			$minIndex="";
			$appendString="";
			for($i=0;$i<count($policyMasterValueArray);$i++)
			{
				if($minValue==$policyMasterValueArray[$i]['priority'])
				{
					$minIndex.=$appendString.$i;
					$appendString=",";
				}
			}

			$explodeArray=explode(",",$minIndex);
			if(count($explodeArray) >0)
			{
				$fetchPolicyArray=array();
				
				$moveIndex=0;
				for($i=0;$i<count($explodeArray);$i++)
				{
					if(is_array($policyMasterValueArray[$explodeArray[$i]]) && isset($policyMasterValueArray[$explodeArray[$i]]))
					{
						$fetchPolicyArray[$moveIndex]=$policyMasterValueArray[$explodeArray[$i]];
						$fetchPolicyArray[$moveIndex]['departureDate']=$givenPolicyArray['departureDate'];
						$fetchPolicyArray[$moveIndex]['policyBookedLoadFactor']=$givenPolicyArray['policyBookedLoadFactor'];
						$fetchPolicyArray[$moveIndex]['policyRequestMasterId']=$givenPolicyArray['policyRequestMasterId'];
						$fetchPolicyArray[$moveIndex]['policyCurrencyType']=$givenPolicyArray['currencyType'];
						$fetchPolicyArray[$moveIndex]['policyPaxCount']=$givenPolicyArray['noOfPax'];
						$moveIndex++;
					}
				}

				if(count($fetchPolicyArray) > 0)
				{
					$returnMatrixArray=$this->_getSurchargeMatrixValues($fetchPolicyArray);
					if(count($returnMatrixArray) > 0)
						$returnArray=$returnMatrixArray;
				}
			}*/
		/*}	
		return $returnArray;
	}*/
	
	/*Modified By: Subalakshmi S 27-08-2018
		Desc     : The below lines are commented since it is called in 
		 			class.fetchPolicyDetails.php file*/
		 			
	/*function _getSurchargeMatrixValues($givenPolicyDetailsArray)
	{
		global $CFG;
		$currentDate=date('Y-m-d');
		$resultArray=array();
		
		for($i=0;$i<count($givenPolicyDetailsArray);$i++)
		{
			$departureDate=$givenPolicyDetailsArray[$i]['departureDate'];

			$daysToDeparture=strtotime($departureDate)-strtotime($currentDate);
			$daysToDeparture=floor($daysToDeparture/3600/24);
			
			#To check future load value as booked load factor is future load factor is enabled
			if($this->_getLoadFactorTypeDetails('_SsurchargeStatus','FLF')=="Y")
				$_SbookedLoadFactor=$givenPolicyDetailsArray[$i]['policyFutureLoadFactor'];
			else
				$_SbookedLoadFactor=$givenPolicyDetailsArray[$i]['policyBookedLoadFactor'];
			
			$sqlSelectDetails="SELECT
								sm.surcharge_matrix_id,
								sm.surcharge_matrix_name,
								smd.surcharge_details_id,
								smd.days_to_departure,
								smd.booked_load_factor
						  FROM
								".$CFG['db']['tbl']['surcharge_matrix']." sm,
								".$CFG['db']['tbl']['surcharge_matrix_details']." smd
						  WHERE
								sm.surcharge_matrix_id='".$givenPolicyDetailsArray[$i]['surcharge_matrix_id']."'
								AND sm.surcharge_matrix_id=smd.surcharge_matrix_id";
					
			if($CFG['surchargePolicy']['averageFareCaluculation']=="Y")
			{
				$daysToDepartureJoin=" AND (smd.days_to_departure=(SELECT days_to_departure FROM ".$CFG['db']['tbl']['surcharge_matrix_details']." WHERE surcharge_matrix_id='".$givenPolicyDetailsArray[$i]['surcharge_matrix_id']."' AND days_to_departure >='".$daysToDeparture."' order by days_to_departure limit 1) OR 
											smd.days_to_departure=(SELECT days_to_departure FROM ".$CFG['db']['tbl']['surcharge_matrix_details']." WHERE surcharge_matrix_id='".$givenPolicyDetailsArray[$i]['surcharge_matrix_id']."' AND days_to_departure <='".$daysToDeparture."' order by days_to_departure desc limit 1))";
				$bookedLoadJoin=" AND (smd.booked_load_factor=(SELECT booked_load_factor FROM ".$CFG['db']['tbl']['surcharge_matrix_details']." WHERE surcharge_matrix_id='".$givenPolicyDetailsArray[$i]['surcharge_matrix_id']."' AND booked_load_factor >='".$_SbookedLoadFactor."' order by booked_load_factor limit 1) OR 
									smd.booked_load_factor=(SELECT booked_load_factor FROM ".$CFG['db']['tbl']['surcharge_matrix_details']." WHERE surcharge_matrix_id='".$givenPolicyDetailsArray[$i]['surcharge_matrix_id']."' AND booked_load_factor <='".$_SbookedLoadFactor."' order by booked_load_factor desc limit 1))";
				
			}
			else
			{
				$daysToDepartureJoin=" AND smd.days_to_departure=(SELECT days_to_departure FROM ".$CFG['db']['tbl']['surcharge_matrix_details']." WHERE surcharge_matrix_id='".$givenPolicyDetailsArray[$i]['surcharge_matrix_id']."' AND days_to_departure <='".$daysToDeparture."' order by days_to_departure desc limit 1)";
				$bookedLoadJoin=" AND smd.booked_load_factor=(SELECT booked_load_factor FROM ".$CFG['db']['tbl']['surcharge_matrix_details']." WHERE surcharge_matrix_id='".$givenPolicyDetailsArray[$i]['surcharge_matrix_id']."' AND booked_load_factor <='".$_SbookedLoadFactor."' order by booked_load_factor desc limit 1)";
			}					
			$sqlSelectDetails.=$daysToDepartureJoin.$bookedLoadJoin;	
				
			if(DB::isError($resultSelectDetails=$this->_Oconnection->query($sqlSelectDetails)))
			{
				fileWrite($sqlSelectDetails,"SqlError","a+");
				return false;
			}

			if($resultSelectDetails->numRows() > 0)
			{
				$resultMatrixDetailsArray=array();
				$k=0;
				while($rowSelectDetails=$resultSelectDetails->fetchRow(DB_FETCHMODE_ASSOC))
				{
					$resultMatrixDetailsArray[$k]['surcharge_matrix_id']=$rowSelectDetails['surcharge_matrix_id'];
					$resultMatrixDetailsArray[$k]['surcharge_matrix_name']=$rowSelectDetails['surcharge_matrix_name'];
					$resultMatrixDetailsArray[$k]['surcharge_policy_name']=$rowSelectDetails['surcharge_policy_name'];
					$resultMatrixDetailsArray[$k]['surcharge_details_id']=$rowSelectDetails['surcharge_details_id'];
					$resultMatrixDetailsArray[$k]['days_to_departure']=$rowSelectDetails['days_to_departure'];
					$resultMatrixDetailsArray[$k]['booked_load_factor']=$rowSelectDetails['booked_load_factor'];

					$sqlSelectMapping="SELECT
										surcharge_mapping_id,
										surcharge_details_id,
										group_size,
										surcharge
								       FROM
										".$CFG['db']['tbl']['surcharge_mapping_details']." 
								       WHERE
										surcharge_details_id='".$resultMatrixDetailsArray[$k]['surcharge_details_id']."'";
										
					if($CFG['surchargePolicy']['averageFareCaluculation']=="Y")
					{
						$groupPaxJoin="	AND (group_size=(SELECT group_size FROM ".$CFG['db']['tbl']['surcharge_mapping_details']." WHERE surcharge_details_id='".$resultMatrixDetailsArray[$k]['surcharge_details_id']."' AND group_size>='".$givenPolicyDetailsArray[$i]['policyPaxCount']."' order by group_size limit 1) OR 
										group_size=(SELECT group_size FROM ".$CFG['db']['tbl']['surcharge_mapping_details']." WHERE surcharge_details_id='".$resultMatrixDetailsArray[$k]['surcharge_details_id']."' AND group_size<='".$givenPolicyDetailsArray[$i]['policyPaxCount']."' order by group_size desc limit 1))";
					}
					else
					{
						$groupPaxJoin="	AND group_size=(SELECT group_size FROM ".$CFG['db']['tbl']['surcharge_mapping_details']." WHERE surcharge_details_id='".$resultMatrixDetailsArray[$k]['surcharge_details_id']."' AND group_size<='".$givenPolicyDetailsArray[$i]['policyPaxCount']."' order by group_size desc limit 1)";
					}	
					$sqlSelectMapping.=$groupPaxJoin;	
						
					if(DB::isError($resultSelectMapping=$this->_Oconnection->query($sqlSelectMapping)))
					{
						fileWrite($sqlSelectMapping,"SqlError","a+");
						return false;
					}

					if($resultSelectMapping->numRows() > 0)
					{
						$matrixMappingArray=array();
						$indexX=0;
						while($rowSelectMapping=$resultSelectMapping->fetchRow(DB_FETCHMODE_ASSOC))
						{
							$matrixMappingArray[$indexX]['surcharge']=$rowSelectMapping['surcharge'];
							$matrixMappingArray[$indexX]['groupSize']=$rowSelectMapping['group_size'];
							$indexX++;
						}
						
						if(count($matrixMappingArray)==1)
						{
							$resultMatrixDetailsArray[$k]['surcharge']=$matrixMappingArray[0]['surcharge'];
						}
						else
						{
							
							if($matrixMappingArray[0]['groupSize']>$matrixMappingArray[1]['groupSize'])
							{
								$minGroupSizeValue=$matrixMappingArray[1]['groupSize'];
								$maxGroupSizeValue=$matrixMappingArray[0]['groupSize'];

								$minGroupSizeValueSurchargeValue=$matrixMappingArray[1]['surcharge'];
								$maxGroupSizeValueSurchargeValue=$matrixMappingArray[0]['surcharge'];
							}
							if($policyMappingArray[0]['groupSize']<$policyMappingArray[1]['groupSize'])
							{
								$minGroupSizeValue=$matrixMappingArray[0]['groupSize'];
								$maxGroupSizeValue=$matrixMappingArray[1]['groupSize'];

								$minGroupSizeValueSurchargeValue=$matrixMappingArray[0]['surcharge'];
								$maxGroupSizeValueSurchargeValue=$matrixMappingArray[1]['surcharge'];
							}

							$tempGroupSize=(($givenPolicyDetailsArray[$i]['policyPaxCount']-$minGroupSizeValue)/($maxGroupSizeValue-$minGroupSizeValue));
							$tempSurchargeAmount=($tempGroupSize)*($maxGroupSizeValueSurchargeValue-$minGroupSizeValueSurchargeValue);
							$netSurchargeAmount=round(($minGroupSizeValueSurchargeValue+$tempSurchargeAmount),2);
							$resultMatrixDetailsArray[$k]['surcharge']=$netSurchargeAmount;							
						}

					}
					$k++;
				}


				if(count($resultMatrixDetailsArray) > 0)
				{
					$displaySurcharge=$givenPolicyDetailsArray[$i]['policyCurrencyType'];
					if(count($resultMatrixDetailsArray) ==1)
					{
						$resultArray[$i]['surchargePolicyId']=$givenPolicyDetailsArray[$i]['surcharge_policy_id'];;
						$resultArray[$i]['surchargeMatrixId']=$resultMatrixDetailsArray[0]['surcharge_matrix_id'];
						$resultArray[$i]['surchargeMatrixName']=$resultMatrixDetailsArray[0]['surcharge_matrix_name'];
						$resultArray[$i]['surchargePolicyName']=$givenPolicyDetailsArray[$i]['surcharge_policy_name'];
						$resultArray[$i]['surcharge']=$resultMatrixDetailsArray[0]['surcharge'];
						$resultArray[$i]['daysToDeparture']=$daysToDeparture;
						$resultArray[$i]['bookedLoadFactor']=$givenPolicyDetailsArray[$i]['policyBookedLoadFactor'];
						$resultArray[$i]['futureLoadFactor']=$givenPolicyDetailsArray[$i]['policyForecastLoadFactor'];
						$resultArray[$i]['policyCurrencyType']=$givenPolicyDetailsArray[$i]['policyCurrencyType'];
						$resultArray[$i]['displaySurcharge']=$displaySurcharge;
						
						
					}
					else
					{						
						$bookedLaodArray=array();
						for($j=0;$j<count($resultMatrixDetailsArray);$j++)
						{
							$bookedLaodArray[$resultMatrixDetailsArray[$j]['booked_load_factor']][]=$resultMatrixDetailsArray[$j];
						}

						$bookedLoadWiseArray=array();
						
						foreach($bookedLaodArray as $bookedLaodKey=>$bookedLoadValue)
						{
							$bookedLoadWiseArray[$bookedLaodKey]['surcharge_matrix_id']=$bookedLoadValue[0]['surcharge_matrix_id'];
							$bookedLoadWiseArray[$bookedLaodKey]['surcharge_matrix_name']=$bookedLoadValue[0]['surcharge_matrix_name'];
							
							if(count($bookedLoadValue)==1)
							{								
								$bookedLoadWiseArray[$bookedLaodKey]['returnSurcharge']=$bookedLoadValue[0]['surcharge'];
							}
							else
							{
								
								$minimumDaysToDeparture=0;
								$minimumDaysToDetartureValue=0;
								$maximumDaysToDeparture=0;
								$maximumDaysToDetartureValue=0;
								
								$minMaxArrayDaysToDepartureTemp=array();
								
								foreach($bookedLoadValue as $key=>$value)
								{
									$minMaxArrayDaysToDepartureTemp[]=$value['days_to_departure'];
								}
								$minimumDaysToDeparture=min($minMaxArrayDaysToDepartureTemp);
								$maximumDaysToDeparture=max($minMaxArrayDaysToDepartureTemp);
								
								foreach($bookedLoadValue as $key=>$value)
								{
									if($minimumDaysToDeparture==$value['days_to_departure'])
									{
										$minimumDaysToDeparture=$value['days_to_departure'];
										$minimumDaysToDetartureValue=$value['surcharge'];
									}
									if($maximumDaysToDeparture==$value['days_to_departure'])
									{
										$maximumDaysToDeparture=$value['days_to_departure'];
										$maximumDaysToDetartureValue=$value['surcharge'];
									}
								}								

								$tempDaysToDeparture=(($daysToDeparture-$minimumDaysToDeparture)/($maximumDaysToDeparture-$minimumDaysToDeparture));
								$tempSurchargeForDaysToDeparture=($tempDaysToDeparture)*($maximumDaysToDetartureValue-$minimumDaysToDetartureValue);
								
								$netSurchargeForDaysToDeparture=round(($minimumDaysToDetartureValue+$tempSurchargeForDaysToDeparture),2);

								$bookedLoadWiseArray[$bookedLaodKey]['returnSurcharge']=$netSurchargeForDaysToDeparture;
							}
						}
						if(count($bookedLoadWiseArray)==1)
						{
							foreach($bookedLoadWiseArray as $bookedLoadWiseKey=>$bookedLaodWiseValue)
							{
								$surchargeMatrixId=$bookedLaodWiseValue['surcharge_matrix_id'];
								$surchargeMatrixName=$bookedLaodWiseValue['surcharge_matrix_name'];
								$netSurchargeForBookedLoad=$bookedLaodWiseValue['returnSurcharge'];
							}
						}
						else
						{
							$minimumBookedLoad=0;
							$minimumBookedLoadValue=0;
							$maximumBookedLoad=0;
							$maximumBookedLoadValue=0;
							
							$minMaxArrayBookedLoadTemp=array();
								
							foreach($bookedLoadWiseArray as $bookedLoadWiseKey=>$bookedLaodWiseValue)
							{
								$minMaxArrayBookedLoadTemp[]=$bookedLoadWiseKey;
							}
							$minimumBookedLoad=min($minMaxArrayBookedLoadTemp);
							$maximumBookedLoad=max($minMaxArrayBookedLoadTemp);

							foreach($bookedLoadWiseArray as $bookedLoadWiseKey=>$bookedLaodWiseValue)
							{
								$surchargeMatrixId=$bookedLaodWiseValue['surcharge_matrix_id'];
								$surchargeMatrixName=$bookedLaodWiseValue['surcharge_matrix_name'];

								if($minimumBookedLoad==$bookedLoadWiseKey)
								{
									$minimumBookedLoad=$bookedLoadWiseKey;
									$minimumBookedLoadValue=$bookedLaodWiseValue['returnSurcharge'];
								}
	
								if($maximumBookedLoad==$bookedLoadWiseKey)
								{
									$maximumBookedLoad=$bookedLoadWiseKey;
									$maximumBookedLoadValue=$bookedLaodWiseValue['returnSurcharge'];
								}
							}
						
							$tempBookedLoadValue=(($givenPolicyDetailsArray[$i]['policyBookedLoadFactor']-$minimumBookedLoad)/($maximumBookedLoad-$minimumBookedLoad));
							$tempSurchargeForBookedLoad=($tempBookedLoadValue)*($maximumBookedLoadValue-$minimumBookedLoadValue);
							
							$netSurchargeForBookedLoad=round(($minimumBookedLoadValue+$tempSurchargeForBookedLoad),2);
						}
						
						$resultArray[$i]['surchargePolicyId']=$givenPolicyDetailsArray[$i]['surcharge_policy_id'];
						$resultArray[$i]['surchargePolicyName']=$givenPolicyDetailsArray[$i]['surcharge_policy_name'];
						$resultArray[$i]['surchargeMatrixId']=$surchargeMatrixId;
						$resultArray[$i]['surchargeMatrixName']=$surchargeMatrixName;
						$resultArray[$i]['surcharge']=$netSurchargeForBookedLoad;
						$resultArray[$i]['daysToDeparture']=$daysToDeparture;
						$resultArray[$i]['bookedLoadFactor']=$givenPolicyDetailsArray[$i]['policyBookedLoadFactor'];
						$resultArray[$i]['futureLoadFactor']=$givenPolicyDetailsArray[$i]['policyForecastLoadFactor'];
						$resultArray[$i]['policyCurrencyType']=$givenPolicyDetailsArray[$i]['policyCurrencyType'];
						$resultArray[$i]['displaySurcharge']=$displaySurcharge;
					}
				}
			}
		
		}

		if(count($resultArray)==1)
			return $resultArray;

		$absoluteSurchargeArray=array();
		if(count($resultArray)>1)
		{
			for($k=0;$k<count($resultArray);$k++)
			{
				$tempArray=array();
				$tempArray['index']=$k;
				$tempArray['surcharge']=$resultArray[$k]['surcharge'];
				$absoluteSurchargeArray[]=$tempArray;
			}
		}
		$returnValueType=$CFG['surchargePolicy']['returnValueType'];
		if(count($absoluteSurchargeArray)>0)
		{
			$surchargeAbsolute=0;
			$surchargeAbsoluteIndex="";

			foreach($absoluteSurchargeArray as $key=>$value)
			{
				if($returnValueType=="MIN")
				{
					if($surchargeAbsolute==0 || $value['surcharge']<=$surchargeAbsolute)
					{
						$surchargeAbsolute=$value['surcharge'];
						$surchargeAbsoluteIndex=$value['index'];
					}
				}
				if($returnValueType=="MAX")
				{
					if($surchargeAbsolute==0 || $value['surcharge']>=$surchargeAbsolute)
					{
						$surchargeAbsolute=$value['surcharge'];
						$surchargeAbsoluteIndex=$value['index'];
					}
				}
			}
			$newReturnArray=array();
			$newReturnArray[0]=$resultArray[$surchargeAbsoluteIndex];
		}
		return $newReturnArray;
	}*/

	//Same PNR in series request
	function _getPNRWiseRequestDisplay($requestMasterId)
	{
		fileRequire("dataModels/class.requestMaster.php");
		fileRequire("dataModels/class.airlinesRequestMapping.php");
		fileRequire("dataModels/class.passengerDetails.php");
		global $CFG;
		$_OpassengerDetails=new passengerDetails();
		$_OrequestMaster = new requestMaster;
		$_OrequestMaster->_Oconnection = $this->_Oconnection;
		$_OrequestMaster->_IrequestMasterId = $requestMasterId;
		$pnrWiseDisplay=$_OrequestMaster->_selectRequestMaster();
		if(isset($pnrWiseDisplay[0]))
			$pnrWiseDisplay=$pnrWiseDisplay[0];
		$_OairlinesRequestMapping=new airlinesRequestMapping();
		$_OairlinesRequestMapping->_Oconnection = $this->_Oconnection;
		$_OairlinesRequestMapping->_IrequestMasterId=$requestMasterId;
		$airlinesDetails=$_OairlinesRequestMapping->_selectAirlinesRequestMapping();
		$pnrWiseDisplay['airlines_request_id']=$airlinesDetails[0]['airlines_request_id'];
		
		
		$sql="SELECT
							pbd.pnr_blocking_id,
							pbd.request_master_id,
							pbd.request_approved_flight_id,
							pbd.pnr,
							pbd.no_of_adult,
							pbd.no_of_child,
							pbd.no_of_infant,
							rafd.source,
							rafd.destination,
							rafd.departure_date,
							rafd.airline_code,
							rafd.flight_number,
							rafd.dep_time,
							rafd.series_request_id
					      FROM
							".$CFG['db']['tbl']['pnr_blocking_details']." pbd,
							".$CFG['db']['tbl']['request_approved_flight_details']." rafd
							
					      WHERE
							pbd.request_master_id='".$requestMasterId."'
							AND pbd.request_approved_flight_id=rafd.request_approved_flight_id
							AND rafd.accepted_flight_status='Y'";
							
		if(DB::isError($result = $this->_Oconnection->query($sql))) 
		{
			fileWrite($sql,"SqlError","a+");
			return false;
		}
		$pnrWiseDisplayDetails=array();
		if($result->numRows() >0)
		{
			while($row = $result->fetchRow(DB_FETCHMODE_ASSOC))
			{
				$_OpassengerDetails->__construct();
				$_OpassengerDetails->_Oconnection=$this->_Oconnection;
				$_OpassengerDetails->_IseriesRequestId=$row['series_request_id'];
				$_OpassengerDetails->_selectPassengerDetails();
				$row['submittedPax']=$_OpassengerDetails->_IcountLoop;
				$_OpassengerDetails->__construct();
				$_OpassengerDetails->_Oconnection=$this->_Oconnection;
				$_OpassengerDetails->_IseriesRequestId=$row['series_request_id'];
				$_OpassengerDetails->_SpassengerType="Adult";
				$_OpassengerDetails->_selectPassengerDetails();
				$row['submittedAdult']=$_OpassengerDetails->_IcountLoop;
				$_OpassengerDetails->__construct();
				$_OpassengerDetails->_Oconnection=$this->_Oconnection;
				$_OpassengerDetails->_IseriesRequestId=$row['series_request_id'];
				$_OpassengerDetails->_SpassengerType="Child";
				$_OpassengerDetails->_selectPassengerDetails();
				$row['submittedChild']=$_OpassengerDetails->_IcountLoop;
				$_OpassengerDetails->__construct();
				$_OpassengerDetails->_Oconnection=$this->_Oconnection;
				$_OpassengerDetails->_IseriesRequestId=$row['series_request_id'];
				$_OpassengerDetails->_SpassengerType="Infant";
				$_OpassengerDetails->_selectPassengerDetails();
				$row['submittedInfant']=$_OpassengerDetails->_IcountLoop;
				
				$mappedFlightsDetails=$this->_getMappedRequestApprovedFlightId($row['request_approved_flight_id']);		
				
				$count=count($mappedFlightsDetails);
				
				for($k=0;$k<$count;$k++)
				{
					$row['mapped_request_approved_flight_id'.$k]=$mappedFlightsDetails[$k]['mapped_request_approved_flight_id'];
				}
				
				$row['timeLineExtenstionStatus']="";
				$row['timeLineRequestStatus']="";
				$pnrPaymentDetails=array();
				
				$pnrPaymentDetails=$this->_getPnrPaymentDetails($row['request_master_id'],$row['pnr'],"");
				
				if(count($pnrPaymentDetails)>0)
				{
					foreach($pnrPaymentDetails as $pendingPnrKey => $pendingPnrValue)
					{
						if($pendingPnrValue['paymentStatus']=="PENDING")
						{
							if($pendingPnrValue['paymentExpiryStatus']=="Y")
								$row['timeLineExtenstionStatus']="Y";
							else
								$row['timeLineExtenstionStatus']="N";
						}
						if($pendingPnrValue['paymentStatus']=="TIMELINEREQUEST")
						{
							$row['timeLineRequestStatus']="Y";
						}
						$row['pnr_payment_validity_date']=$pendingPnrValue['paymentValidity'];
						$row['pnrPaymentStatus']=$pendingPnrValue['paymentStatus'];
					}
				}
				else
				{
					if($row['timeLineExtenstionStatus']!="Y" && $row['timeLineRequestStatus']!="Y")
					{
						$pnrWisePaymentDetails=array();
						fileRequire("classes/class.getPNRDetails.php");
						$_OgetPNRDetails = new getPNRDetails;
						$_OgetPNRDetails->_Oconnection=$this->_Oconnection;
						$_OgetPNRDetails->_Osmarty=$this->_Osmarty;
						$_OgetPNRDetails->_IrequestMasterId=$row['request_master_id'];
						$_OgetPNRDetails->_SpaymentStatus="";
						$_OgetPNRDetails->_SPNR=$row['pnr'];
						$pnrWisePaymentDetails=$_OgetPNRDetails->_getPNRPaymentDetails();
						
						foreach($pnrWisePaymentDetails['pnrDetails']['pnrPaymentDetails'] as $key => $value)
						{
							if($row['pnr']==$value['pnr'])
							{
								if($value['pnrPaidAmount']<$value['pnrTotalCost'])
								{
									$row['requestPaymentStatus']="Y";
								}
								$row['pnrPaidAmount']=$value['pnrPaidAmount'];
								$row['pnrTotalCost']=$value['pnrTotalCost'];
							}
						}
					}
				}
				
				$row['mappingCount']=$count;
				$pnrWiseDisplayDetails[]=$row;
				
			}
			$pnrWiseDisplay['requestDetails']=$pnrWiseDisplayDetails;
			
		}
		return $pnrWiseDisplay;
	}	

	function _getSeriesRoundTripMatchingVal($requestMasterId,$transactionId,$requestType)
	{
		$resultVal=0;
		$sql="SELECT
				srd.series_request_id,
				rd.request_id
			FROM
				request_master rm,
				request_details rd,
				series_request_details srd,
				request_approved_flight_details rafd
			WHERE
				rm.request_master_id=rd.request_master_id
				AND rd.request_id=srd.request_id
				AND rm.request_type='".$requestType."'
				AND srd.series_request_id=rafd.series_request_id
				AND accepted_flight_status='Y'
				AND rm.request_master_id='".$requestMasterId."'
				AND rafd.transaction_master_id='".$transactionId."'
			ORDER BY rd.request_id ASC";
		if(DB::isError($result = $this->_Oconnection->query($sql))) 
		{
			fileWrite($sql,"SqlError","a+");
			return false;
		}
		
		$resultArray=array();
		if($result->numRows() >0)
		{
			while($row = $result->fetchRow(DB_FETCHMODE_ASSOC))
			{
				$resultArray[$row['request_id']]=$resultArray[$row['request_id']]+1;
			}
		}
		$this->_ArequestRsultArray=array_values($resultArray);
		$resultVal=min($this->_ArequestRsultArray);
		return $resultVal;
	}
	
	function _getValidityDeprtDate($validity,$validityType,$_SdepartureDate='')
	{		
		global $CFG;
		#Valdity when have as departure date based we will change airport current time into utc date
		#For assign departure airport time zone we have to set global value with origion of sector
		if($_SdepartureDate=='')
			$_SdepartureDate=$this->_SdepartureDate;
		if(!empty($_SdepartureDate) && !empty($CFG['validity_origion']))
		{
			$_SairportCurrentDateTimeInterval = $this->_getAirportCodeCurrentTime($CFG['validity_origion'],true);
			$_SdepartureDate = $this->_getConvertToUTCDateValue($_SdepartureDate,$_SairportCurrentDateTimeInterval);
		}
	
		$validityValue = "";
		if($validityType == 3)
			$validityValue = "week";
		if($validityType == 4)
			$validityValue = "days";
		if($validityType == 5)
			$validityValue = "hour";
		return date('Y-m-d H:i:s',strtotime("-".$validity." ".$validityValue,strtotime($_SdepartureDate)));
	}
	function _getPaymentInPercent($requestMasterId)
	{
		global $CFG;
		$paymentInPercent = 'Y';
		$transactionId = $this->_getLastTransactionMasterId($requestMasterId);
		$transactionIdSql = "SELECT 
						payment_in_percent 
					FROM
						".$CFG['db']['tbl']['transaction_master']."
					WHERE
						transaction_id = ".$transactionId;
		if(DB::isError($resultTransaction=$this->_Oconnection->query($transactionIdSql)))
		{
			fileWrite($transactionIdSql,"SqlError","a+");
			return false;
		} 
		if($resultTransaction->numRows() > 0)
		{
			$transactionResult = $resultTransaction->fetchRow(DB_FETCHMODE_ASSOC);
			$paymentInPercent = $transactionResult['payment_in_percent'];
		}
		return $paymentInPercent;
	}
	function _getRequestedClass($seriesRequestId)
	{
		global $CFG;
		$sql="SELECT
					cabin
			  FROM
					".$CFG['db']['tbl']['series_request_details']." 
			  WHERE
					series_request_id=".$seriesRequestId."";
		
		if(DB::isError($result=$this->_Oconnection->query($sql)))
		{
			fileWrite($sql,"SqlError","a+");
			return false;
		}
		$fareClass="";
		if($result->numRows() > 0)
		{					
			$rowValue=$result->fetchRow(DB_FETCHMODE_ASSOC);
			$fareClass=$rowValue['cabin'];
		}
		return $fareClass;
	}	
	function _getEmailHeaerFooterDetails($airLineCorporateId,$landingStatus)
	{
		global $CFG;
		$sql="SELECT
						header_tpl_name,
						footer_tpl_name
				FROM
						".$CFG['db']['tbl']['corporate_home_page_details']."
				WHERE
							corporate_id='".$airLineCorporateId."'
						AND
							landing_status='".$landingStatus."'
					";

		if(DB::isError($result=$this->_Oconnection->query($sql)))
		{
			fileWrite($sql,"SqlError","a+");
			return false;
		}

		if($result->numRows() > 0)
		{
			while($row=$result->fetchRow(DB_FETCHMODE_ASSOC))
			{
				$CFG['mainPage']['emailHeaderTpl']=$row['header_tpl_name'];
				$CFG['mainPage']['emailFooterTpl']=$row['footer_tpl_name'];
			}
		}
		
		return $CFG;
	}
	function _getInitialPaxDetails($requestMasterId,$requestId,$seriesRequestId)
	{
		global $CFG;	
		$sql="SELECT 
					grd.current_no_of_adult as adult,
					grd.current_no_of_child as child,
					grd.current_no_of_infant as infant
			FROM 
				".$CFG['db']['tbl']['groupchange_request_details']." grd,
				".$CFG['db']['tbl']['groupchange_request_master']." grm				
			WHERE 
				grd.request_id=".$requestId."
				AND grd.series_request_id=".$seriesRequestId."
				AND grm.groupchange_master_id = grd.groupchange_master_id
				AND grm.resize_type_id != 3
			ORDER BY groupchange_request_id ASC LIMIT 1";

		if(DB::isError($result = $this->_Oconnection->query($sql))) 
		{
			fileWrite($sql,'SqlError','a+');
			return false;
		}
		$row=array();
		if($result->numRows()>0)
		{
			$row=$result->fetchRow(DB_FETCHMODE_ASSOC);
			$row['totalPax']=$row['adult']+$row['child']+$row['infant'];	
		}
		return $row;
	}
	/*
		* Function name :_getAllInitialPaxDetails
		* Param		 :requestMasterId,requestId,seriesRequestId
		* Discription	 : get parent request pax details for divide vaalidation 
		* Created by	 : sri muthu rajesh 
		* Created on	 : 08-06-2018
	*/
	function _getAllInitialPaxDetails($requestMasterId,$requestId,$seriesRequestId)
	{
		global $CFG;	
		$sqlGroupChangeMaster="SELECT
					grd.current_no_of_adult as adult,
					grd.current_no_of_child as child,
					grd.current_no_of_infant as infant
			FROM 
				".$CFG['db']['tbl']['groupchange_request_details']." grd,
				".$CFG['db']['tbl']['groupchange_request_master']." grm	 
			WHERE 
				grm.request_master_id=".$requestMasterId." 
				AND grm.groupchange_master_id = grd.groupchange_master_id 
				AND (grm.request_status = 'Y' OR (grm.request_status = 'A' AND grm.resize_type_id = 1))
				LIMIT 1";
		if(DB::isError($result = $this->_Oconnection->query($sqlGroupChangeMaster))) 
		{
			fileWrite($sqlGroupChangeMaster,'SqlError','a+');
			return false;
		}
		$row=array();
		if($result->numRows()>0)
		{
			$row=$result->fetchRow(DB_FETCHMODE_ASSOC);
			$row['totalPax']=$row['adult']+$row['child']+$row['infant'];	
		}
		return $row;
	}

	function _getNoOfPaxBasedOnRequestType($requestMasterId,$requestTypeId)
	{
		global $CFG;
		
		$totalNoOfAdult=0;
		$totalNoOfChild=0;
		$totalNoOfInfant=0;
		$totalNoOfPax= 0;
		
		$noOfPaxArray= $this->_getTotalpassengerCount($requestMasterId);
		$_SrequestType=$this->_getRequestType($requestMasterId);
		foreach($noOfPaxArray as $noOfPaxKey => $noOfPaxValue)
		{
			#Removed condition (To get pax count for all pnrs in split pnrs)
			#if(($requestTypeId==1 && (($_SrequestType!='adhoc')||($noOfPaxKey==0 && $_SrequestType=='adhoc'))) || $requestTypeId!=1)
			{
				$totalNoOfAdult+=$noOfPaxValue['adult'];
				$totalNoOfChild+=$noOfPaxValue['child'];
				$totalNoOfInfant+=$noOfPaxValue['infant'];
				$totalNoOfFoc+=$noOfPaxValue['foc'];
			}
		}
		$totalNoOfPax = $totalNoOfAdult+$totalNoOfChild+$totalNoOfInfant+$totalNoOfFoc;
		$finalPaxArray['totalNoOfAdult'] = $totalNoOfAdult;
		$finalPaxArray['totalNoOfChild'] = $totalNoOfChild;
		$finalPaxArray['totalNoOfInfant'] = $totalNoOfInfant;
		$finalPaxArray['totalNoOfFoc'] = $totalNoOfFoc;
		$finalPaxArray['totalNoOfPax'] = $totalNoOfPax;
		
		return $finalPaxArray;
	}
	
	function _percentageToRoundOff($percentage)
	{
		global $CFG;
		
		$checkDecimal=explode(".",$percentage);
		
		if(isset($checkDecimal[1]) && strlen($checkDecimal[1]) > $CFG['limit']['fareValueRoundTo'])
		{
			$roundOffPercentage = round($percentage,2);
		}
		else
			return $percentage;
		
		return $roundOffPercentage;
	}
	
	// The below functionality is repeated in _displayTimeZoneSelect() so it is commented
	/*function _getParticularCountryTime($countryCode)
	{
		global $CFG;
		
		$returnArray=array();

		$countryName=$this->_getTimeZoneCountryName($countryCode);

		$timeZoneIdentifiers = DateTimeZone::listIdentifiers(DateTimeZone::PER_COUNTRY,$countryCode);

		if(is_array($timeZoneIdentifiers))
		{
			foreach( $timeZoneIdentifiers as $value )
			{
				$intervalMinites = $this->_getTimeZoneOffset($value);			
				$intervalHours=$this->_convertToHoursMins($intervalMinites, '%d:%d');
				$intervalValue = ( substr($intervalMinites,0,1) == "-" ? "" : "+" ) . $intervalMinites;
				$intervalDisplay = ( substr($intervalMinites,0,1) == "-" ? " (GMT" : " (GMT+" ) . $intervalHours . ")";
				$displayValue = (str_replace('_',' ',$value));
				$explodedValue = explode("/",$displayValue);
				$city = (isset($explodedValue[2]) && $explodedValue[2]) ? $explodedValue[2] : $explodedValue[1];
				$resultArray=array();
				$resultArray['countryCode']=$countryCode;
				$resultArray['intervalValue']=$intervalValue;
				$resultArray['countryName']=$countryName;
				$resultArray['cityName']=$city;
				$resultArray['intervalDisplay']=$intervalDisplay;
				$returnArray[]=$resultArray;
			}
		}

		return $returnArray;
	}*/
	
	// The below functionality is repeated in _getCountryCodes() so it is commented
	/*function _getTimeZoneCountryName($countryCode)
	{
		global $CFG;

		$countryName="OMAN";

		if($countryCode!="")
		{
			$sqlSelectCountryName="SELECT
							citizenship_name
					       FROM
							".$CFG['db']['tbl']['citizenship_details']."
					       WHERE
							citizen_code='".$countryCode."'";

			if(DB::isError($resultSelectCountryName=$this->_Oconnection->query($sqlSelectCountryName)))
			{
				fileWrite($sqlSelectCountryName,"SqlError","a+");
				return false;
			}
		
			if($resultSelectCountryName->numRows() >0)
			{
				$rowSelectCountryName=$resultSelectCountryName->fetchRow(DB_FETCHMODE_ASSOC);
				$countryName=$rowSelectCountryName['citizenship_name'];
			}
		}
	
		return $countryName;
	}*/
	//Setting flights based on Request setting policy
	function _setFlightsBasedOnRequestSettingPolicy($policyValues,$flightDetails,$processPageFlag = 'N')
	{		
		//Applying airline policy creteria
		foreach($flightDetails as $flightDetailsKey => $flightDetailsValue)
		{
			#To assign temp flight number to check with requested flight number
			$flightDetails[$flightDetailsKey]['tmpFltNo']=$flightDetailsValue['flightNumber'];
			//Checking process page or request raising page
			if($processPageFlag == 'Y')
			{
				$checkFlightNumberRemoveWY=explode("WY",$flightDetailsValue['flightNumber']);
				$checkFlightNumberRemove=explode("-",$checkFlightNumberRemoveWY[1]);
				$checkFlightNumber=explode("/",$checkFlightNumberRemove[1]);
			}
			else
				$checkFlightNumber=explode("/",$flightDetailsValue['flightNumber']);
			
			//Check for all connecting flights
			foreach($checkFlightNumber as $fltKey => $fltVal)
			{
				//Removing the multiple code share flights 
				foreach($policyValues[0]['airlineDetails'] as $key => $val)
				{
					$flightNumbers = explode("-",$val['flightNumber']);
					if(isset($flightNumbers[0]))
					{
						$startingFlightNumber = $flightNumbers[0];
						$flightNumber = $flightNumbers[0];
					}
					if(isset($flightNumbers[0]))
						$endingFlightNumber = $flightNumbers[1];
					
					if($val['operator'] == "Not Between")
					{
						if(isset($checkFlightNumber[$fltKey]))
						{	
							if(($checkFlightNumber[$fltKey] >= $startingFlightNumber) && ($checkFlightNumber[$fltKey] <= $endingFlightNumber))
								unset($flightDetails[$flightDetailsKey]);
						}
					}	
					
					if($val['operator'] == "Between")
					{					
						if(isset($checkFlightNumber[$fltKey]))
						{
							if(($checkFlightNumber[$fltKey] < $startingFlightNumber) || ($checkFlightNumber[$fltKey] > $endingFlightNumber))
								unset($flightDetails[$flightDetailsKey]);		
						}
					}
					
					if($val['operator'] == "!=")
					{
						if(isset($checkFlightNumber[$fltKey]))
						{	
							if($checkFlightNumber[$fltKey] == $flightNumber)	
								unset($flightDetails[$flightDetailsKey]);
						}
					}
					
					if($val['operator'] == "=")
					{
						if(isset($checkFlightNumber[$fltKey]))
						{	
							if($checkFlightNumber[$fltKey] != $flightNumber)	
								unset($flightDetails[$flightDetailsKey]);
						}
					}
					
					if($val['operator'] == "<=")
					{
						if(isset($checkFlightNumber[$fltKey]))
						{	
							if($checkFlightNumber[$fltKey] > $flightNumber)	
								unset($flightDetails[$flightDetailsKey]);
						}
					}
					
					if($val['operator'] == ">=")
					{
						if(isset($checkFlightNumber[$fltKey]))
						{	
							if($checkFlightNumber[$fltKey] < $flightNumber)	
								unset($flightDetails[$flightDetailsKey]);
						}
					}
					
					if($val['operator'] == ">")
					{
						if(isset($checkFlightNumber[$fltKey]))
						{	
							if($checkFlightNumber[$fltKey] <= $flightNumber)	
								unset($flightDetails[$flightDetailsKey]);
						}
					}
					
					if($val['operator'] == "<")
					{
						if(isset($checkFlightNumber[$fltKey]))
						{	
							if($checkFlightNumber[$fltKey] >= $flightNumber)	
								unset($flightDetails[$flightDetailsKey]);
						}
					}
				}
			}
		}	
		return $flightDetails;
	}
	
	function _getTripTypeText($tripType,$returnValue='')
	{
	
		$returnDataArray = '';
		if(!$returnValue)
		{
			if(in_array($tripType,array('1','O')))
				$returnDataArray = $this->_Osmarty->getConfigVars("COMMON_ONE_WAY");
			else if(in_array($tripType,array('2','R')))
				$returnDataArray = $this->_Osmarty->getConfigVars("COMMON_ROUND_TRIP");
			else if(in_array($tripType,array('3','M')))
				$returnDataArray = $this->_Osmarty->getConfigVars("COMMON_MULTI_CITY");
		}
		else
		{
			$returnDataArray = $tripType;
			if($tripType==1)
				$returnDataArray='O';
			elseif($tripType==2)
				$returnDataArray='R';
			elseif($tripType==3)
				$returnDataArray='M';
		}
		return $returnDataArray;
	}

	#merging via flight details with same flight number to one for getting faredetails
	function _mergeViaFlights($viaFlights)
	{
		global $CFG;
		
		//If no need to merge via flights then return the flight infomation as it is.
		if(isset($CFG["limit"]["controlViaFlights"]["mergeViaFlights"]) && $CFG["limit"]["controlViaFlights"]["mergeViaFlights"]=='N')
			return $viaFlights;
		
		$_AtempFlightDetails = array();
		$_IcheckRequestId='';
		
		// Make the via flight details in ascending order, when via flight order collapsed in table.
		$inputArray=array(
					"inputArray" => $viaFlights, //mandatory
					"fieldName" => "departureDateAndTime", //mandatory
					"fieldType" => "STRING", //default
					"orderType" => "ASC" //default
					);
		$viaFlights = $this->_dynamicSortFunction($inputArray);
		
		foreach($viaFlights as $_AflightVal)
		{
			$flightNumber = isset($_AflightVal['flight_number'])?$_AflightVal['flight_number']:$_AflightVal['flightNumber'];
			
			if(isset($_AflightVal['requestId']) && $_AflightVal['requestId']!='')
				$_IcheckRequestId='_'.$_AflightVal['requestId'];
			else if(isset($_AflightVal['segmentNo']) && $_AflightVal['segmentNo']!='')
				$_IcheckRequestId='_'.$_AflightVal['segmentNo'];
			else if(isset($_AflightVal['trip']) && $_AflightVal['trip']!='')
				$_IcheckRequestId='_'.$_AflightVal['trip'];
			if(!isset($_AtempFlightDetails[$flightNumber.$_IcheckRequestId]))
				$_AtempFlightDetails[$flightNumber.$_IcheckRequestId] = array();
			
			
			$_AtempFlightDetails[$flightNumber.$_IcheckRequestId][] = $_AflightVal;
		}

		$_AviaFlightDetails = array();
		foreach($_AtempFlightDetails as $viaFltNo=>$viaFltDetails)
		{
			$viaFlightCount = count($viaFltDetails);
			if($viaFlightCount > 1)
			{
				$viaFlightCount = $viaFlightCount-1;
				if(isset($viaFltDetails[$viaFlightCount]['dest_airport_code']))
				{
					$viaFltDetails[0]['dest_airport_code'] = $viaFltDetails[$viaFlightCount]['dest_airport_code'];
					$viaFltDetails[0]['arrival_date'] = $viaFltDetails[$viaFlightCount]['arrival_date'];
				}
				else
				{
					$viaFltDetails[0]['destination'] = $viaFltDetails[$viaFlightCount]['destination'];
					$viaFltDetails[0]['arrivalDate'] = $viaFltDetails[$viaFlightCount]['arrivalDate'];
					//Changed the arrival time also.
					if(isset($viaFltDetails[$viaFlightCount]['arrTime']))
						$viaFltDetails[0]['arrTime'] = $viaFltDetails[$viaFlightCount]['arrTime'];
					if(isset($viaFltDetails[$viaFlightCount]['arrivalTime']))
						$viaFltDetails[0]['arrivalTime'] = $viaFltDetails[$viaFlightCount]['arrivalTime'];
					
					//For tax service changing base fare
					if(isset($viaFltDetails[$viaFlightCount]['baseFare']))
						$viaFltDetails[0]['baseFare'] += $viaFltDetails[$viaFlightCount]['baseFare'];
					//Prevents fatal error set fare as zero.
					if(is_array($viaFltDetails[0]['childBaseFare']))
						$viaFltDetails[0]['childBaseFare'] = 0;
					if(isset($viaFltDetails[$viaFlightCount]['childBaseFare']) && !is_array($viaFltDetails[$viaFlightCount]['childBaseFare']))
						$viaFltDetails[0]['childBaseFare'] += $viaFltDetails[$viaFlightCount]['childBaseFare'];
				}
			}
			$_AviaFlightDetails[] = $viaFltDetails[0];
		}
		return $_AviaFlightDetails;
	}
	
	function _getPnrPaxDetails($requestMasterId,$pnr='',$_SviewList='N')
	{
		global $CFG;
		
		$returnArray=array();
		$_AresultSelectPnrBlocking =array();
		$_SarrayFlag="N";
		if(is_array($requestMasterId)){
			$_SarrayFlag="Y";
			$_ArequestMasterId = $requestMasterId;
			$requestMasterId=implode(",", $requestMasterId);
		}else{
			$_ArequestMasterId = array($requestMasterId);
		}
		
		fileRequire("dataModels/class.requestApprovedFlightDetails.php");
		$_OrequestApprovedFlightDetails=new requestApprovedFlightDetails();
		$_OrequestApprovedFlightDetails->_Oconnection=$this->_Oconnection;
		$sqlSelectPnrBlockingDetails="SELECT
							pnr_blocking_id,
							request_master_id,
							request_approved_flight_id,
							pnr,
							no_of_adult,
							no_of_child,
							no_of_infant,
							no_of_foc
					      FROM
							".$CFG['db']['tbl']['pnr_blocking_details']."
					      WHERE
							status != 'Closed' and 
							request_master_id IN (".$requestMasterId.")";
					
		if($pnr!='')
			$sqlSelectPnrBlockingDetails.=" AND pnr='".$pnr."'";
							
		$sqlSelectPnrBlockingDetails.=" GROUP BY pnr";

		if(DB::isError($resultSelectPnrBlockingDetails=$this->_Oconnection->query($sqlSelectPnrBlockingDetails)))
		{
			fileWrite($sqlSelectPnrBlockingDetails,"SqlError","a+");
			return false;
		}

		if($resultSelectPnrBlockingDetails->numRows() >0)
		{
			$_ArequestMasterId=array();
			while($rowSelectPnrBlockingDetails=$resultSelectPnrBlockingDetails->fetchRow(DB_FETCHMODE_ASSOC))
			{
				$_OrequestApprovedFlightDetails->__construct();
				$_OrequestApprovedFlightDetails->_IrequestApprovedFlightId=$rowSelectPnrBlockingDetails['request_approved_flight_id'];
				$_AapprovedFlight=$_OrequestApprovedFlightDetails->_selectRequestApprovedFlightDetails();
				$_IseriesGroupId=$this->_getSeriesGroupId($_AapprovedFlight[0]['series_request_id'])[0];

				$_IlastTransactionId = $this->_getLastTransactionMasterId($rowSelectPnrBlockingDetails['request_master_id']);
				$_IairlinesRequestId = $this->_getAirlineRequestId($rowSelectPnrBlockingDetails['request_master_id']);
				if($_IlastTransactionId!='' && $_SviewList=='Y')
				{
					$_AgroupStatusId=$this->_getRequestGroupDetails($_IairlinesRequestId,$_IseriesGroupId,$_IlastTransactionId);
					if($_AgroupStatusId[0]['group_status']==$this->_getCurrentStatusId('PM'))
						continue;
				}
				if(!in_array($rowSelectPnrBlockingDetails['request_master_id'], $_ArequestMasterId)){
					$_ArequestMasterId[]=$rowSelectPnrBlockingDetails['request_master_id'];
					$_AresultSelectPnrBlocking[$rowSelectPnrBlockingDetails['request_master_id']]['noOfAdult'] = 0;
					$_AresultSelectPnrBlocking[$rowSelectPnrBlockingDetails['request_master_id']]['noOfChild'] = 0;
					$_AresultSelectPnrBlocking[$rowSelectPnrBlockingDetails['request_master_id']]['noOfInfant'] = 0;
					$_AresultSelectPnrBlocking[$rowSelectPnrBlockingDetails['request_master_id']]['noOfFoc'] = 0;

				}
				if(($_AresultSelectPnrBlocking[$rowSelectPnrBlockingDetails['request_master_id']]['noOfAdult']==0) && ($_AresultSelectPnrBlocking[$rowSelectPnrBlockingDetails['request_master_id']]['noOfChild']==0) && ($_AresultSelectPnrBlocking[$rowSelectPnrBlockingDetails['request_master_id']]['noOfInfant']==0))
				{
					$_AresultSelectPnrBlocking[$rowSelectPnrBlockingDetails['request_master_id']]['numberOfAdult']=$rowSelectPnrBlockingDetails['no_of_adult'];
					$_AresultSelectPnrBlocking[$rowSelectPnrBlockingDetails['request_master_id']]['numberOfChild']=$rowSelectPnrBlockingDetails['no_of_child'];
					$_AresultSelectPnrBlocking[$rowSelectPnrBlockingDetails['request_master_id']]['numberOfInfant']=$rowSelectPnrBlockingDetails['no_of_infant'];
					$_AresultSelectPnrBlocking[$rowSelectPnrBlockingDetails['request_master_id']]['numberOfFoc']=$rowSelectPnrBlockingDetails['no_of_foc'];
				}
				$_AresultSelectPnrBlocking[$rowSelectPnrBlockingDetails['request_master_id']]['noOfAdult']+=$rowSelectPnrBlockingDetails['no_of_adult']; 
				$_AresultSelectPnrBlocking[$rowSelectPnrBlockingDetails['request_master_id']]['noOfChild']+=$rowSelectPnrBlockingDetails['no_of_child'];
				$_AresultSelectPnrBlocking[$rowSelectPnrBlockingDetails['request_master_id']]['noOfInfant']+=$rowSelectPnrBlockingDetails['no_of_infant'];
				$_AresultSelectPnrBlocking[$rowSelectPnrBlockingDetails['request_master_id']]['noOfFoc']+=$rowSelectPnrBlockingDetails['no_of_foc'];
			}
			foreach ($_ArequestMasterId as $requestMasterIdvalue) {
				$_AFinalResultSelectPnrBlocking[$requestMasterIdvalue]['noOfAdult']=$_AresultSelectPnrBlocking[$requestMasterIdvalue]['noOfAdult'];
				$_AFinalResultSelectPnrBlocking[$requestMasterIdvalue]['noOfChild']=$_AresultSelectPnrBlocking[$requestMasterIdvalue]['noOfChild'];
				$_AFinalResultSelectPnrBlocking[$requestMasterIdvalue]['noOfInfant']=$_AresultSelectPnrBlocking[$requestMasterIdvalue]['noOfInfant'];
				$_AFinalResultSelectPnrBlocking[$requestMasterIdvalue]['noOfFoc']=$_AresultSelectPnrBlocking[$requestMasterIdvalue]['noOfFoc'];
				$_AFinalResultSelectPnrBlocking[$requestMasterIdvalue]['totalNoOfPax']=$_AresultSelectPnrBlocking[$requestMasterIdvalue]['noOfAdult']+$_AresultSelectPnrBlocking[$requestMasterIdvalue]['noOfChild']+$_AresultSelectPnrBlocking[$requestMasterIdvalue]['noOfInfant']+$_AresultSelectPnrBlocking[$requestMasterIdvalue]['noOfFoc'];
				if(isset($_AresultSelectPnrBlocking[$requestMasterIdvalue]['numberOfAdult']) && isset($_AresultSelectPnrBlocking[$requestMasterIdvalue]['numberOfChild']) && isset($_AresultSelectPnrBlocking[$requestMasterIdvalue]['noOfInfant']) )
				{
					$_AFinalResultSelectPnrBlocking[$requestMasterIdvalue]['numberOfAdult'] = $_AresultSelectPnrBlocking[$requestMasterIdvalue]['numberOfAdult'];
					$_AFinalResultSelectPnrBlocking[$requestMasterIdvalue]['numberOfChild'] = $_AresultSelectPnrBlocking[$requestMasterIdvalue]['numberOfChild'];
					$_AFinalResultSelectPnrBlocking[$requestMasterIdvalue]['numberOfInfant'] = $_AresultSelectPnrBlocking[$requestMasterIdvalue]['numberOfInfant'];
					$_AFinalResultSelectPnrBlocking[$requestMasterIdvalue]['numberOfFoc'] = $_AresultSelectPnrBlocking[$requestMasterIdvalue]['numberOfFoc'];
					$_AFinalResultSelectPnrBlocking[$requestMasterIdvalue]['totalNoOfPassenger']= $_AFinalResultSelectPnrBlocking[$requestMasterIdvalue]['numberOfAdult'] + $_AFinalResultSelectPnrBlocking[$requestMasterIdvalue]['numberOfChild'] + $_AFinalResultSelectPnrBlocking[$requestMasterIdvalue]['numberOfInfant']+$_AresultSelectPnrBlocking[$requestMasterIdvalue]['numberOfFoc'];
				}
			}
			
		}
		if($_SarrayFlag=='Y'){
			return $_AFinalResultSelectPnrBlocking;
		}else{
			return $_AFinalResultSelectPnrBlocking[$requestMasterId];
		}	
	}

	function _getFlightWithDepTimeCondition($flightDetails,$fromDate)
	{
		global $CFG;
		$currentAirportTime=$this->_getAirportCodeCurrentTime($flightDetails[0]['source']);
		$currentDateTimeArray=explode(" ",$currentAirportTime);
		$finalFlightDetails=array();
		foreach($flightDetails as $flight)
		{			
			if($fromDate==$currentDateTimeArray[0])
			{
				$dateDiff=$this->_dateDifference($currentAirportTime,$flight['departureDateTime'].":00");
				if($dateDiff['hours'] < $CFG['site']['flightDepatureBefore'])
				{
					continue;
					
				}
			}
			
			$finalFlightDetails[]=$flight;
		}
		return $finalFlightDetails;
	}
	//staff report 
	function _staffReportConditionArray()
	{
		global $CFG;
		$startVal=$CFG['staffReport']['start'];
		$temStart=0;
		$tempEnd=$startVal;
		$end=$CFG['staffReport']['end'];
		$resultArray=array();
		$i=0;
		while($end>$temStart)
		{		
			$tempEnd=$tempEnd+$CFG['staffReport']['hourInterval'];			
			$resultArray[$i]['label']=$temStart.'-'.$tempEnd.' HRS';
			$resultArray[$i]['from']=$temStart*60;
			$resultArray[$i]['to']=$tempEnd*60;
			$temStart=$tempEnd;
			$i++;
		}
		$resultArray[$i]['label']='>'.$temStart.' HRS';
		$resultArray[$i]['from']=$temStart*60;
		$resultArray[$i]['to']='';
		return $resultArray;
	}
	function _getYqTaxByTaxbreakup($taxBreakup)
	{
		$yqTax=0;
		$taxArray=explode('$$',$taxBreakup);
		foreach($taxArray as $val)
		{
			if(strpos($val,'YQ')!==false)
			{
				$valArray=explode('=',$val);
				$yqTax=$yqTax+$valArray[1];
			}
			
		}
		return $yqTax;
		
	}

	/**
	 * @description	To Find the flight travel time duration from departures and arraival
	 * @author		Balaji Selvaraj <balaji@infinitisoftware.net>
	 * @param		StartingTime|EndingTime|StartTimezone|EndTimZone
	 * @return		String
	 */
	function _getDiffTimeZoneDuration($_Dstart,$_Dend,$_SstartTZ,$_SendTZ)
	{
		# To set the timezone for start country and ending country
		$_OstartTime = new DateTime($_Dstart, new DateTimeZone($_SstartTZ));
		$_OendTime = new DateTime($_Dend, new DateTimeZone($_SendTZ));

		# To change the ending country time zone to starting country time zone
		$_OendTime->setTimezone(new DateTimeZone($_SstartTZ));

		# Calculate the time difference from start time to end time
		$_Odifferences = $_OstartTime->diff($_OendTime);
		
		# To calculate total hours by including the days
		$_Idays = $_Odifferences->d * 24;
		$_Ihours = $_Idays + $_Odifferences->h;
		
		# Formatting the hours and minutes
		$_Shour = ($_Ihours < 10) ? '0'.$_Ihours : $_Ihours;
		$_Sminutes = ($_Odifferences->i < 10) ? '0'.$_Odifferences->i : $_Odifferences->i;
		return $_Shour .':'. $_Sminutes;
	}
	// To get the currency code for the given POS code 
	function _getCurrencyCode($pos)
	{
		global $CFG;
		$currencyCode='';
		$sqlCurrencyCode="SELECT 
							pd.pos_code,
							cd.currency_code
						FROM 
							".$CFG['db']['tbl']['pos_details']." pd,
							".$CFG['db']['tbl']['citizenship_details']." cd,
							".$CFG['db']['tbl']['currency_details']." cud
						WHERE 
							pd.pos_country=cd.citizen_code
							AND cd.currency_code=cud.currency_type
							AND cud.currency_status='y'
							AND pd.pos_code='".$pos."'";
		
		if(DB::isError($resultCurrencyCode = $this->_Oconnection->query($sqlCurrencyCode))) 
		{
			fileWrite($sqlCurrencyCode,"SqlError","a+");
			return false;
		}
		if($resultCurrencyCode->numRows() >0)
		{	
			$rowCurrencyCode=$resultCurrencyCode->fetchRow(DB_FETCHMODE_ASSOC);
			$currencyCode=$rowCurrencyCode['currency_code'];
		}
		return $currencyCode;
	}
	/*
	 * $_Sstage -> 'Check' , 'Requested', 'Completed', 'Failed', 'Error'
	 * $_SprocessType -> 'Payment', 'Accept',passenger upload
	 */
	function _checkTakeControlRequest($_IrequestMasterId,$_SprocessType,$_Sstage="CHECK",$paymentMasterId=0,$singleTimeProcess=true)
	{
		global $CFG;
	
		//Get the take controll details
		$checkStatus=$this->_getProcessControlDetails($_IrequestMasterId,$_SprocessType,$paymentMasterId);
		$this->_AcontrolDetails = $checkStatus;
		
		$controlCount = 1;
		if($checkStatus !== false)
			$controlCount = $checkStatus['controlCount'];
		
		//Take control check the status and time
		$_StakeControl = false;
		$_waitingStatus= false;
		$this->_AcontrolDetails['message'] = 'Empty';
		if(is_array($checkStatus) && !empty($checkStatus) && isset($checkStatus['control_status']) && in_array(strtoupper($_Sstage),array('REQUESTED','CHECK')) )
		{
			if(in_array(strtoupper($checkStatus['control_status']),array("COMPLETED")))
			{
				$this->_AcontrolDetails['message'] = 'Completed';
				$_StakeControl = true;
			}
			elseif(in_array(strtoupper($checkStatus['control_status']),array("REQUESTED")))
			{
				$currentTime=$this->_getUTCDateValue();
				$requestedTime=$checkStatus['utcOpenedTime'];
				$differenceArray=$this->_dateDifference($requestedTime,$currentTime);
				if(!empty($differenceArray))
				{
					if($differenceArray['minutes']<=$CFG['requestCheck']['intervalTime'])
					{
						$this->_AcontrolDetails['remainingTime'] = round($CFG['requestCheck']['intervalTime']-$differenceArray['minutes']);
						$this->_AcontrolDetails['message'] = 'Wait';
						$_StakeControl = true;
					}
					else
					{
						$_waitingStatus=true;
					}
				}
			}
		}
		
		//Return the check status for the take control
		if(in_array(strtoupper($_Sstage),array("CHECK")))
			return $_StakeControl;
		
		fileRequire("dataModels/class.takeControlDetails.php");
		$this->_OtakeControlDetails =new takeControlDetails();
		$this->_OtakeControlDetails->_Oconnection=$this->_Oconnection;
		$this->_OtakeControlDetails->_IreferenceId=$paymentMasterId;
		$this->_OtakeControlDetails->_IrequestMasterId=$_IrequestMasterId;
		$this->_OtakeControlDetails->_SprocessType=strtoupper($_SprocessType);
		if(!isset($_SESSION['groupRM']['groupUserId']) || $_SESSION['groupRM']['groupUserId'] == ""){
			$_IuserId=$this->_getUserDetails('',$CFG["approvePage"]["autoPilotEmailId"]);
			$this->_OtakeControlDetails->_IopenedBy=$_IuserId['user_id'];
		}
		else
			$this->_OtakeControlDetails->_IopenedBy=$_SESSION['groupRM']['groupUserId'];
		$this->_OtakeControlDetails->_SopenedTime=$this->_getUTCDateValue();
		$checkStatus=$this->_getProcessControlDetails($_IrequestMasterId,$_SprocessType,$paymentMasterId);
		fileWrite("#4-Stage : ".$_Sstage." Process Type : ".$_SprocessType." Request Master Id : ".$_IrequestMasterId." payment Master Id :".$paymentMasterId."\n".print_r($checkStatus,true),"takeControl","a+");
		//None of them take control
		$statusArray=array("REQUESTED");
		if($singleTimeProcess)
		{
			$statusArray=array("REQUESTED","COMPLETED");
		}
		if(strtoupper($_Sstage) == "REQUESTED" && !in_array(strtoupper($checkStatus['control_status']),$statusArray))
		{
			$this->_OtakeControlDetails->_ScontrolStatus=ucfirst($_Sstage);
			$this->_OtakeControlDetails->_insertTakeControlDetails();
			
				$checkStatus=$this->_getProcessControlDetails($_IrequestMasterId,$_SprocessType,$paymentMasterId);
				if(($controlCount) != $checkStatus['controlCount'] && $singleTimeProcess)
				{
					$_ItakeControlId = $this->_OtakeControlDetails->_ItakeControlId;
					$this->_OtakeControlDetails->__construct();
					$this->_OtakeControlDetails->_ItakeControlId = $_ItakeControlId;
					$this->_OtakeControlDetails->_ScontrolStatus="Error";
					$this->_OtakeControlDetails->_updateTakeControlDetails();
					return false;
				}

			$this->_AcontrolDetails['message'] = 'Requested';
			return true;
		}
		//Control taken and completed the request 
		elseif($_StakeControl == false && is_array($checkStatus) && !empty($checkStatus) && $checkStatus['opened_by'] == $_SESSION['groupRM']['groupUserId'])
		{
			if(strtoupper($_Sstage) != "REQUESTED" && strtoupper($checkStatus['control_status']) == "REQUESTED")
			{
				$this->_OtakeControlDetails->_ItakeControlId=$checkStatus['take_control_id'];
				$this->_OtakeControlDetails->_ScontrolStatus=ucfirst($_Sstage);
				$this->_OtakeControlDetails->_updateTakeControlDetails();
				$this->_AcontrolDetails['message'] = 'Completed';
				return true;
			}
			if($_waitingStatus)
			return true;
		}
		return false;
	}
	/**
		Modified by : sri muthu rajesh
		Date 		: 13-03-2019
		Decription  : To reset menu details using corporate submenu setting table
		Arguements	: mainMenuIdArray, mainMenu
		return 		: mainMenu array which is overrided
	**/
	function _resetMenuDetails($mainMenuIdArray, $mainMenu)
	{
		global $CFG;
		$_AsubMenuInArray=array();
		$sql = "SELECT 
				csms.submenu_name,
				csms.submenu_link,
				csms.menu_id,
				csms.display_status,
				csms.display_order,
				csms.corporate_id,
				csms.group_id,
				csms.submenu_id
			FROM  
				".$CFG['db']['tbl']['corporate_submenu_settings']." csms
			WHERE 
				csms.corporate_id IN (".$_SESSION['groupRM']['groupCorporateId'].",0)
				AND csms.group_id IN (".$_SESSION['groupRM']['groupId'].",0)
				AND csms.user_id IN (".$_SESSION['groupRM']['groupUserId'].",0)
				AND csms.submenu_id IN (".implode("," ,$mainMenuIdArray).")
				AND csms.display_status != 'D'
			ORDER BY
				csms.user_id DESC,
				csms.corporate_id DESC,
				csms.group_id DESC;";
		if ( DB::isError($result = $this->_Oconnection->query($sql))) 
		{
			$this->_SerrorMsg = $result->getMessage();
			fileWrite($sql,'SqlError','a+');
			return FALSE;
		}

		if($result->numRows() > 0)
		{
			$_AresultMenuDetails=$result->fetchAll(DB_FETCHMODE_ASSOC);
			foreach($_AresultMenuDetails as $row)
			{
				if(in_array($_AsubMenuInArray, $row['submenu_id']))
					continue;
				$_AsubMenuInArray[]=$row['submenu_id'];
				$key=array_search($row['submenu_id'], $mainMenuIdArray);
				if($row['submenu_name'] != "" && $row['submenu_name'] != "NULL")
					$mainMenu[$key]['menu_name'] = $this->_Osmarty->getConfigVars('MENUID_'.$row['submenu_id']);							
				if($row['submenu_link'] != "" && $row['submenu_link'] != "NULL")
					$mainMenu[$key]['menu_link'] = $row['submenu_link'];							
				if($row['display_order'] != "")
					$mainMenu[$key]['display_order'] = $row['display_order'];
				if($row['display_status'] != "")
					$mainMenu[$key]['display_status'] = $row['display_status'];
				
				/*removing menudetails if display status is N*/
				if(strtoupper($row['display_status'])=="N")
					unset($mainMenu[$key]);
			}
		}
		return $mainMenu;
	}
	//To get group name based on the group id
	function _getGroupNameUsingGroupId($groupId)
	{
		global $CFG;
		$sqlSelectGroupName="SELECT
								group_name
						     FROM
								".$CFG['db']['tbl']['group_details']."
						     WHERE
								group_id='".$groupId."'";
				
		if(DB::isError($resultSelectGroupName=$this->_Oconnection->query($sqlSelectGroupName)))
		{
			fileWrite($sqlSelectGroupName,'SqlError','a+');
			return false;
		}
		
		if($resultSelectGroupName->numRows() >0)
		{
			$rowSelectGroupName=$resultSelectGroupName->fetchRow(DB_FETCHMODE_ASSOC);
			$groupDisplayName=$rowSelectGroupName['group_name'];
		}

		return $groupDisplayName;
	}
	
	/*
	 To get group id from user details
	 Input : email
	 Output : groupid
	 */
	function _getGroupId($_Semail,$_userIdFlag='N')
	{
		global $CFG;
		$_AgroupDisplayName = array();
		$_SsqlSelectGroupName="SELECT
								group_id,
								user_id
						     FROM
								".$CFG['db']['tbl']['user_details']."
						     WHERE
								".encrypt::_decrypt('email_id')." ='".$_Semail."'";
		if(DB::isError($_OresultSelectGroupName=$this->_Oconnection->query($_SsqlSelectGroupName)))
		{
			fileWrite($_SsqlSelectGroupName,'SqlError','a+');
			return false;
		}
		
		if($_OresultSelectGroupName->numRows() >0)
		{
			$_ArowSelectGroupName=$_OresultSelectGroupName->fetchRow(DB_FETCHMODE_ASSOC);
			$_AgroupDisplayName['groupId']=$_ArowSelectGroupName['group_id'];
		}
		if($_userIdFlag=='Y')
		{
			$_AgroupDisplayName['groupId']=$_ArowSelectGroupName['group_id'];
			$_AgroupDisplayName['userId']=$_ArowSelectGroupName['user_id'];
		}
		return $_AgroupDisplayName;
	}
	
	function _getAirportDetailsCurrency()
	{
		global $CFG;
		$airportDetailsCurrency ='';
			$sql="SELECT 
					ad.airport_code,
					ad.airport_name,
					cd.currency_code,
					ad.country_code				 
				FROM 
					".$CFG['db']['tbl']['airport_details']." ad,
					".$CFG['db']['tbl']['citizenship_details']." cd,
					".$CFG['db']['tbl']['currency_details']." cud
				WHERE 
					ad.country_code=cd.citizen_code
					AND cd.currency_code=cud.currency_type
					AND cud.currency_status='y'
					ORDER BY ad.airport_code ASC";
		if(DB::isError($result=$this->_Oconnection->query($sql)))
		{
			$this->_SerrorMsg = $result->getMessage(); 
			fileWrite($sql,'SqlError','a+');
			return FALSE;
		}
		while($row = $result->fetchRow(DB_FETCHMODE_ASSOC))
		{
			$_AairportDetailsCurrency[] = $row;
		}
		return $_AairportDetailsCurrency;
		
	}
	function _getFlightLoadDetails($airlinesRequestIds)
	{
		global $CFG;
		/*$sql="SELECT
					rafd.origin,
					rafd.destination,
					tm.transaction_id,
					sfd.booked_load,
					sfd.forecast_load
				FROM
					".$CFG['db']['tbl']['transaction_master']." tm 
					INNER JOIN ".$CFG['db']['tbl']['request_approved_flight_details']." rafd ON tm.transaction_id=rafd.transaction_master_id
					INNER JOIN ".$CFG['db']['tbl']['static_fare_details']." std ON rafd.request_approved_flight_id=sfd.request_approved_flight_id
				WHERE
					tm.transaction_id IN (".$transactionIds.")
					AND rafd.accepted_flight_status='Y'
				ODER BY tm.transaction_id,rafd.request_approved_flight_id,sfd.static_fare_id ASC";*/
				$sql="SELECT
						rafd.source,
						rafd.destination,
						tm.transaction_id,
						sfd.sold,
						sfd.capacity,
						sfd.forecast_load
					FROM
						".$CFG['db']['tbl']['transaction_master']." tm ,
						".$CFG['db']['tbl']['request_approved_flight_details']." rafd,
						".$CFG['db']['tbl']['static_fare_details']." sfd
					WHERE
						tm.transaction_id=rafd.transaction_master_id
						AND rafd.request_approved_flight_id=sfd.request_approved_flight_id
						AND tm.airlines_request_id IN (".$airlinesRequestIds.")
						AND rafd.accepted_flight_status='Y'
						AND tm.active_status=21
				ORDER BY tm.airlines_request_id,tm.transaction_id,rafd.request_approved_flight_id,sfd.static_fare_id DESC";
		if(DB::isError($result=$this->_Oconnection->query($sql)))
		{
			fileWrite($sql,'SqlError','a+');
			return FALSE;
		}
		$loadDetails=array();
		while($row = $result->fetchRow(DB_FETCHMODE_ASSOC))
		{
			$row['booked_load']=round(($row['sold']/$row['capacity'])*100);
			$loadDetails[$row['transaction_id']][$row['source']."-".$row['destination']]=$row;
		}
		return $loadDetails;
	}

	#provides group category name for a given group category id
	function _getGroupCategory($getGroupCategoryId)
	{
		global $CFG;
		$_Svariable = $getGroupCategoryId;
		$_AstaticData = $this->_staticData("_getGroupCategory",$_Svariable);
		if($_AstaticData !== false)
			return $_AstaticData;

		$groupCategory ='';
		$sql = "SELECT
				group_category_name
			FROM
				".$CFG['db']['tbl']['group_category_list']."
			WHERE
				group_category_id = ".$getGroupCategoryId;

		if(DB::isError($result=$this->_Oconnection->query($sql)))
		{
			fileWrite($sql,'SqlError','a+');
			return FALSE;
		}
		if($result->numRows() >0)
		{
			$row=$result->fetchRow(DB_FETCHMODE_ASSOC);
			$groupCategory = $row['group_category_name'];	
			$this->_staticData("_getGroupCategory",$_Svariable,$groupCategory);			
		}
		return $groupCategory;
		
	}
	function _getGroupCategoryDetails($getGroupCategoryId,$getGroupCategoryCode = '')
	{
		global $CFG;
		$groupCategory = array();
		$sql = "SELECT
				group_category_name,
				group_category_code
			FROM
				".$CFG['db']['tbl']['group_category_list']."
			WHERE 1";

		if($getGroupCategoryId != '')
				$sql .= " AND group_category_id = ".$getGroupCategoryId;

		if($getGroupCategoryCode != '')
				$sql .= " AND group_category_code = '".$getGroupCategoryCode."'";

		if(DB::isError($result=$this->_Oconnection->query($sql)))
		{
			fileWrite($sql,'SqlError','a+');
			return FALSE;
		}
		if($result->numRows() >0)
		{
			$row=$result->fetchRow(DB_FETCHMODE_ASSOC);
			$groupCategory['group_category_name'] = $row['group_category_name'];	
			$groupCategory['group_category_code'] = $row['group_category_code'];			
		}
		return $groupCategory;
		
	}
	function _getGroupCategoryName($requestMasterId,$getGroupCategoryId="")
	{
		global $CFG;
		
		$_Svariable = $requestMasterId."_".$getGroupCategoryId;
		$_AstaticData = $this->_staticData("_getGroupCategoryName",$_Svariable);
		if($_AstaticData !== false)
			return $_AstaticData;
		
		$groupCategory ='';
		$sql="SELECT 
				srd.group_category_id	
			FROM 
				".$CFG['db']['tbl']['request_master']." rm,
				".$CFG['db']['tbl']['request_details']." rd,
				".$CFG['db']['tbl']['series_request_details']." srd
			WHERE 
				rm.request_master_id=rd.request_master_id
				AND rd.request_id=srd.request_id
				AND rm.request_master_id=".$requestMasterId;
	
		if(DB::isError($result=$this->_Oconnection->query($sql)))
		{
			fileWrite($sql,'SqlError','a+');
			return FALSE;
		}
		if($result->numRows() >0)
		{
			$row=$result->fetchRow(DB_FETCHMODE_ASSOC);
			
			if($getGroupCategoryId=="Y") {
				$this->_staticData("_getGroupCategoryName",$_Svariable,$row['group_category_id']);
				return $row['group_category_id'];
			}
				
			$sqlGroup="SELECT
							group_category_name
						FROM
							".$CFG['db']['tbl']['group_category_list']."
						WHERE
							group_category_id=".$row['group_category_id'];
			if(DB::isError($resultGroup=$this->_Oconnection->query($sqlGroup)))
			{
				fileWrite($sqlGroup,'SqlError','a+');
				return FALSE;
			}
			if($resultGroup->numRows() >0)
			{
				$rowGroup = $resultGroup->fetchRow(DB_FETCHMODE_ASSOC);
				$groupCategory=$rowGroup['group_category_name'];
			}				
		}
		$this->_staticData("_getGroupCategoryName",$_Svariable,$groupCategory);
		return $groupCategory;

	}
	
	/**
	 * @Usage get sector mangement details with user id, group id
	 * @param int $userId - optional
	 * @return Array, sector management details 
	*/
	
	function _getSectorManagementBasedOnUserGroup($userId="",$status="Y",$groupId="")
	{
		global $CFG;
		
		$condition = " ";
		
		#Fetch details based on user id
		if($status!="")
			$condition.=" AND sum.status = '".$status."'";
		if($userId!="")
			$condition.=" AND sum.user_id = '".$userId."'";
		if($groupId!="")
			$condition.=" AND sum.group_id = '".$groupId."'";
		
		$sql = "SELECT
					sm.sector_id,
					sm.origin,
					sm.destination,
					GROUP_CONCAT(sum.user_id) AS userId,
					GROUP_CONCAT(sum.group_id) AS groupId,
					sum.status
				FROM
					".$CFG['db']['tbl']['sector_user_mapping']." sum,
					".$CFG['db']['tbl']['sector_management']." sm
				WHERE
					sum.sector_id = sm.sector_id 
					".$condition."
					AND sm.active_status='Y'
					GROUP BY sum.sector_id";
		return $this->_executeQuery($sql);
	}
	
	/**
	 * @Usage get exclude sector details for given user id
	 * @param int $_IuserId
	 * @return Array, sector details which is mapped with another user id not with given user id
	*/
	
	function _getExcludeSectorDetails($_IuserId,$_IgroupId="")
	{
		$_AresultSectorArray =array();
		$_AresultSector = array();
		
		#Fetch the sectors which is mapped for particular user id(s)
		
		$_AincludeSector = $this->_getSectorManagementBasedOnUserGroup($_IuserId);
		if(!empty($_AincludeSector))
		{
			foreach($_AincludeSector as $resultSectorKey => $includeSectorValue)
			{
				$_AsectorArray['origin'] = $includeSectorValue['origin'];
				$_AsectorArray['destination'] = $includeSectorValue['destination'];
				if($includeSectorValue['status']=="Y")
					$_AresultSectorArray['includeSector'][]=$_AsectorArray;
				else
					$_AresultSectorArray['excludeSector'][]=$_AsectorArray;
			}
		}
		return $_AresultSectorArray;
		
	}
	/**
	 * @Usage get mapped series request details for series and get all series request details for adhoc
	 * @param int $_IrequestMasterId,$_IseriesRequestId
	 * @return Array, series request details
	*/
	function _getMappedSeriesRequest($_IrequestMasterId='',$_IseriesRequestId,$_Sadhoc='N',$_IseriesRequestHistoryId='',$seriesRequestIds = array())
	{
		global $CFG;
		$_AmappedSeriesRequestArray = array();
		
		$_IrequestTypeId = $this->_getRequestType($_IrequestMasterId,"Y");
		$condition = "";

		if(!empty($seriesRequestIds))
		{
			if(is_array($seriesRequestIds))
			{
				$seriesRequestIds = implode(',',$seriesRequestIds);
			}
			$condition .= " AND srd.series_request_id IN(".$seriesRequestIds.") ";
		}
		
		if(($_IrequestTypeId ==2 || $_IrequestTypeId ==3 || $_Sadhoc=='Y') && empty($seriesRequestIds))
			$condition .=" AND srd.mapped_series_request_id IN (".$_IseriesRequestId.")";

		$sqlCond = "";
		if(!empty($_IseriesRequestHistoryId) && $_IseriesRequestHistoryId > 0)
			$sqlCond .=" AND rvfd.series_request_history_id IN(".$_IseriesRequestHistoryId.")";
		
		$sqlSeriesMappedDetails = "SELECT
								rd.request_master_id,
								rd.request_id,
								srd.series_request_id,
								rd.origin_airport_code,
								rd.dest_airport_code,
								srd.flight_number,
								srd.departure_date,
								rvfd.departure_date as depDate
							FROM
								".$CFG['db']['tbl']['series_request_details']." srd,
								".$CFG['db']['tbl']['request_details']." rd,
								".$CFG['db']['tbl']['request_via_flight_details']." rvfd
							WHERE
								rd.request_master_id='".$_IrequestMasterId."'
								".$condition."
								AND srd.request_id=rd.request_id
								AND rvfd.flight_status = 'Y'
								AND rvfd.departure_date != '0000-00-00 00:00:00'
								AND srd.series_request_id=rvfd.series_request_id
								".$sqlCond." group by rvfd.series_request_id
								order by depDate";

		if(DB::isError($resultSeriesMappedDetails=$this->_Oconnection->query($sqlSeriesMappedDetails)))
		{
			fileWrite($sqlSeriesMappedDetails,"SqlError","a+");
			return false;
		}
		if($resultSeriesMappedDetails->numRows() > 0)
		{
			while($rowSeriesMappedDetails=$resultSeriesMappedDetails->fetchRow(DB_FETCHMODE_ASSOC))
			{
				$_AmappedSeriesRequestArray[] = $rowSeriesMappedDetails;
			}
		}
		
		return $_AmappedSeriesRequestArray;
	}
	
	function _setPolicyFieldPairMapStatus($_ApolicyDetails)
	{
		global $CFG;
		
		$totalCount = count($_ApolicyDetails);
		$tempArray = $_ApolicyDetails;
		foreach($CFG['checkPolicyPairMappingArray'] as $mainKey => $mainValue)
		{
			for($i=0;$i<$totalCount;$i++)
			{
				if($_ApolicyDetails[$i]['logicalOperatorName'] == $mainValue[0])
				{
					for($j=0;$j<$totalCount;$j++)
					{
						if(($tempArray[$j]['logicalOperatorName'] == $mainValue[1] || $tempArray[$j]['logicalOperatorName'] == $mainValue[2]) && $_ApolicyDetails[$i]['loop_value']== $tempArray[$j]['loop_value'])
						{
							$_ApolicyDetails[$i]['pairMappingStatus']="Y";
						}
					}
				}
			}
		}
		
		return $_ApolicyDetails;
	}
	
	/*
	 * @Usage: To check the given sector is domestic or not based on default country code
	 * @return: 'Y' -> Domestic, 'ID'-> Inter + Domestic , 'N'->International
	 */ 
	function _checkIsDomestic($_Ssource,$_Sdestination,$userDetails=array())
	{
		global $CFG;
		$_Svariable = $_Ssource."_".$_Sdestination;
		if(isset($userDetails['pos_code']))
			$_Svariable .= "_".$userDetails['pos_code'];
		$_AstaticData = $this->_staticData("_checkIsDomestic",$_Svariable);
		if($_AstaticData !== false)
			return $_AstaticData;
			
		$domesticPOS = "";
		
		/*
		 * Manikumar - 2018-05-25
		 * To set the pos as domestic if the agent belongs to mentioned countries
		 **/
	
		if(isset($CFG['requestForm']['domesticCountryCode']) && !empty($CFG['requestForm']['domesticCountryCode']))
		{
			$_AdomesticCountry = $CFG['requestForm']['domesticCountryCode'];
			$_SdomesticCountryCodeCondition = "'".implode("','",$CFG['requestForm']['domesticCountryCode'])."'";
		}
		else
		{
			$_AdomesticCountry[] = $CFG['site']['defaultCountryCode'];
			$_SdomesticCountryCodeCondition = "'".$CFG['site']['defaultCountryCode']."'";
		}
			
		//When selected user's pos matches with airlines country code, then its consider as domestic pos
		if(!empty($userDetails))
		{
			//For travel agent, pos's country code should be match with airines country code, then its consider as domestic pos
			if(isset($userDetails['pos_code']) && $userDetails['pos_code']!="")
			{
				$checkPos = "SELECT 
							pos_code,
							pos_country
						FROM
							".$CFG['db']['tbl']['pos_details']."
						WHERE 
							pos_code ='".$userDetails['pos_code']."'
							AND pos_country IN (".$_SdomesticCountryCodeCondition.")";
				
				if(DB::isError($resultPos = $this->_Oconnection->query($checkPos)))
				{
					fileWrite($checkPos,"SqlError","a+");
					return false;
				}
				if($resultPos->numRows() > 0)
					$domesticPOS = "Y";
			}
			//Pos code will not present for retails users, hence checking with country code to find domestic
			elseif(in_array($userDetails['country_code'],$_AdomesticCountry))
				$domesticPOS = "Y";
		}
		//Initially when travel agency not selected while request raising, then assign it as domestic pos 
		else
			$domesticPOS = "Y";
		
		//Checking the sector is domestic or not based on the default country code
		if($_Ssource!="" && $_Sdestination!="")
		{
			$sqlAirportDetails = "SELECT 
							airport_code,
							country_code
						FROM
							".$CFG['db']['tbl']['airport_details']."
						WHERE 
							country_code IN (".$_SdomesticCountryCodeCondition.")
							AND airport_code IN ('".$_Ssource."','".$_Sdestination."')";
			if(DB::isError($resultSectorDomestic = $this->_Oconnection->query($sqlAirportDetails)))
			{
				fileWrite($sqlAirportDetails,"SqlError","a+");
				return false;
			}
			
			if($resultSectorDomestic->numRows() == 2 && $domesticPOS=="Y")
				$domesticPOS='Y';
			else
				$domesticPOS='ID';
			
		}
		$this->_staticData("_checkIsDomestic",$_Svariable,$domesticPOS);
		return $domesticPOS;
	}
	
	function _getUserPOSMapping()
	{
		global $CFG;
		$posUserSql="SELECT 
				pd.pos_id,
				pd.pos_code,
				pd.pos_city
			FROM 
				".$CFG['db']['tbl']['pos_details']." pd,
				".$CFG['db']['tbl']['pos_user_mapping']." pum 
			WHERE 
				((pum.pos_code=pd.pos_code)and pum.active_status='Y') GROUP BY pos_code";
		return $this->_executeQuery($posUserSql);
	}
	
	function _getUserPOSDetails($userId,$posCode="")
	{
		global $CFG;
		
		$posCondition = "";
		if($posCode!="")
			$posCondition = " AND pum.pos_code='".$posCode."' ";
		
		$posSql="SELECT 
				if(pum.pos_code='ALL',0,pd.pos_id) as pos_id,
				pum.pos_code,
				if(pum.pos_code='ALL','All',pd.pos_city) as pos_city
			FROM 
				".$CFG['db']['tbl']['pos_details']." pd,
				".$CFG['db']['tbl']['pos_user_mapping']." pum 
			WHERE 
				pum.user_id='".$userId."' AND 
				((pum.pos_code=pd.pos_code OR pum.pos_code = 'ALL')AND pum.active_status='Y') ".$posCondition;
		$posSql .=" GROUP BY pum.pos_code";
		return $this->_executeQuery($posSql);
	}
	
	//To get the initial requested passenger count based on request master id and pnr if pnr provided
	function _getRequestedPaxDetails($_IrequestMasterId,$_IseriesRequestId,$_Spnr="")
	{
		global $CFG;
		
		$foundInitialPax ="N";
		/*
		 *Anboli M - 01-05-2019
		 *Get the approved pax count based on approval status
		 */
		$sql="SELECT 
					current_no_of_adult as noOfAdult,
					current_no_of_child as noOfChild,
					current_no_of_infant as noOfInfant,
					pnr
			FROM 
				".$CFG['db']['tbl']['groupchange_request_master']." gcrm,
				".$CFG['db']['tbl']['groupchange_request_details']." gcrd
			WHERE 
				gcrm.groupchange_master_id = gcrd.groupchange_master_id
				AND gcrm.request_master_id=".$_IrequestMasterId."
				AND gcrd.series_request_id=".$_IseriesRequestId."
				GROUP BY gcrd.groupchange_master_id
				ORDER BY gcrd.groupchange_request_id";
		
		if(DB::isError($result = $this->_Oconnection->query($sql))) 
		{
			fileWrite($sql,'SqlError','a+');
			return false;
		}
		$row=array();
		if($result->numRows()>0)
		{
			while($rowList=$result->fetchRow(DB_FETCHMODE_ASSOC))
			{
				if(($rowList['pnr']=="" || $rowList['pnr']==$_Spnr) && $foundInitialPax=="N")
				{
					$row['noOfAdult'] = $rowList['noOfAdult'];
					$row['noOfChild']=$rowList['noOfChild'];
					$row['noOfInfant'] = $rowList['noOfInfant'];
					$row['noOfPax']=$rowList['noOfAdult']+$rowList['noOfChild']+$rowList['noOfInfant'];
					$foundInitialPax = "Y";
				}
			}
		}
		
		if($foundInitialPax == "N")
		{
			if($_Spnr!="")
			{
				$requiredColumn = " no_of_adult as noOfAdult,
									no_of_child as noOfChild,
									no_of_infant as noOfInfant";
				$requiredTables = $CFG['db']['tbl']['pnr_blocking_details'];
				$requiredCondition = " pnr = '".$_Spnr."' ORDER BY pnr_blocking_id ASC LIMIT 1";
			}
			else
			{
				$requiredColumn = " number_of_adult as noOfAdult,
									number_of_child as noOfChild,
									number_of_infant as noOfInfant";
				$requiredTables = $CFG['db']['tbl']['series_request_details'];
				$requiredCondition = " series_request_id = '".$_IseriesRequestId."' ORDER BY series_request_id ASC LIMIT 1";
			}
			$sql = "SELECT 
						".$requiredColumn."
					FROM
						".$requiredTables."
					WHERE
						".$requiredCondition."";
			
			if(DB::isError($result = $this->_Oconnection->query($sql))) 
			{
				fileWrite($sql,'SqlError','a+');
				return false;
			}
			$row=array();
			if($result->numRows()>0)
			{
				$row=$result->fetchRow(DB_FETCHMODE_ASSOC);
				$row['noOfPax']=$row['noOfAdult']+$row['noOfChild']+$row['noOfInfant'];	
			}
		}
		
		return $row;
	}
	
	function _getLastPaymentRequestDetails($_ItransactionId,$_IseriesGroupId = 0,$_IpnrBlockingId = 0,$_Sstatus='N')
	{
		global $CFG;
		$_Scondition = "";
		if($_IseriesGroupId)
			$_Scondition = " AND series_group_id = ".$_IseriesGroupId;
		if($_IpnrBlockingId > 0)
			$_Scondition = " AND pnr_blocking_id = ".$_IpnrBlockingId;
		if($_Sstatus='Y')
			$_Scondition .= " AND status !='closed'";
			
		#To get last payemnt validity details
		//if($CFG["approvePage"]["groupLevelTimeline"]=="Y")
		//{
			$sql = "SELECT
						request_timeline_id,
						transaction_id,
						validity as payment_validity,
						validity_type as payment_validity_type,
						expiry_type as payment_expiry_type,
						expiry_date as payment_expiry_date,
						percentage_value as payment_percentage,
						absolute_amount as payment_absolute_amount,
						status as paid_status
					FROM
						".$CFG['db']['tbl']['request_timeline_details']."
					WHERE
						transaction_id='".$_ItransactionId."'
					AND timeline_type='PAYMENT' ".$_Scondition."
					ORDER BY
						request_timeline_id DESC limit 1
					";
		/*}
		else
		{
			$sql = "SELECT
						payment_request_id,
						transaction_id,
						payment_validity,
						payment_validity_type,
						payment_expiry_type,
						payment_expiry_date,
						payment_percentage,
						payment_absolute_amount,
						paid_status
					FROM
						".$CFG['db']['tbl']['payment_request_details']."
					WHERE
						transaction_id='".$_ItransactionId."'
					ORDER BY
						payment_request_id DESC limit 1
					";
		}*/	
		if(DB::isError($result=$this->_Oconnection->query($sql)))
		{
			fileWrite($sql,"SqlError","a+");
			return false;
		}
		if($result->numRows() >0)
		{
			while($row = $result->fetchRow(DB_FETCHMODE_ASSOC))
			{
				$lastPaymentRequestDetails[]=$row;
			}
		}
		if(isset($lastPaymentRequestDetails[0]))
			$lastPaymentRequestDetails=$lastPaymentRequestDetails[0];
		
			
		return $lastPaymentRequestDetails;
						
	}
	
	#function to check if PNR split is applicable or not
	function _getPnrSplitStatus($_IrequestMasterId,$_ArequestMasterDetailsArray=array())
	{
		global $CFG;
		
		$_IlastTransactionId = (!empty($_ArequestMasterDetailsArray['transaction_id']))?$_ArequestMasterDetailsArray['transaction_id']:$this->_getLastTransactionMasterId($_IrequestMasterId);
		$_IairlineRequestId = (!empty($_ArequestMasterDetailsArray['airlines_request_id']))?$_ArequestMasterDetailsArray['airlines_request_id']:$this->_getAirlineRequestId($_IrequestMasterId);
	
		if(!empty($_ArequestMasterDetailsArray['request_approved_flight_id'])){
			$_IrequestApprovedFlightId=$_ArequestMasterDetailsArray['request_approved_flight_id'];
		}else{
			$selectApprovedFlightId = "SELECT
											request_approved_flight_id
										FROM
											".$CFG['db']['tbl']['request_approved_flight_details']."
										WHERE
											airlines_request_id = ".$_IairlineRequestId."
											AND transaction_master_id = ".$_IlastTransactionId." 
											AND accepted_flight_status='Y' LIMIT 1";
			if(DB::isError($resultApprovedFlightId=$this->_Oconnection->query($selectApprovedFlightId)))
			{
				fileWrite($selectApprovedFlightId,"SqlError","a+");
				return false;
			}
			if($resultApprovedFlightId->numRows() >0)
			{
				$rowApprovedFlightId = $resultApprovedFlightId->fetchRow(DB_FETCHMODE_ASSOC);
				$_IrequestApprovedFlightId = $rowApprovedFlightId['request_approved_flight_id'];
			}
		}

		if($_IrequestApprovedFlightId>0)
		{
			if(isset($CFG["site"]["splitPnrNewGroup"]) && $CFG["site"]["splitPnrNewGroup"] == 'Y'){
				$_IresultPnrCount = 1;
				$_AseriesRequestDetails = $this->_getSeriesRequestId($_IrequestMasterId);

				$_AparentSeriesrequestId = array_column($_AseriesRequestDetails,'parent_series_request_id');

				foreach ($_AseriesRequestDetails as $key => $value) {
					
					if(in_array($value['series_request_id'],$_AparentSeriesrequestId))
						$_IresultPnrCount += 1;
				}
			}
			elseif(!empty($_IrequestApprovedFlightId))
			{
				if(empty($_ArequestMasterDetailsArray['pnrBlockingDetails'])){
					$selectPnr = "SELECT
										pnr
									FROM
										".$CFG['db']['tbl']['pnr_blocking_details']."
									WHERE
										request_approved_flight_id = ".$_IrequestApprovedFlightId."";
					if(DB::isError($resultPnr=$this->_Oconnection->query($selectPnr)))
					{
						fileWrite($selectPnr,"SqlError","a+");
						return false;
					}
					$_IresultPnrCount =$resultPnr->numRows();
				}else{
					$_IresultPnrCount=sizeof(array_keys(array_column($_ArequestMasterDetailsArray['pnrBlockingDetails'], 'request_approved_flight_id'),$_IrequestApprovedFlightId));
				}
			}

			if( $_IresultPnrCount > 1)
			{
				return "Y";
			}
			else
			{
				#To check existsing adhoc request which has multiple pnr
				$_SrequestType=(!empty($_ArequestMasterDetailsArray['request_type']))?$_ArequestMasterDetailsArray['request_type']:$this->_getRequestType($_IrequestMasterId);
				if($_SrequestType=='adhoc')
				{
					if(empty($_ArequestMasterDetailsArray['pnrBlockingDetails'])){
						$selectPnr = "SELECT
										pnr
									FROM
										".$CFG['db']['tbl']['pnr_blocking_details']."
									WHERE
										request_master_id = ".$_IrequestMasterId."
						GROUP BY pnr";
						if(DB::isError($resultPnr=$this->_Oconnection->query($selectPnr)))
						{
							fileWrite($selectPnr,"SqlError","a+");
							return false;
						}
						$_IpnrCount = $resultPnr->numRows();
					}else{
						
						$_IpnrCount = sizeof(array_unique(array_column($_ArequestMasterDetailsArray['pnrBlockingDetails'],'pnr')));
					}	
					if( $_IpnrCount>1)
						return "Y";
					else
						return "N";
				}
				return "N";
			}
		}
		else
			return 'N';
	}
	function _getChildRequestDetails($parentRequestId)
	{  
		global $CFG;
		$referenceRequestIdDetails=$this->_getParentUpsizeRequestIds($parentRequestId);
		$childRequestMasterId=$referenceRequestIdDetails['childRequestMasterId'];
		return array('childRequestMasterId'=>$childRequestMasterId,'divName'=>'chlid-list-'.$parentRequestId);
	}	
	function _getAutoPilotPolicyName($autoPilotPolicyId)
	{
		global $CFG;
		
		$_SautoPilotName="";
		if($autoPilotPolicyId!=0)
		{
			$_Svariable = $autoPilotPolicyId;
			$_AstaticData = $this->_staticData("_getAutoPilotPolicyName",$_Svariable);
			if($_AstaticData !== false)
				return $_AstaticData;

			$sqlAutoPilotPolicy = "SELECT
										policy_name
									FROM
										".$CFG['db']['tbl']['common_policy_master']."
									WHERE
										policy_id='".$autoPilotPolicyId."' LIMIT 1";
			if(DB::isError($resultAutoPilotPolicy=$this->_Oconnection->query($sqlAutoPilotPolicy)))
			{
				fileWrite($sqlAutoPilotPolicy,"SqlError","a+");
				return false;
			}
			if($resultAutoPilotPolicy->numRows() >0)
			{
				$rowAutoPilotPolicy = $resultAutoPilotPolicy->fetchRow(DB_FETCHMODE_ASSOC);
				$_SautoPilotName = $rowAutoPilotPolicy['policy_name'];
				$this->_staticData("_getAutoPilotPolicyName",$_Svariable,$_SautoPilotName);
			}
		}
		return $_SautoPilotName;
	}

	/**
		Author    	 : Suganya B	
		Function Name:_getPriorityPolicyName
		Parameter    :$_IrequestMasterId - Integer
		Policy Name  : Priority policy			  
		Desc		 : Return get the priority policy name  
	*/
	function _getPriorityPolicyName($_IrequestMasterId)
	{				
		global $CFG;

		$_SpriorityName='';
		$sqlPriorityPolicy = "SELECT 
								  pm.policy_id
							  FROM 
								  ".$CFG['db']['tbl']['policy_group_mapping']." pgm
							  INNER JOIN       																	 policy_mapping pm ON pgm.policy_mapping_id = pm.policy_mapping_id  
							  WHERE 																			  pgm.request_master_id = ".$_IrequestMasterId." AND pm.policy_type_id =
							  (SELECT 
							      policy_type_id 
						       FROM 
							      ".$CFG['db']['tbl']['policy_type_details']." 
					           WHERE 
							       policy_type_code='PP' LIMIT 1)";	
							       				
		if(DB::isError($resultPolicy=$this->_Oconnection->query($sqlPriorityPolicy)))
		{
			fileWrite($sqlPriorityPolicy,"SqlError","a+");
			return false;
		}
		if($resultPolicy->numRows() >0)
		{
			$rowPriorityPolicy = $resultPolicy->fetchRow(DB_FETCHMODE_ASSOC);
			$_IpolicyId = $rowPriorityPolicy['policy_id'];
			$_SpriorityName = $this->_getAutoPilotPolicyName($_IpolicyId);
		}
		return $_SpriorityName;
	}

	/**
		Author    	 : Suganya B	
		Function Name:_getFareTypeDetails
		Parameter    :$_IairlineReqId - Integer			  
		Desc		 : Return the fare type for accepted request
	*/
	function _getFareTypeDetails($_IairlineReqId)
	{
		global $CFG;
		$sqlFareDetails = "SELECT 
								rafd.fare_filter_method
						   FROM 
							  ".$CFG['db']['tbl']['request_approved_flight_details']." rafd
						   INNER JOIN       																	 
						      ".$CFG['db']['tbl']['transaction_master']." tm ON rafd.transaction_master_id = tm.transaction_id 							 
						   WHERE 		
						   tm.airlines_request_id = ".$_IairlineReqId."
						   AND rafd.accepted_flight_status = 'Y'";	
					       				
		if(DB::isError($result=$this->_Oconnection->query($sqlFareDetails)))
		{
			fileWrite($sqlFareDetails,"SqlError","a+");
			return false;
		}
		if($result->numRows() >0)
		{
			$rowFareType = $result->fetchRow(DB_FETCHMODE_ASSOC);
			$_SfareType = $rowFareType['fare_filter_method'];
		}
		return $_SfareType;
	}
	/**
	 * Function used to get the accepted fare filter method for service request.
	**/
	public function _getGroupFareType($_IrequestMasterId,$_Spnr)
	{
		global $CFG;
		$_SfareType = 'Regular';
		$_Ssql = "SELECT 
					rafd.fare_filter_method,
					rafd.request_approved_flight_id,
					pbd.pnr
				FROM
					".$CFG['db']['tbl']['pnr_blocking_details']." pbd 
				INNER JOIN 
					".$CFG['db']['tbl']['request_approved_flight_details']." rafd
				ON
					rafd.request_approved_flight_id = pbd.request_approved_flight_id 
				WHERE 
					pbd.pnr = '".$_Spnr."' AND pbd.request_master_id = ".$_IrequestMasterId." 
				GROUP BY 
					pbd.pnr";
					
		if(DB::isError($result = $this->_Oconnection->query($_Ssql)))
		{
			fileWrite(print_r($_Ssql,1),'SqlError','a+');
			return false;
		}
		if($result->numRows() > 0)
		{
			$rowGroupFareType = $result->fetchRow(DB_FETCHMODE_ASSOC);
			if($rowGroupFareType['fare_filter_method'] == 'BAGF')
				$_SfareType = 'Basic';
		}
		return $_SfareType;
	}

	//To check the modified request
	function _checkRequestModifyStatus($transactionMasterId)
	{
		global $CFG;
		$modifyStatus="N";
		if($transactionMasterId!="" && $transactionMasterId!=0)
		{
			fileRequire("dataModels/class.transactionMaster.php");
			$objTransactionMaster=new transactionMaster();
			$objTransactionMaster->_Oconnection=$this->_Oconnection;
			$objTransactionMaster->_ItransactionId=$transactionMasterId;
			$transactionDetails=$objTransactionMaster->_selectTransactionMaster();
			if(!empty($transactionDetails))
			{
				if($transactionDetails[0]['request_master_history_id']>0)
					$modifyStatus='Y';
				else
				$modifyStatus='N';
			}
		}
		return $modifyStatus;
	}
	function _getModifyFareQuoteStatus($_IrequestMasterId='',$_StransactionStatus="N",$splitModifyFlightId=array())
	{
		global $CFG;
		#Getting the current pnr blocking details
		fileRequire("dataModels/class.pnrBlockingDetails.php");	
		$objPnrBlockingDetails=new pnrBlockingDetails();
		
		$airlineRequestId = $this->_getAirlineRequestId($_IrequestMasterId);
		$modifyStatusDetails=array();	

		$_Svariable = $airlineRequestId;
		$_AstaticData = $this->_staticData("_getModifyFareQuoteStatus",$_Svariable);
		if($_AstaticData !== false)
		{
			$lastTransactionIdDetails = $_AstaticData;
		}
		else
		{
			#Getting the last transaction id
			$lastTransactionIdSql="SELECT MAX(transaction_id) as transactionId FROM ".$CFG['db']['tbl']['transaction_master']."  WHERE airlines_request_id=".$airlineRequestId."";

			if(DB::isError($resultLastTransactionIdSql = $this->_Oconnection->query($lastTransactionIdSql))) 
			{
				fileWrite($lastTransactionIdSql,"SqlError","a+");
				return false;
			}
			if($resultLastTransactionIdSql->numRows() >0)
			{
				$lastTransactionIdDetails=$resultLastTransactionIdSql->fetchRow(DB_FETCHMODE_ASSOC);
				$this->_staticData("_getModifyFareQuoteStatus",$_Svariable,$lastTransactionIdDetails);
			}
		}

		$lastTransactionId=$lastTransactionIdDetails['transactionId'];
		$modifyStatusDetails['requestMasterId']=$_IrequestMasterId;	
		$modifyStatusDetails['lastTransactionId']=$lastTransactionId;	

		if($_StransactionStatus=='Y')
			return $modifyStatusDetails;
			

		fileRequire("classes/class.requestModifyDetails.php");	
		$this->_OrequestModifyDetails = new requestModifyDetails;
		$this->_OrequestModifyDetails->__construct();
		$this->_OrequestModifyDetails->_Oconnection = $this->_Oconnection;
		$this->_OrequestModifyDetails->_Osmarty = $this->_Osmarty;
		$this->_OrequestModifyDetails->_IrequestMasterId  = $_IrequestMasterId;
		$this->_OrequestModifyDetails->_getModifyRequestDetails();
		$this->_ArequestMasterHistory = $this->_OrequestModifyDetails->_ArequestMasterHistory[0];
		if(count($this->_ArequestMasterHistory) > 0){

			$this->_ArequestDetailsHistory=$this->_OrequestModifyDetails->_ArequestDetailsHistory;	
			$this->_AseriesRequestDetailsHistory=$this->_OrequestModifyDetails->_AseriesRequestDetailsHistory;
		}
			
		$_AmodifyRequestMasterHistory = $this->_ArequestMasterHistory;
		$_AmodifyRequestDetailsHistory = $this->_ArequestDetailsHistory;	
		$_AmodifySeriesRequestDetailsHistory = $this->_AseriesRequestDetailsHistory;
		$selectRequestHistory="SELECT 
								request_approved_flight_id,
								airlines_request_id,
								transaction_master_id,
								request_id,
								request_details_history_id,
								series_request_id,
								series_request_history_id,
								source,
								destination,
								flight_code,
								flight_number,
								departure_date,
								no_of_adult,
								no_of_child,
								no_of_infant

							FROM
								".$CFG['db']['tbl']['request_approved_flight_details']." rafd
							WHERE
							    	rafd.transaction_master_id='".$lastTransactionId."'
								AND rafd.accepted_flight_status='Y'
							ORDER BY
								request_details_history_id ASC";


		if(DB::isError($resultRequestHistory = $this->_Oconnection->query($selectRequestHistory))) 
		{
			fileWrite($selectRequestHistory,"SqlError","a+");
			return false;
		}
		$approvedFlightDetails=array();
		$modifyStatusDetails['status']='N';
		if($resultRequestHistory->numRows() >0)
		{	
			$flightCount=0;
			while($rowFlightDetailsPaxCount = $resultRequestHistory->fetchRow(DB_FETCHMODE_ASSOC))
			{
				
				foreach($_AmodifySeriesRequestDetailsHistory as $key=>$value)
				{
					// Add another condition for split PNR flow
					if($rowFlightDetailsPaxCount['series_request_history_id'] == $value['series_request_history_id'])
					{	
						if(empty($splitModifyFlightId[$rowFlightDetailsPaxCount['series_request_history_id']]) && !in_array($rowFlightDetailsPaxCount['request_approved_flight_id'],$splitModifyFlightId[$rowFlightDetailsPaxCount['series_request_history_id']]))
						{
							$rowFlightDetailsPaxCount = array_replace($rowFlightDetailsPaxCount,$_AmodifySeriesRequestDetailsHistory[$key]);
						}
					}
					#For confernce rollback accept we need series_grp_id other wise it will delete entire data of this request (if any groups are modify accepted) other than rollback accepted group
                    else if($rowFlightDetailsPaxCount['series_request_id'] == $value['series_request_id'])
                    {
                        $rowFlightDetailsPaxCount['series_group_id'] = $_AmodifySeriesRequestDetailsHistory[$key]['series_group_id'];                   
                    }
				}
				
				if($rowFlightDetailsPaxCount['series_request_history_id']>0)
					$modifyStatusDetails['status']='Y';
				$approvedFlightDetails[$flightCount]=$rowFlightDetailsPaxCount;					
				/*Start get created pnr to modify based on series_request_id*/
				$modifyPnr = '';
				$_splitPnrArray=array();

				// If series request id is zero need to add history id to get modified pnr
				if($rowFlightDetailsPaxCount['series_request_id'] == 0 && $rowFlightDetailsPaxCount['series_request_history_id'] != 0)
				{
					// Get mapped series request id for zeroed history id
					$modifiedSql = "select series_request_id from ".$CFG['db']['tbl']['series_request_details_history']." where series_request_history_id IN(select mapped_series_request_id from ".$CFG['db']['tbl']['series_request_details_history']." WHERE series_request_history_id = ".$rowFlightDetailsPaxCount['series_request_history_id']." AND request_details_history_id=".$rowFlightDetailsPaxCount['request_details_history_id'].")";

					if(DB::isError($modifiedResult=$this->_Oconnection->query($modifiedSql)))
					{
						fileWrite($modifiedSql,"SqlError","a+");
					}

					if($modifiedResult->numRows() > 0)
					{
						$_AseriesRequestId = [];
						while($modifiedRow = $modifiedResult->fetchRow(DB_FETCHMODE_ASSOC))
						{
							$_AseriesRequestId[] = $modifiedRow['series_request_id'];
						}
					}
				}

				if($rowFlightDetailsPaxCount['series_request_id']!=0 || !empty($_AseriesRequestId))
				{
					$_SzeroSeriesRequestId = 'N';

					if($rowFlightDetailsPaxCount['series_request_id']==0 && !empty($_AseriesRequestId))
					{
						$_SzeroSeriesRequestId = 'Y';
						$_SseriesRequestIdCond = 'rafd.series_request_id IN('.implode(',',$_AseriesRequestId).')';
					}else
					{
						$_SseriesRequestIdCond = 'rafd.series_request_id = '.$rowFlightDetailsPaxCount['series_request_id'];
					}

					$sql = "SELECT
								pbd.pnr
							FROM
								".$CFG['db']['tbl']['request_approved_flight_details']." rafd,
								".$CFG['db']['tbl']['pnr_blocking_details']." pbd
							WHERE
								pbd.request_approved_flight_id = rafd.request_approved_flight_id
								AND ".$_SseriesRequestIdCond." AND pbd.status != 'Closed' ORDER BY pnr_blocking_id";

					if(DB::isError($result=$this->_Oconnection->query($sql)))
					{
						fileWrite($sql,"SqlError","a+");
						return false;
					}
					if($result->numRows() > 0)
					{
						while($row=$result->fetchRow(DB_FETCHMODE_ASSOC))
						{
							if($_SzeroSeriesRequestId == 'Y')
							{
								$_splitPnrHistoryArray[]=$row['pnr'];
								$modifyHistoryPnr = $row['pnr'];
							}else
							{
								$_splitPnrArray[]=$row['pnr'];
								$modifyPnr = $row['pnr'];
							}
						}
					}
				}
				
				if(!empty($_splitPnrHistoryArray))
				{
					$modifyStatusDetails['modifiedHistorySplitPNR'][$rowFlightDetailsPaxCount['series_request_history_id']]['pnr']=$_splitPnrHistoryArray;
				}

				if($modifyHistoryPnr != '')
				{
					$modifyStatusDetails['modifiedHistoryPNR'][$rowFlightDetailsPaxCount['series_request_history_id']]['pnr']=$modifyHistoryPnr;
				}

				if($modifyPnr != '')
					$modifyStatusDetails['modifiedPNR'][$rowFlightDetailsPaxCount['series_request_id']]['pnr']=$modifyPnr;

				#To get the split pnr for that series request id
				if(!empty($_splitPnrArray))
					$modifyStatusDetails['modifiedSplitPNR'][$rowFlightDetailsPaxCount['series_request_id']]['pnr']=$_splitPnrArray;
				/*End get created pnr to modify based on series_request_id*/				
				if(isset($rowFlightDetailsPaxCount['request_approved_flight_id']))
				{
					$sqlCheckViaFlightDetails="SELECT	*
											   FROM
													".$CFG['db']['tbl']['via_flight_details']."
											   WHERE
													request_approved_flight_id='".$rowFlightDetailsPaxCount['request_approved_flight_id']."'";

					if(DB::isError($resultCheckViaFlightDetails=$this->_Oconnection->query($sqlCheckViaFlightDetails)))
					{
						fileWrite($sqlCheckViaFlightDetails,"SqlError","a+");
						return false;
					}
					if($resultCheckViaFlightDetails->numRows() > 0)
					{
						$viaFlightCount=0;
						while($rowCheckViaFlightDetails=$resultCheckViaFlightDetails->fetchRow(DB_FETCHMODE_ASSOC))
						{
							$approvedFlightDetails[$flightCount]['viaFlightDetails'][$viaFlightCount]=$rowCheckViaFlightDetails;
							$viaFlightCount++;
						}
					}
				}			
				$flightCount++;
			}
		}	
		$modifyStatusDetails['flightDetails']=$approvedFlightDetails;
		$modifyStatusDetails['flightDetails']['requestMasterHistory'] = $_AmodifyRequestMasterHistory;
		$modifyStatusDetails['flightDetails']['requestDetailsHistory'] = $_AmodifyRequestDetailsHistory;	
		$modifyStatusDetails['flightDetails']['seriesRequestDetailsHistory'] = $_AmodifySeriesRequestDetailsHistory;	
		return $modifyStatusDetails;
	}
	
	/*
	 * @usage - get modify request current status
	 * @input - $_IrequestMasterId
	 * @output - Return current modify status if the request modified
	 */
	function _getModifyRequestCurrentStatus($_IrequestMasterId)
	{
		global $CFG;
		
		$_IlastTransactionId = $this->_getLastTransactionMasterId($_IrequestMasterId);
		$modifyStatus=0;
		fileRequire("dataModels/class.transactionMaster.php");
		$objTransactionMaster=new transactionMaster();
		$objTransactionMaster->_Oconnection=$this->_Oconnection;
		$objTransactionMaster->_ItransactionId=$_IlastTransactionId;
		if($_IlastTransactionId != 0)
			$transactionDetails=$objTransactionMaster->_selectTransactionMaster();
		if(!empty($transactionDetails))
		{
			if($transactionDetails[0]['request_master_history_id']>0)
			{
				$sqlModifyStatus = "SELECT
										modify_status
									FROM
										".$CFG['db']['tbl']['request_master_history']."
									WHERE
										request_master_history_id = ".$transactionDetails[0]['request_master_history_id'];
				
				if(DB::isError($resultModifyStatus=$this->_Oconnection->query($sqlModifyStatus)))
				{
					fileWrite($sqlModifyStatus,"SqlError","a+");
					return false;
				}
				if($resultModifyStatus->numRows() > 0)
				{
					$rowModifyStatus=$resultModifyStatus->fetchRow(DB_FETCHMODE_ASSOC);
					$modifyStatus = $rowModifyStatus['modify_status'];
				}
			}
		}
		return $modifyStatus;
	}
	
	function _getRequestOpenStatusDetails($_IrequestMasterId)
	{
		global $CFG;
		$_AopenStatusDetails = array();
		
		$sqlSelectRequestOpenedCheck="SELECT
											opened_by,
											view_status,
											auto_pilot_status
										FROM
											".$CFG['db']['tbl']['request_master']."
										WHERE 
											request_master_id=".$_IrequestMasterId;
		if(DB::isError($resultRequestOpenedCheck=$this->_Oconnection->query($sqlSelectRequestOpenedCheck)))
		{
			fileWrite($sqlSelectRequestOpenedCheck,"SqlError","a+");
			return false;
		}
		
		if($resultRequestOpenedCheck->numRows() > 0)
		{
			while($rowRequestOpenedCheck=$resultRequestOpenedCheck->fetchRow(DB_FETCHMODE_ASSOC))
			{
				$_AopenStatusDetails =$rowRequestOpenedCheck;
			}
		}
		
		return $_AopenStatusDetails;
	}
	//Function to call series of wrapper script functionalities
	function _seriesCalls($_AfunctionCalls)
	{
		foreach($_AfunctionCalls as $key => $link)
			$this->_OobjResponse->script($link);
	}
	
	//Check for flexible request splitted or not
	function _checkFlexiblePassengerSplit($_IrequestMasterId)
	{
		global $CFG;
		
		$_SflexibleSplitStatus = "N";
		$_IlastTransactionId=$this->_getLastTransactionMasterId($_IrequestMasterId);
		
		$selectSeriesDetails = "SELECT 
									srd.request_id,
									srd.series_request_id
								FROM
								".$CFG['db']['tbl']['request_details']." rd,
								".$CFG['db']['tbl']['series_request_details']." srd
								WHERE
									rd.request_master_id=".$_IrequestMasterId."
									AND rd.request_id=srd.request_id";
		
		if(DB::isError($resultSeriesDetails = $this->_Oconnection->query($selectSeriesDetails))) 
		{
			fileWrite($selectSeriesDetails,"SqlError","a+");
			return false;
		}
			
		if($resultSeriesDetails->numRows() >0)
		{
			while($rowSeriesDetails = $resultSeriesDetails->fetchRow(DB_FETCHMODE_ASSOC))
			{
				$selectApprovedDetails = "SELECT
											request_approved_flight_id
										FROM
											".$CFG['db']['tbl']['request_approved_flight_details']." rafd
										WHERE
											rafd.request_id = ".$rowSeriesDetails['request_id']."
											AND rafd.series_request_id = ".$rowSeriesDetails['series_request_id']."
											AND rafd.transaction_master_id = ".$_IlastTransactionId."
											AND rafd.accepted_flight_status='Y'";
				if(DB::isError($resultApprovedFlightCount = $this->_Oconnection->query($selectApprovedDetails))) 
				{
					fileWrite($selectApprovedDetails,"SqlError","a+");
					return false;
				}
					
				if($resultApprovedFlightCount->numRows() >1)
				{
					$_SflexibleSplitStatus = "Y";
				}
			}
		}
		
		return $_SflexibleSplitStatus;
	}

	function _getFlightLoadFactorDetails($flights,$cabinVal,$noOfPax,$instantFlag='N',$_SinventoryCheck='Y')
	{
		global $CFG;
		fileRequire("classes/class.airlineService.php");
		$objAirwaysService=new airlineService();
		$_AbrandDetails=$this->_setBrandCode($cabinVal);
		$objAirwaysService->_AformValues['cabin'] =$_AbrandDetails['cabin'];
		if(!empty($_AbrandDetails['brandCode']))
			$objAirwaysService->_AformValues['brandCode'] =$_AbrandDetails['brandCode'];
		fileRequire('classesTpl/class.tpl.forecastDataDisplayTpl.php');
		$_ObjForecastDataDisplayTpl = new forecastDataDisplayTpl();
		$_ObjForecastDataDisplayTpl->_Oconnection=$this->_Oconnection;
		
		$loadFactorArray=$forecastLoadFactor=$futureLoadFactor=$seatsAvailability=array();
		$loadFactor['currenctLoadFactor']='';
		$loadFactor['forecastLoadFactor']='';
		$loadFactor['futureLoadFactor']='';
		$loadFactor['seatsAvailability']='-1';
		$loadFactor['seatsAvailabilityResponse'] = 'N';
		$loadFactor['seatsAvailabilityResponseMessage'] = '';
		$futureLF = 0;
		$fltClf = 0;
		
		
		foreach($flights as $key=>$value)
		{
			if($_SinventoryCheck=='Y')
			{
				$objAirwaysService->_AformValues['origin'] = $value['origin'];
				$objAirwaysService->_AformValues['destination'] = $value['destination'];
				$objAirwaysService->_AformValues['airlineCode'] = $value['airlineCode'];
				$objAirwaysService->_AformValues['isDomestic'] = ($this->_checkIsDomestic($value['origin'],$value['destination']))=='Y'?'Y':'N';
				
				/*Modified By: Subalakshmi S 07.11.2018
				 * To call the OA inventory for converted flights(OA to A3)*/
				unset($objAirwaysService->_AformValues['converted']);
				if(isset($value['converted']) && $value['converted']!='')
					$objAirwaysService->_AformValues['converted'] = $value['converted'];
					
				unset($objAirwaysService->_AformValues['domesticConverted']);
				if(isset($value['domesticConverted']) && $value['domesticConverted']!='')
					$objAirwaysService->_AformValues['domesticConverted'] = $value['domesticConverted'];

				$objAirwaysService->_AformValues['flightNumber'] = substr($value['flightNumber'],3);
				$dep = strpos($value['departureDate'], 'T') !== false ? explode("T", $value['departureDate']) : explode(" ", $value['departureDate']);	
				$objAirwaysService->_AformValues['departureDate'] = $dep[0];
			}
			if(!isset($value['seatsAvailability']))
				$flightInventory=$objAirwaysService->_flightInventoryService();
			else
			{
				$flightInventory=array();
				$flightInventory['responseCode']=0;
				$flightInventory['response']['sold']=$value['sold'];
				$flightInventory['response']['capacity']=$value['capacity'];
				$flightInventory['response']['seatsAvailability']=$value['seatsAvailability'];
			}
			if($flightInventory['responseCode']==1 && strtoupper(str_replace(' ','_',$flightInventory['response'])) == 'FLIGHT_DETAILS_NOT_AVAILABLE')
				$loadFactor['seatsAvailabilityResponseMessage'] = $flightInventory['response'];			
			if($flightInventory['responseCode']==0)
			{
				/** Current Loadfactor & Future Loadfactor are set to zero When capacity is zero or NULL */
				if(!empty($flightInventory['response']['capacity']))
				{
					$fltClf=round(($flightInventory['response']['sold']/$flightInventory['response']['capacity'])*100);	
					if(!empty($noOfPax))
						$futureLF=round((($flightInventory['response']['sold']+$noOfPax)/$flightInventory['response']['capacity'])*100);
				}
				$input=array();
				$input['origin']=$value['origin'];
				$input['destination']=$value['destination'];
				$input['departureDate']=$dep[0];
				$depTime=substr($value['departureDateTime'],11);
				if($depTime)
					$input['depatureTime']=$depTime;
				else
					$input['depatureTime']=$value['departureDateTime'];

				$input['cabin']='Y';
				if($noOfPax!=0 && $noOfPax!="")
					$input['currentGroupSize']=$noOfPax;				
				$input['sold']=$flightInventory['response']['sold'];
				$input['capacity']=$flightInventory['response']['capacity'];
				$input['carrier']=$value['airlineCode'];
				$input['flightNumber']=substr($value['flightNumber'],3);
				$_ObjForecastDataDisplayTpl->_IinputData=$input;
				$fltFlf=0;
				if($CFG['site']['forecastFactor']['status']=='Y')
				{
					$forecastDetails=$_ObjForecastDataDisplayTpl->_getForecastData();	
					if(!empty($forecastDetails))
					{
						$fltFlf=$forecastDetails['forecastFactor'];
					}
				}			
				$loadFactorArray[]=$fltClf;
				$forecastLoadFactor[]=$fltFlf;
				if($noOfPax!=0 && $noOfPax!="")
					$futureLoadFactor[] = $futureLF;
				
				/**
				 * Get the seat availability for each flight to validate with group pax count
				 **/
				if((isset($CFG['requestForm']['checkSeatAvailabilityForPaxCount']) && $CFG['requestForm']['checkSeatAvailabilityForPaxCount'] == "Y") || $instantFlag =='Y')
				{
					$seatsAvailabilityResponse[] = 'Y';
					$seatsAvailability[] = $flightInventory['response']['seatsAvailability'];
				}
				else
					$seatsAvailability[]= -1;
			}
			else
				$seatsAvailability[]= -1;
			$_AflightNumbers[] = $objAirwaysService->_AformValues['flightNumber'];
		}
		

		if(!empty($loadFactorArray))
		{
			$loadFactor['currenctLoadFactor']=implode("/",$loadFactorArray);
			$loadFactor['forecastLoadFactor']=implode("/",$forecastLoadFactor);
			$loadFactor['futureLoadFactor'] = implode("/",$futureLoadFactor);
			$loadFactor['seatsAvailability'] = implode("/",$seatsAvailability);
			$loadFactor['seatsAvailabilityResponse'] = implode("/",$seatsAvailabilityResponse);
		}
		return $loadFactor;
	}
	
	/*check child pax count for acceptance if parent request is in fare quote status*/
	function _checkChildRequestToProceed($_IrequestMasterId)
	{
		
		global $CFG;
		//Get parent request master id using child request master id
		$_IparentRequestMasterId = $this->_getParentRequestMasterId($_IrequestMasterId);
		$childToProceed = "Y";
		$_SquoteType=$this->_checkCloneRequest($_IrequestMasterId);
		if($_SquoteType!='Y' && $_SquoteType !='' && in_array($_SquoteType,$CFG['limit']['allowedPaxForChildProceed']['quoteType']))
			return $childToProceed;
		//Get airline request id using parent request master id
		$_IparentAirlineRequestId = $this->_getAirlineRequestId($_IparentRequestMasterId);

		$_AparentValues = $this->_getParentSeriesDetails($_IrequestMasterId);
		
		// Take the partially modified subgroups when parent series request id was not exists
		$_AseriesRequestData = $this->_getSeriesRequestId($_IrequestMasterId);
		$_IchildSeriesRequestId =  min(array_column($_AseriesRequestData,'series_request_id'));
		$_IparentSeriesRequestId =  min(array_column($_AparentValues,'series_request_id'));
		//When partially modifed groups have the same parent and child series request id ,so ignore the below validation
		if($_IparentRequestMasterId!=0 && $_IparentSeriesRequestId != $_IchildSeriesRequestId)
		{
			$selectPax = "SELECT 
								number_of_adult,
								number_of_child
							FROM
								".$CFG['db']['tbl']['request_master']."
							WHERE
								request_master_id = ".$_IrequestMasterId;
			if(DB::isError($resultPax=$this->_Oconnection->query($selectPax)))
			{
				fileWrite($selectPax,"SqlError","a+");
				return false;
			}
			if($resultPax->numRows() >0)
			{
				$rowPax = $resultPax->fetchRow(DB_FETCHMODE_ASSOC);
				$totalPax = $rowPax['number_of_adult']+$rowPax['number_of_child'];
				
				if(isset($CFG['limit']['allowedPaxForChildProceed']) && $totalPax <= $CFG['limit']['allowedPaxForChildProceed']['paxCount'])
				{
					//ifPNR is available for the request, following condition will exeute or else condition will execute
					if($this->_getPNR($_IparentRequestMasterId)){
						//Get request group details using parent airline request id,series group id
						$_AgrpDets = $this->_getRequestGroupDetails($_IparentAirlineRequestId,$_AparentValues[0]['series_group_id']);
						//get group status
						$_IgrpStatus = $_AgrpDets[0]['group_status'];
						//get status code
						$_SgrpStatusCode = $this->_getCurrentStatusCode($_IgrpStatus);
						//if request is not closed, this condition will execute, or else condition will execute
						if($_SgrpStatusCode != "RC"){
							$childToProceed = "Y";
						}else{
							$childToProceed = "C";
						}
					}
					else
						$childToProceed = "N";
				}
				else
				{
					#To allow child request when parent request is accepted
					if(!isset($CFG['limit']['allowedPaxForChildProceed']) || $CFG['limit']['allowedPaxForChildProceed']['paxCount']==0)
					{
						
						if($this->_getPNR($_IparentRequestMasterId)){
							//Get request group details using parent airline request id,series group id
							$_AgrpDets = $this->_getRequestGroupDetails($_IparentAirlineRequestId,$_AparentValues[0]['series_group_id']);
							//get group status
							$_IgrpStatus = $_AgrpDets[0]['group_status'];
							//get status code for the status id
							$_SgrpStatusCode = $this->_getCurrentStatusCode($_IgrpStatus);
							//if request is not closed, this condition will execute, or else condition will execute
							if($_SgrpStatusCode != "RC"){
								$childToProceed = "Y";
							}else{
								$childToProceed = "C";
							}
						}
						else
						$childToProceed = "N";
					}
					else
						$childToProceed = "Y";
				}
			}
		}
		return $childToProceed;
	}
	
	function _getPNRWiseFlightDetails($_Spnr)
	{
		global $CFG;
		
		fileRequire('dataModels/class.pnrBlockingDetails.php');
		fileRequire('dataModels/class.requestApprovedFlightDetails.php');
		fileRequire('dataModels/class.viaFlightDetails.php');
		fileRequire('dataModels/class.seriesRequestDetails.php');
		fileRequire('dataModels/class.seriesRequestDetailsHistory.php');
		
		$_ApnrWiseFlightDetails = array();
		$_ApnrWiseFinalDetails = array();
		$_OpnrBlockingDetails = new pnrBlockingDetails();
		$_OpnrBlockingDetails->_Oconnection = $this->_Oconnection;
		
		$_OrequestApprovedFlightDetails = new requestApprovedFlightDetails();
		$_OrequestApprovedFlightDetails->_Oconnection = $this->_Oconnection;
		
		$_OviaFlightDetails = new viaFlightDetails();
		$_OviaFlightDetails->_Oconnection = $this->_Oconnection;


		$_OseriesRequestDetails = new seriesRequestDetails();
		$_OseriesRequestDetails->_Oconnection = $this->_Oconnection;
		
		$_OseriesRequestDetailsHistory = new seriesRequestDetailsHistory();
		$_OseriesRequestDetailsHistory->_Oconnection = $this->_Oconnection;
		
		$_OpnrBlockingDetails->_Spnr = $_Spnr;
		$_OpnrBlockingDetails->_selectPnrBlockingDetails();
		$_ApnrBlockingDetails = $_OpnrBlockingDetails->_ApnrBlockingDetails;
		
		if(!empty($_ApnrBlockingDetails) && isset($_ApnrBlockingDetails[0]['pnr']))
		{
			$i = 0;
			$_ApnrWiseFinalDetails['pnrBlockingDetails'] = $_ApnrBlockingDetails;
			foreach($_ApnrBlockingDetails AS $pnrKey => $pnrValues)
			{
				$_OrequestApprovedFlightDetails->__construct();
				$_OrequestApprovedFlightDetails->_IrequestApprovedFlightId = $pnrValues['request_approved_flight_id'];
				$_OrequestApprovedFlightDetails->_SacceptedFlightStatus = 'Y';
				$_OrequestApprovedFlightDetails->_selectRequestApprovedFlightDetails();
				$_ArequestApprovedFlightDetails = $_OrequestApprovedFlightDetails->_ArequestApprovedFlightDetails;
				//$_ApnrWiseFlightDetails[$i]= $pnrValues;
				
				foreach($_ArequestApprovedFlightDetails AS $flightKey => $flightValue)
				{
					#$_ApnrWiseFlightDetails[$i]['approvedFlightDetails'][$j] = $flightValue;
					if($flightValue['series_request_history_id']!=0)
					{
						$_OseriesRequestDetailsHistory->__construct();
						$_OseriesRequestDetailsHistory->_IseriesRequestHistoryId = $flightValue['series_request_history_id'];
						$_OseriesRequestDetailsHistory->_SflightStatus = '';
						$_AseriesRequestDetails = $_OseriesRequestDetailsHistory->_selectSeriesRequestDetailsHistory();
					}
					else
					{
						$_OseriesRequestDetails->__construct();
						$_OseriesRequestDetails->_IseriesRequestId = $flightValue['series_request_id'];
						$_OseriesRequestDetails->_SflightStatus = '';
						$_AseriesRequestDetails = $_OseriesRequestDetails->_selectSeriesRequestDetails();
					}
					#$_ApnrWiseFlightDetails[$i]['approvedFlightDetails'][$j] = $flightValue;
					
					if($_AseriesRequestDetails[0]['flight_status']=='HK'||$_AseriesRequestDetails[0]['flight_status']=='')
					{
						$_AseriesRequestDetails[0]['flight_status'] = 'Confirmed';
						$_AseriesRequestDetails[0]['flightStatus'] = 'HK';
					}
					else if($_AseriesRequestDetails[0]['flight_status']=='UN')
					{
						$_AseriesRequestDetails[0]['flight_status'] = 'Flight cancelled';
						$_AseriesRequestDetails[0]['flightStatus'] = 'UN';
					}
					else if($_AseriesRequestDetails[0]['flight_status']=='TK')
					{
						$_AseriesRequestDetails[0]['flight_status'] = 'Schedule changed';
						$_AseriesRequestDetails[0]['flightStatus'] = 'TK';
					}
					if($flightValue['stops']>0)
					{
						$_OviaFlightDetails->__construct();
						$_OviaFlightDetails->_IrequestApprovedFlightId = $flightValue['request_approved_flight_id'];
						$_OviaFlightDetails->_selectViaFlightDetails();
						$_AviaFlightDetails = $_OviaFlightDetails->_AviaFlightDetails;
						
						$k = 0;
						foreach($_AviaFlightDetails AS $viaFlightKey => $viaFlightValue)
						{
							$_ApnrWiseFlightDetails[$i]['requestApprovedFlightId'] = $viaFlightValue['request_approved_flight_id'];
							$_ApnrWiseFlightDetails[$i]['viaFlightId'] = $viaFlightValue['via_flight_id'];
							$_ApnrWiseFlightDetails[$i]['seriesRequestId'] = $flightValue['series_request_id'];
							$_ApnrWiseFlightDetails[$i]['requestId'] = $flightValue['request_id'];
							$_ApnrWiseFlightDetails[$i]['origin'] = $viaFlightValue['origin'];
							$_ApnrWiseFlightDetails[$i]['destination'] = $viaFlightValue['destination'];
							$_ApnrWiseFlightDetails[$i]['airlineCode'] = $viaFlightValue['airline_code'];
							$_ApnrWiseFlightDetails[$i]['flightNumber'] = $viaFlightValue['airline_code']."-".$viaFlightValue['flight_number'];
							$_ApnrWiseFlightDetails[$i]['departureDate'] = $viaFlightValue['departure_date'];
							$_ApnrWiseFlightDetails[$i]['departureTime'] = $viaFlightValue['departure_time'];
							$_ApnrWiseFlightDetails[$i]['arrivalDate'] = $viaFlightValue['arrival_date'];
							$_ApnrWiseFlightDetails[$i]['arrivalTime'] = $viaFlightValue['arrival_time'];
							$_ApnrWiseFlightDetails[$i]['flight_status'] = $_AseriesRequestDetails[0]['flight_status'];
							$_ApnrWiseFlightDetails[$i]['flightStatus'] = $_AseriesRequestDetails[0]['flightStatus'];
							#$_ApnrWiseFlightDetails[$i]['approvedFlightDetails'][$j]['viaFlightDetails'][$k] = $viaFlightValue;
							#$k++;
							$i++;
						}
					}
					else
					{
						$_ApnrWiseFlightDetails[$i]['requestApprovedFlightId'] = $flightValue['request_approved_flight_id'];
						$_ApnrWiseFlightDetails[$i]['viaFlightId'] = 0;
						$_ApnrWiseFlightDetails[$i]['seriesRequestId'] = $flightValue['series_request_id'];
						$_ApnrWiseFlightDetails[$i]['requestId'] = $flightValue['request_id'];
						$_ApnrWiseFlightDetails[$i]['origin'] = $flightValue['source'];
						$_ApnrWiseFlightDetails[$i]['destination'] = $flightValue['destination'];
						$_ApnrWiseFlightDetails[$i]['airlineCode'] = $flightValue['airline_code'];
						$_ApnrWiseFlightDetails[$i]['flightNumber'] = $flightValue['flight_number'];
						$_ApnrWiseFlightDetails[$i]['departureDate'] = $flightValue['departure_date'];
						$_ApnrWiseFlightDetails[$i]['departureTime'] = $flightValue['dep_time'].':00';
						$_ApnrWiseFlightDetails[$i]['arrivalDate'] = $flightValue['arrival_date'];
						$_ApnrWiseFlightDetails[$i]['arrivalTime'] = $flightValue['arr_time'].':00';
						$_ApnrWiseFlightDetails[$i]['flight_status'] = $_AseriesRequestDetails[0]['flight_status'];
						$_ApnrWiseFlightDetails[$i]['flightStatus'] = $_AseriesRequestDetails[0]['flightStatus'];
						$i++;
					}
					
				}
			
			}
			/*Problem with connecting flights details to sort, so we switch over to multiSortFunction*/
			/*$finalInput=array("inputArray"=>$_ApnrWiseFlightDetails,"fieldName"=>"departureDate","fieldType"=>"DATE","orderType"=>"ASC");
			$_ApnrWiseFlightDetails = $this->_dynamicSortFunction($finalInput);*/
			
			$finalInput=array("inputArray"=>$_ApnrWiseFlightDetails,"firstFieldName"=>"departureDate","firstFieldOrder"=>"ASC","secondFieldName"=>"departureTime","secondFieldOrder"=>"ASC");
			$_ApnrWiseFlightDetails=$this->_multipleSortFunction($finalInput);
			$_ApnrWiseFinalDetails['flightDetails']= $_ApnrWiseFlightDetails;
		}
		return $_ApnrWiseFinalDetails;
	}
	/* function to get office id for POS based on user_id */
	function _getOfficeId($userId,$serviceName='',$posRegion='N')
	{
		//Get user id based on POS
		$_AuserDetails = $this->_getUserDetails($userId);
		$posCode=$_AuserDetails['pos_code'];
		if(!$posCode)
		{
			fileRequire("classes/class.getSector.php");		
			$_OgetSector = new getSector;
			$_OgetSector->_Oconnection = $this->_Oconnection;
			$posCode=$_OgetSector->_fetchPOSforRetailUser($_AuserDetails['user_id'])[0];
		}
		//Get POS based on office id
		fileRequire("dataModels/class.posDetails.php");		
		$_OposDetails = new posDetails;
		$_OposDetails->_Oconnection = $this->_Oconnection;
		$_OposDetails->_SposCode = $posCode;
		$_AposDetails=$_OposDetails->_selectPosDetails();
		if($serviceName!='')
		{
			#use pos_region if wsdlType type=AIDL
			global $CFG;
			if(isset($CFG['service']['wsdlType']['AIDL']) && !empty($CFG['service']['wsdlType']['AIDL']) && in_array($serviceName,$CFG['service']['wsdlType']['AIDL']['serviceNames']) && !in_array($_AuserDetails['group_id'],$CFG['service']['wsdlType']['AIDL']['excludeGroupId']))
			{
				return $_AposDetails[0]['pos_region'];
			}
			else
			{
				return $_AposDetails[0]['pos_office_id'];
			}
			
		}
		if($posRegion == 'Y')
			return $_AposDetails[0]['pos_region'];
		return $_AposDetails[0]['pos_office_id'];
	}
	/* function to get station number for given POS */
	function _getStationNumber($pos,$_IrequestMasterId= null)
	{
       	global $CFG;
        if($CFG['site']['OAC'] == 'Y'  &&  !empty($_IrequestMasterId))
        {
            /*The code is added for OAC flow.
            In OAC flow the Pcc code fetched from Corporate details should be used for pos, accountcode and station number.
            */
            //Get user id from request master based on requestmaster id 
            $_IuserId=$this->_getRequestedUserId($_IrequestMasterId);
            //Get PCC code from corporatedetails based on user id
            $_ApccCode = $this->_getAgentId($_IuserId);
            return substr($_ApccCode[0]['pcc_code'],5);
                
        }
        else
        {
            fileRequire("dataModels/class.posDetails.php");		
            $_OposDetails = new posDetails;
            $_OposDetails->_Oconnection = $this->_Oconnection;
            $_OposDetails->_SposCode = $pos;
            $_AposDetails=$_OposDetails->_selectPosDetails();
            return $_AposDetails[0]['station_number'];
        }
	}
	
	/*
	 * @Author	: Subalakshmi S
	 * @Modified By : --
	 * @Desc 	: To get the pax count of parent for particular group  and all child requests for that particular group based on request master id
	 */
	function _getTotalParentChildPaxCount($_IrequestMasterId,$_AignoreStaus=array(),$_IseriesRequestId = "")
	{
		global $CFG;
		$totalPax = array('number_of_passenger'=>0,'number_of_infant'=>0);
		
		$sql = "SELECT
					srd.series_request_id,
					srd.parent_series_request_id,
					srd.mapped_series_request_id
				FROM
					".$CFG['db']['tbl']['request_details']." rd,
					".$CFG['db']['tbl']['request_master']." rm,
					".$CFG['db']['tbl']['series_request_details']." srd
				WHERE 
					rm.request_master_id = ".$_IrequestMasterId." 
					AND rm.request_master_id = rd.request_master_id
					AND rd.request_id = srd.request_id";
		/*
		 *To get the particular group pax count , 
		 *modified : IN condition added ,when more than one selected groups modification done
		 */
		if($_IseriesRequestId != '')
		{
			$sql .= " AND (srd.series_request_id IN (".$_IseriesRequestId.") OR mapped_series_request_id IN (".$_IseriesRequestId."))";
		}
		if(DB::isError($result=$this->_Oconnection->query($sql)))
		{
			fileWrite($sql,"SqlError","a+");
			return false;
		}
		
		if($result->numRows() > 0)
		{
			/**
			* To avoid the request re-submit from the calculation of child request
			**/
			if(count($_AignoreStaus)>0)
			{
				$_AstatusDetails=$this->_getStatusDetails('',$_AignoreStaus);
				$_Astatus =implode("','", $_AstatusDetails);
			}	
			else
			{
				$_AstatusDetails = $this->_getStatusDetails('RS');
				$_Astatus = $_AstatusDetails['status_id'];
			}
			while($row=$result->fetchRow(DB_FETCHMODE_ASSOC))
			{
				if($row['mapped_series_request_id']==0)
				{
					$_IparentSeriesRequestId = $row['series_request_id'];
					
					if($row['parent_series_request_id']!=0) {
						$_IparentSeriesRequestId = $row['parent_series_request_id'];
					}
					
					$sqlSeriesRequest = "SELECT
											sum(srd.number_of_adult) AS number_of_adult,
											sum(srd.number_of_child) AS number_of_child,
											sum(srd.number_of_infant) AS number_of_infant
										FROM
											".$CFG['db']['tbl']['series_request_details']." srd,
											".$CFG['db']['tbl']['request_details']." rd,
											".$CFG['db']['tbl']['airlines_request_mapping']." arm 
										WHERE 
											rd.request_id = srd.request_id AND 
											rd.request_master_id = arm.request_master_id AND 
											arm.current_status NOT IN('".$_Astatus."') AND  
											(srd.parent_series_request_id = '".$_IparentSeriesRequestId."' 
											OR srd.series_request_id = '".$_IparentSeriesRequestId."')";
					
					if(DB::isError($resultSeriesRequest=$this->_Oconnection->query($sqlSeriesRequest)))
					{
						fileWrite($sqlSeriesRequest,"SqlError","a+");
						return false;
					}
					if($resultSeriesRequest->numRows() > 0)
					{
						$rowPax=$resultSeriesRequest->fetchRow(DB_FETCHMODE_ASSOC);
						$totalPax['number_of_passenger'] +=$rowPax['number_of_adult']+$rowPax['number_of_child'];
						$totalPax['number_of_infant'] += $rowPax['number_of_infant'];
					}
				}
			}
		}
		return $totalPax;
	}
	
	function _checkCommonSegWithParent($_AcommonSegInput)
	{
		global $CFG;
		$_commonSegmentStatus = "N";
		
		//Do not check Parent segment validation if this config is empty or not set
		if(empty($CFG["groupResizeList"]["checkCommonSegWithParentInModify"]) || !isset($CFG["groupResizeList"]["checkCommonSegWithParentInModify"]))
			return $_commonSegmentStatus = "Y";
		$_SparentSeriesReqIds = '';
		$_IparentRequestMasterId = $this->_getParentRequestMasterId($_AcommonSegInput['requestMasterId']);
		$_AparentRequestIds = $this->_getOrignalParentSeriesId($_AcommonSegInput['requestMasterId']);
		if(!empty($_AparentRequestIds))
		{
			$_IparentRequestMasterId = $_AparentRequestIds['parentRequestId'];
			$_SparentSeriesReqIds = implode(",", $_AparentRequestIds['parentSeriesIds']);
		}
		//$flightNumberInputArray = explode(",",$_AcommonSegInput['flightNumber']);
		
		fileRequire("classes/class.duplicateRequestAlertCheck.php");
		$this->_OduplicateRequestAlert = new duplicateRequestAlertCheck;
		$this->_OduplicateRequestAlert->__construct();
		$this->_OduplicateRequestAlert->_Oconnection=$this->_Oconnection;
		$this->_OduplicateRequestAlert->_IinputData=$this->_IinputData;
		$this->_OduplicateRequestAlert->_OobjResponse=$this->_OobjResponse;
		$this->_OduplicateRequestAlert->_Osmarty=$this->_Osmarty;
		$flightNumber = $this->_OduplicateRequestAlert->_getFlightNumberToCheck($_AcommonSegInput['flightNumber']);
		
		if($_IparentRequestMasterId!=0)
		{
			#Check the parent request trip type if tripe type is not in config and skip the validations for that trip type
			if(isset($CFG["groupResizeList"]["checkCommonSegWithParentInModify"]) && is_array($CFG["groupResizeList"]["checkCommonSegWithParentInModify"]))
			{
				$_requestTypeId= $this->_getRequestType($_IparentRequestMasterId,"Y");
				if($_requestTypeId==1 || $_requestTypeId==2)
				{
					/*To check the parent series request id*/
					$_AseriesReqDetails = $this->_getSeriesRequestId($_AcommonSegInput['requestMasterId']);
					if($_SparentSeriesReqIds=='')
						$_SparentSeriesReqIds = implode(",", array_column($_AseriesReqDetails,'parent_series_request_id'));
					$checkParent = "SELECT
								rm.request_master_id
							FROM
								".$CFG['db']['tbl']['request_master']." rm,
								".$CFG['db']['tbl']['request_details']." rd,
								".$CFG['db']['tbl']['series_request_details']." srd
							WHERE
							rm.reference_request_master_id = ".$_IparentRequestMasterId."
							AND rm.request_master_id = rd.request_master_id
							AND rd.request_id = srd.request_id
							AND srd.series_request_id IN (".$_SparentSeriesReqIds.")";
					if(DB::isError($resultParent=$this->_Oconnection->query($checkParent)))
					{
						fileWrite($checkParent,"SqlError","a+");
						return false;
					} 
					if($resultParent->numRows() >0)
					{
						while($rowParent = $resultParent->fetchRow(DB_FETCHMODE_ASSOC))
						{
							$_IparentRequestMasterId = $rowParent['request_master_id'];
						}
					}
					$_StripType = $this->_getTripType($_IparentRequestMasterId);
					if(($_StripType==1 || $_StripType=="O") && !in_array("O",$CFG["groupResizeList"]["checkCommonSegWithParentInModify"]))
					{
						$_commonSegmentStatus = "Y";
						return $_commonSegmentStatus;
					}
					if(($_StripType==2 || $_StripType=="R") && !in_array("R",$CFG["groupResizeList"]["checkCommonSegWithParentInModify"]))
					{
						$_commonSegmentStatus = "Y";
						return $_commonSegmentStatus;
					}
					if(($_StripType==3 || $_StripType=="M") && !in_array("M",$CFG["groupResizeList"]["checkCommonSegWithParentInModify"]))
					{
						$_commonSegmentStatus = "Y";
						return $_commonSegmentStatus;
					}
					
				}
				else
				{
					fileRequire("dataModels/class.requestDetails.php");
					$_OrequestDetails=new requestDetails();
					$_OrequestDetails->_Oconnection=$this->_Oconnection;
					$_OrequestDetails->_IrequestMasterId=$_AcommonSegInput['requestMasterId'];
					$_AchildRequestDetails=$_OrequestDetails->_selectRequestDetails();
					
					fileRequire("dataModels/class.seriesRequestDetails.php");
					$objSeriesRequestDetails=new seriesRequestDetails();
					$objSeriesRequestDetails->__construct();
					$objSeriesRequestDetails->_Oconnection=$this->_Oconnection;
					$objSeriesRequestDetails->_INcondition='IN';
					$objSeriesRequestDetails->_IrequestId=implode(',',array_column($_AchildRequestDetails,'request_id'));	
					$_AchildSeriesRequestDetails=$objSeriesRequestDetails->_selectSeriesRequestDetails();
					/*To check the parent series request id*/
					if(!empty($_AchildSeriesRequestDetails))
						$_SparentSeriesReqIds = implode(',',array_column($_AchildSeriesRequestDetails,'parent_series_request_id'));
					
					$objSeriesRequestDetails->__construct();
					$objSeriesRequestDetails->_Oconnection=$this->_Oconnection;
					$objSeriesRequestDetails->_IseriesRequestId=$_AchildSeriesRequestDetails[0]['parent_series_request_id'];
					$_AparentSeriesRequestDetails=$objSeriesRequestDetails->_selectSeriesRequestDetails();	
					
					if(!empty($_AparentSeriesRequestDetails))
					{
						$_OrequestDetails->__construct();
						$_OrequestDetails->_Oconnection=$this->_Oconnection;
						$_OrequestDetails->_IrequestId=$_AparentSeriesRequestDetails[0]['request_id'];
						$_AparentRequestDetails=$_OrequestDetails->_selectRequestDetails();
						
						$_StripType=$_AparentRequestDetails[0]['trip_type'];
						if(($_StripType==1 || $_StripType=="O") && !in_array("O",$CFG["groupResizeList"]["checkCommonSegWithParentInModify"]))
						{
							$_commonSegmentStatus = "Y";
							return $_commonSegmentStatus;
						}
						if(($_StripType==2 || $_StripType=="R") && !in_array("R",$CFG["groupResizeList"]["checkCommonSegWithParentInModify"]))
						{
							$_commonSegmentStatus = "Y";
							return $_commonSegmentStatus;
						}
						if(($_StripType==3 || $_StripType=="M") && !in_array("M",$CFG["groupResizeList"]["checkCommonSegWithParentInModify"]))
						{
							$_commonSegmentStatus = "Y";
							return $_commonSegmentStatus;
						}
					}
				}
			}
			
			$checkSector = "SELECT
								rm.request_master_id,
								rd.origin_airport_code,
								rd.dest_airport_code,
								srd.departure_date,
								srd.flight_number
							FROM
								".$CFG['db']['tbl']['request_master']." rm,
								".$CFG['db']['tbl']['request_details']." rd,
								".$CFG['db']['tbl']['series_request_details']." srd
							WHERE
								
								rm.request_master_id = ".$_IparentRequestMasterId."
								AND rm.request_master_id = rd.request_master_id
								AND rd.request_id = srd.request_id
								AND rd.origin_airport_code = '".$_AcommonSegInput['source']."'
								AND rd.dest_airport_code = '".$_AcommonSegInput['destination']."'
								AND srd.departure_date = '".$_AcommonSegInput['departureDate']."'
								AND srd.flight_number REGEXP '".$flightNumber."'";

			/*To check with parent series request id*/
			$_ImappedSeriesIds=implode(',',array_column($this->_getMappedSeriesRequest($_IparentRequestMasterId,$_SparentSeriesReqIds),'series_request_id'));
			if($_ImappedSeriesIds != '')
				$checkSector .= " AND srd.series_request_id IN (".$_ImappedSeriesIds.")";
			if(DB::isError($resultSector=$this->_Oconnection->query($checkSector)))
			{
				fileWrite($checkSector,"SqlError","a+");
				return false;
			} 
			if($resultSector->numRows() >0)
			{
				while($rowSector = $resultSector->fetchRow(DB_FETCHMODE_ASSOC))
				{
					/*$flightNumberArray = explode(",",$rowSector['flight_number']);
					$_isEmpty = array_intersect($flightNumberArray,$flightNumberInputArray); 
					if(!empty($_isEmpty))
					{
						$_commonSegmentStatus = "Y";
					}*/
					// Common flight number is checked in the query, so the above lines are commented
					$_commonSegmentStatus = "Y";
				}
			}
			else
			{
				$_IparentAirlinesRequestId = $this->_getAirlineRequestId($_IparentRequestMasterId);
				$_IlastTransactionId = $this->_getLastTransactionMasterId($_IparentRequestMasterId);
				
				$selectApprovedFlightQuery = "SELECT
											request_approved_flight_id,
											stops,
											flight_number
										FROM
											".$CFG['db']['tbl']['request_approved_flight_details']."
										WHERE 
											airlines_request_id = ".$_IparentAirlinesRequestId."
											AND transaction_master_id = ".$_IlastTransactionId."
											AND accepted_flight_status = 'Y' ";
											
				$sqlApprovedFlight =$selectApprovedFlightQuery." AND source='".$_AcommonSegInput['source']."'
									AND destination = '".$_AcommonSegInput['destination']."'
									AND departure_date = '".$_AcommonSegInput['departureDate']."'
									AND flight_number REGEXP '".$flightNumber."'";
				/*To check with parent series request id*/
				if($_SparentSeriesReqIds != '')
					$sqlApprovedFlight .= " AND series_request_id IN (".$_SparentSeriesReqIds.")";
				if(DB::isError($resultApprovedFlight=$this->_Oconnection->query($sqlApprovedFlight)))
				{
					fileWrite($sqlApprovedFlight,"SqlError","a+");
					return false;
				}
				
				if($resultApprovedFlight->numRows() >0)
				{
					/*while($rowReqApprovedFlightId = $resultApprovedFlight->fetchRow(DB_FETCHMODE_ASSOC))
					{
						$_AapproveFlightNumberArray[] = $rowReqApprovedFlightId['flight_number'];
					}
					$_isEmpty = array_intersect($_AapproveFlightNumberArray,$flightNumberInputArray);
					if(!empty($_isEmpty))*/
					// The above lines are commented, since the flight numbers are checked in the query
					$_commonSegmentStatus = "Y";
				}
				else
				{
					if(DB::isError($getApprovedFlight=$this->_Oconnection->query($selectApprovedFlightQuery)))
					{
						fileWrite($selectApprovedFlightQuery,"SqlError","a+");
						return false;
					}
					
					if($getApprovedFlight->numRows() >0)
					{
						while($rowApprovedFlightId = $getApprovedFlight->fetchRow(DB_FETCHMODE_ASSOC))
						{
							if($rowApprovedFlightId['stops']>0)
							{
								$sqlViaFlight = "SELECT
													via_flight_id,
													concat(airline_code,'-',flight_number) AS flight_number
												FROM
													".$CFG['db']['tbl']['via_flight_details']."
												WHERE
													request_approved_flight_id = ".$rowApprovedFlightId['request_approved_flight_id']."
													AND origin = '".$_AcommonSegInput['source']."'
													AND destination = '".$_AcommonSegInput['destination']."'
													AND departure_date = '".$_AcommonSegInput['departureDate']."'
													AND flight_number REGEXP '".$flightNumber."'";

								if(DB::isError($getViaFlight=$this->_Oconnection->query($sqlViaFlight)))
								{
									fileWrite($sqlViaFlight,"SqlError","a+");
									return false;
								}
								
								if($getViaFlight->numRows() >0)
								{
									/*while($viaFlightId = $getViaFlight->fetchRow(DB_FETCHMODE_ASSOC))
									{
										$viaFlightArray[]= $viaFlightId['flight_number'];
									}
									$_isEmpty = array_intersect($viaFlightArray,$flightNumberInputArray);
									if(!empty($_isEmpty))*/
									// The above lines are commented, since the flight number is checked in the query
									$_commonSegmentStatus = "Y";
								}
							}
						}
					}
				}
			}
		}
		else
			$_commonSegmentStatus = "Y";
		
		return $_commonSegmentStatus;
	}
	function _getRequestPosDetails($requestMasterId)
	{
		global $CFG;
		$value=array();
		//Checks from static array
		$_AstaticData = $this->_staticData('_getRequestPosDetails',$requestMasterId);
		if($_AstaticData !== false)
			$value = $_AstaticData;
		else
		{
			$sql="SELECT
				 ".encrypt::_decrypt('cd.pos_code')."  AS pos_code,
				 ".encrypt::_decrypt('cd.corporate_name')."  AS corporate_name,
				 ".encrypt::_decrypt('ud.email_id')."  AS email_id,
				 rm.request_type_id,
				 ud.city_id	

				FROM 
					".$CFG['db']['tbl']['request_master']." rm,
					".$CFG['db']['tbl']['corporate_details']." cd,
					".$CFG['db']['tbl']['user_details']." ud
				WHERE
					rm.request_master_id=".$requestMasterId."
					AND rm.user_id=ud.user_id
					AND ud.corporate_id=cd.corporate_id";

			if(DB::isError($result=$this->_Oconnection->query($sql)))
			{
				fileWrite($sql,"SqlError","a+");
				return false;
			}
			if($result->numRows() >0)
			{
				$row = $result->fetchRow(DB_FETCHMODE_ASSOC);
				$value=$row;
			}
			$this->_staticData('_getRequestPosDetails',$requestMasterId,$value);
		}
			return $value;
	}
	function _getDepartureDateStatus($_IrequestMasterId)
	{
		global $CFG;
		$_DdepartureDate = $this->_getDepartureDate($_IrequestMasterId);
		$_DcurrentDate = $this->_getUTCDateValue();
		$_SdepartAirportCode = $this->_getFirstOrigin($_IrequestMasterId);
		$_DairportCurrentDateTime = $this->_getAirportCodeCurrentTime($_SdepartAirportCode);
		$_SairportCurrentDateTimeInterval = $this->_getAirportCodeCurrentTime($_SdepartAirportCode,true);
		$_DdepartureDateUTC = $this->_getConvertToUTCDateValue($_DdepartureDate,$_SairportCurrentDateTimeInterval);
		
		$_IdateOfDeparture = round((strtotime($_DdepartureDateUTC)-strtotime($_DcurrentDate))/60/60/24);
		return $_IdateOfDeparture;
	}
	//Multidimensional array search
	function array_column(array $input, $columnKey, $indexKey = null) 
	{
		return array_column($input, $columnKey, $indexKey);
	}
	//Multidimensional array search
	function multiArraySearch($searchValue,$arrayVal,$searchIndex)
	{ 

		return  array_search($searchValue, $this->array_column($arrayVal, $searchIndex));
	}		
			
	//Get status id based on the given code
	function _getCurrentStatusId($statusCode)
	{
		global $CFG;
		$statusArray=array_values($CFG['status']);
		unset ($statusArray[count($statusArray)-1]);
		$statusIndex= $this->multiArraySearch($statusCode,$statusArray,'code');
		if($statusIndex!== false)
			return $statusArray[$statusIndex]['id'];
		else
			return 0;
	}
	//Get current status name
	function _getCurrentStatusName($currentStatus)
	{
		global $CFG;
		$statusArray=array_values($CFG['status']);
		unset ($statusArray[count($statusArray)-1]);
		$statusIndex= $this->multiArraySearch($currentStatus, $statusArray,'id');
		if($statusIndex!== false)
			return $statusArray[$statusIndex]['name'];
		else
			return '';
	}
	//get current status code
	function _getCurrentStatusCode($currentStatus)
	{
		global $CFG;
		$statusArray=array_values($CFG['status']);
		unset ($statusArray[count($statusArray)-1]);
		$statusIndex= $this->multiArraySearch($currentStatus, $statusArray,'id');
		if($statusIndex!== false)
			return $statusArray[$statusIndex]['code'];
		else
			return '';
	}
	/*******************************************************************
	Author :M.Nivetha
    Date   :30-10-2020
    Desc   :To get current status id by passing current status name
    Param  :currentStatusName
    Return :statusId
    *********************************************************************/
	function _getCurrentStatusIdByPassName($currentStatusName)
	{
		global $CFG;
		$sql = "SELECT 
					status_id
				FROM 
					".$CFG['db']['tbl']['status_details']." 
				WHERE 
					status_name='".$currentStatusName."'";
		if(DB::isError($result=$this->_Oconnection->query($sql)))
		{
			fileWrite($sql,"SqlError","a+");
			return false;
		}
		$row=$result->fetchRow(DB_FETCHMODE_ASSOC);
		$statusId=$row['status_id'];
		return $statusId;

	}
	
	/**
	 * Function used to get the value using key in multi dimensional array
	**/
	public function _arraySearchByKey($_Arequest,$_SsearchKey)
	{
		if(array_key_exists($_SsearchKey,$_Arequest))
			return $_Arequest[$_SsearchKey];
		else
		{
			foreach($_Arequest as $_Ikey => $_Avalue)
			{
				if(is_array($_Avalue))
				{
					if(array_key_exists($_SsearchKey,$_Avalue))
						return $_Avalue[$_SsearchKey];
					else
						$this->_arraySearchByKey($_Avalue,$_SsearchKey);
				}
			}
		}
	}

	function _checkCloneRequest($_IrequestMasterId)
	{
		global $CFG;
		
		$cloneStatus = "";
		$checkCloneSql = "SELECT request_master_id,quote_type
				FROM ".$CFG['db']['tbl']['request_master']." 
				WHERE request_master_id = '".$_IrequestMasterId."'";
			
		if(DB::isError($resultCheckCloneSql=$this->_Oconnection->query($checkCloneSql)))
		{
			fileWrite($checkCloneSql,"SqlError","a+");
			return false;
		}
		
		if($resultCheckCloneSql->numRows() > 0)
		{
			$rowClone = $resultCheckCloneSql->fetchRow(DB_FETCHMODE_ASSOC);
			$cloneStatus = $rowClone['quote_type'];
		}
		
		return $cloneStatus;
	}
	
	function _getCloneRequestRemarks($_IrequestMasterId)
	{
		global $CFG;
		
		$cloneRequestRemarks = "";
		
		$selectCloneDetails = "SELECT 
									user_remarks,
									admin_remarks
								FROM
									".$CFG['db']['tbl']['groupchange_request_master']."
								WHERE
									resize_type_id = 4
									AND request_master_id = ".$_IrequestMasterId;
		
		if(DB::isError($resultCloneDetails=$this->_Oconnection->query($selectCloneDetails)))
		{
			fileWrite($selectCloneDetails,"SqlError","a+");
			return false;
		}
		
		if($resultCloneDetails->numRows() > 0)
		{
			$rowCloneDetails = $resultCloneDetails->fetchRow(DB_FETCHMODE_ASSOC);
			$cloneRequestRemarks = $rowCloneDetails['admin_remarks'];
		}
		return $cloneRequestRemarks;
	}
        /**
         * @author Jk Thirumal 10/01/2017 07:30 PM
         * @description method to filter the string based on the requirement
         * @param string $string - holds the input string
         * @param int $returnType - type of filter to be done
         * @return string
         */
        public function _stringFilter($string,$returnType){
            $returnString='';
            switch($returnType){
                case 0://allows only characters, numbers, space, comma, full stop
                    $returnString =preg_replace("/[^a-zA-Z0-9\s,.]/", "", trim($string));
                    break;
                case 1://only characters
                    $returnString =preg_replace("/[^a-zA-Z\s]/", "", trim($string));
                    break;
                case 2://only numbers
                    $returnString =preg_replace("/[^0-9]/", "", trim($string));
                    break;
                 case 3://allows only characters, numbers, space, comma, full stop,ambersand
                    $returnString =preg_replace("/[^a-zA-Z0-9\s,.&]/", "", trim($string));
                    break;   
                case 4://allows only characters, numbers, space, comma, full stop,hypen and slash
                    $returnString =preg_replace("/[^a-zA-Z0-9\s,.\-\/]/", "", trim($string));
                    break;
                default:
                    return  trim($string);
            }
            return $returnString;
            
        }
    
	function _getSentForReviewDetails($_IrequestMasterId=0,$_SgroupID='',$_IlastTransactionId=0)
	{
		global $CFG;
		
		$condition='';
		if($_IrequestMasterId > 0)
			$condition.=" AND arm.request_master_id=".$_IrequestMasterId;
		if($_SgroupID != '')
			$condition.=" AND ud.group_id IN (".$_SgroupID.")";
		if($_IlastTransactionId > 0)
			$condition.=" AND tm.transaction_id=".$_IlastTransactionId;
			
		$selectSentForReview = "SELECT 
									rs.review_status_id,
									tm.airlines_request_id,
									arm.request_master_id,
									ud.group_id,
									ud.user_id
								FROM
									".$CFG['db']['tbl']['review_status']." rs,
									".$CFG['db']['tbl']['user_details']." ud,
									".$CFG['db']['tbl']['transaction_master']." tm,
									".$CFG['db']['tbl']['airlines_request_mapping']." arm
								WHERE
									rs.response_person_id=ud.user_id AND  
									rs.transaction_id=tm.transaction_id AND
									arm.airlines_request_id = tm.airlines_request_id".$condition;

		if(DB::isError($resultSentForReviewDetails=$this->_Oconnection->query($selectSentForReview)))
		{
			fileWrite($selectSentForReview,"SqlError","a+");
			return false;
		}
		$sentForReviewDetails = array();
		if($resultSentForReviewDetails->numRows() > 0)
		{
			while($rowSentForReviewDetails = $resultSentForReviewDetails->fetchRow(DB_FETCHMODE_ASSOC))
			{
				$sentForReviewDetails[] = $rowSentForReviewDetails;
			}
		}
		return $sentForReviewDetails;
	}

        /** Jk Thirumal 25/01/2017 04:30 PM
         * @desc To get the pos informations based on the request master id, 
         * @param int $reqMasterId
         * @return array
         */
	public function _getPosByRequestId($reqMasterId){
            global $CFG;
            $requestDetails=array();
            if($reqMasterId!=''){
                $sql="SELECT
                        rm.request_master_id,
                        ".encrypt::_decrypt('cd.pos_code')." as pos_code,
                        rtm.request_type_name,
                        pd.pos_city
                    FROM
                        ".$CFG['db']['tbl']['user_details']." ud 
                        LEFT JOIN ".$CFG['db']['tbl']['request_master']." rm ON ud.user_id=rm.user_id 
                        LEFT JOIN ".$CFG['db']['tbl']['corporate_details']." cd ON ud.corporate_id=cd.corporate_id
                        LEFT JOIN ".$CFG['db']['tbl']['request_type_master']." rtm ON rm.request_type_id=rtm.request_type_id
                        LEFT JOIN ".$CFG['db']['tbl']['pos_details']." pd ON ".encrypt::_decrypt('cd.pos_code')." = pd.pos_code
                    WHERE
                        rm.request_master_id=".$reqMasterId;
                if(DB::isError($result=$this->_Oconnection->query($sql)))
		{
                    fileWrite($sql,"SqlError","a+");
                    return false;
		}
		if($result->numRows() > 0)
		{
                    $row = $result->fetchRow(DB_FETCHMODE_ASSOC);
                    $requestDetails = $row;
		}
		return $requestDetails;
            }
        }
	function _checkTenderAgencyRequest($_IrequestMasterId)
	{
		global $CFG;
		
		$sql = "SELECT
					ud.group_id,
					rm.user_id,
					rm.quote_type,
					rm.request_master_id,
					rm.reference_request_master_id
				FROM
					".$CFG['db']['tbl']['request_master']." rm,
					".$CFG['db']['tbl']['user_details']." ud
				WHERE 
					rm.user_id=ud.user_id
					AND rm.request_master_id = ".$_IrequestMasterId;
		
		if(DB::isError($result=$this->_Oconnection->query($sql)))
		{
			fileWrite($sql,"SqlError","a+");
			return false;
		}
		
		if($result->numRows() > 0)
		{
			$row = $result->fetchRow(DB_FETCHMODE_ASSOC);
			$requestDetails = $row;
		}
		return $requestDetails;
	}
	
	function _checkDisplaySector()
	{
		
		global $CFG;
		if(in_array($_SESSION['groupRM']['groupId'],$CFG['site']['sectorMappingGroupId']))
		{

			$_AresultSectorArray = $this->_getExcludeSectorDetails($_SESSION['groupRM']['groupUserId'],$_SESSION['groupRM']['groupId']);
			if(!empty($_AresultSectorArray))
			{
				$this->_SrequestMasterIdIn="";
				$this->_SrequestMasterIdIn=$this->_getFirstSectorRequest($_AresultSectorArray['includeSector'],"S");
			}
		}
		if(in_array($_SESSION['groupRM']['groupId'],$CFG['default']['posMappingGroup']))
		{
			$posAllMappingCheck = $this->_getUserPOSDetails($_SESSION['groupRM']['groupUserId'],"ALL");
			
			if(empty($posAllMappingCheck))
			{
				$posDetailsArray = $this->_getUserPOSDetails($_SESSION['groupRM']['groupUserId']);
	
				if(!empty($posDetailsArray))
				{
					$this->_IposCodeIn="";
					$comma="";
					foreach($posDetailsArray as $pos)
					{
						$this->_IposCodeIn.=$comma."'".$pos['pos_code']."'";
						$comma=",";
					}
				}
				else
				{
					$this->_IposCodeIn="'NOTAVAIL'";
				}
				
			}
		}
	}
	/**
	 * @desc Method to get the booking type of a request
	 * @param type $pointOfSale
	 * @param type $refReqMasterId
	 * @param type $source
	 * @return string
	 */
	function _getBookingTypeOfRequest($pointOfSale,$refReqMasterId,$source){
		$bookingType='PARENT';
		$finalPos = (strlen($pointOfSale)>3)?substr($pointOfSale,0,3):$pointOfSale;
		if($refReqMasterId>0)
			$bookingType ='CHILD';
		if($source!=$finalPos) 
			$bookingType ='SOTO';
		return $bookingType;
	}
	function _pnrAvailabilityCheck($_IrequestMasterId,$transactionMasterId)
	{
		global $CFG;

		#$seatAvailabilityCheck="Y";
		#$seatAvailabilityMessage="";
		$_AresultArray=array();
		$_ArequestMaster=array();
		$_ArequestDetails=array();
		
		#$transactionMasterId=$this->_getLastTransactionMasterId($_IrequestMasterId);
		$airlinesRequestId=$this->_getAirlineRequestId($_IrequestMasterId);
		#$requestType=$this->_getRequestType($_IrequestMasterId);

		fileRequire("dataModels/class.requestMaster.php");
		$_OrequestMaster=new requestMaster();
		$_OrequestMaster->_Oconnection=$this->_Oconnection;
		$_OrequestMaster->_IrequestMasterId=$_IrequestMasterId;
		$_ArequestMaster=$_OrequestMaster->_selectRequestMaster();		
		$requestType = $_ArequestMaster[0]['request_type'];

		fileRequire("dataModels/class.requestDetails.php");
		$_OrequestDetails=new requestDetails();
		$_OrequestDetails->_Oconnection=$this->_Oconnection;
		$_OrequestDetails->_IrequestMasterId=$_IrequestMasterId;
		$_ArequestDetails=$_OrequestDetails->_selectRequestDetails();
		
		fileRequire("dataModels/class.requestApprovedFlightDetails.php");
		$_OrequestApprovedFlightDetails = new requestApprovedFlightDetails();
		$_OrequestApprovedFlightDetails->__construct();
		$_OrequestApprovedFlightDetails->_Oconnection=$this->_Oconnection;
		$_OrequestApprovedFlightDetails->_ItransactionMasterId=$transactionMasterId;
		$_OrequestApprovedFlightDetails->_SacceptedFlightStatus='Y';
		$approvedFlightDetails=$_OrequestApprovedFlightDetails->_selectRequestApprovedFlightDetails();
		
		if(strtoupper($requestType)=="ADHOC")
			$originDestinationPnrBlocking="N";
		else
			$originDestinationPnrBlocking="Y";
		
		if($originDestinationPnrBlocking=="Y")
			$approvedFlightDetailsCount=count($approvedFlightDetails);
		else
			$approvedFlightDetailsCount=1;
		
		for($ij=0;$ij<$approvedFlightDetailsCount;$ij++)
		{
			if($originDestinationPnrBlocking=="Y")
			{
				$sqlSelectSeriesRequestPax="SELECT
												number_of_adult,
												number_of_child,
												number_of_infant
											FROM
												".$CFG['db']['tbl']['series_request_details']."
											WHERE
												request_id='".$approvedFlightDetails[$ij]['request_id']."'";

				if(strtoupper($requestType)!="ADHOC")
				{
					$sqlSelectSeriesRequestPax.=" AND series_request_id='".$approvedFlightDetails[$ij]['series_request_id']."'";
				}
				$sqlSelectSeriesRequestPax.=" LIMIT 1";

				if(DB::isError($resultSelectSeriesRequestPax=$this->_Oconnection->query($sqlSelectSeriesRequestPax)))
				{
					fileWrite($sqlSelectSeriesRequestPax,"SqlError","a+");
					return false;
				}
				if($resultSelectSeriesRequestPax->numRows() >0)
				{
					$rowSelectSeriesRequestPax=$resultSelectSeriesRequestPax->fetchRow(DB_FETCHMODE_ASSOC);
					$_ArequestMaster[0]['number_of_adult']=$rowSelectSeriesRequestPax['number_of_adult'];
					$_ArequestMaster[0]['number_of_child']=$rowSelectSeriesRequestPax['number_of_child'];
					$_ArequestMaster[0]['number_of_infant']=$rowSelectSeriesRequestPax['number_of_infant'];
				}
			}
			
			$conditionPaxCheck = '';
			if($originDestinationPnrBlocking=="Y")
				$conditionPaxCheck = ' AND request_approved_flight_id = '.$approvedFlightDetails[$ij]['request_approved_flight_id'];
			
			
			$sqlPaxCheck = "SELECT
						pnr_blocking_id
					FROM
						".$CFG['db']['tbl']['pnr_blocking_details']."
					WHERE
						upper(status)!= 'PENDING' AND					 
						request_master_id = ".$_IrequestMasterId.$conditionPaxCheck;
						
			if(DB::isError($resultPaxCheck=$this->_Oconnection->query($sqlPaxCheck)))
			{
				fileWrite($sqlPaxCheck,"SqlError","a+");
				return false;
			}

			if($resultPaxCheck->numRows() == 0)
			{			
				fileRequire("classes/class.holdingPnr.php");
				
				$objHoldingPnr=new holdingPnr();
				$objHoldingPnr->__Contruct();
				$objHoldingPnr->_Oconnection=$this->_Oconnection;			
				$objHoldingPnr->_Osmarty=$this->_Osmarty;
				$objHoldingPnr->_OobjResponse=$this->_OobjResponse;
				$objHoldingPnr->_Ocommon=$this;
				$objHoldingPnr->_IrequestMasterId=$_IrequestMasterId;
				$objHoldingPnr->_IairlinesRequestId=$airlinesRequestId;
				$objHoldingPnr->_ItransactionId=$transactionMasterId;

				if($originDestinationPnrBlocking=="Y")
				{
					$objHoldingPnr->_ArequestApprovedFlightDetails[0]=$approvedFlightDetails[$ij];
					$objHoldingPnr->_SsectorPnrBlocking="Y";
				}
				else
				{
					$objHoldingPnr->_ArequestApprovedFlightDetails=$approvedFlightDetails;
					$objHoldingPnr->_SsectorPnrBlocking="N";
				}

				$objHoldingPnr->_ArequestMaster=$_ArequestMaster;
				$objHoldingPnr->_ArequestDetails=$_ArequestDetails;
			
				$_AformValues=$objHoldingPnr->_holdPnrFormValues();
				$_OairlineService=new airlineService();
				$_OairlineService->_IrequestMasterId=$_IrequestMasterId;
				/*$_OairlineService->_ScurrencyCode=$_ArequestMaster[0]['user_currency'];
				$_OairlineService->_IairlinesRequestId=$airlinesRequestId;
				$_OairlineService->_ItransactionId=$transactionMasterId;*/
				$_OairlineService->_AformValues=$_AformValues;
				
			#	if($seatAvailabilityCheck=="Y")
				{
					$availabityResult=$_OairlineService->_getAvailabityForFareCheck();
					if($availabityResult['responseCode'] == 1 && isset($availabityResult['responseCode']) && strtoupper($availabityResult['response']) == "REQUOTE")
						return $availabityResult;
					/*if(is_array($availabityResult) && isset($availabityResult['seatCheckResponce']['Message']) && strtoupper($availabityResult['seatCheckResponce']['Message'])=="SUCCESS")
					{
						$seatAvailabilityCheck="Y";
					}
					else
					{
						$seatAvailabilityCheck="N";
						$seatAvailabilityMessage="(".$approvedFlightDetails[$ij]['source'].$approvedFlightDetails[$ij]['destination']." ".$approvedFlightDetails[$ij]['departure_date']." ".$approvedFlightDetails[$ij]['flight_number'].")";
						
						$_AresultArray['seatAvailabilityCheck']=$seatAvailabilityCheck;
						$_AresultArray['seatAvailabilityMessage']=$seatAvailabilityMessage;
						#$_AresultArray['availabityResult']=$availabityResult;
						$_AresultArray['availabityResult']= 'FARECLASSSEATNOTAVAIL';
						return $_AresultArray;
					}*/
				}
			}
		}
		return $availabityResult;
	}
	function _getNoOfPassengerForSeriesId($seriesRequestId)
	{	
		global $CFG;
		$fetchPaxSql="SELECT distinct
						sum(number_of_adult) as adult,
						sum(number_of_child) as child,
            			sum(number_of_infant) as infant
					FROM 
						".$CFG['db']['tbl']['series_request_details']." 
					WHERE
						series_request_id=".$seriesRequestId."";
		fileWrite($fetchPaxSql,'adp_sync_check','a+');
		return $this->_executeQuery($fetchPaxSql);
	}

	function _doTimeLineExtension($data){
		
		
		global $CFG;
		$retunData = array();
		$_IguestDateCheck=1;
		$_DdepartureDate = $this->_getDepartureDate($data['requestId'],$data['seriesRequestId']);
	
		$_DcurrentDate = $this->_getUTCDateValue();
		$_curDate = $_DcurrentDate;
		
		//If advance expiry date is in future then take payment validity date as current date for extension
		if($data['paymentValidity']!=''){
			if(strtotime($_DcurrentDate)<strtotime($data['paymentValidity'])){
				$_DcurrentDate=$data['paymentValidity'];
			}
		}
		$_SdepartAirportCode = $this->_getFirstOrigin($data['requestId'],$data['seriesRequestId']);
		
		$_DairportCurrentDateTime = $this->_getAirportCodeCurrentTime($_SdepartAirportCode);
		$_SairportCurrentDateTimeInterval = $this->_getAirportCodeCurrentTime($_SdepartAirportCode,true);
		$_DdepartureDateUTC = $this->_getConvertToUTCDateValue($_DdepartureDate,$_SairportCurrentDateTimeInterval);	 
		if($data['fareValidity']!='' && $data['fareValidityType']!='' && isset($data['fareExpiryType']) && $data['fareExpiryType']=='2')
		{
			$fareExpireDate=date('Y-m-d H:i:s',strtotime("-".$data['fareValidity']." ".$data['fareValidityType'],strtotime($_DdepartureDateUTC)));
			
			$_IcurrentDateCheck = ceil((strtotime($fareExpireDate)-strtotime($_DairportCurrentDateTime))/60/60/24);
		}
		elseif($data['fareValidity']!='' && $data['fareValidityType']!='')
		{
			$fareExpireDate=date('Y-m-d H:i:s',strtotime("+".$data['fareValidity']." ".$data['fareValidityType'],strtotime($_DcurrentDate)));
			
			$_IcurrentDateCheck = ceil((strtotime($fareExpireDate)-strtotime($_DcurrentDate))/60/60/24);
		}
		//check passengerValidity
		$result = $this->_getPassengerExpiryDetails($data['requestId']);
		foreach($result as $value){
				if($data['pnr']==$value['pnr'])
				$_IguestDateCheck = ceil((strtotime($value['time_validity'])-strtotime($fareExpireDate)));
		}
		$_IfareValidity = round((strtotime($_DdepartureDateUTC)-strtotime($fareExpireDate))/60/60/24);
		$_IdateOfDeparture = round((strtotime($_DdepartureDateUTC)-strtotime($_DcurrentDate))/60/60/24);
		$retunData['guestDateCheck']=$_IguestDateCheck;
		$retunData['departureDate']=$_IdateOfDeparture;
		$retunData['currentDateCheck']=$_IcurrentDateCheck;
		$retunData['fareValidity']=$_IfareValidity;
		$retunData['currentDate']=$_curDate;
		$retunData['paymentValidityDate']=$fareExpireDate;
		return $retunData;
	}

	function _getNoteNotification($_IrequestMasterId)
	{
		global $CFG;
		
		$_AnotificationArray = array();
		
		fileRequire("classesTpl/class.tpl.noteDetailsTpl.php");
		$_OnoteDetails = new noteDetailsTpl();
		$_OnoteDetails->_Oconnection = $this->_Oconnection;
		$_OnoteDetails->_SnotificationStatus = "Y";
		$_OnoteDetails->_IrequestMasterId = $_IrequestMasterId;
		$_OnoteDetails->_createNoteDetails();
		$this->InotificationCount = $_OnoteDetails->_InotificationCount;
		
		$_AnotificationArray['requestMasterId']=$_IrequestMasterId;
		$_AnotificationArray['notificationCount']=$this->InotificationCount;
		
		return $_AnotificationArray;
	}
	function _getPnrNameValidity($requestMasterId,$pnrDetails=array())
	{
		global $CFG;
		$pnrValidityDate=array();
		$airlinesRequestId=$this->_getAirlineRequestId($requestMasterId);
		$sql="SELECT
					transaction_id,
					airlines_request_id,
					passenger_validity,
					passenger_validity_type,
					passenger_expiry_type,
					passenger_expiry_date,
					(SELECT fare_validity_values FROM ".$CFG['db']['tbl']['fare_validity_type_details']." WHERE fare_validity_type_id = passenger_validity_type)  as passengerTypeValue
				FROM
					".$CFG['db']['tbl']['transaction_master']."
				WHERE
					airlines_request_id='".$airlinesRequestId."'
				ORDER BY 
					transaction_id DESC LIMIT 1";
				
		if(DB::isError($result = $this->_Oconnection->query($sql))) 
		{
			fileWrite($sql,"SqlError","a+");
			return false;
		}
		if($result->numRows() >0)
		{
			$row = $result->fetchRow(DB_FETCHMODE_ASSOC);
			if(empty($pnrDetails) && count($pnrDetails)<1)
			{
				$pnrDetails=$this->_getAllPNR($requestMasterId);
			}
			foreach($pnrDetails as $key=>$val)
			{
				#To get passenger expiry date
				//if($CFG["approvePage"]["groupLevelTimeline"]=="Y")
				//{
					$_AnewValidity=$this->_getValidityDetails($requestMasterId,'',$val);
					if(!empty($_AnewValidity[1]))
					{
						$passengerExpiryDate=$_AnewValidity[1]['nameUpdateValidity'][0]['dateAndTime'];
					}	
				/*}
				else
				{
					if($row['passenger_expiry_type'] ==2)
					{
						$pnrMinDepDate=$this->_getPnrMinDepartureDate($val);
						
						$_SdepartAirportCode = $this->_getFirstOrigin($requestMasterId);
						$_SairportCurrentDateTimeInterval = $this->_getAirportCodeCurrentTime($_SdepartAirportCode,true);
						$pnrMinDepDate = $this->_getConvertToUTCDateValue($pnrMinDepDate,$_SairportCurrentDateTimeInterval);        

						$valitity='-'.$row['passenger_validity'].' '.$row['passengerTypeValue'];
						$passengerExpiryDate = date('Y-m-d H:i:s', strtotime( $pnrMinDepDate .$valitity ) );
					}
					else
					{
						$passengerExpiryDate=$row['passenger_expiry_date'];
					}
				}*/
				$pnrValidityDate[$val]=date($CFG['date_format']['displayDateTime'],strtotime($passengerExpiryDate));
			}
			
		}
		return $pnrValidityDate;
	}
	function _getPaymentRequestIdCount($_ItransactionId)
	{
		global $CFG;
		#To get payemnt request details
		//if($CFG["approvePage"]["groupLevelTimeline"]=="Y")
		//{
			$selectPaymentRequestCountSql = "SELECT
									request_timeline_id,
									transaction_id
								FROM
									".$CFG['db']['tbl']['request_timeline_details']."							
								WHERE
									transaction_id = ".$_ItransactionId."
								AND timeline_type='PAYMENT'";
		/*}
		else
		{
			$selectPaymentRequestCountSql = "SELECT
									payment_request_id,
									transaction_id
								FROM
									".$CFG['db']['tbl']['payment_request_details']."							
								WHERE
									transaction_id = ".$_ItransactionId;
		}*/
		if(DB::isError($resultPaymentRequestCount=$this->_Oconnection->query($selectPaymentRequestCountSql)))
		{
			fileWrite($selectPaymentRequestCountSql,"SqlError","a+");
			return false;
		}
		$paymentRequestIdCount=$resultPaymentRequestCount->numRows();
		
		return  $paymentRequestIdCount;
	}
	/*Get trip type from request details table*/
	function _getRequestTripType($_IrequestMasterId,$_IrequestId=0,$_SgetTripName = 'N')
	{
		global $CFG;
		$tripType = "";
		$condition = "";
		
		if($_IrequestId!=0)
			$condition = " AND rd.request_id = ".$_IrequestId."";
		
		$selectTripType = "SELECT 
							request_id,
							trip_type,
							trip_name
						FROM
							".$CFG['db']['tbl']['request_details']." rd
						WHERE
							rd.request_master_id = ".$_IrequestMasterId."
							".$condition." GROUP BY rd.request_master_id ORDER BY rd.request_id LIMIT 1";
		
		if(DB::isError($resultTripType=$this->_Oconnection->query($selectTripType)))
		{
			fileWrite($selectTripType,"SqlError","a+");
			return false;
		}
		if($resultTripType->numRows() > 0)
		{
			$rowTripType = $resultTripType->fetchRow(DB_FETCHMODE_ASSOC);
			$tripType = $rowTripType['trip_type'];
		}
		#to get the trip name for conference requests
		if($_SgetTripName == 'Y')
			return $rowTripType;

		return $tripType;
	}
	
	
	/*for get the previous transaction PNR by passing request id */
	function _getPreviousTransactionPnr($requestId)
	{
		global $CFG;
		
		$selectReqApproveddFlightId = "SELECT 
											rafd.request_approved_flight_id
										FROM
											".$CFG['db']['tbl']['request_approved_flight_details']." rafd
										WHERE
											rafd.request_id = ".$requestId.
										" ORDER BY 
											rafd.transaction_master_id desc";
		 
		if(DB::isError($resultReqApproveddFlightId=$this->_Oconnection->query($selectReqApproveddFlightId)))
		{
			fileWrite($selectReqApproveddFlightId,"SqlError","a+");
			return false;
		}
		 
		while($rowReqApproveddFlightId=$resultReqApproveddFlightId->fetchRow(DB_FETCHMODE_ASSOC))
		{
			$selectPnr = "SELECT 
								pbd.pnr
							FROM
								".$CFG['db']['tbl']['pnr_blocking_details']." pbd
							WHERE
								pbd.request_approved_flight_id = ".$rowReqApproveddFlightId['request_approved_flight_id'].
							" ORDER BY 
								pbd.pnr_blocking_id desc limit 1";

			if(DB::isError($resultPnr=$this->_Oconnection->query($selectPnr)))
			{
				fileWrite($selectPnr,"SqlError","a+");
				return false;
			}
			if($resultPnr->numRows() > 0)
			{
				$rowPnr = $resultPnr->fetchRow(DB_FETCHMODE_ASSOC);

				$pnr = $rowPnr['pnr'];
				if($pnr!='')
					return $pnr;
			}	
			/*else
			{
				return '';
			}*/
		}
	}
	/*Get Flight information based on PNR
	 * retun array $_AflightDetails
	 */
	function _getFlightInformationBasesdOnPNR($requestMasterId,$pnr='',$_AapprovedId = array(),$classOfService = 'N',$_SmodifyCheck='N')
	{
		global $CFG;
		
		fileRequire("dataModels/class.viaFlightDetails.php");
		
		$_AflightDetails = array();

		if($pnr != '')
		{
			$_SrequiredTables = "pnr_blocking_details pbd,";
			$_SrequiredConditions = "pbd.pnr = '".$pnr."' AND pbd.request_master_id = ".$requestMasterId." 
							AND rafd.request_approved_flight_id = pbd.request_approved_flight_id ";
			$_SrequiredSubConditions = " AND pbd.request_approved_flight_id = fcmd.request_approved_flight_id 
							AND fcmd.via_flight_id = pbd.via_flight_id ";
		}
		else
		{
			$_SapprovedId = implode(",",$_AapprovedId);
			$_SrequiredTables ="";
			$_SrequiredConditions = " rafd.request_approved_flight_id IN (".$_SapprovedId.")";
			$_SrequiredSubConditions = " AND fcmd.request_approved_flight_id = rafd.request_approved_flight_id";;
		}
		if($_SmodifyCheck =='Y')
		{
			$_ScolumnName = 'srdh.cabin, srdh.series_request_history_id as series_request_id';
			$_SrequiredTable = "series_request_details_history srdh";
			$condition=" AND rafd.series_request_history_id=srdh.series_request_history_id";
		}
		else
		{	
			$_ScolumnName = 'srd.cabin, srd.series_request_id';
			$_SrequiredTable = "series_request_details srd";
			$condition="AND rafd.series_request_id=srd.series_request_id";
		}
		
		$flightDetailSql = "SELECT
						rafd.request_approved_flight_id,
						rafd.source,
						rafd.destination,
						rafd.airline_code,
						rafd.flight_code,
						rafd.stops,
						rafd.departure_date,
						rafd.dep_time,
						rafd.arrival_date,
						rafd.arr_time,
						rafd.base_fare,
						rafd.tax,
						rafd.child_base_fare,
						rafd.child_tax,
						rafd.infant_base_fare,
						rafd.infant_tax,
						rafd.baggage_code,
						rafd.free_cost_count,
						rafd.airlines_request_id,
						(SELECT fcmd.fare_basis_code FROM flight_cabin_mapping_details fcmd,".$_SrequiredTables." request_approved_flight_details rafd WHERE ".$_SrequiredConditions.$_SrequiredSubConditions." ORDER BY fcmd.adult_base_fare LIMIT 1 ) AS fare_basis_code,
						rafd.tax_breakup,
						rafd.no_of_adult,
						rafd.no_of_child,
						rafd.no_of_infant,
						rafd.child_tax_breakup,
						rafd.infant_tax_breakup,
						rafd.foc_tax_breakup,
						".$_ScolumnName.",
						(SELECT fcmd.class_of_service FROM flight_cabin_mapping_details fcmd,".$_SrequiredTables."  request_approved_flight_details rafd WHERE ".$_SrequiredConditions.$_SrequiredSubConditions."
							 ORDER BY fcmd.adult_base_fare LIMIT 1 ) AS fare_class
					FROM
						".$_SrequiredTables."
						".$CFG['db']['tbl']['request_approved_flight_details']." rafd,
						".$_SrequiredTable."
					WHERE
						".$_SrequiredConditions."
						".$condition."
						";				
		if(DB::isError($requestApprovedResult=$this->_Oconnection->query($flightDetailSql)))
		{
			fileWrite($flightDetailSql,"SqlError","a+");
			return false;
		}
		$currencyCode = "";
		#assiging currency code fare tax re-check
		if(!empty($this->_SuserCurrency))
		{
			$currencyCode=$this->_SuserCurrency;
		}
		else
		{
			$this->_SuserCurrency = $this->_getUserCurrency($requestMasterId)['user_currency'];
			$currencyCode = $this->_SuserCurrency;
		}
		if(isset($CFG["limit"]["decimalPrecision"][$currencyCode]))
		{
			$decimalPrecision = $CFG["limit"]["decimalPrecision"][$currencyCode];
		}
		else
		{
			$decimalPrecision = 2;
		}
		$childBaseFare=0;
		$infantBaseFare=0;
		if($requestApprovedResult->numRows()>0)
		{
			$k = 0;
			
			$odNo = 0;
			while($row = $requestApprovedResult->fetchRow(DB_FETCHMODE_ASSOC))
			{ 
				$baseFare+=$row['base_fare'];
				$_AflightDetails[$k]['freeCostCount']=$row['free_cost_count'];
				$childBaseFare += $row['child_base_fare'];
				$infantBaseFare += $row['infant_base_fare'];

				$taxFare+=$row['tax'];
				/*Author:Dhamu G 
				 *Created-date:22/02/2019
				 *below conditions for issue ticket when currency code is sent as parameter for farecheck before issue ticket process
				 **/
				if($currencyCode!=''){
					$_AflightDetails[$k]['singleBaseFare']=$this->_getRoundOffFare($row['base_fare'],$decimalPrecision,$currencyCode);
					$_AflightDetails[$k]['singleChildBaseFare']=$this->_getRoundOffFare($row['child_base_fare'],$decimalPrecision,$currencyCode);
					$_AflightDetails[$k]['singleInfantBaseFare']=$this->_getRoundOffFare($row['infant_base_fare'],$decimalPrecision,$currencyCode);
				}else{
					$_AflightDetails[$k]['singleBaseFare']=$this->_getRoundOffFare($row['base_fare'],$decimalPrecision,"displayFare");
				}
				$odNo++;
				$_AflightDetails[$k]['viaFlight'] = $odNo;
				$_AflightDetails[$k]['trip'] = $odNo;
				#setting first origin based  on trip 
				if($odNo==1)
					$_AflightDetails[$k]['firstOrigin']='Y';
				else
					$_AflightDetails[$k]['firstOrigin']='N';
				if($row['stops'] == 0)
				{
					$_AflightDetails[$k]['origin'] = $row['source'];
					$_AflightDetails[$k]['destination'] = $row['destination'];
					$_AflightDetails[$k]['airlineCode'] = $row['airline_code'];
					$_AflightDetails[$k]['flightNumber'] = $row['flight_code'];
					$_AflightDetails[$k]['stops'] = $row['stops'];
					$_AflightDetails[$k]['baggage_code'] = $row['baggage_code'];
					$_AflightDetails[$k]['departureDateAndTime'] = $row['departure_date'].'T'.$row['dep_time'].':00';
					$_AflightDetails[$k]['arrivalDateAndTime'] = $row['arrival_date'].'T'.$row['arr_time'].':00';

					/*Author:Dhamu G 
					 *Created-date:22/02/2019
					 *below conditions for issue ticket when currency code is sent as parameter for farecheck before issue ticket process
					 **/
					if($currencyCode!='')
					{
						$_AflightDetails[0]['baseFare']=$this->_getRoundOffFare($baseFare,$decimalPrecision,$currencyCode);
						$_AflightDetails[0]['tax']=$this->_getRoundOffFare($taxFare,$decimalPrecision,$currencyCode);
					}else
					{
						$_AflightDetails[0]['baseFare']= $this->_getRoundOffFare($baseFare,$decimalPrecision,"displayFare");
						$_AflightDetails[0]['tax'] = $this->_getRoundOffFare($taxFare,$decimalPrecision,"displayFare");
					}
					if($CFG["settings"]["freeOfCost"]['nameUpdate']=='Y' && $_AflightDetails[$k]['freeCostCount']>0)
					{
						$_SgetFocAdtChdType=$this->_getFocPaxDetails($row['airlines_request_id'],$pnr);
						foreach ($_SgetFocAdtChdType['pax_type'] as $key => $value) {
						if($_SgetFocAdtChdType['pax_type'][$key]=='Adult')
							$_AflightDetails[$k]['adultFOCBaseFare']=0;
						if($_SgetFocAdtChdType['pax_type'][$key]=='Child')
							$_AflightDetails[$k]['childFOCBaseFare']=0;	
						}
						
					}

					$_AflightDetails[$k]['fareBasisCode'] = $row['fare_basis_code'];
					$_AflightDetails[$k]['fareBasicCode'] = $row['fare_basis_code'];
					$_AflightDetails[$k]['taxBreakUp'] = $row['tax_breakup'];
					$_AflightDetails[$k]['requestApprovedFlightid'] = $row['request_approved_flight_id'];
					$_AflightDetails[$k]['noOfAdult'] = $row['no_of_adult'];
					$_AflightDetails[$k]['noOfChild'] = $row['no_of_child'];
					$_AflightDetails[$k]['noOfInfant'] = $row['no_of_infant'];
					$_AflightDetails[$k]['noOfFoc'] = $row['free_cost_count'];
					if($row['tax_breakup']!='')
					{
						$_AexplodeTaxBreakUp = $this->_getExplodeTaxBreakUp($row['tax_breakup']);
						#Add same tax code and tax amount for adult#
						$_AflightDetails[$k]['explodeTaxBreakUp']=$this->_addTaxbreakup($_AexplodeTaxBreakUp);
					}
					if($row['no_of_child']!=0)
					{

						/*Author:Dhamu G 
						 *Created-date:22/02/2019
						 *below conditions for issue ticket when currency code is sent as parameter for farecheck before issue ticket process
						 **/
						if($currencyCode!='')
						{
							$_AflightDetails[0]['childBaseFare']=$this->_getRoundOffFare($childBaseFare,$decimalPrecision,$currencyCode);
						}else
						{
							$_AflightDetails[0]['childBaseFare']=$this->_getRoundOffFare($childBaseFare,$decimalPrecision,"displayFare");
						}
						if($row['child_tax_breakup']!='')
						{
							$_AchildExplodeTaxBreakUp = $this->_getExplodeTaxBreakUp($row['child_tax_breakup']);
							#Add same tax code and tax amount for child#
							$_AflightDetails[$k]['explodeChildTaxBreakUp'] = $this->_addTaxbreakup($_AchildExplodeTaxBreakUp);
							$_AflightDetails[$k]['childTaxBreakUp'] = $row['child_tax_breakup'];
						}
					}
					
					if($row['no_of_infant']!=0)
					{
						/*Author:Dhamu G 
						 *Created-date:22/02/2019
						 *below conditions for issue ticket when currency code is sent as parameter for farecheck before issue ticket process
						 **/
						if($currencyCode!='')
						{
							$_AflightDetails[0]['infantBaseFare']=$this->_getRoundOffFare($infantBaseFare,$decimalPrecision,$currencyCode);
						}else
						{
							$_AflightDetails[0]['infantBaseFare']=$this->_getRoundOffFare($infantBaseFare,$decimalPrecision,"displayFare");
						}
						if($row['infant_tax_breakup']!='')
						{
							$_AinfantExplodeTaxBreakUp = $this->_getExplodeTaxBreakUp($row['infant_tax_breakup']);
							#Add same tax code and tax amount for infant#
							$_AflightDetails[$k]['explodeInantTaxBreakUp'] = $this->_addTaxbreakup($_AinfantExplodeTaxBreakUp);
							$_AflightDetails[$k]['infantTaxBreakUp'] = $row['infant_tax_breakup'];
						}
					}
					if($row['free_cost_count']!=0)
					{
						if($row['foc_tax_breakup']!='')
						{
							$_AfocExplodeTaxBreakUp = $this->_getExplodeTaxBreakUp($row['foc_tax_breakup']);
							$_AflightDetails[$k]['explodefocTaxBreakUp'] = $this->_addTaxbreakup($_AfocExplodeTaxBreakUp);
							$_AflightDetails[$k]['focTaxBreakUp'] = $row['foc_tax_breakup'];
						}
					}
					//For separate index in tax details
					if($row['tax_breakup']!='')
						$_AflightDetails[$k]['adtTaxBreak']=$this->_getExplodeTaxBreakUp($row['tax_breakup']);	
					if($row['no_of_child']!=0)
					{
						if($row['child_tax_breakup']!='')	
							$_AflightDetails[$k]['chdTaxBreak']=$this->_getExplodeTaxBreakUp($row['child_tax_breakup']);					
					}
					if($row['no_of_infant']!=0)
					{
						if($row['infant_tax_breakup']!='')
							$_AflightDetails[$k]['infTaxBreak']=$this->_getExplodeTaxBreakUp($row['infant_tax_breakup']);						
					}
					$_AflightDetails[$k]['cabin']=$row['cabin'];
					$_AflightDetails[$k]['classOfService']=$row['fare_class'];
					
					$_AflightCabinMappingDetails=array();
					if(!empty($row['fare_class']) && !empty($row['request_approved_flight_id']))
					{
						fileRequire("dataModels/class.flightCabinMappingDetails.php");
						$this->_OflightCabinMappingDetails = new flightCabinMappingDetails;
						$this->_OflightCabinMappingDetails->__construct();

						$this->_OflightCabinMappingDetails->_Oconnection=$this->_Oconnection; 
			
						$this->_OflightCabinMappingDetails->_IrequestApprovedFlightId =$row['request_approved_flight_id'];
						$this->_OflightCabinMappingDetails->_SclassOfService =$row['fare_class'];
						
						$_AflightCabinMappingDetails= $this->_OflightCabinMappingDetails->_selectFlightCabinMappingDetails();
					
					}
					$_AflightDetails[$k]['fareSellKey']=$_AflightCabinMappingDetails[0]['fare_sequence'];
					$_AflightDetails[$k]['journeySellKey']=$_AflightCabinMappingDetails[0]['journey_sell_key'];
					if($classOfService == 'Y')
					{
						$getClassOfService = $this->getClassOfService($row['request_approved_flight_id']);
						if(!empty($getClassOfService))
						{
							$_AflightDetails[$k]['classOfService'] = $getClassOfService['class_of_service'];
							$_AflightDetails[$k]['fareBasisCode'] = $getClassOfService['fare_basis_code'];
							$_AflightDetails[$k]['fareBasicCode'] = $getClassOfService['fare_basis_code'];
						}
					}
					$_AflightDetails[$k]['seriesRequestId']=$row['series_request_id'];
					$k++;
				}
				else
				{
					//Set the variable to assign the via flight count
					$viaFltCount = 0;
					$this->_OviaFlightDetails=new viaFlightDetails;
					$this->_OviaFlightDetails->_Oconnection = $this->_Oconnection;
					$this->_OviaFlightDetails->_IrequestApprovedFlightId = $row['request_approved_flight_id'];
					$viaFlightDetails = $this->_OviaFlightDetails->_selectViaFlightDetails();
					foreach($viaFlightDetails as $viaFlights)
					{
						$_AflightDetails[$k]['viaFlight'] = $odNo;
						$_AflightDetails[$k]['trip'] = $odNo;
						#setting first origin based  on trip 
						if($odNo==1)
							$_AflightDetails[$k]['firstOrigin']='Y';
						else
							$_AflightDetails[$k]['firstOrigin']='N';
						$_AflightDetails[$k]['origin'] = $viaFlights['origin'];
						$_AflightDetails[$k]['destination'] = $viaFlights['destination'];
						$_AflightDetails[$k]['airlineCode'] = $viaFlights['airline_code'];
						$_AflightDetails[$k]['flightNumber'] = $viaFlights['flight_number'];
						$_AflightDetails[$k]['stops'] = 0;
						$_AflightDetails[$k]['departureDateAndTime'] = $viaFlights['departure_date'].'T'.$viaFlights['departure_time'].'';
						$_AflightDetails[$k]['arrivalDateAndTime'] = $viaFlights['arrival_date'].'T'.$viaFlights['arrival_time'].'';
						/*Author:Dhamu G 
						 *Created-date:22/02/2019
						 *below conditions for issue ticket when currency code is sent as parameter for farecheck before issue ticket process
						 **/
						if($currencyCode!='')
						{
							$_AflightDetails[0]['baseFare']=$this->_getRoundOffFare($baseFare,$decimalPrecision,$currencyCode);
							$_AflightDetails[0]['tax']=$this->_getRoundOffFare($taxFare,$decimalPrecision,$currencyCode);
						}else
						{
							$_AflightDetails[0]['baseFare']= $this->_getRoundOffFare($baseFare,$decimalPrecision,"displayFare");
							$_AflightDetails[0]['tax'] = $this->_getRoundOffFare($taxFare,$decimalPrecision,"displayFare");
						}
						if($CFG["settings"]["freeOfCost"]['nameUpdate']=='Y' && $_AflightDetails[$k]['freeCostCount']>0)
						{
							$_SgetFocAdtChdType=$this->_getFocPaxDetails($row['airlines_request_id'],$pnr);
							foreach ($_SgetFocAdtChdType['pax_type'] as $key => $value) {
							if($_SgetFocAdtChdType['pax_type'][$key]=='Adult')
								$_AflightDetails[$k]['adultFOCBaseFare']=0;
							if($_SgetFocAdtChdType['pax_type'][$key]=='Child')
								$_AflightDetails[$k]['childFOCBaseFare']=0;	
							}
							
						}
						$_AflightDetails[$k]['fareBasisCode'] =$row['fare_basis_code'];
						$_AflightDetails[$k]['fareBasicCode'] = $row['fare_basis_code'];
						$_AflightDetails[$k]['taxBreakUp'] = $row['tax_breakup'];
						$_AflightDetails[$k]['requestApprovedFlightid'] = $viaFlights['request_approved_flight_id'];
						$_AflightDetails[$k]['noOfAdult'] = $row['no_of_adult'];
						$_AflightDetails[$k]['noOfChild'] = $row['no_of_child'];
						$_AflightDetails[$k]['noOfInfant'] = $row['no_of_infant'];
						$_AflightDetails[$k]['noOfFoc'] = $row['free_cost_count'];
						//Assign the tax breakup for the first via flight only
						if($row['tax_breakup']!='' && $viaFltCount ==0)
						{
							$_AexplodeTaxBreakUp = $this->_getExplodeTaxBreakUp($row['tax_breakup']);
							$_AflightDetails[$k]['explodeTaxBreakUp']=$this->_addTaxbreakup($_AexplodeTaxBreakUp);
						}
						if($row['no_of_child']!=0)
						{

							/*Author:Dhamu G 
							 *Created-date:22/02/2019
							 *below conditions for issue ticket when currency code is sent as parameter for farecheck before issue ticket process
							 **/
							if($currencyCode!='')
							{
								$_AflightDetails[0]['childBaseFare']=$this->_getRoundOffFare($childBaseFare,$decimalPrecision,$currencyCode);
							}else
							{
								$_AflightDetails[0]['childBaseFare']=$this->_getRoundOffFare($childBaseFare,$decimalPrecision,"displayFare");
							}
							if($row['child_tax_breakup']!='' && $viaFltCount==0)
							{
								$_AchildExplodeTaxBreakUp = $this->_getExplodeTaxBreakUp($row['child_tax_breakup']);
								$_AflightDetails[$k]['explodeChildTaxBreakUp'] = $this->_addTaxbreakup($_AchildExplodeTaxBreakUp);
								$_AflightDetails[$k]['childTaxBreakUp'] = $row['child_tax_breakup'];
							}
						}
						if($row['no_of_infant']!=0)
						{

							/*Author:Dhamu G 
							 *Created-date:22/02/2019
							 *below conditions for issue ticket when currency code is sent as parameter for farecheck before issue ticket process
							 **/
							if($currencyCode!='')
							{
								$_AflightDetails[0]['infantBaseFare']=$this->_getRoundOffFare($infantBaseFare,$decimalPrecision,$currencyCode);
							}else
							{
								$_AflightDetails[0]['infantBaseFare']=$this->_getRoundOffFare($infantBaseFare,$decimalPrecision,"displayFare");
							}
							if($row['infant_tax_breakup']!='' && $viaFltCount==0)
							{
								$_AinfantExplodeTaxBreakUp = $this->_getExplodeTaxBreakUp($row['infant_tax_breakup']);
								$_AflightDetails[$k]['explodeInantTaxBreakUp'] = $this->_addTaxbreakup($_AinfantExplodeTaxBreakUp);
								$_AflightDetails[$k]['infantTaxBreakUp'] = $row['infant_tax_breakup'];
							}
						}
						if($row['free_cost_count']!=0)
						{
							if($row['foc_tax_breakup']!='')
							{
								$_AfocExplodeTaxBreakUp = $this->_getExplodeTaxBreakUp($row['foc_tax_breakup']);
								$_AflightDetails[$k]['explodefocTaxBreakUp'] = $this->_addTaxbreakup($_AfocExplodeTaxBreakUp);
								$_AflightDetails[$k]['focTaxBreakUp'] = $row['foc_tax_breakup'];
							}
						}
						//For separate index in tax details on viaflights
						if($row['tax_breakup']!='')
						{
							$_AflightDetails[$k]['adtTaxBreak']=$this->_getExplodeTaxBreakUp($row['tax_breakup']);
						}
						if($row['no_of_child']!=0)
						{
							if($row['child_tax_breakup']!='')
								$_AflightDetails[$k]['chdTaxBreak']=$this->_getExplodeTaxBreakUp($row['child_tax_breakup']);				
						}
						if($row['no_of_infant']!=0)
						{
							if($row['infant_tax_breakup']!='')		
								$_AflightDetails[$k]['infTaxBreak']=$this->_getExplodeTaxBreakUp($row['infant_tax_breakup']);
						}
						$_AflightDetails[$k]['cabin']=$row['cabin'];
						$_AflightDetails[$k]['classOfService']=$row['fare_class'];
						$_AflightDetails[$k]['seriesRequestId']=$row['series_request_id'];
						$_AflightCabinMappingDetails=array();
						if(!empty($row['fare_class']) && !empty($row['request_approved_flight_id']))
						{
							fileRequire("dataModels/class.flightCabinMappingDetails.php");
							$this->_OflightCabinMappingDetails = new flightCabinMappingDetails;
							$this->_OflightCabinMappingDetails->__construct();
	
							$this->_OflightCabinMappingDetails->_Oconnection=$this->_Oconnection; 
				
							$this->_OflightCabinMappingDetails->_IrequestApprovedFlightId =$row['request_approved_flight_id'];
							$this->_OflightCabinMappingDetails->_SclassOfService =$row['fare_class'];
							
							$_AflightCabinMappingDetails= $this->_OflightCabinMappingDetails->_selectFlightCabinMappingDetails();	
						}
						$_AflightDetails[$k]['fareSellKey']=$_AflightCabinMappingDetails[0]['fare_sequence'];
						$_AflightDetails[$k]['journeySellKey']=$_AflightCabinMappingDetails[0]['journey_sell_key'];
						if($classOfService == 'Y')
						{
							$getClassOfService = $this->getClassOfService($row['request_approved_flight_id']);
							if(!empty($getClassOfService))
							{
								$_AflightDetails[$k]['classOfService'] = $getClassOfService['class_of_service'];
								$_AflightDetails[$k]['fareBasisCode'] = $getClassOfService['fare_basis_code'];
								$_AflightDetails[$k]['fareBasicCode'] = $getClassOfService['fare_basis_code'];
							}
						}
						$k++;
						//Increment the via flight count
						$viaFltCount++;
					}
				}					
			}	
		}
		return $_AflightDetails;
	}
	/*
		@author : Karuppasamy S
		@date   : Jan 28, 2021
		@desc   : To get the class of service and fare basis code
		@param  : Request approved flight id
	*/
	function getClassOfService($approvedFlightId=0)
	{
		if($approvedFlightId == 0)
		{
			return false;
		}
		$classOfServiceRow = array();
		$classOfServiceSql = "  SELECT 
									class_of_service, fare_basis_code
							  	FROM 
									flight_cabin_mapping_details
								WHERE 
									request_approved_flight_id = 
								".$approvedFlightId." ORDER BY adult_base_fare LIMIT 1";

		if(DB::isError($classOfServiceResult=$this->_Oconnection->query($classOfServiceSql)))
		{
			fileWrite($classOfServiceSql,"SqlError","a+");
			return false;
		}
		if($classOfServiceResult->numRows()>0)
		{
			$classOfServiceRow = $classOfServiceResult->fetchRow(DB_FETCHMODE_ASSOC);
		}

		return $classOfServiceRow;
	}
	/*Check ticket view and request status
	 * retun string ticketViewStatus
	 */
	function _checkPaymentAndPaxDetails($requestMasterId)
	{
		global $CFG;
		$ticketViewStatus='N';
		$airlinesRequestId = $this->_getAirlineRequestId($requestMasterId);

		$percentageValue=100;	
		$paymentViewStatus='N';
		$sqlSelectPaymentPercentage="SELECT 
							IF(sum(payment_percentage) IS NULL,0,sum(payment_percentage)) as paymentPercentageSum 
						 FROM 
							".$CFG['db']['tbl']['payment_master']." 
						 WHERE 
							airlines_request_id='".$airlinesRequestId."'
							AND payment_status in(10,12)";

		if(DB::isError($resultSelectPaymentPercentage=$this->_Oconnection->query($sqlSelectPaymentPercentage)))
		{
			fileWrite($sqlSelectPaymentPercentage,"SqlError","a+");
			return false;
		}
		if($resultSelectPaymentPercentage->numRows() > 0)
		{
			$rowSelectPaymentPercentage=$resultSelectPaymentPercentage->fetchRow(DB_FETCHMODE_ASSOC);
			$paymentPercentage=$rowSelectPaymentPercentage['paymentPercentageSum'];

			if($paymentPercentage >= $percentageValue)
			{
				$paymentViewStatus='Y';
			}
		}
		
		$finalPax=$this->_getNoOfPaxBasedOnRequestType($requestMasterId);
		$noOfPassengers=$finalPax['totalNoOfPax'];
		$paxViewStatus='N';
		$_SremoveDummyRows='';
		//For not considering dummy rows
		if($CFG['nameUpdate']['insertDummyRowsForSeatSelection']=='Y' || $CFG['site']['doubleBilling']['status'] == 'Y')
			$_SremoveDummyRows = " AND additional_details NOT LIKE '%insertedDummyRow\":\"Y%'";
		$sqlSelectSubmitedPasseger="SELECT
								count(passenger_id) as submittedPassengers 
						    FROM 
								".$CFG['db']['tbl']['passenger_details']." 
						    WHERE 
								airlines_request_id='".$airlinesRequestId."'".$_SremoveDummyRows;

			if(DB::isError($resultSelectSubmitedPasseger=$this->_Oconnection->query($sqlSelectSubmitedPasseger)))
			{
				fileWrite($sqlSelectSubmitedPasseger,"SqlError","a+");
				return false;
			}
			if($resultSelectSubmitedPasseger->numRows() > 0)
			{
				$rowSelectSubmitedPasseger=$resultSelectSubmitedPasseger->fetchRow(DB_FETCHMODE_ASSOC);
				$submitedPaxCount=$rowSelectSubmitedPasseger['submittedPassengers'];

				if($submitedPaxCount >= $noOfPassengers)
				{
					$paxViewStatus='Y';
				}
			}
			
			#To hide the pnrs in the status mentioned in config $CFG["pnr"]["pnrNotShowStatus"]
			$_SstatusName='Closed';
			if(isset($CFG["pnr"]["pnrNotShowStatus"]) && !empty($CFG["pnr"]["pnrNotShowStatus"]))
			$_SstatusName=implode("','",$CFG["pnr"]["pnrNotShowStatus"]);
			
			$sqlPnr="SELECT DISTINCT pnr_blocking_id,pnr,request_approved_flight_id,pnr_amount
						  FROM	".$CFG['db']['tbl']['pnr_blocking_details']."
						  WHERE	request_master_id='".$requestMasterId."'
						  AND  status NOT IN ('".$_SstatusName."')
						  GROUP BY pnr ORDER BY pnr_blocking_id ASC";
			
			if(DB::isError($resultPnr=$this->_Oconnection->query($sqlPnr)))
			{
				fileWrite($sqlPnr,"SqlError","a+");
				return false;
			} 					
			if($resultPnr->numRows() > 0)
			{
				while($rowPnr=$resultPnr->fetchRow(DB_FETCHMODE_ASSOC))
				{
					$pnrArray[]= $rowPnr['pnr'];
				}
			}
			$ticketStatus='Y';
			foreach($pnrArray as $key=>$val)
			{
				$ticketStatus=$this->_checkTicketingStatus($requestMasterId,$val);
				
				if($ticketStatus=='N')
					break;
					
			}
			
			
		if($paymentViewStatus=='Y' && $paxViewStatus=='Y' && $ticketStatus=='N')
		{
			$ticketViewStatus='Y';
		}
		return $ticketViewStatus;
	}

	/*
		@author : Karuppasamy S
		@date   : Sep 27, 2024
		@desc   : Check if the request is initiate for the payment gateway
	*/
	function checkExpiry($requestMasterId=0, $process=''){
		if($requestMasterId == 0 || $requestMasterId == ''){
			return false;
		}
		$gatewayStatus = $this->checkGatewayInitiate($requestMasterId);
		if($process == '' || !in_array($process,array("FARE"))){
			return $gatewayStatus;
		}
		// Check if the request has the PNR details or not
		if($process != '' && $process == "FARE"){
			// Last transaction id
			$transactionId = $this->_getLastTransactionMasterId($requestMasterId);
			fileRequire("dataModels/class.takeControlDetails.php");
			$_OtakeControlDetails =new takeControlDetails();
			$_OtakeControlDetails->__construct();
			$_OtakeControlDetails->_Oconnection=$this->_Oconnection;
			$_OtakeControlDetails->_ScontrolStatus='Requested';
			$_OtakeControlDetails->_IrequestMasterId=$requestMasterId;
			$_OtakeControlDetails->_IreferenceId=$transactionId;
			$_OtakeControlDetails->_SprocessType='USERRESPONSE';
			$_AtakeControlDetails = $_OtakeControlDetails->_selectTakeControlDetails();
			if($gatewayStatus == "Y" || !empty($_AtakeControlDetails) && count($_AtakeControlDetails) > 0){
				return 'Y';
			}else{
				return 'N';
			}
		}
		return true;
	}

	function checkGatewayInitiate($requestMasterId=0){
		if($requestMasterId == 0 || $requestMasterId == ''){
			return false;
		}
		fileRequire("dataModels/class.takeControlDetails.php");
		$_OtakeControlDetails=new takeControlDetails();
		$_OtakeControlDetails->__construct();
		$_OtakeControlDetails->_Oconnection      = $this->_Oconnection;
		$_OtakeControlDetails->_IrequestMasterId = $requestMasterId;
		$_OtakeControlDetails->_SprocessType     = 'PAYMENTGATEWAY';
		$_OtakeControlDetails->_ScontrolStatus   = 'GATEWAYINITIATE';
		$_AtakeControlDetails = $_OtakeControlDetails->_selectTakeControlDetails();
		// Return Y, if the request was initiated for payment gateway else return N.
		if(!empty($_AtakeControlDetails)){
			return 'Y';
		}
		return 'N';
	}

	function acceptanceQueueExpiry($requestMasterId=0,$previousStatus){

		global $CFG;
		
		if($requestMasterId == 0 || $requestMasterId == ''){
			return false;
		}
		// Require files
		fileRequire("classesTpl/class.tpl.updatePaymentDetailTpl.php");
		fileRequire("classes/class.multiplePnrPayment.php");
		fileRequire("dataModels/class.airlinesRequestMapping.php");
		fileRequire("dataModels/class.statusDetails.php");	
		fileRequire("dataModels/class.responseDetails.php");

		// Invoke classes
		$_OupdatePaymentDetailTpl = new updatePaymentDetailTpl();
		$_OmultiplePnrPayment     = new multiplePnrPayment();
		$_OairlinesRequestMapping = new airlinesRequestMapping();
		$_OstatusDetails          = new statusDetails();
		$_OresponseDetails        = new responseDetails();


		$_IairlineRequestId = $this->_getAirlineRequestId($requestMasterId);
		$_IlastTransactionMasterId=$this->_getLastTransactionMasterId($requestMasterId);

		// Using updatePaymentDetails to rollback
		$_OupdatePaymentDetailTpl->__construct();
		$_OupdatePaymentDetailTpl->_Oconnection = $this->_Oconnection;
		$_OupdatePaymentDetailTpl->_IrequestMasterId = $requestMasterId;
		$_OupdatePaymentDetailTpl->_IairlineRequestId = $_IairlineRequestId;
		// Set true when we call from cron otherwise false
		$_OupdatePaymentDetailTpl->_BacceptanceQueueCron = true;
		// Prepare PNR details for rollback - Start
		$_OmultiplePnrPayment->__construct();
		$_OmultiplePnrPayment->_Oconnection = $this->_Oconnection;
		$_OmultiplePnrPayment->_Osmarty = $this->_Osmarty;
		$_OmultiplePnrPayment->_SpaymentWithPnr = 'Y';
		$_ApnrDetails = $_OmultiplePnrPayment->_walletPnrDetails($requestMasterId);

		$_SallowRollBack ='Y';

		// Prepare PNR details for rollback - End
		
		$_OupdatePaymentDetailTpl->_Osmarty = $this->_Osmarty;
		$_OupdatePaymentDetailTpl->_IlastTransactionMasterId=$_IlastTransactionMasterId;
		$_OupdatePaymentDetailTpl->_IpaymentMasterId=$_ApnrDetails[0]['paymentMasterId'];
		if(isset($this->_SpaymentWindowCloseStatus) && $this->_SpaymentWindowCloseStatus=='Y')
			$_OupdatePaymentDetailTpl->_SpaymentWindowCloseStatus=$this->_SpaymentWindowCloseStatus;
		
		$_rollBackPnr = $_OupdatePaymentDetailTpl->_rollBackPnr($_ApnrDetails);


		if ($_rollBackPnr == 'N') {
			$_SallowRollBack ='N';
		}


		if (isset($CFG['payment']['walletErrorHandling']) && count($CFG['payment']['walletErrorHandling'])>0 && $_SallowRollBack == 'Y') {

			$_OstatusDetails->_Oconnection = $this->_Oconnection;
			$_OstatusDetails->_SstatusCode = $previousStatus;
			$_OstatusDetails->_SbackEnd = 'Y';
			$_AstatusDetails = $_OstatusDetails->_selectStatusDetails();

			$_OairlinesRequestMapping->__construct();
			$_OairlinesRequestMapping->_Oconnection=$this->_Oconnection;
			$_OairlinesRequestMapping->_IairlinesRequestId=$_IairlineRequestId;
			$_OairlinesRequestMapping->_IcurrentStatus=$_AstatusDetails[0]['status_id'];
			$_OairlinesRequestMapping->_SlastUpdated=$this->_getUTCDateValue();
			$_OairlinesRequestMapping->_updateAirlinesRequestMapping();

			// Require necessary files
			fileRequire('dataModels/class.requestGroupDetails.php');
			$_OrequestGroupDetails = new requestGroupDetails();
			$_OrequestGroupDetails->_Oconnection = $this->_Oconnection;
			$_OrequestGroupDetails->_IairlinesRequestId = $_IairlineRequestId;
			$requestGroupDetailsArray = $_OrequestGroupDetails->_selectRequestGroupDetails();

			// Iterate through request group details
			foreach ($requestGroupDetailsArray as $requestGroupData) {
				if (isset($_AstatusDetails[0]['status_id']) && $_AstatusDetails[0]['status_id'] != '' && $requestGroupData['group_status'] == 5) 
				{
					$_OrequestGroupDetails->_INcondition = 'IN';
					$_OrequestGroupDetails->_IairlineRequestId = $_IairlineRequestId;
					$_OrequestGroupDetails->_IrequestGroupId = $requestGroupData['request_group_id'];
					$_OrequestGroupDetails->_SgroupStatus = $_AstatusDetails[0]['status_id'];
					$_OrequestGroupDetails->_IseriesGroupId = $requestGroupData['series_group_id'];
					$_OrequestGroupDetails->_ItransactionMasterId = $requestGroupData['transaction_master_id'];
					$_OrequestGroupDetails->_updateRequestGroupDetails();
				}
			}
			if($_IlastTransactionMasterId>0)
			{
				$_OresponseDetails->__construct();				
				$_OresponseDetails->_Oconnection=$this->_Oconnection;
				$_OresponseDetails->_IairlinesRequestId=$_IairlineRequestId;
				$_OresponseDetails->_ItransactionMasterId=$_IlastTransactionMasterId;
				$_OresponseDetails->_IresponseStatus='5';
				$_AreponseDetails = $_OresponseDetails->_selectResponseDetails();

				#delete responseDetails row based on responseId
				if (!empty($_AreponseDetails[0]['response_id']) && count($_AreponseDetails[0]['response_id']) >0) {
					$_OresponseDetails->_IresponseId=$_AreponseDetails[0]['response_id'];
					$_OresponseDetails->_deleteResponseDetails();
				}
			}
		}
	}

	//Update fare expired status for request that was fare quoted and expired
	function _fareExpiredStatusUpdate(){
		global $CFG;
		if(!class_exists('airlinesRequestMapping'))
			fileRequire("dataModels/class.airlinesRequestMapping.php");

		// Required files
		fileRequire("dataModels/class.requestGroupDetails.php");
		fileRequire("dataModels/class.pnrBlockingDetails.php");
		fileRequire("dataModels/class.transactionMaster.php");
		fileRequire("dataModels/class.requestMasterHistory.php");
		
		// Invoke classes
		$_OrequestGroupDetails = new requestGroupDetails();
		$_OpnrBlockingDetails  = new pnrBlockingDetails();
		$_OtransactionMaster   = new transactionMaster();
		$_OrequestMasterHistory= new requestMasterHistory();

		$_objAirlinesReqMap = new airlinesRequestMapping();
		$result= array();
		$returnString='';
		$statuId = array($this->_getCurrentStatusId('AN'),$this->_getCurrentStatusId('NJ'));
		if(isset($CFG["site"]["acceptanceQueue"]["status"]) && $CFG["site"]["acceptanceQueue"]["status"] == "Y"){
			$statuId[] = $this->_getCurrentStatusId('NA');
		}
		// Prepare condition on user response minimum time validation
		$cond = " ";
		// print_r($this->_IrequestMasterId);
		// die;
		if(isset($this->_IrequestMasterId) && isset($this->_SuserResponse) && $this->_SuserResponse == 'Y' && !empty($this->_IrequestMasterId))
			{
			$cond = " AND arm.request_master_id = ".$this->_IrequestMasterId;
			// echo "hsks";
			// print_r($cond);
			// echo "<br>";
			// die;
		}
		$sql="SELECT
			arm.request_master_id,
			arm.airlines_request_id,
			tm.fare_expiry_date,
			tm.transaction_id
		FROM
			transaction_master tm,
			airlines_request_mapping arm
		WHERE 
			arm.airlines_request_id = tm.airlines_request_id AND
			arm.current_status IN (".implode(",", $statuId).")".$cond." order by arm.request_master_id,tm.transaction_id DESC";

		if(DB::isError($transMaster=$this->_Oconnection->query($sql))){
			fileWrite($sql,"SqlError","a+");
			return false;
		}
		else{
			// print_r($transMaster->fetchAll(DB_FETCHMODE_ASSOC));
			// die;
			if($transMaster->numRows()>0){
				$tempArray=array();
				$currentTime = $this->_getUTCDateValue();
				while($row=$transMaster->fetchRow(DB_FETCHMODE_ASSOC)){
					// if payment already initiated, then don't need to expire the request
					if($this->checkExpiry($row['request_master_id'],'FARE') == "Y" && isset($CFG["site"]["acceptanceQueue"]["status"]) && $CFG["site"]["acceptanceQueue"]["status"] == "Y"){
						continue;
						// print_r($this->checkExpiry($row['request_master_id'],'FARE'));
						// echo "Hello";
						// die;
					}
					if(in_array($row['request_master_id'],$tempArray))
						continue;
					$tempArray[]=$row['request_master_id'];

					// Get group details
					$_OrequestGroupDetails->__construct();
					$_OrequestGroupDetails->_Oconnection = $this->_Oconnection;
					$_OrequestGroupDetails->_IairlineRequestId = $row['airlines_request_id'];
					$_OrequestGroupDetails->_ItransactionMasterId = $row['transaction_id'];
					$_IrequestTypeId=$this->_getRequestType($row['request_master_id'],'Y');
					$_ArequestGroupDetails = $_OrequestGroupDetails->_selectRequestGroupDetails();

					// Get pnr blocking details
					$_OpnrBlockingDetails->__construct();
					$_OpnrBlockingDetails->_Oconnection = $this->_Oconnection;
					$_OpnrBlockingDetails->_IrequestMasterId = $row['request_master_id'];
					$_ApnrBlockingDetails = $_OpnrBlockingDetails->_selectPnrBlockingDetails();

					if(!empty($_ArequestGroupDetails))
					{
						$_AseriesGroupId = array();

						foreach($_ArequestGroupDetails as $requestKey=>$requestVal)
						{
							$_AseriesGroupId[$requestVal['request_group_id']] = $requestVal['group_status'];	
						}
					}

					///retrieving modify_status for the request_master_id
					$sqlModifyStatus = "SELECT 
											rmh.modify_status,
											rmh.request_master_history_id 
										FROM 
											request_master_history rmh,
											airlines_request_mapping arm
										WHERE 
											rmh.request_master_id = arm.request_master_id 
											AND rmh.modify_status = arm.current_status
											AND rmh.request_master_id =".$row['request_master_id']." 
										ORDER BY request_master_history_id DESC limit 1 ";
					if(DB::isError($modifyStatus=$this->_Oconnection->query($sqlModifyStatus))){
						fileWrite($sqlModifyStatus,"SqlError","a+");
						return false;			
					}else{
						if($modifyStatus->numRows()>0)
						{
							while($rowModifyStatus=$modifyStatus->fetchRow(DB_FETCHMODE_ASSOC)){
								//checking for the status farequoted for modified status and expired date checking	

								if((!empty($row['fare_expiry_date'])&&$row['fare_expiry_date']!="0000-00-00 00:00:00"&&(strtotime($row['fare_expiry_date']) < strtotime($currentTime))) || (isset($this->_SminimumTimeValidation) && !empty($this->_SminimumTimeValidation) && $this->_SminimumTimeValidation == 'Y')){

									if(!class_exists('userResponse'))
										fileRequire("classesTpl/class.tpl.userResponse.php");
									$this->_OtplObj=new userResponseTpl();
									$this->_OtplObj->_Oconnection = $this->_Oconnection;
									$this->_OtplObj->_Osmarty=$this->_Osmarty;
									$this->_OtplObj->_IinputData = array(
										"requestMasterId"=>$row['request_master_id'],
										"responseType"=>"DECLINE",
										"requestMasterHistoryId"=>$rowModifyStatus["request_master_history_id"],
										"userRemark"=>"Automatic modified decline due to fare expiry");
									//Decline function called while the above condition satified
									$this->_OtplObj->_IrequestMasterId = $row['request_master_id'];
									$this->_OtplObj->_setInput();
									$this->_OtplObj->_Smode = "C";
									$this->_OtplObj->_SmailFlag="N";
									$this->_OtplObj->_decline();
									//Update the take control status 
									$this->_OtplObj->_updateTakeControl();
									fileWrite('Time: '.$row['fare_expiry_date'].'<'.$currentTime.' Fare expiry status declined for modified request '.$row['request_master_id'],'fareExpiryStatusUpdate','a+');

								}
							}
						}
						else 
						{
							//farequoted request assigned as fare expired status.. for modify_status!=3	
							//Check for fare expiry date is lesser than current utc time
							if((!empty($row['fare_expiry_date'])&&$row['fare_expiry_date']!="0000-00-00 00:00:00"&&(strtotime($row['fare_expiry_date']) < strtotime($currentTime)) && !empty($_AseriesGroupId)) || (isset($this->_SminimumTimeValidation) && !empty($this->_SminimumTimeValidation) && $this->_SminimumTimeValidation == 'Y'))
							{
								foreach($_AseriesGroupId as $key=>$value)
								{
									if(in_array($value,$statuId))
									{
										$_OrequestGroupDetails->__construct();
										$_OrequestGroupDetails->_Oconnection = $this->_Oconnection;
										$_OrequestGroupDetails->_IrequestGroupId=$key;
										$_OrequestGroupDetails->_SgroupStatus=$this->_getCurrentStatusId('OE');
										$_OrequestGroupDetails->_updateRequestGroupDetails();
									}
								}
							
								$flag=false;
								$_objAirlinesReqMap->__construct();
								$_objAirlinesReqMap->_Oconnection = $this->_Oconnection;
								$_objAirlinesReqMap->_IairlinesRequestId = $row['airlines_request_id'];
								$_objAirlinesReqMap->_SlastUpdated = $currentTime;
								if(count($_ApnrBlockingDetails) == 0)
								{
									$_objAirlinesReqMap->_IcurrentStatus = $this->_getCurrentStatusId('OE');//Offer expired status	
								}else if(count($_ApnrBlockingDetails) != 0)
								{
									$_OtransactionMaster->__construct();
									$_OtransactionMaster->_Oconnection = $this->_Oconnection;
									$_OtransactionMaster->_ItransactionId = $row['transaction_id'];
									$_AtransactionMaster = $_OtransactionMaster->_selectTransactionMaster();

									if(!empty($_AtransactionMaster) && $_AtransactionMaster[0]['request_master_history_id'] != 0)
									{
										$_OrequestMasterHistory->__construct();
										$_OrequestMasterHistory->_Oconnection = $this->_Oconnection;
										$_OrequestMasterHistory->_IrequestMasterHistoryId = $_AtransactionMaster[0]['request_master_history_id'];
										$_ArequestMasterHistory = $_OrequestMasterHistory->_selectRequestMasterHistory();
										
										//modify status
										$_objAirlinesReqMap->_IcurrentStatus = $_ArequestMasterHistory[0]['modify_status'];
									}
									else
									{
										$_objAirlinesReqMap->_IcurrentStatus = $this->_getCurrentStatusId('AR');//group status
									}
								}
								
								$flag = $_objAirlinesReqMap->_updateAirlinesRequestMapping();
								if($flag)
								{							
									fileWrite('Time: '.$row['fare_expiry_date'].'<'.$currentTime.' Fare expiry status updated for request request '.$row['request_master_id'],'fareExpiryStatusUpdate','a+');
									//view history call for offer expired.
									fileRequire("classes/class.viewHistoryProcess.php");
									$_AviewHistoryProcess=new viewHistoryProcess();
									$_AviewHistoryProcess->_Oconnection=$this->_Oconnection;
									$_AinsertNewRequestData=$_AviewHistoryProcess->_fetchHistoryData('OE',$row['request_master_id']);
								}
							}
						}
					}	
				}
			}
		}
	}

	/**
	 * @Author	: srimuthurajesh 23/05/18
	 * @Modified By : --
	 * @Desc	: to create autopilot userid in session
	 * @Param	: email_id
	 * @Return type: none 
	 */
	function _createAutoPilotUserIdSession(){
		global $CFG;
		$email_id = $CFG['approvePage']['autopilotEmailId'];
		// print_r($CFG['approvePage']['autopilotEmailId']);die;
		//Setting the autopilot user details
		$sqlSelectAutoPilotUserId="	SELECT
									user_id
				   				FROM
									".$CFG['db']['tbl']['user_details']."
				   				WHERE
				   					".encrypt::_decrypt('email_id')." = '".$email_id."'";
								
		if(DB::isError($resultSelectAutoPilotUserId=$this->_Oconnection->query($sqlSelectAutoPilotUserId)))
		{	
			fileWrite($sqlSelectAutoPilotUserId,"SqlError","a+");
			return false;
		}
		if($resultSelectAutoPilotUserId->numRows() >0)
		{
			$_ArowSelectAutoPilotUserId=$resultSelectAutoPilotUserId->fetchRow(DB_FETCHMODE_ASSOC);
			$_IautoPilotUserId=$_ArowSelectAutoPilotUserId['user_id'];
		}
		// Auto pilot process user id
		$_SESSION['groupRM']['groupUserId']=$_IautoPilotUserId;
		return $_IautoPilotUserId;

	}


	/**
	 * @Author	: JK Thirumal 09/05/17
	 * @Modified By : --
	 * @Desc	: To get passenger expiry validity date, status and pnr
	 * @Param	: Reuqest master id
	 * @Return type: Array 
	 */
	function _getPassengerExpiryDetails($_ArequestMasterId=0,$_Spnr='',$_SadvanceExpiryCheck = 'Y'){
		global $CFG;	
		$UTCDateAndTime=$this->_getUTCDateValue();
		$airlinesRequestId=0;
		$response=array();
		
		$_Scondition = '';
		if($_Spnr != '')
			$_Scondition = " AND pnr = '".$_Spnr."'" ;
		if(!empty($_ArequestMasterId['request_master_id']))
			$requestMasterId=$_ArequestMasterId['request_master_id'];
		else
			$requestMasterId=$_ArequestMasterId;
			
		if($requestMasterId!=0)
		{
			if(!empty($_ArequestMasterId['request_master_id']))
				$airlinesRequestId = $_ArequestMasterId['request_master_id'];
			else
				$airlinesRequestId = $this->_getAirlineRequestId($requestMasterId);
			
			//To check whether is status is time line extended are not
			$_IpaxTimeLineExtendId = $this->_getCurrentStatusId('PT');
			
			if($airlinesRequestId!=0)
			{
				if(!empty($_ArequestMasterId['passenger_master'])){
					foreach ($_ArequestMasterId['passenger_master'] as $passengerMasterValue) {
						if($passengerMasterValue['passenger_status']!=$_IpaxTimeLineExtendId && $passengerMasterValue['pnr']==$_Spnr){
							$passengerMasterResult[]=$passengerMasterValue;
						}
					}
				}else{

					$_Svariable = $airlinesRequestId.'_'.$_IpaxTimeLineExtendId.'_'.$_Spnr;
					$_AstaticData = $this->_staticData("_getPassengerExpiryDetailsPNR",$_Svariable);
					if($_AstaticData !== false)
						$passengerMasterResult = $_AstaticData;
					else
					{
						$sql="SELECT
								pnr,
								time_validity,
								passenger_status
							FROM
								passenger_master
							WHERE airlines_request_id=".$airlinesRequestId."
								AND passenger_status != ".$_IpaxTimeLineExtendId."
								".$_Scondition;

						if(DB::isError($paxMaster=$this->_Oconnection->query($sql)))
						{
							fileWrite($sql,"SqlError","a+");
							return false;
						}
						else
						{
							$passengerMasterResult=$this->_executeQuery($sql);
							$this->_staticData("_getPassengerExpiryDetailsPNR",$_Svariable,$passengerMasterResult);
						}
					}
				}
				foreach ($passengerMasterResult as $row) 
				{
					if($_SadvanceExpiryCheck == 'Y')
					{
						$row['paxExpiryDate'] = 'N';
						$diff = $this->_dateDifference($UTCDateAndTime,$row['time_validity']);
						
						if(round($diff['days'])<=$CFG["settings"]["paxTimeAdvanceExpiry"]["timeLimit"] && $row['passenger_status']!=$_IpaxTimeLineExtendId)
						{
							$row['paxExpiryDate'] = 'Y';
						}
						$response[]=$row;
					}
					else{
						$response = $row['time_validity'];
					}
				}
			}
			return $response;
		}
	}

	
	/**
	 * Return the horizon status of a request 
	 **/
	function _checkHorizonRequest($requestMasterId=0,$seriesRequestId=0){
		global $CFG;
		$_CisHorizonRequest ='N';
		
		fileRequire("dataModels/class.requestQuoteDetails.php");
		$_requestQuoteDetails = new requestQuoteDetails;
		
		if($requestMasterId!=0){
			//Check for horizon request
			$_requestQuoteDetails->__construct();
			$_requestQuoteDetails->_Oconnection = $this->_Oconnection;
			$_requestQuoteDetails->_IrequestMasterId = $requestMasterId;
			if($seriesRequestId!=0){
				$seriesRequestDetails[0]['series_request_id'] = $seriesRequestId;
			}else{
				$seriesRequestDetails = $this->_getSeriesRequestId($requestMasterId);
			}
			$scheduleCount=0;
			$ooHorizonCount=0;
			$_SmodifyStatus = $this->_checkIsModify($requestMasterId)['requestModifyStatus'];
			foreach($seriesRequestDetails as $key => $value){
				if($_SmodifyStatus == 'Y')
					$_requestQuoteDetails->_IseriesRequestHistoryId = $value['series_request_id'];
				else
					$_requestQuoteDetails->_IseriesRequestId = $value['series_request_id'];
				$requestQuoteDetails = $_requestQuoteDetails->_selectRequestQuoteDetails();
				$currentDate = $this->_getUTCDateValue();
				if(isset($requestQuoteDetails[0]) && !empty($requestQuoteDetails[0]) && $requestQuoteDetails[0]['quote_type']=='OH')
				{
					if(strtotime($currentDate) <= strtotime($requestQuoteDetails[0]['batch_start_date']))
						$ooHorizonCount++;
					if(strtotime($currentDate) >= strtotime($requestQuoteDetails[0]['batch_start_date']))
						$scheduleCount++;
				}
			}
			if($ooHorizonCount>0)
				$_CisHorizonRequest ='Y';
			if($scheduleCount>0)
				$_CisHorizonRequest ='S';
		}
		return $_CisHorizonRequest;
	}
	
	
	/**
	 * @Author	: Manikumar 03/06/17
	 * @Modified By : --
	 * @Desc	: To get submitted passenger count by pax type
	 * @Param	: PNR
	 * @Return type: Array 
	 */
	function _getSubmittedCountByPaxType($_Spnr,$_SfetchDummyRowsFlag = "N")
	{
		global $CFG;
		fileRequire("dataModels/class.passengerDetails.php");
		$_AsubmittedPax = array();
		
		if(empty($_Spnr))
		{
			$_AsubmittedPax['submittedPax'] = 0;
			$_AsubmittedPax['submittedAdult'] =0;
			$_AsubmittedPax['submittedChild'] = 0;
			$_AsubmittedPax['submittedInfant'] = 0;
			
			return $_AsubmittedPax;
		}

		$_OpassengerDetails = new passengerDetails();
		$_OpassengerDetails->_Oconnection = $this->_Oconnection;
		$_OpassengerDetails->_INcondition="IN";
		$_OpassengerDetails->_SpassengerStatus ="Y,H";
		#fetchDummyRowsFlag is used for list the pax count in getBookings.
		if($_SfetchDummyRowsFlag == "Y")
			$_OpassengerDetails->_SneedDummyRows = "Y";
		$_OpassengerDetails->_Spnr = $_Spnr;
		$_OpassengerDetails->_selectPassengerDetails();
		
		$passengerTypes = array_column($_OpassengerDetails->_ApassengerDetails, 'passenger_type');
    	$focStatus = array_column($_OpassengerDetails->_ApassengerDetails, 'foc_status');

		$_AsubmittedPax = [
			'submittedPax' => count($_OpassengerDetails->_ApassengerDetails),
			'submittedAdult' => count(array_filter($_OpassengerDetails->_ApassengerDetails, function ($_Spassenger) {
				return $_Spassenger['passenger_type'] == 'Adult' && $_Spassenger['foc_status'] != 'Y';
			})),
			'submittedChild' => count(array_filter($passengerTypes, function ($_SpaxType) {
				return $_SpaxType == 'Child';
			})),
			'submittedInfant' => count(array_filter($passengerTypes, function ($_SpaxType) {
				return $_SpaxType == 'Infant';
			})),
		];
		
		return $_AsubmittedPax;
	}
	
	/**
	 * @Author	: Manikumar 07/06/17
	 * @Modified By : --
	 * @Desc	: To get pnr payment details, payment master details and emd details for the PNR
	 * @Param	: PNR
	 * @Return type: Array 
	 */
	function _getEMDDetailsForPNR($_Spnr,$_IrequestMasterId,$_Schildpnr='')
	{
		global $CFG;
		$_ApnrPaymentDetails = array();
		$_AfinalPnrPaymentDetails = array();
		fileRequire('dataModels/class.pnrPaymentDetails.php');
		fileRequire('dataModels/class.paymentMaster.php');
		fileRequire('dataModels/class.emdDetails.php');
		fileRequire('dataModels/class.pnrPaymentTransactions.php');
		
		$_OpnrPaymentDetails = new pnrPaymentDetails();
		$_OpaymentMaster = new paymentMaster();
		$_OemdDetails = new emdDetails();
		$_OpnrPaymentTransactions = new pnrPaymentTransactions();
		
		$_OpnrPaymentDetails->_Oconnection = $this->_Oconnection;
		$_OpaymentMaster->_Oconnection = $this->_Oconnection;
		$_OemdDetails->_Oconnection = $this->_Oconnection;
		$_OpnrPaymentTransactions->_Oconnection = $this->_Oconnection;
		
		$_IairlineRequestId = $this->_getAirlineRequestId($_IrequestMasterId);
		$_OpaymentMaster->__construct();
		$_OpaymentMaster->_IairlinesRequestId = $_IairlineRequestId;
		$_ApaymentMaster = $_OpaymentMaster->_selectPaymentMaster();
		foreach($_ApaymentMaster as $paymentKey => $paymentValue)
		{
			$_OpnrPaymentDetails->__construct();
			$_OpnrPaymentDetails->_Spnr = $_Spnr;
			$_OpnrPaymentDetails->_IpaymentMasterId = $paymentValue['payment_master_id'];
			$_OpnrPaymentDetails->_selectPnrPaymentDetails();
			$_ApnrPaymentDetails = $_OpnrPaymentDetails->_ApnrPaymentDetails;
			if(!empty($_ApnrPaymentDetails) && isset($_ApnrPaymentDetails[0]))
			{
				foreach($_ApnrPaymentDetails as $pnrPaymentKey => &$pnrPaymentValue)
				{
					if($pnrPaymentValue['payment_master_id']!=0)
					{
						$_OpaymentMaster->__construct();
						$_OpaymentMaster->_IpaymentMasterId = $pnrPaymentValue['payment_master_id'];
						$pnrPaymentValue['paymentMaster'] = $_OpaymentMaster->_selectPaymentMaster();
					}	
					if($pnrPaymentValue['pnr_payment_id']!=0)
					{
						if($_ApnrPaymentDetails[0]['payment_status'] == 'APPROVED')
						{
							$_OemdDetails->__construct();
							if($CFG['passengerWiseEmd']['emdcreate']=='Y')
							{
								$sqlPax = "SELECT
											ed.emd_id,
											ed.pnr_payment_id,
											ed.issued_document_number,
											ed.emd_amount,
											ed.passenger_id as emd_passenger_id,
											pd.pnr,
											pd.passenger_id
											FROM
											".$CFG['db']['tbl']['emd_details']." ed
											INNER JOIN
											".$CFG['db']['tbl']['passenger_details']." pd ON ed.passenger_id=pd.passenger_id
											WHERE
											ed.pnr_payment_id=".$pnrPaymentValue['pnr_payment_id'];

								if($this->_SdivideStatus == 'Y'){
									$sqlPax .= " AND pd.pnr = '".$_Schildpnr."'";
								} else {
									$sqlPax .= " AND pd.passenger_status = 'H'";
								}
											
								if(DB::isError($resultPax=$this->_Oconnection->query($sqlPax)))
								{
									fileWrite($sqlPax,'sqlError','a+');
									return false;
								}
								if($resultPax->numRows() > 0)
								{
									$resultEmds = array();
									while($rowPax=$resultPax->fetchRow(DB_FETCHMODE_ASSOC))
									{
										$resultEmds[] = $rowPax;
									}
								}
								$pnrPaymentValue['emdDetails'] = $resultEmds;
							} else {
								$_OemdDetails->_IpnrPaymentId = $pnrPaymentValue['pnr_payment_id'];
								$pnrPaymentValue['emdDetails'] = $_OemdDetails->_selectEmdDetails();
							}
						}
						$_OpnrPaymentTransactions->__construct();
						$_OpnrPaymentTransactions->_IpnrPaymentId = $pnrPaymentValue['pnr_payment_id'];						
						$pnrPaymentValue['pnrPaymentTransactions']= $_OpnrPaymentTransactions->_selectPnrPaymentTransactions();
					}
				}
				if(($_ApnrPaymentDetails[0]['payment_status'] == 'APPROVED' && !empty($_ApnrPaymentDetails[0]['emdDetails'])) || $_ApnrPaymentDetails[0]['payment_status'] == 'PENDING'|| $CFG["site"]["navitaireBasedAirline"]=='Y')
					$_AfinalPnrPaymentDetails[] = $_ApnrPaymentDetails[0];
			}
		}
		return $_AfinalPnrPaymentDetails;
	}
        
        
        function _getTotalGenericChareAmount($requestMasterId,$_SPNR='')
	{   
		global $CFG;
		$pnrDetails=array();
		if($_SPNR!='')
			$condition = " pnr = '".$_SPNR."' AND ";
		$sqlSelectPnrDetails="SELECT
									DISTINCT pnr_blocking_id,pnr,pnr_amount,request_approved_flight_id,status
								FROM
									".$CFG['db']['tbl']['pnr_blocking_details']."
								WHERE
									".$condition."
									request_master_id='".$requestMasterId."'";									
									
			if(DB::isError($resultPNR =$this->_Oconnection->query($sqlSelectPnrDetails)))
			{
				fileWrite($sqlSelectPnrDetails,"SqlError","a+");
				return false;
			}	
			if($resultPNR->numRows()>0)
			{
				while($rowPNR=$resultPNR->fetchRow(DB_FETCHMODE_ASSOC))
				{
						$pnrDetails[]=$rowPNR;						
				}	
			}

		$pnrArray=array();
		$totalGenericChargeAmount=0;
		foreach($pnrDetails as $pnrDetailsVal)
		{
			#Checking for the dulicate PNR.
			if(!in_array($pnrDetailsVal['pnr'],$pnrArray))
			{	
				$genericAmount=$this->_getGenericChareAmount($pnrDetailsVal['pnr_blocking_id']);	
				$totalGenericChargeAmount+=$genericAmount['totalGenericAmount'];
			
				$pnrArray[]=$pnrDetailsVal['pnr'];
			}	
		}	
		return $totalGenericChargeAmount;
	}
        
        function _getGenericChareAmount($pnrBlockingID)
	{  
		global $CFG;
		$genericChargeDetails=array();
		$genericTotalAmount=0;
		fileRequire("dataModels/class.ssrList.php");
		$this->_OssrList = new ssrList;	
			
		foreach($CFG["site"]['genericSSRCodes'] as $SSRCodeKey=>$SSRCodeVal)
		{
			$this->_OssrList->__construct();
			$this->_OssrList->_Oconnection = $this->_Oconnection;
			$this->_OssrList->_SssrCode=$SSRCodeVal;
			$SSRListArray=$this->_OssrList->_selectSsrList();		
			$genericSSRCodeArray[$SSRCodeKey]=$SSRListArray[0];
                        
		}
                		
		fileRequire("dataModels/class.paymentAdditionalChargeDetails.php");
		$this->_OpaymentAdditionalChargeDetails = new paymentAdditionalChargeDetails;

		foreach($genericSSRCodeArray as $genericSSRCodeArrayKey=>$genericSSRCodeArrayVal)
		{
                    if(!empty($genericSSRCodeArrayVal))
                    {    
			$this->_OpaymentAdditionalChargeDetails->__construct();
			$this->_OpaymentAdditionalChargeDetails->_Oconnection = $this->_Oconnection;
			$this->_OpaymentAdditionalChargeDetails->_IssrListId =$genericSSRCodeArrayVal['ssr_list_id'];
			$this->_OpaymentAdditionalChargeDetails->_IpnrBlockingId =$pnrBlockingID;
			$this->_OpaymentAdditionalChargeDetails->_SssrStatus ='FE';
			$previousAdditionalCharge=$this->_OpaymentAdditionalChargeDetails->_selectPaymentAdditionalChargeDetails();
			$this->_Ocommon->_Oconnection = $this->_Oconnection;
			$inputArray=array(
					"inputArray" => $previousAdditionalCharge, //mandatory
					"fieldName" => "payment_charge_id", //mandatory
					"fieldType" => "NUMBER", //default
					"orderType" => "DESC" //default
					);
			$previousAdditionalCharge=$this->_dynamicSortFunction($inputArray);
			$previousAdditionalCharge[0]['ssr_code']=$genericSSRCodeArrayVal['ssr_code'];
			$previousAdditionalCharge[0]['ssr_description']	=$genericSSRCodeArrayVal['ssr_description'];
			foreach ($previousAdditionalCharge as $key => $value) 
			{
				if($value['additional_amount']<0)
				{
					if(count($previousAdditionalCharge)>1)
						$_AadditionalAmountSum=array_sum(array_column($previousAdditionalCharge,'additional_amount'));
				}	
			}
			if(isset($previousAdditionalCharge[0]['additional_amount']))
			{
				$genericTotalAmount+=$previousAdditionalCharge[0]['additional_amount'];
				if(!empty($_AadditionalAmountSum))
					$genericTotalAmount=$_AadditionalAmountSum;
			}
			$genericChargeDetails['totalGenericAmount']=$genericTotalAmount;
			$genericChargeDetails['genericBreakUp'][$genericSSRCodeArrayKey]=$previousAdditionalCharge[0];
                    }    
		}
		return $genericChargeDetails;
	}
	
	/**
	 * @Author	: Manikumar 19/06/17
	 * @Modified By : Abhishek S 21/09/18
	 * @Desc	: Checking the validation before raising the resize
	 * @Param	: Request master id, series request id, req. approved flight id, pnr, resize type
	 * @Return type: true, false
	 */
	function _checkValidationBeforeResize($_IrequestMasterId,$_IseriesRequestId=0,$_IrequestApprovedFlightId=0,$_Spnr="",$_IresizeType="")
	{
		global $CFG; 
		$_AopenStatusDetails = $this->_getRequestOpenStatusDetails($_IrequestMasterId); 
		$_IcurrentStatus= $this->_getStatusFromRequestId($_IrequestMasterId); 				
		//Checking whether the auto pilot processing the request or not 
		if($_AopenStatusDetails['auto_pilot_status'] == "RUNNING")
		{
			$this->_OobjResponse->script("Ext.Msg.alert('Warning','Auto pilot running for this request')");
			return false;
		}
		//Checking the request whether the airlines user opened or not for process 
		if(($_AopenStatusDetails['opened_by']!=0 && $_AopenStatusDetails['view_status']=='open') || in_array($_IcurrentStatus,array(16,17,18)))
		{
			if(in_array($_SESSION['groupRM']['groupId'],$CFG['default']['airlinesGroupId']))
				$this->_OobjResponse->script('wrapperScript("processDashBoard");Ext.Msg.alert("Error","'.$this->_Osmarty->getConfigVars('COMMON_REQUEST_UNDER_PROCESS').'");');
			else
				$this->_OobjResponse->call("commonObj.showErrorMessage",$this->_Osmarty->getConfigVars('COMMON_REQUEST_UNDER_PROCESS'));
			return false;
		}
		
		$_ArestrictGroups = $this->_getResizeSettings('downsize','restrictGroups',$_IrequestMasterId);		
		//Not to allow downsize for travel agent		
		if(in_array($_SESSION['groupRM']['groupId'],$_ArestrictGroups['groups']))
		{
			if(!in_array($_SESSION['groupRM']['groupId'],$CFG['default']['airlinesGroupId']) && $_IresizeType==1) 
			{
				$this->_OobjResponse->script('Ext.Msg.alert("Error","'.$this->_Osmarty->getConfigVars('COMMON_GROUP_RESIZE_NOT_ALLOWED').'");');
				return false;
			}
		}
		
		//Check the group change request is already in process or not for that request
		if($this->_groupChangeRequestStatusCheck($_IrequestMasterId,$_IseriesRequestId,$_IrequestApprovedFlightId,$_Spnr)==true)
		{
			if(in_array($_SESSION['groupRM']['groupId'],$CFG['default']['airlinesGroupId']))
				$this->_OobjResponse->script('Ext.Msg.alert("Error","'.$this->_Osmarty->getConfigVars('COMMON_GROUP_RESIZE_UNDER_PROCESS').'");');
			else
				$this->_OobjResponse->call("commonObj.showErrorMessage",$this->_Osmarty->getConfigVars("COMMON_GROUP_RESIZE_UNDER_PROCESS"));
			return false;
		}
		
		//Check the minimum date to raise the downsize
		if($_IresizeType!="")
		{
			if($_IseriesRequestId!=0)
			{
				if($this->_checkDownsizeMinimumDate($_IseriesRequestId)!="Y" && $_IresizeType==1)
				{
					if(in_array($_SESSION['groupRM']['groupId'],$CFG['default']['airlinesGroupId']))
						$this->_OobjResponse->script('Ext.Msg.alert("Error","'.str_replace("%S",$this->_getResizeSettings('downsize','downsizeDepartureCheck',$_IrequestMasterId),$this->_Osmarty->getConfigVars('COMMON_SORRY_DOWNSIZE_PERFORMED_DAYS_TO_DEPARTURE')).'");');
					else
						$this->_OobjResponse->call("commonObj.showErrorMessage",str_replace("%S",$this->_getResizeSettings('downsize','downsizeDepartureCheck',$_IrequestMasterId),$this->_Osmarty->getConfigVars('COMMON_SORRY_DOWNSIZE_PERFORMED_DAYS_TO_DEPARTURE')));
					return false;
				}
			}
		}
		
		//Check the request status to the resize is allowed or not
		$_AresizeRestrict = $this->_getResizeSettings('restrictResizeStatus','',$_IrequestMasterId);
		array_push($_AresizeRestrict,$this->_getCurrentStatusId('RM')); 
		if(in_array($_IcurrentStatus,$_AresizeRestrict))
		{ 
			$statusName = $this->_Osmarty->getConfigVars('COMMON_STATUS_DETAILS_'.$_IcurrentStatus);
			$msg = $this->_Osmarty->getConfigVars('COMMON_PERFORMED_ACTION_NOT_ALLOWED').$statusName;
			if(in_array($_SESSION['groupRM']['groupId'],$CFG['default']['airlinesGroupId']))
				$this->_OobjResponse->script('Ext.Msg.alert("Error","'.$msg.'");');
			else
				$this->_OobjResponse->call("commonObj.showErrorMessage",$msg);
			return false;
		}
                # The below condition was added to stop TA from raising DS request if payment validity of any installment is expired.
		if(!in_array($_SESSION['groupRM']['groupId'],$CFG["default"]["airlinesGroupId"]))
		{
			if($_Spnr != '' && strstr($_Spnr,"GROUP")===FALSE)
                        {    
                            $sqlPnrPaymentValidityDate = "SELECT pnr_payment_validity_date FROM pnr_payment_details WHERE pnr = '".$_Spnr."' AND payment_status = '".'PENDING'."'";
                            $msg = $this->_Osmarty->getConfigVars('COMMON_PAYMENT_TIME_LIMIT');
                            if(DB::isError($resultPnrPaymentValidityDate=$this->_Oconnection->query($sqlPnrPaymentValidityDate)))
                            {
                                            fileWrite($sqlPnrPaymentValidityDate,"SqlError","a");
                                            return false;
                            }
                            if($resultPnrPaymentValidityDate->numRows() >0)
                            {
                                    $pnrPaymentDate = $resultPnrPaymentValidityDate->fetchRow(DB_FETCHMODE_ASSOC);
                                    $_DcurrentDate = $this->_getUTCDateValue();
                                    $dateDifference = $this->_dateDifference($pnrPaymentDate['pnr_payment_validity_date'],$_DcurrentDate);
                                    if($dateDifference['seconds'] > 0)
                                    {
                                            $this->_OobjResponse->script('Ext.Msg.alert("Error","'.$msg.'");');
                                            return false;
                                    }
                            }
                        }    
		}
		return true;
	}
	
	/**
	 * @Author	: Manikumar 10/07/17
	 * @Modified By : --
	 * @Desc	: Fetch all the ssr from ssr management
	 * @Param	: 
	 * @Return type: Array
	 */
	function _getSSRListDetails($departureDate='',$ssrCodeIndex = "N",$_SSRCode = "")
	{
		global $CFG;
		$ssrListDetails = array();
		$condition='';
		if($departureDate!='')
			$condition=" AND (if(end_date='0000-00-00',(start_date <= date('".$departureDate."')),(date('".$departureDate."') BETWEEN start_date AND end_date)))";
		if($_SSRCode!='')
			$condition.= " AND sl.ssr_code = '".$_SSRCode."'";
		$sql="SELECT 
				sl.ssr_list_id,
				sl.ssr_category_id,
				sl.ssr_subcategory_id,
				sl.ssr_description,
				sl.ssr_code,
				scd.ssr_category_name
			FROM 
				".$CFG['db']['tbl']['ssr_list']." sl,
				".$CFG['db']['tbl']['ssr_category_details']." scd
			WHERE 
				scd.ssr_category_id=sl.ssr_category_id
				AND sl.display_status='Y' ".$condition."
				ORDER BY scd.ssr_category_id";
		if(DB::isError($result = $this->_Oconnection->query($sql))) 
		{
			fileWrite($sql,'SqlError','a+');
			return false;
		}

		while($row = $result->fetchRow(DB_FETCHMODE_ASSOC)) 
		{
			if($ssrCodeIndex=="Y")
				$ssrListDetails[$row['ssr_code']]=$row;
			else
				$ssrListDetails[]=$row;
		}
		return $ssrListDetails;
	}	

	
	/**
	 * @Author	: Manikumar 03/08/17
	 * @Modified By : --
	 * @Desc	: Get the current time of the given airport code
	 * @Param	: Airport code
	 * @Return type: String
	 */
	
	function _getAirportCurrentTime($airportCode)
	{
		global $CFG;
		$currentUtcTime=$this->_getUTCDateValue();
		$airportCurrentTime="";
		$sql="SELECT
					country_code,
					airport_code
				FROM
					".$CFG['db']['tbl']['airport_details']."
				WHERE
					airport_code='".$airportCode."'";

		if(DB::isError($result=$this->_Oconnection->query($sql)))
		{
			fileWrite($sql,"SqlError","a+");
			return false;
		}
		$currentStatus=0;
		if($result->numRows() >0)
		{
			$row=$result->fetchRow(DB_FETCHMODE_ASSOC);
			$countryCode=$row['country_code'];
			$airportTimeZone=$this->_getTimeZoneForCountry($countryCode);
			$timeZoneInterval=$airportTimeZone[0]['timeZone'];				
			$airportCurrentTime=$this->_getTimeZoneDateFormatValue($currentUtcTime,$timeZoneInterval);			
		}
		if($airportCurrentTime=="")
		{
			$airportCurrentTime=$currentUtcTime;
		}
		return $airportCurrentTime;
	}

	/*Get Corporate type id 
	 * input corporate id
	 * return corporate type id
	 */
	function _getCorporateTypeDetails($_IcorporateId)
	{
		global $CFG;
	
		$selectCorporateTyepId="SELECT 
								corporate_type_id
						FROM
						".$CFG['db']['tbl']['corporate_details']."
						WHERE
							corporate_id=".$_IcorporateId." limit 1";

		if(DB::isError($result = $this->_Oconnection->query($selectCorporateTyepId))) 
		{
			fileWrite($selectCorporateTyepId,'SqlError','a+');
			return false;
		}
		if($result->numRows() >0)
		{
			$_Arow=$result->fetchRow(DB_FETCHMODE_ASSOC);
			$_IcorporateTypeId=$_Arow['corporate_type_id'];
		}

		return $_IcorporateTypeId;
	}
	
	/**
	 * @Author	: Manikumar 20/08/17
	 * @Modified By : --
	 * @Desc	: Get the flight details for the pnr
	 * @Param	: PNR
	 * @Return type: Array
	 */
	function _getFlightDetailsForPNR($_Spnr,$_IrequestMasterId=0)
	{
		global $CFG;
		$_AFlightDetails = array();
		
		fileRequire("dataModels/class.pnrBlockingDetails.php");
		fileRequire("dataModels/class.requestApprovedFlightDetails.php");
		fileRequire("dataModels/class.viaFlightDetails.php");
		
		$_OpnrBlockingDetails = new pnrBlockingDetails();
		$_OpnrBlockingDetails->_Oconnection = $this->_Oconnection;
		$_OpnrBlockingDetails->__construct();
		$_OpnrBlockingDetails->_Spnr=$_Spnr;
		if($_IrequestMasterId!=0)
			$_OpnrBlockingDetails->_IrequestMasterId = $_IrequestMasterId;
		$_ApnrBlockingDetails=$_OpnrBlockingDetails->_selectPnrBlockingDetails();
		foreach($_ApnrBlockingDetails as $key=>$val)
		{
			$_OrequestApprovedFlightDetails = new requestApprovedFlightDetails();
			$_OrequestApprovedFlightDetails->_Oconnection = $this->_Oconnection;
			$_OrequestApprovedFlightDetails->__construct();
			$_OrequestApprovedFlightDetails->_IrequestApprovedFlightId=$val['request_approved_flight_id'];
			$_OrequestApprovedFlightDetails->_selectRequestApprovedFlightDetails();
			$_ArequestApprovedFlightDetails[$key]=$_OrequestApprovedFlightDetails->_ArequestApprovedFlightDetails[0];
			$_ArequestApprovedFlightDetails[$key]['pnrBlockingId']=$val['pnr_blocking_id'];
		}
		$i=0;
		
		$_OviaFlightDetails = new viaFlightDetails();
		$_OviaFlightDetails->_Oconnection = $this->_Oconnection;
		$_OviaFlightDetails->__construct();
		
		foreach($_ArequestApprovedFlightDetails as $flightKey=>$flightValue)
		{
			$_AFlightDetails[$i]=$flightValue;
			$_AFlightDetails[$i]['viaFlight'] = array();
			if($flightValue['stops']) {
				
				$_OviaFlightDetails->__construct();
				$_OviaFlightDetails->_IrequestApprovedFlightId = $flightValue['request_approved_flight_id'];
				$_AFlightDetails[$i]['viaFlight'] = $_OviaFlightDetails->_selectViaFlightDetails();
			}
			$i++;
		}
		
		return $_AFlightDetails;
	}

	/*
	 * @Author	: Prithiv 21/08/17
	 * @Modified By : -- 
	 * @Check valid date 
	 * @Input date as String
	 * @Return 1 => if not valid date, 0 = if date is valid
	 */
	function _isDate($_Sdate)
	{
		$_IdateValidStatus = 0;
		$_AparsedDate = date_parse($_Sdate); 
		if($_AparsedDate['error_count'] > 0 || $_AparsedDate['warning_count'] > 0)
			$_IdateValidStatus = 1;
		return $_IdateValidStatus;
	}

	/*
	 *@Author :Prabhu 22-08-2017
	 *@Add same tax code and tax amount
	 *@Input tax breakup as array
	 *@Return new tax breakup as array
	 */
	function _addTaxbreakup($taxBreakUp)
	{
		$tempArray=array();
		$newTaxBreakup=array();
		foreach($taxBreakUp as $key=>$value)
		{
			$tempArray[$value['taxCode']]+=$value['amount'];

		}
	
		$i=0;
		foreach($tempArray as $tempKey=>$tempValue)
		{
			$newTaxBreakup['tax'.$i]['taxCode']=$tempKey;
		       (!empty($decimalPrecision))?$newTaxBreakup['tax'.$i]['amount']=$this->_getRoundOffFare($tempValue,$decimalPrecision,$currencyCode) : $newTaxBreakup['tax'.$i]['amount']=$tempValue;
			$i++;
		}
		return $newTaxBreakup;
	}
	
	/**
	 * @Author	: Manikumar 05/09/17
	 * @Modified By : --
	 * @Desc	: Get the SSR total amount for all the PNR in the request
	 * @Param	: Request master id
	 * @Return type: Array
	 */
	function _getSSRTotalAmount($_IrequestMasterId,$_Spnr="",$_SinfantFlag='N',$_SincludeSSRVal='N') 
	{
		global $CFG;

		$_Svariable = $_IrequestMasterId.'_'.$_Spnr.'_'.$_SinfantFlag;
		fileRequire("classesTpl/class.tpl.divideRequestTpl.php");
		$this->_OtplDivideRequest = new divideRequestTpl();
		$this->_OtplDivideRequest->__construct();
		$this->_OtplDivideRequest->_Oconnection=$this->_Oconnection;
		//added for offline pnrmigration facing issue
		if($CFG['site']['skipStaticData']=='Y' || $this->_SskipSSRStaticData=='Y')
			$_AstaticData = false;
		else
			$_AstaticData = $this->_staticData("_getSSRTotalAmount",$_Svariable);

		if($_AstaticData !== false)
			return $_AstaticData;
		$_IssrTotalAmount = "N";
		if((isset($CFG['ssr']['SSRPayment']) && $CFG['ssr']['SSRPayment']['status']=='Y') && (isset($CFG['ssr']['SEATPayment']) && $CFG['ssr']['SEATPayment']['status']=='Y') && $_SincludeSSRVal!='Y')
			return $_IssrTotalAmount;
		$_getMultiplePnrArg=$_IrequestMasterId;
		if(isset($_IrequestMasterId['request_master_id'])){
			$_ArequestMasterId=$_IrequestMasterId;
			$_IrequestMasterId=$_ArequestMasterId['request_master_id'];
			$_getMultiplePnrArg=$_ArequestMasterId;
		}

		if($_Spnr && $_Spnr!="")
			$_Apnr[] = $_Spnr;
		else
			$_Apnr = explode(", ",$this->_getMultiplePnr($_getMultiplePnrArg));
		$cond='';
		if(isset($CFG['ssr']['SSRPayment']) && $CFG['ssr']['SSRPayment']['status']=='Y' && (!isset($CFG['ssr']['SEATPayment']) || (isset($CFG['ssr']['SEATPayment']) && $CFG['ssr']['SEATPayment']['status']!='Y')) && $_SincludeSSRVal!='Y')
			$cond=" AND ssr_category_id = 4 ";
		else if((!isset($CFG['ssr']['SSRPayment']) || (isset($CFG['ssr']['SSRPayment']) && $CFG['ssr']['SSRPayment']['status']!='Y')) && isset($CFG['ssr']['SEATPayment']) && $CFG['ssr']['SEATPayment']['status']=='Y' && $_SincludeSSRVal!='Y')
			$cond=" AND ssr_category_id != 4 ";
		foreach($_Apnr AS $_Spnr) {
			if(isset($_ArequestMasterId['ssr_master'])){
				if(sizeof($_ArequestMasterId['ssr_master'])>0&&$_IssrTotalAmount=="N"){
					$_IssrTotalAmount = 0;
				}
				foreach ($_ArequestMasterId['ssr_master'] as $ssrMasterValue) {
					if($ssrMasterValue['pnr']==$_Spnr&&$ssrMasterValue['last_transaction']=="Y"&&$ssrMasterValue['status']=="COMPLETED"&&$ssrMasterValue['request_master_id']==$_IrequestMasterId){
						$_IssrTotalAmount +=$ssrMasterValue['ssr_amount'];
					}
				}
			}else{	
				$sql = "SELECT
							ssr_amount,
							ssr_master_id
						FROM ".$CFG['db']['tbl']['ssr_master']."
						WHERE request_master_id = ".$_IrequestMasterId."
						AND pnr = '".$_Spnr."'
						AND last_transaction = 'Y'
						AND status = 'COMPLETED'".$cond;

				if(DB::isError($result = $this->_Oconnection->query($sql))) 
				{
					fileWrite($sql,'SqlError','a+');
					return false;
				}
				if($result->numRows() >0)
				{
					//If ssr row found, intialize the amout as 0
					if($_IssrTotalAmount=="N")
						$_IssrTotalAmount = 0;
					while($row = $result->fetchRow(DB_FETCHMODE_ASSOC)) 
					{
						$_IssrInfantAmount=0;
						if($_SinfantFlag=='Y')
						{
							$sqlSsrDetails = "SELECT
													ssr_total_fare
											  FROM 
											  		".$CFG['db']['tbl']['ssr_details']."
											  WHERE ssr_master_id =".$row['ssr_master_id']."
											  		AND ssr_code = 'INFT'
											  		AND ssr_status='COMPLETED'";											  		
							if(DB::isError($resultSsrDetails = $this->_Oconnection->query($sqlSsrDetails))) 
							{
								fileWrite($sqlSsrDetails,'SqlError','a+');
								return false;
							}
							if($resultSsrDetails->numRows() >0)
							{
								while($rowSsrDetails = $resultSsrDetails->fetchRow(DB_FETCHMODE_ASSOC))
								{
									$_IssrInfantAmount += $rowSsrDetails['ssr_total_fare'];
								}
							}
						}
						$_IssrTotalAmount += $row['ssr_amount'];
						$_IssrTotalAmount = $_IssrTotalAmount - $_IssrInfantAmount;
					}
				}	
			}
		}
		if($_IssrTotalAmount!="N")
			$_IssrTotalAmount = $this->_getRoundOffFare($_IssrTotalAmount);
			$this->_staticData("_getSSRTotalAmount",$_Svariable,$_IssrTotalAmount);

		return $_IssrTotalAmount;
	}

	/**
	 * @Author	: selvakumar 21/09/17
	 * @Modified By : --
	 * @Desc	: return ssr_master_id for the given request_master_id
	 * @Param	: Request master id, pnr
	 * @Return type: Array
	 */
	function _getSsrMaster($requestMasterId,$_Spnr = '')
	{
		global $CFG;
		$_AreturnArray = array();
		$sqlSelectSSRMasterId="SELECT
									ssr_master_id,
									ssr_updated_date
								FROM
									".$CFG['db']['tbl']['ssr_master']."
								WHERE
									request_master_id='".$requestMasterId."'
									AND last_transaction ='Y' 
									AND status = 'COMPLETED'";
		if($_Spnr != '')
			$sqlSelectSSRMasterId .= " AND pnr = '".$_Spnr."'";
		if(DB::isError($resultSelectSSRMasterId=$this->_Oconnection->query($sqlSelectSSRMasterId)))
		{
			fileWrite($sqlSelectSSRMasterId,"SqlError","a+");
			return false;
		}
		if($resultSelectSSRMasterId->numRows() > 0)
		{
			while($rowSelectSSRMasterId=$resultSelectSSRMasterId->fetchRow(DB_FETCHMODE_ASSOC))
			{
				$_AreturnArray[] = $rowSelectSSRMasterId;
			}
			return $_AreturnArray;
		}
		return false;
	}
	/* Description : To set the cookie.Give cookie name and cookie value to set the cookie
	 * Input : cookie name ,cookie value
	 * Output: This function set the cookie */
	
	function _setCookie($_cookieName,$_cookieValue,$_cookieExpiryTimeLimit=null,$httponly=true, $samesite='Strict')
	{
		/* options for setcookie added only above 7.3.0 */
		$_BisSecure = (isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] == "on") ? true : null;
		$domain=NULL;	
		if(PHP_VERSION_ID >= 70300  ){
			/* To secure the session cookie securely when the https connection available */
			$_Aoptions = array(
					'expires'=> $_cookieExpiryTimeLimit,
					'path'=>'/',
					'domain'=>NULL,
					'secure'=>$_BisSecure,
					'httponly'=>$httponly,
					'samesite'=>$samesite
					);
			setcookie($_cookieName, $_cookieValue, $_Aoptions);
			return true;
		}
		/* php-version < 7.3.0 */
		setcookie($_cookieName, $_cookieValue, $_cookieExpiryTimeLimit, '/; samesite=Strict', null, $_BisSecure, $httponly);
		return true;
		
	}
	/* Description : To remove the cookie.Give cookie name to remove the cookie
	 * Input : cookie name 
	 * Output: This function remove the cookie */
	function _removeCookie($_cookieName)
	{
		setcookie($_cookieName, '', time()-3600,'/',"",false,true);
	}
	/*
	 * Function name : _getMappedRequestApprovedFlightId
	 * Description	 :	This function will return request_approved_flight_id as mapped_request_approved_flight_id 
	 * 					using by mapped_series_request_id
	 * Created by : Selvakumar.S
	 * Create date : 27-11-2017
	 */
	function _getMappedRequestApprovedFlightId($_IrequestApprovedFlightId)
	{
		global $CFG;
		$_AflightDetailsMapping = array();
		$sql = "SELECT
				rafd.request_approved_flight_id as mapped_request_approved_flight_id
			FROM
				".$CFG['db']['tbl']['request_approved_flight_details']." rafd,
				".$CFG['db']['tbl']['series_request_details']." srd
			WHERE 
				rafd.series_request_id = srd.series_request_id AND
				rafd.request_approved_flight_id = ".$_IrequestApprovedFlightId." AND
				srd.mapped_series_request_id != 0";
		if(DB::isError($result = $this->_Oconnection->query($sql)))
		{
			fileWrite($sql,"SqlError","a+");
			return false;
		}
		
		if ($result->numRows() > 0)
		{
			while($row=$result->fetchRow(DB_FETCHMODE_ASSOC))
			{
				$_AflightDetailsMapping[] = $row;
			}
		}
		return $_AflightDetailsMapping;
	}
	/*
	 * To get the load factor details and check whether load factor type is enabled for the policy
	 * Give $_loadFactorType as empty to get all load factor details
	 * Give policy name and $_loadFactorType to check whether that load factor type is enabled for the policy
	*/
	function _getLoadFactorTypeDetails($policyName,$_loadFactorType='')
	{
		fileRequire("dataModels/class.loadFactorTypeDetails.php");
		$_ObjLoadFactorTypeDetails=new loadFactorTypeDetails();
		$_ObjLoadFactorTypeDetails->_Oconnection=$this->_Oconnection;	
		$_ObjLoadFactorTypeDetails->__construct();	
		
		if($_loadFactorType=='')
		{
			$_ObjLoadFactorTypeDetails->$policyName='Y';
			$_AloadFactorTypeDetails=$_ObjLoadFactorTypeDetails->_selectLoadFactorTypeDetails();
			$_AloadFactorTypeDetailsArray=array();
			foreach($_AloadFactorTypeDetails as $key=>$values)
			{
				$_AloadFactorTypeDetailsArray[$key]['loadFactorTypeId']=$values['load_factor_type'];
				$_AloadFactorTypeDetailsArray[$key]['loadFactorTypeName']=$values['load_factor_type_name'];
			}
			return $_AloadFactorTypeDetailsArray;
			
		}
		else
		{
			$_ObjLoadFactorTypeDetails->$policyName='Y';
			$_ObjLoadFactorTypeDetails->_SloadFactorType=$_loadFactorType;
			$_AloadFactorTypeDetails=$_ObjLoadFactorTypeDetails->_selectLoadFactorTypeDetails();
			if($_ObjLoadFactorTypeDetails->_IcountLoop==0)
				return 'N';
			else
				return 'Y';
		}
		
	}
	/*To get country code detail based on POS
	 * Input POS code
	 * Output Country code
	 * */
	function _getPOSCountryDetail($posCode)
	{
		global $CFG;
		$countryCode='';
		$selectPOSCountry="SELECT
								cd.citizen_code as countryCode
						   FROM
								".$CFG['db']['tbl']['citizenship_details']."  cd,
								".$CFG['db']['tbl']['pos_details']." pd
						   WHERE
							    cd.citizen_code=pd.pos_country
							AND pd.pos_code='".$posCode."'";
		if(DB::isError($result = $this->_Oconnection->query($selectPOSCountry)))
		{
			fileWrite($selectPOSCountry,"SqlError","a+");
			return false;
		}
		
		if ($result->numRows() > 0)
		{
			$row=$result->fetchRow(DB_FETCHMODE_ASSOC);
			$countryCode=$row['countryCode'];
		}
		return $countryCode;
	}
	/* To check the given sectors or given request is international or domastic and return the fare type
	 * input : requestMasterId,requestTripName,bargainFinderFareFlag
	 * 
	 * */
	function _checkTripLevelFare($_AinputArray)
	{
		global $CFG;
		$_StripFareStatusArray=array();
		$_Skey = $_AinputArray['requestMasterId'].'_'.$_AinputArray['requestTripName'];
		//Checks from static array
		$_AstaticData = $this->_staticData('_checkTripLevelFare',$_Skey);
		if($_AstaticData !== false)
			$_StripFareStatusArray = $_AstaticData;
		else
		{
			$_StripFareStatusArray['tripFareStatus']="N";
			if(!empty($_AinputArray))
			{
				fileRequire("classes/class.requestModifyDetails.php");
				$this->_OrequestModifyDetails = new requestModifyDetails();
				$this->_OrequestModifyDetails->__construct();
				$this->_OrequestModifyDetails->_Oconnection = $this->_Oconnection;
				$this->_OrequestModifyDetails->_Osmarty = $this->_Osmarty;
				$this->_OrequestModifyDetails->_OobjResponse = $this->_OobjResponse;
				$this->_OrequestModifyDetails->_IrequestMasterId  = $_AinputArray['requestMasterId'];
				$this->_OrequestModifyDetails->_getModifyRequestDetails();
				$this->_ArequestMasterHistory = $this->_OrequestModifyDetails->_ArequestMasterHistory[0];
				if(count($this->_ArequestMasterHistory) > 0)
				{
					$this->_ArequestDetailsHistory=$this->_OrequestModifyDetails->_ArequestDetailsHistory;
					fileRequire("dataModels/class.requestDetailsHistory.php");
					$_OrequestDetailsHistory=new requestDetailsHistory();
					$_OrequestDetailsHistory->_Oconnection=$this->_Oconnection;
					$_OrequestDetailsHistory->_IrequestMasterHistoryId = $this->_ArequestMasterHistory['request_master_history_id'];
					if($_AinputArray['requestTripName']!='')
						$_OrequestDetailsHistory->_StripName = $_AinputArray['requestTripName'];
					$_AsectorValue=array();
					$_AsectorValue = $_OrequestDetailsHistory->_selectRequestDetailsHistory();
				}
				else
				{
					fileRequire("dataModels/class.requestDetails.php");
					$_OrequestDetails=new requestDetails();
					$_OrequestDetails->_Oconnection=$this->_Oconnection;
					$_OrequestDetails->_IrequestMasterId = $_AinputArray['requestMasterId'];
					if($_AinputArray['requestTripName']!='')
						$_OrequestDetails->_StripName = $_AinputArray['requestTripName'];
					$_AsectorValue=array();
					$_AsectorValue = $_OrequestDetails->_selectRequestDetails();
				}
				$_Sinternational = $this->_getTarvelType($_AsectorValue,'origin_airport_code','dest_airport_code',$_AinputArray['bargainFinderFareFlag']);
				if(isset($_AsectorValue[0]['trip_type']) && $_AsectorValue[0]['trip_type']!='')
					$_StripType = $_AsectorValue[0]['trip_type'];
				else
					$_StripType = $this->_getTripType($_AinputArray['requestMasterId']);
				
				
				//Get Trip type
				if(($_StripType == 1) || ($_StripType == 'O'))
					$_StripType = 'OW';
				elseif(($_StripType == 2) || ($_StripType == 'R'))
					$_StripType = 'RT';
				elseif(($_StripType == 3) || ($_StripType == 'M'))
					$_StripType = 'MC';
				
				$_StripFareStatusArray['tripType']=$_StripType;
				$_StripFareStatusArray['travelType'] = 'domestic';
				if($_Sinternational == 'I')
					$_StripFareStatusArray['travelType'] = 'international';
				if(((($CFG['limit']['tripFareTravelType'] == 'Y') || ($CFG['limit']['tripFareTravelType'] == $_Sinternational)) && (in_array($_StripType,$CFG['settings']['bargainFinderTripTypes']))) )
					$_StripFareStatusArray['tripFareStatus']="Y";

				$this->_staticData('_checkTripLevelFare',$_Skey,$_StripFareStatusArray);
			}
		}
		return $_StripFareStatusArray;
	}
	
	/**
	 * Author : Chithra S
	 * Desc : Get the customer category details
	 * Created on : 15-05-2023
	**/
	function _getCustomerCategory()
	{
		
		$_StableName = 'customer_category';
		$_AselectField = array(
			'customer_category_id',
			'customer_category_name',
		);
		$_AconditionValue = array(
			'status' => 'Y'
		);
		$_AcustomerCategory = $this->_Oconnection->_performQuery($_StableName,$_AselectField,'DB_AUTOQUERY_SELECT',$_AconditionValue);
		return 	$_AcustomerCategory;
	}
        
	/**
	 * Added for fare Class policy copied function from navitaire
	 * @global type $CFG
	 * @param type $allValue
	 * @return boolean
	 * @AuthorL:- Vishwa Raj
	 */
    function _getFareClassType($allValue='N',$_SfareTypeCode='')
	{
            global $CFG;
		$this->_AfareClass=array();
                
		$sqlSelectRequestType="SELECT 
                                                fare_class_id,
                                                fare_class_name 
                                        FROM 
                                                ".$CFG['db']['tbl']['fare_class_master']." 
                                        WHERE 
                                                active_status='Y'
									    AND     policy_type_code = '".$_SfareTypeCode."'
										AND     ('".$this->_getUTCDateValue()."' BETWEEN start_date AND end_date)";

									
		
		if(DB::isError($resultSelectRequestType=$this->_Oconnection->query($sqlSelectRequestType)))
		{
			fileWrite($sqlSelectRequestType,"SqlError","a+");
			return false;
		}
                $i=0;
		if($allValue=='Y')
		{
			$this->_AfareClass[$i]['fare_class_id']='A';
			$this->_AfareClass[$i]['fare_class_name']='ALL';
			
			$i++;
		}
		
		if($resultSelectRequestType->numRows() >0)
		{
			while($rowSelectRequestType=$resultSelectRequestType->fetchRow(DB_FETCHMODE_ASSOC))
			{
				$this->_AfareClass[]=$rowSelectRequestType;
			}
		}
                
		return 	$this->_AfareClass;
	}

       /**
         * 
         * Added to get the request approved flight details by pnr or request master id
         * @param : $requestMasterId,pnr
         * @return : Array
         * @Author : Deepraj Singh Rajawat
         */
  	 function _getRequestApprovedFlightDetails($requestMasterId,$pnr='',$transactionMasterId=0,$_IseriesRequestId = 0,$_SacceptedFlightStatus='')
	 {
	 	global $CFG;
		$_Scond = '';
		$this->_ArequestApprovedflightIds = array();
		if($requestMasterId != '')
		{
			$_Scond = " AND request_master_id = ".$requestMasterId;
			$_IairlineRequestId=$this->_getAirlineRequestId($requestMasterId);
		}
		if($pnr != '')
		{		#Getting all requestApprovedFlightId's with corrosponding PNR 
				$sql="SELECT
							request_approved_flight_id
					  FROM
							".$CFG['db']['tbl']['pnr_blocking_details']."
					  WHERE
							pnr = '".$pnr."'".$_Scond;
				if(DB::isError($result=$this->_Oconnection->query($sql)))
				{
					fileWrite($sql,"sqlErrorCommon.php","a+");
					return false;
				}
				$index=0;
				while($row=$result->fetchRow(DB_FETCHMODE_ASSOC))
				{
					$this->_ArequestApprovedflightIds[]=$row['request_approved_flight_id'];
					$index++;
				}
			
		}
		#Getting pax details by airline request id or _ArequestApprovedFlightId
		fileRequire("dataModels/class.requestApprovedFlightDetails.php");
		$_OrequestApprovedFlightDetails =new requestApprovedFlightDetails;
		$_OrequestApprovedFlightDetails->_Oconnection = $this->_Oconnection;
		if($_IairlineRequestId != '')
		{
			$_OrequestApprovedFlightDetails->_IairlinesRequestId = $_IairlineRequestId;
		}	
		if(!empty($this->_ArequestApprovedflightIds))
		{
			$_OrequestApprovedFlightDetails->_ArequestApprovedFlightId = $this->_ArequestApprovedflightIds;
		}
		if(!empty($transactionMasterId))
		{
			$_OrequestApprovedFlightDetails->_ItransactionMasterId = $transactionMasterId;
		}
		if($_IseriesRequestId>0)
			$_OrequestApprovedFlightDetails->_IseriesRequestId = $_IseriesRequestId;
		if($_SacceptedFlightStatus!='')
			$_OrequestApprovedFlightDetails->_SacceptedFlightStatus = 'Y';
		$this->_AapproveFlightDetails = $_OrequestApprovedFlightDetails->_selectRequestApprovedFlightDetails();
		return $this->_AapproveFlightDetails;		
	}

	   /**
         * 
         * function to get the pax Details with format(same format needed To pass in getBooking Service as request)
         * @param : $_AapproveFlightDetails,userCurrency
         * @return : Array
         * @Author : Deepraj Singh Rajawat
         */
  	function _getPaxDetailsWithFormat($_AapproveFlightDetails,$userCurrency,$_Spnr='', $_AserviceValue=array())
	{
		global $CFG;
		$this->_AneededPaxDetails = array();
		$_ApnrPaxDetails=array();
		#To get pax count for that pnr
		if($_Spnr!='')
		{
			$_ApnrPaxDetailsArray=array();
			fileRequire("dataModels/class.pnrBlockingDetails.php");
			$_OpnrBlockingDetails = new pnrBlockingDetails;
			$_OpnrBlockingDetails->_Oconnection = $this->_Oconnection;
			$_OpnrBlockingDetails->_Spnr = $_Spnr;
			$_ApnrPaxDetailsArray=$_OpnrBlockingDetails->_selectPnrBlockingDetails();
			foreach($_ApnrPaxDetailsArray as $key=>$values)
			{
				$_ApnrPaxDetails[$values['request_approved_flight_id']]['no_of_adult']=$values['no_of_adult'];
				$_ApnrPaxDetails[$values['request_approved_flight_id']]['no_of_child']=$values['no_of_child'];
				$_ApnrPaxDetails[$values['request_approved_flight_id']]['no_of_infant']=$values['no_of_infant'];
			}
		}
		
		#Forming the pax array as per needed for the service's request 
		foreach ($_AapproveFlightDetails as $key => $value) 
		{
			if($value['no_of_adult'] > 0)	
			{
				$this->_AneededPaxDetails[0]['paxType'] = 'ADT';
				$this->_AneededPaxDetails[0]['paxCount'] = $value['no_of_adult'];
				if(isset($_ApnrPaxDetails[$value['request_approved_flight_id']]))
					$this->_AneededPaxDetails[0]['paxCount'] = $_ApnrPaxDetails[$value['request_approved_flight_id']]['no_of_adult'];
				$adultBaseFare += $value['base_fare'] ;
				$adultTax += $value['tax'] ;
				$this->_AneededPaxDetails[0]['baseFare']=$this->_getRoundOffFare($adultBaseFare,2,$userCurrency);
				$this->_AneededPaxDetails[0]['taxAmount']=$this->_getRoundOffFare($adultTax,2,$userCurrency);
			}

			if($value['no_of_child'] > 0)	
			{

				$this->_AneededPaxDetails[1]['paxType'] = 'CHD';
				$this->_AneededPaxDetails[1]['paxCount'] = $value['no_of_child'];
				if(isset($_ApnrPaxDetails[$value['request_approved_flight_id']]))
					$this->_AneededPaxDetails[1]['paxCount'] = $_ApnrPaxDetails[$value['request_approved_flight_id']]['no_of_child'];
				$childBaseFare += $value['child_base_fare'] ;
				$childTax += $value['child_tax'] ;
				$this->_AneededPaxDetails[1]['baseFare']=$this->_getRoundOffFare($childBaseFare,2,$userCurrency);
				$this->_AneededPaxDetails[1]['taxAmount']=$this->_getRoundOffFare($childTax,2,$userCurrency);
			}

			if($value['no_of_infant'] > 0)	
			{
				$this->_AneededPaxDetails[2]['paxType'] = 'INF';
				$this->_AneededPaxDetails[2]['paxCount'] = $value['no_of_infant'];
				if(isset($_ApnrPaxDetails[$value['request_approved_flight_id']]))
					$this->_AneededPaxDetails[2]['paxCount'] = $_ApnrPaxDetails[$value['request_approved_flight_id']]['no_of_infant'];
				$infantBaseFare += $value['infant_base_fare'] ;
				$infantTax += $value['infant_tax'] ;
				$this->_AneededPaxDetails[2]['baseFare'] =$this->_getRoundOffFare($infantBaseFare,2,$userCurrency);
				$this->_AneededPaxDetails[2]['taxAmount'] = $this->_getRoundOffFare($infantTax,2,$userCurrency);

			}
			if($CFG["settings"]["freeOfCost"]['nameUpdate']=='Y' && $value['free_cost_count'] > 0)	
			{				
				$_AgetFocAdtChdCount=$this->_getFocPaxDetails($_AapproveFlightDetails[0]['airlines_request_id'],$_Spnr);
				foreach ($_AgetFocAdtChdCount['pax_type'] as $key => $value) {
					if($_AgetFocAdtChdCount['pax_type'][$key]=='Adult')
					{
						$this->_AneededPaxDetails[3]['paxType'] = 'ADTFOC';
						$this->_AneededPaxDetails[3]['paxCount'] =  $_AgetFocAdtChdCount['adtFocCount'];
						//if(isset($_ApnrPaxDetails[$value['request_approved_flight_id']]))
							//$this->_AneededPaxDetails[3]['paxCount'] = $_ApnrPaxDetails[$value['request_approved_flight_id']]['no_of_infant'];
						$focBaseFare ='0.00';
						$focTax = $_AapproveFlightDetails[0]['foc_tax'];
						$this->_AneededPaxDetails[3]['baseFare'] =$this->_getRoundOffFare($focBaseFare,2,$userCurrency);
						$this->_AneededPaxDetails[3]['taxAmount'] = $this->_getRoundOffFare($focTax,2,$userCurrency);

					}
					if($_AgetFocAdtChdCount['pax_type'][$key]=='Child')
					{
						$this->_AneededPaxDetails[4]['paxType'] = 'CHDFOC';
						$this->_AneededPaxDetails[4]['paxCount'] = $_AgetFocAdtChdCount['chdFocCount'];
						//if(isset($_ApnrPaxDetails[$value['request_approved_flight_id']]))
							//$this->_AneededPaxDetails[3]['paxCount'] = $_ApnrPaxDetails[$value['request_approved_flight_id']]['no_of_infant'];
						$focBaseFare ='0.00';
						$focTax = $_AapproveFlightDetails[0]['foc_tax'];
						$this->_AneededPaxDetails[4]['baseFare'] =$this->_getRoundOffFare($focBaseFare,2,$userCurrency);
						$this->_AneededPaxDetails[4]['taxAmount'] = $this->_getRoundOffFare($focTax,2,$userCurrency);

					}
				}	
				
			}
		} 
		
		if($CFG["limit"]["paymentCurrencyConversion"]["currencyConvertedTaxInformation"]=='Y' && !empty($_AserviceValue)){
			foreach($_AserviceValue as $_Avalue){
				foreach($this->_AneededPaxDetails as &$_ApaxValue){
					if($_ApaxValue['paxType'] == $_Avalue['paxType']){
						$_ApaxValue['taxAmount'] = 0;
						$_ApaxValue['baseFare'] = $_Avalue['baseFare'];
						foreach($_Avalue['taxBreakUp'] as $_AsubValue){
							$_ApaxValue['taxAmount']+= $_AsubValue['amount'];
						}
						$_ApaxValue['taxAmount'] = $this->_getRoundOffFare($_ApaxValue['taxAmount'],2,$userCurrency);
					}
				}
			}
		}
		return $this->_AneededPaxDetails;
	}

	 /**
	 * @Description :- Retrieving fare class policy name
         * @global type $CFG
         * @param  int fareclass_id
         * @return fareclass policy name
         * @Author:- Babu Siva
	 * */
	function _getFareClassPolicyName($_fareClassId)
	{
		global $CFG;
		$sql = "SELECT
					fare_class_policy_name
				FROM 
					".$CFG['db']['tbl']['fare_class_policy_master']."
				WHERE
					fare_class_policy_id = '".$_fareClassId."'
				LIMIT 1";
		if(DB::isError($result = $this->_Oconnection->query($sql))) 
		{
			fileWrite($sql,"SqlError","a+");
			return false;
		}
		if($result->numRows() >0)
		{
			$row = $result->fetchRow(DB_FETCHMODE_ASSOC);
			return $row['fare_class_policy_name'];
		}
		return '';
	}
    /*
     * 
     * @Description :function to get the Total no of pax for series and confrence previous function was giving tatal pax two times greater.
     * @param : $requestMasterId
     * @return : Array of no of pax 
     * @Author : Deepraj Singh Rajawat
     */
	function _getTotalpassengerCount($requestMasterId)
	{	
		global $CFG;
		#getting the total no of pax to display.
		#Removed GROUP by rafd.request_approved_flight_id (To get pax count for all pnrs in split pnrs)
		$fetchTotalPax=   "SELECT 
							pbd.no_of_adult as adult,
							pbd.no_of_child as child,
							pbd.no_of_foc as foc,
		            		pbd.no_of_infant as infant
				 	    FROM 
							".$CFG['db']['tbl']['pnr_blocking_details']." pbd, 
							".$CFG['db']['tbl']['request_approved_flight_details']." rafd,
							".$CFG['db']['tbl']['series_request_details']." srd 
						WHERE 
							pbd.request_master_id=".$requestMasterId." 
						AND 
							pbd.request_approved_flight_id=rafd.request_approved_flight_id 
						AND 
							rafd.series_request_id=srd.series_request_id 
						AND 
							srd.mapped_series_request_id=0
						AND 
							pbd.status!='Closed'";
		return $this->_executeQuery($fetchTotalPax);
	}
	  /*
     * 
     * @Description :function to get the emd details and if Tax recalculated emd is there then tax Recalcalculated emd on zero (0) index because if last emd payment will be less than a pax fare then ticket would not issue..
     * @param : $_Spnr
     * @return : Array of emd details 
     * @Author : Deepraj Singh Rajawat
     */
	function _getEmdDetailsWithTaxRecalculationFormat($_Spnr,$_IrequestMasterId)
	{	
		global $CFG;
		$this->_AemdDetail = array();
		$_Sfield=$_table=$_condition='';
		if($CFG['site']['doubleBilling']['status'] != 'Y')
		{
			$_Sfield="em.emd_id ,
				   em.issued_document_number,
				   em.emd_amount,";
			$_table = $CFG['db']['tbl']['emd_details']." em,";
			$_condition =" AND em.pnr_payment_id=ppd.pnr_payment_id AND
						em.emd_status !=26 ";
		}
		#Get airlines request id
		$_IairlineRequestId=$this->_getAirlineRequestId($_IrequestMasterId);

		#Getting emd details start
		#Getting emd details for any Pnr and tax Recalculation time emd with remark as tax recalculate
		$sqlEmdDetail = "SELECT
						".$_Sfield."
						 pm.payment_remarks,
						 ppd.group_pax_paid
					FROM
						".$_table.					
						$CFG['db']['tbl']['pnr_payment_details']." ppd,
						".$CFG['db']['tbl']['payment_master']." pm
					WHERE 
						ppd.payment_master_id=pm.payment_master_id 
					AND 
						ppd.payment_status='APPROVED' "
					.$_condition."					
					AND
						 ppd.pnr='".$_Spnr."'
					AND
						pm.airlines_request_id=".$_IairlineRequestId." ";

		if(DB::isError($resultEMdDetail = $this->_Oconnection->query($sqlEmdDetail)))
		{
			fileWrite($sqlEmdDetail,"SqlError","a+");
			return false;
		}
	
		if ($resultEMdDetail->numRows() > 0)
		{
			while($row=$resultEMdDetail->fetchRow(DB_FETCHMODE_ASSOC))
			{
				//Exploded the additional tax data from payment remarks in payment_master
				$temp=explode("#",$row['payment_remarks']);
				$row['payment_remarks'] = $temp[0];
				$this->_AemdFullDetail[] = $row;
			}
			#Geting The tax recalculated time payment's emd
			$taxRecalculatedEMD = $this->multiArraySearch('Tax recalculated',$this->_AemdFullDetail,'payment_remarks');
			
			#Geting The tax recalculated time payment's emd details and pushing into new array
			if($taxRecalculatedEMD > -1)
			{
				$_AtaxRecalculatedEmdDetails[] = $this->_AemdFullDetail[$taxRecalculatedEMD];
				unset($this->_AemdFullDetail[$taxRecalculatedEMD]);
			}
			
			//For passenger wise payment we need not to sum up the tax re calculated amount, so unset the tax re calculated EMD & add it in endorsement
			if($CFG['payment']['updateGroupSizePercent'] == 'Y')
			{
				$this->_AemdDetail['taxEmd'] = $_AtaxRecalculatedEmdDetails;
				$this->_AemdDetail['depositEmd'] = $this->_AemdFullDetail;
				return $this->_AemdDetail;
			}
			
			#If tax recalculated time payment's emd details is there then merging it on zero'th (0) index 
			if(!empty($_AtaxRecalculatedEmdDetails))				
			{
				$this->_AemdDetail['depositEmd'] = array_merge($_AtaxRecalculatedEmdDetails,$this->_AemdFullDetail);
			}
			#else assignig all emd details to a single array 		
			else
			{
				$this->_AemdDetail['depositEmd'] = $this->_AemdFullDetail;
			}
		}
			
		return $this->_AemdDetail;
	}
	
	/*
	 * To get status details
	 * Modified : When the $_AstatusCode is an array its imploded and set as $_Skey
	 * */ 
	 function _getStatusDetails($_SstatusCode = '',$_AstatusCode = array())
	 {
	 	global $CFG;
	 	$_Skey = $_SstatusCode . '_' . implode(',',$_AstatusCode);
		$_AstaticData = $this->_staticData("_getStatusDetails", $_Skey);
		if ($_AstaticData !== false) {
			return $_AstaticData;
		}
	 	$this->_AstatusDetails = array();
		if($_SstatusCode != '')
		{
			if(!empty($CFG["status"])){
	 			$this->_AstatusDetails=array("status_id"=>$this->_getCurrentStatusId($_SstatusCode));
	 		}else{
		 		fileRequire("dataModels/class.statusDetails.php");	
				$this->_OstatusDetails  = new statusDetails;
				$this->_OstatusDetails->_SstatusCode = $_SstatusCode;
				$this->_OstatusDetails->_Oconnection = $this->_Oconnection;
				$this->_OstatusDetails->_SbackEnd = 'Y';
				$this->_AstatusDetails = $this->_OstatusDetails->_selectStatusDetails();
				$this->_AstatusDetails = $this->_AstatusDetails[0];
			}
		}
		else if(count($_AstatusCode) > 0)
		{
			
			$sqlSelectStatusArray="SELECT * FROM status_details
						WHERE status_code IN ('".implode( "', '",$_AstatusCode)."')";
			if(DB::isError($result=$this->_Oconnection->query($sqlSelectStatusArray)))
			{
				fileWrite($sqlSelectStatusArray,"SqlError","a+");
				return false;
			}
			$_IcurrentStatus = 0;
			if($result->numRows() >0)
			{
				while($row=$result->fetchRow(DB_FETCHMODE_ASSOC))
				{
					array_push($this->_AstatusDetails,$row['status_id']);
				}
			}
		}
		$this->_staticData("_getStatusDetails", $_Skey,$this->_AstatusDetails);
		return $this->_AstatusDetails; 
	}
	/* Yuvaraj 15-03-2018 For 9W Queue process
	* Inorder to identify how the group request raised in GO by reading the PNR from queue
	* We can maintain the unique code in quote_type column in request_quote_details table
	* SC - For schedule change group request
	* MP - For migrated PNR from GM to GO
	* AP - For active PNR created outside GO
	* Input single request master id, array of series request id, single quote type
	* Insert the request_master_id, series_request_id and quote_type in request_quote_details table
	*/
	function _trackGroupRequestType($_IrequestMasterId,$_AseriesRequestId,$_SquoteType)
	{
		fileRequire("dataModels/class.requestQuoteDetails.php");
		$_OrequestQuoteDetails = new requestQuoteDetails();
		$_OrequestQuoteDetails->__construct();
		$_OrequestQuoteDetails->_Oconnection = $this->_Oconnection;
		$_OrequestQuoteDetails->_IrequestMasterId = $_IrequestMasterId;
		$_OrequestQuoteDetails->_SquoteType = $_SquoteType;
		//Loop the series request ids
		foreach($_AseriesRequestId as $_IseriesRequestId)
		{
			$_OrequestQuoteDetails->_IseriesRequestId = $_IseriesRequestId;
			$_OrequestQuoteDetails->_insertRequestQuoteDetails();
		}
	} 
        /* Function     :-_getParentOriginalPaxCount
         * Created By   :- Babu S
         * Description  :- To get the parent request original pax count, by checking the group change table for any upsize or downsize of parent request
         * Input        :- seriesrequestid (child series request ID)
         * Output       :- addition of parent and child pax count
         * Created On   :- 29-03-2018
         */
        function _getParentOriginalPaxCount($_IseriesRequestId)
        {
            fileRequire("dataModels/class.seriesRequestDetails.php");
            $_OsereiesRequestDetails = new seriesRequestDetails;
            $_OsereiesRequestDetails->__construct();
            $_OsereiesRequestDetails->_Oconnection = $this->_Oconnection;
            //getting the child series request details to get mappped parent series request iD
            $_OsereiesRequestDetails->_IseriesRequestId = $_IseriesRequestId;
            $_AchildSeriesRequestDetails = $_OsereiesRequestDetails->_selectSeriesRequestDetails();
            if(isset($_AchildSeriesRequestDetails[0]['parent_series_request_id']) && $_AchildSeriesRequestDetails[0]['parent_series_request_id'] != 0)
            {    
                //select the parent series request id mapped with child series request ID
                $_IparentSeriesRequestId = $_AchildSeriesRequestDetails[0]['parent_series_request_id'];
                //checking for any group resize 
                fileRequire("dataModels/class.groupchangeRequestDetails.php");
                $_OgroupchangeRequestDetails = new groupchangeRequestDetails;
                 $_OgroupchangeRequestDetails->__construct();
                $_OgroupchangeRequestDetails->_Oconnection = $this->_Oconnection;
                $_OgroupchangeRequestDetails->_IseriesRequestId = $_IparentSeriesRequestId;
                $_AgroupChangeRequestDetails = $_OgroupchangeRequestDetails->_selectGroupchangeRequestDetails();
                if(!empty($_AgroupChangeRequestDetails))
                {   
                    //Getting the pax count from the first row of groupchange reuqest if the group count is altered
                    $_ItotalPax = $_AgroupChangeRequestDetails[0]['current_no_of_adult']+$_AgroupChangeRequestDetails[0]['current_no_of_child'];
                }
                else
                {
                    //getting the pax count from parent series request id,since there is no group change is available
                    $_OsereiesRequestDetails->__construct();
                    $_OsereiesRequestDetails->_Oconnection = $this->_Oconnection;
                    $_OsereiesRequestDetails->_IseriesRequestId = $_IparentSeriesRequestId;
                    $_AparentSeriesRequestDetails = $_OsereiesRequestDetails->_selectSeriesRequestDetails();
                    $_ItotalPax = $_AparentSeriesRequestDetails[0]['number_of_adult'] + $_AparentSeriesRequestDetails[0]['number_of_child'];
                }
                return $_ItotalPax;
            }
        }
        /*
         * Function     :- _getSourcePOSCode()
	 * Author	:- Babu Siva
	 * Description  :- To get the agent ID (pcc code) from the corporate details for user id 
	 * Input        :- Request Master ID
         * Return       :- Agent ID (pcc code)
         * Created On   :- 17-04-2018
	 */
	public function _getSourcePOSCode($_AflightDetails=array(),$_Stype = 'avail')
	{
		global $CFG;
		$sourcepos = '';
		$_Aconfig = $CFG["limit"]["mergingAirline"];
		//Checks from static array
		$_AstaticData = $this->_staticData('_getSourcePOSCode',$this->_IrequestMasterId);
		if($_AstaticData !== false && $_Aconfig['status'] != 'Y')
			$sourcepos = $_AstaticData;
		else
		{
			if(isset($this->_IrequestMasterId) && !empty($this->_IrequestMasterId))
			{    
				fileRequire("dataModels/class.userDetails.php");
				if(!class_exists("corporateDetails"))
					fileRequire("dataModels/class.corporateDetails.php");
				#setting agency infomrations
				//getting user id 
				fileRequire('dataModels/class.requestMaster.php');
				$_OrequestMaster = new requestMaster();
				$_OrequestMaster->_Oconnection = $this->_Oconnection;
				$_OrequestMaster->__construct();
				$_OrequestMaster->_IrequestMasterId = $this->_IrequestMasterId;
				$_ArequestMasterDetails = $_OrequestMaster->_selectRequestMaster();

				$objUserDetails=new userDetails();
				$objUserDetails->_Oconnection=$this->_Oconnection;
				$objUserDetails->_IuserId=$_ArequestMasterDetails[0]['user_id'];			
				$_AdderssUserDetails=$objUserDetails->_selectUserDetails();

				$objCorporateDetails=new corporateDetails();
				$objCorporateDetails->_Oconnection=$this->_Oconnection;
				$objCorporateDetails->_IcorporateId=$_AdderssUserDetails[0]['corporate_id'];
				$_AcorporateDetails=$objCorporateDetails->_selectCorporateDetails();

				if(!isset($_AcorporateDetails[0]))
					$_AcorporateDetails = array(0=>$_AcorporateDetails);
					 
				$_AconfigAirlines = array_diff(
										array_keys(
											$_Aconfig['airlineCode']
										),array($CFG["default"]["airlineCode"])
									);
				if($_Aconfig['status'] == 'Y' && !empty($_AflightDetails)){
					$_Aflights = array();
					switch(strtoupper($_Stype)){
						case 'AVAIL':
							$_SairportCodeIndex = 'airlineCode';
							$_Aflights = array_column($_AflightDetails,$_SairportCodeIndex);
							break;
						case 'FARE':
							$_SairportCodeIndex = 'airline_code';
							foreach($_AflightDetails as $_ItripKey => $_AtripValue){
								foreach($_AtripValue as $_IondKey => $_AondValue){
									$_Aflights = array_merge($_Aflights,$_AondValue['viaFlights']);
								}
							}
							$_Aflights = array_column($_Aflights,$_SairportCodeIndex);
							break;
						case 'TAX':
							$_SairportCodeIndex = 'airlineCode';
							$_Aflights = array_column($_AflightDetails,$_SairportCodeIndex);
							break;
					};
					$_Acommon = array_values(
									array_unique(
										array_intersect($_AconfigAirlines,$_Aflights)
									)
								);
					$_AselectValue = array(
						'agency_code',
					);	
					$_StableName = 'agency_code_details';
					$_AconditionValue = array(
						'code_type' => 'AC',
						'airline_code' => array(
							'condition' => 'IN',
							'value' => $_Acommon
						),
						'status' => 'Y',
						'corporate_id' => $_AcorporateDetails[0]['corporate_id']
					);
					$_Aresult = $this->_Oconnection->_performQuery($_StableName,$_AselectValue,'DB_AUTOQUERY_SELECT',$_AconditionValue);
					if(!empty($_Aresult))
						return $_Aresult[0]['agency_code'];
				}
				if(isset($_AcorporateDetails[0]['pcc_code']) && !empty($_AcorporateDetails[0]['pcc_code']))
				{
					$sourcepos = $_AcorporateDetails[0]['pcc_code'];
				}
				$sourcepos = trim($sourcepos);
				$this->_staticData('_getSourcePOSCode',$this->_IrequestMasterId,$sourcepos);
			}
		}
		//For non iata agency no need to send the iata code
		if(strtoupper($sourcepos) == 'NONIATA')
			$sourcepos = '';  
		return $sourcepos;
	} 
	/*
	* Function name :_getUserEmailMappingManipulation
	* Param		 : $_Amanipulation(all email settings for the user),
	* 				 : $_AselectedSettingId (user seleted settings id)
	* Discription	 : This common function to update or insert user email settings in all user/TA creation and updation option 
	* Created by	 : Selvakumar S
	* Created on	 : 24-04-2018
	*/
	function _getUserEmailMappingManipulation($_Amanipulation = array(),$_AselectedSettingId = array())
	{
		global $CFG;
		fileRequire("dataModels/class.userEmailMapping.php");
		$_Bupdate = false;
		$_SemailStatus='N';
		$_Slanguage = $_Amanipulation['language'];
		//validating and storing the default language if the language is invalid
		$_AavailableLang=array_keys($CFG["emailSettingLanguage"]["language"]);
		if(!in_array($_Slanguage,$_AavailableLang))
			$_Slanguage='en';
		$_OuserEmailMapping = new userEmailMapping();
		$_OuserEmailMapping->__construct();
		$_OuserEmailMapping->_Oconnection=$this->_Oconnection;
		$_OuserEmailMapping->_IuserId=$_Amanipulation['userId'];
		$_OuserEmailMapping->_IemailSettingId=$_Amanipulation['emailSettingId'];
		//To check whether to update or insert
		$_AmappedEmailSetting=$_OuserEmailMapping->_selectUserEmailMapping();
		if($_OuserEmailMapping->_IcountLoop > 0)
			$_Bupdate = true;
                $_Acheck = array_values($_AselectedSettingId);
                if(in_array($_Amanipulation['emailSettingId'],$_Acheck))
                {
                    $_SemailStatus='Y';   
                }
                /*else
                {
                   $_Slanguage = 'en';
                }*/
		if(!$_Bupdate)
		{
			$_OuserEmailMapping->__construct();
			$_OuserEmailMapping->_Oconnection=$this->_Oconnection;
			$_OuserEmailMapping->_IuserId=$_Amanipulation['userId'];
			$_OuserEmailMapping->_IemailSettingId=$_Amanipulation['emailSettingId'];
			$_OuserEmailMapping->_Slanguage=$_Slanguage;
			$_OuserEmailMapping->_SemailStatus=$_SemailStatus;
			$_OuserEmailMapping->_insertUserEmailMapping();
		}
		//Start insert
		else
		{
			if(!$_Amanipulation['userEmailMappingId'])
				return false;
			//getting all the mapped id for same setting
			$_AmappedEmailSettingIds=array_column($_AmappedEmailSetting,'user_email_mapping_id');
			$_OuserEmailMapping->__construct();
			//flag for multiple IDs
			$_OuserEmailMapping->_SinCondition="Y";
			$_OuserEmailMapping->_Oconnection=$this->_Oconnection;
			$_OuserEmailMapping->_IuserId=$_Amanipulation['userId'];
			$_OuserEmailMapping->_IemailSettingId=$_Amanipulation['emailSettingId'];
			$_OuserEmailMapping->_Slanguage=$_Slanguage;
			$_OuserEmailMapping->_SemailStatus=$_SemailStatus;
			$_OuserEmailMapping->_IuserEmailMappingId=implode(',', $_AmappedEmailSettingIds);
			$_OuserEmailMapping->_updateUserEmailMapping();
		}
	}
	/*
	 * Function Name : _getValidityDetails
	 * Description: This function will return payment and passenger validityArray
	 * Author: Venket V
	 * Created Date: 14-06-2018
	 * Modified Date: 14-06-2018
	 */
	function _getValidityDetails($_IrequestMasterId,$depDate='',$pnr='',$origin='', $_StimeLineExtend ='',$transactionId='',$_SblockPnr='N')
	{
		global $CFG;
		$_Aresult=array();
		$_Asource=array();
		if(!empty($_IrequestMasterId))
		{
			fileRequire("dataModels/class.transactionMaster.php");
			fileRequire("dataModels/class.requestMaster.php");
			$_OtransactionMaster=new transactionMaster();
			$_OrequestRequestDetails=new requestMaster();
			

			$_OtransactionMaster->_Oconnection=$this->_Oconnection;
			$_OrequestRequestDetails->_Oconnection=$this->_Oconnection;
			
			#loading user details from request master
			$_OrequestRequestDetails->_IrequestMasterId=$_IrequestMasterId;
			$_ArequestMasterDetails=$_OrequestRequestDetails->_selectRequestMaster();
			if(!empty($_ArequestMasterDetails[0]['user_id']))
				$_AuserDetails=$this->_getUserDetailsHelpDesk($_ArequestMasterDetails[0]['user_id']);
			
			$_OtransactionMaster->_ItransactionId=$this->_getLastTransactionMasterId($_IrequestMasterId);

			if(!empty($transactionId))
			{
				$_OtransactionMaster->_ItransactionId=$transactionId;
			}

			/*if($CFG["approvePage"]["groupLevelTimeline"]=="N")
			{
				$_AtransactionData=$_OtransactionMaster->_selectTransactionMaster();
				if(!empty($_AtransactionData[0]))
				{
					$_AtransactionDataDetails=$_AtransactionData[0];
					
					fileRequire("dataModels/class.paymentRequestDetails.php");
					fileRequire("dataModels/class.fareValidityTypeDetails.php");
					
					$_OpaymentRequestDetails=new paymentRequestDetails();
					$_OfareValidityTypeDetails=new fareValidityTypeDetails();
					
					$_OpaymentRequestDetails->_Oconnection=$this->_Oconnection;
					$_OfareValidityTypeDetails->_Oconnection=$this->_Oconnection;
					#get payment request details
					$_OpaymentRequestDetails->_ItransactionId=$_OtransactionMaster->_ItransactionId;
					$_ApaymentrequestData=$_OpaymentRequestDetails->_selectPaymentRequestDetails();
					if(!empty($depDate))
					{
						$_ArequestGroupData[1][]=$depDate;
						$_Asource[1]=$origin;
					}
					else if(!empty($pnr))
					{
						#get flight departureDate based on group
						$_ArequestGroupData=array();
						$sql = "SELECT
									CONCAT(ap.departure_date,' ',ap.dep_time,':00') as departure_date,
									ap.source as source
								FROM 
									".$CFG['db']['tbl']['request_approved_flight_details']." as ap,
									".$CFG['db']['tbl']['pnr_blocking_details']." as pn
								WHERE
									ap.request_approved_flight_id=pn.request_approved_flight_id AND
									pn.pnr = '".trim($pnr)."'
								ORDER BY ap.departure_date ASC ";
						if(DB::isError($result = $this->_Oconnection->query($sql))) 
						{
							fileWrite($sql,"SqlError","a+");
							return false;
						}
						if ($result->numRows() > 0)
						{
							while($row=$result->fetchRow(DB_FETCHMODE_ASSOC))
							{
								if(!empty($row['departure_date']))
									$_ArequestGroupData[1][]=$row['departure_date'];
								if(empty($_Asource[1]))
									$_Asource[1]=$row['source'];
							}
						}
					}
					else
					{
						#get flight departureDate based on group
						$_ArequestGroupData=array();
						$sql = "SELECT
									CONCAT(ap.departure_date,' ',ap.dep_time,':00') as departure_date,
									ap.source as source,
									sr.series_group_id as series_group_id
								FROM 
									".$CFG['db']['tbl']['request_approved_flight_details']." as ap,
									".$CFG['db']['tbl']['series_request_details']." as sr
								WHERE
									ap.series_request_id=sr.series_request_id AND
									ap.transaction_master_id = '".$_OpaymentRequestDetails->_ItransactionId."'
								ORDER BY ap.departure_date ASC,sr.series_group_id ASC";
						if(DB::isError($result = $this->_Oconnection->query($sql))) 
						{
							fileWrite($sql,"SqlError","a+");
							return false;
						}
						if ($result->numRows() > 0)
						{
							while($row=$result->fetchRow(DB_FETCHMODE_ASSOC))
							{
								if(!empty($row['departure_date']) && !empty($row['series_group_id']))
									$_ArequestGroupData[$row['series_group_id']][]=$row['departure_date'];
								if(empty($_Asource[$row['series_group_id']]))
									$_Asource[$row['series_group_id']]=$row['source'];
							}
						}
					}
					#setting validity date
					if(!empty($_ArequestGroupData[1]))
					{
						foreach($_ArequestGroupData as $_ArequestGroupDataKey=>$_ArequestGroupDataValue)
						{
							$paymentValidityData=array();
							$passengerValidityData=array();
							$currentData=date('Y-m-d H:i:s',strtotime($_AtransactionDataDetails['fare_expiry_date']));
							$departureDate=min($_ArequestGroupDataValue);
							$CFG['validity_origion']=$_Asource[$_ArequestGroupDataKey];
							foreach($_ApaymentrequestData as $_ApaymentrequestDataKey => $_ApaymentrequestDataValue)
							{
								$paymentExpireDate='';
								if($_ApaymentrequestDataValue['payment_expiry_type']==2)
								{
									$currentData=$paymentExpireDate=$this->_getValidityDeprtDate($_ApaymentrequestDataValue['payment_validity'],$_ApaymentrequestDataValue['payment_validity_type'],$departureDate);
								}
								else
								{
									$_OfareValidityTypeDetails->__construct();
									$_OfareValidityTypeDetails->_IfareValidityTypeId=$_ApaymentrequestDataValue['payment_validity_type'];
									$_OfareValidityTypeDetails->_selectFareValidityTypeDetails();
									$paymentTypeValue=$_OfareValidityTypeDetails->_SfareValidityValues;
									$currentData=$paymentExpireDate=date('Y-m-d H:i:s',strtotime("+".$_ApaymentrequestDataValue['payment_validity']." ".$paymentTypeValue,strtotime($currentData)));
									
								}
								if(!empty($paymentExpireDate))
								{
									$paymentValidityDataTemp=array(
											"text"=>"PAYMENT ".round($_ApaymentrequestDataValue['payment_percentage'])."PCT",
											"dateAndTime"=>$paymentExpireDate,
											"percentage"=>$_ApaymentrequestDataValue['payment_percentage'],
											"timeLimit"=>date('d-m-y',strtotime($paymentExpireDate)),
											"queueNo" => $CFG['service']['queueTypes']['paymentValidity']
											);
										
									if(!empty($CFG["timelineExtenstion"]) && !empty($CFG["timelineExtenstion"]["userTimeInPNR"]) && $CFG["timelineExtenstion"]["userTimeInPNR"] =='Y')
									{
										if(!empty($CFG["pnrChange"]) && !empty($CFG["pnrChange"] =='Y'))
										{
											$paymentExpireDateNew=$this->_getTimeZoneDateFormatValue($paymentExpireDate,$_AuserDetails[0]['userTimeZoneInterval']);
											$paymentValidityDataTemp['dateAndTime']=$paymentExpireDateNew;
											$paymentValidityDataTemp['timeLimit']=date('d-m-y',strtotime($paymentExpireDateNew));
											$paymentValidityDataTemp['time']=date('Hi',strtotime($paymentExpireDateNew));
											$paymentValidityDataTemp['countryCode']=$_AuserDetails[0]['country_code'];
										}
									}
								}
							}
							$passenerExpireDate='';
							#passener validity setting
							if($_AtransactionDataDetails['passenger_expiry_type']==2)
							{
								$passenerExpireDate=$this->_getValidityDeprtDate($_AtransactionDataDetails['passenger_validity'],$_AtransactionDataDetails['passenger_validity_type'],$departureDate);
							}
							else
							{
								$_OfareValidityTypeDetails->__construct();
								$_OfareValidityTypeDetails->_IfareValidityTypeId=$_AtransactionDataDetails['passenger_validity_type'];
								$_OfareValidityTypeDetails->_selectFareValidityTypeDetails();
								$paymentTypeValue=$_OfareValidityTypeDetails->_SfareValidityValues;
								$passenerExpireDate=date('Y-m-d H:i:s',strtotime("+".$_AtransactionDataDetails['passenger_validity']." ".$paymentTypeValue,strtotime($currentData)));
								
							}
							if(!empty($paymentExpireDate))
							{
								$passengerValidityDataTemp=array(
										"text"=>"NAMES",
										"dateAndTime"=>$passenerExpireDate,
										"timeLimit"=>date('d-m-y',strtotime($passenerExpireDate)),
										"queueNo"=> $CFG['service']['queueTypes']['nameUpdateValidity']
										);
								if(!empty($CFG["timelineExtenstion"]) && !empty($CFG["timelineExtenstion"]["userTimeInPNR"]) && $CFG["timelineExtenstion"]["userTimeInPNR"] =='Y')
								{
									if(!empty($CFG["pnrChange"]) && !empty($CFG["pnrChange"] =='Y'))
									{
										$passenerExpireDateNew=$this->_getTimeZoneDateFormatValue($passenerExpireDate,$_AuserDetails[0]['userTimeZoneInterval']);
										$passengerValidityDataTemp['dateAndTime']=$passenerExpireDateNew;
										$passengerValidityDataTemp['timeLimit']=date('d-m-y',strtotime($passenerExpireDateNew));
										$passengerValidityDataTemp['time']=date('Hi',strtotime($passenerExpireDateNew));
										$passengerValidityDataTemp['countryCode']=$_AuserDetails[0]['country_code'];
									}
								}
								$passengerValidityData[]=$passengerValidityDataTemp;
							}
							$_Aresult[$_ArequestGroupDataKey]=array(
											'nameUpdateValidity'=>$passengerValidityData,
											'paymentValidity'=>$paymentValidityData,
											);
							$CFG['validity_origion']='';
						}
					}					
				}
				
			}
			else*/
			{
				$seriesGroupIdArray=array();
				#finding the series Group id
				if(!empty($depDate) || !empty($pnr))
				{
					$fromPart="";
					$condition ="";
					if(!empty($depDate))
						$condition =" AND rafd.departure_date ='".date("Y-m-d",strtotime($depDate))."'";
					else if(!empty($pnr))
					{
						$fromPart=",pnr_blocking_details pbd";
						$condition =" AND rafd.request_approved_flight_id=pbd.request_approved_flight_id AND pbd.pnr='".$pnr."'";							
					}
					$sql = "SELECT
								srd.series_group_id
							FROM 
								".$CFG['db']['tbl']['request_approved_flight_details']." as rafd,
								".$CFG['db']['tbl']['series_request_details']." as srd".$fromPart."
							WHERE
								rafd.series_request_id=srd.series_request_id
							AND 
								rafd.transaction_master_id=".$_OtransactionMaster->_ItransactionId."
								".$condition."
							ORDER BY srd.series_group_id ASC ";
					if(DB::isError($result = $this->_Oconnection->query($sql))) 
					{
						fileWrite($sql,"SqlError","a+");
						return false;
					}
					if ($result->numRows() > 0)
					{
						while($row=$result->fetchRow(DB_FETCHMODE_ASSOC))
						{
							$seriesGroupIdArray[]=$row['series_group_id'];
						}
					}
				}
				$str=" ";
				if(count($seriesGroupIdArray)>0)
					$str=" AND series_group_id IN(".implode(",",$seriesGroupIdArray).")";
				
				
				fileRequire("classes/class.specialFareTypes.php");
				$this->_OspecialFareTypes = new specialFareTypes();
				$this->_OspecialFareTypes->_Oconnection = $this->_Oconnection;
				$_IcurrentStatus = $this->_getStatusFromRequestId($_IrequestMasterId);
				$this->_OspecialFareTypes->_IcurrentStatus=$_IcurrentStatus;
				$_AtimelinId=$this->_OspecialFareTypes->_getRequestTimeline($_OtransactionMaster->_ItransactionId);
				foreach($_AtimelinId as $timeKey=>$timeValue)
				{
					$_ArequestTimelineId=array_values($timeValue);
				}
				$_StimelineCondition='';
				if(count($_ArequestTimelineId)>0)
					$_StimelineCondition=" AND request_timeline_id IN(".implode(",",$_ArequestTimelineId).")";
		
				$sqlData = "SELECT 
				           request_timeline_id,
				           series_group_id,
							expiry_date,
							expiry_type,
							percentage_value,
						        timeline_type,
						        validity,
						        status,
						        (SELECT fare_validity_values FROM ".$CFG['db']['tbl']['fare_validity_type_details']." WHERE fare_validity_type_id = validity_type) validity_type
							FROM 
							".$CFG['db']['tbl']['request_timeline_details']."
						WHERE 
							transaction_id=".$_OtransactionMaster->_ItransactionId." ".$str." ".$_StimelineCondition."
						ORDER BY series_group_id ASC, expiry_date ASC";


						
				if(DB::isError($resultData = $this->_Oconnection->query($sqlData))) 
				{
					fileWrite($sqlData,"SqlError","a+");
					return false;
				}
				$tempSeriesGroupId=array();

				if ($resultData->numRows() > 0)
				{
					$_SpreviousExpiryDate = '';
					$_SpaymentIndex = 'PAYMENT';
					while($rowData=$resultData->fetchRow(DB_FETCHMODE_ASSOC))
					{
						if(!empty($CFG["site"]["acceptanceQueue"]) && $CFG["site"]["acceptanceQueue"]["status"] == "Y")
						{
							if($_SpaymentIndex == $rowData['timeline_type'] && $_SblockPnr!='Y')
							{
								$rowData['expiry_date'] = $this->_getUTCDateValue();
								$rowData['expiry_date'] = date('Y-m-d H:i:s',strtotime("+".$CFG["site"]["acceptanceQueue"]["fareExpiry"]." hours", strtotime($rowData['expiry_date'])));
								$_SpaymentIndex = '';
							}
						}
						$seriesGroupId=$rowData['series_group_id'];
						$_groupIndex=$seriesGroupId;
						#To get the validitity details in first index
						if(!empty($depDate) || !empty($pnr))
							$_groupIndex=1;
						$tempUserCountry='';
						fileRequire('classes/class.contractManager.php');
						$_OcontractManager = new contractManager();
	        			$_OcontractManager->_Oconnection = $this->_Oconnection;
						$_AcontractValidity = $_OcontractManager->_getSpecifiedValues($_IrequestMasterId,'',$seriesGroupId);
						#CONVERTING USER TIME ZONE VALUE
						if(!empty($CFG["timelineExtenstion"]) && !empty($CFG["timelineExtenstion"]["userTimeInPNR"]) && $CFG["timelineExtenstion"]["userTimeInPNR"] =='Y')
						{
							if(!empty($CFG["pnrChange"]) && !empty($CFG["pnrChange"] =='Y'))
							{
								$rowData['expiry_date']=$this->_getTimeZoneDateFormatValue($rowData['expiry_date'],$_AuserDetails[0]['userTimeZoneInterval']);
								$tempUserCountry=$_AuserDetails[0]['country_code'];
							}
						}
						if ($rowData['status'] != "TIMELINEEXTEND" || $_StimeLineExtend =='') {
							#convert the expiry time based on the user defined time adn with timeZone
							$_SpreviousExpiryDate = !in_array($seriesGroupId,$tempSeriesGroupId) ? $this->_getUTCDateValue() : $_SpreviousExpiryDate;
							if($rowData['expiry_type']==4 && $_SblockPnr=='Y' && !isset($CFG["site"]["acceptanceQueue"]["status"]) && $CFG["site"]["acceptanceQueue"]["status"] != "Y")
							{
								$_SpreviousExpiryDate = $rowData['expiry_date'] = date('Y-m-d H:i:s',strtotime("+".$rowData['validity']." ".$rowData['validity_type'],strtotime($_SpreviousExpiryDate)));
								fileRequire('classes/class.processRequest.php');
								$_OprocessRequest = new processRequest();
								$_OprocessRequest->__construct();
								$_OprocessRequest->_Oconnection = $this->_Oconnection;
								foreach($_AcontractValidity as $key => $value){
									$_SpreviousExpiryDate = $rowData['expiry_date'] = $_OprocessRequest->_getDateTimeBasedOnTimezone($_SpreviousExpiryDate,$value['time_line_matrix']['validities'][0]['payment_expiry_time'],$value['time_line_matrix']['validities'][0]['payment_expiry_time_zone']);
								}
								
								    fileRequire("dataModels/class.requestTimelineDetails.php");
									$_OrequestTimelineDetails = new requestTimelineDetails();
									$_OrequestTimelineDetails->__construct();
									$_OrequestTimelineDetails->_Oconnection = $this->_Oconnection;
									$_OrequestTimelineDetails->_IrequestTimelineId = $rowData['request_timeline_id'];
									$_OrequestTimelineDetails->_SexpiryDate = $rowData['expiry_date'];
									$_OrequestTimelineDetails->_updateRequestTimelineDetails();
								
							}
							if($rowData['timeline_type']=="PAYMENT")
							{
								if(!in_array($seriesGroupId,$tempSeriesGroupId))
									$i=0;

								if(isset($CFG["acceptPage"]["timeIndexPnr"]) && $CFG["acceptPage"]["timeIndexPnr"]=='Y'){

									$paymentValidityData=array(
												"text"=>"PAYMENT ".round($rowData['percentage_value'])."PCT",
												"dateAndTime"=>$rowData['expiry_date'],
												"expiryType"=>$rowData['expiry_type'],
												"time"=>date('hi',strtotime($rowData['expiry_date'])),
												"percentage"=>$rowData['percentage_value'],
												"timeLimit"=>date('d-m-y',strtotime($rowData['expiry_date'])),
												"queueNo" => $CFG['service']['queueTypes']['paymentValidity'],
												"paymentValidity" => $rowData['validity'],
												"paymentValidityType" => $rowData['validity_type'],
												"countryCode"=>$tempUserCountry
												);
								}
								else{
									$paymentValidityData=array(
												"text"=>"PAYMENT ".round($rowData['percentage_value'])."PCT",
												"dateAndTime"=>$rowData['expiry_date'],
												"expiryType"=>$rowData['expiry_type'],
												"percentage"=>$rowData['percentage_value'],
												"timeLimit"=>date('d-m-y',strtotime($rowData['expiry_date'])),
												"queueNo" => $CFG['service']['queueTypes']['paymentValidity'],
												"paymentValidity" => $rowData['validity'],
												"paymentValidityType" => $rowData['validity_type'],
												"countryCode"=>$tempUserCountry
												);
								}
								$_SpreviousExpiryDate = $rowData['expiry_date'];
								$_Aresult[$_groupIndex]['paymentValidity'][$i]=$paymentValidityData;
								$tempSeriesGroupId[]= $seriesGroupId;
								$i++;
								
							}
							else
							{
								if(isset($CFG["acceptPage"]["timeIndexPnr"]) && $CFG["acceptPage"]["timeIndexPnr"]=='Y'){

									$nameUpdateValidity[0]=array(
												"text"=>"NAMES ",
												"dateAndTime"=>$rowData['expiry_date'],
												"expiryType"=>$rowData['expiry_type'],
												"time"=>date('hi',strtotime($rowData['expiry_date'])),
												"timeLimit"=>date('d-m-y',strtotime($rowData['expiry_date'])),
												"queueNo" => $CFG['service']['queueTypes']['nameUpdateValidity'],
												"nameValidity"=>$rowData['validity'],
												"nameValidityType"=>$rowData['validity_type'],
												"countryCode"=>$tempUserCountry
												);
								}
								else{

									$nameUpdateValidity[0]=array(
												"text"=>"NAMES ",
												"dateAndTime"=>$rowData['expiry_date'],
												"expiryType"=>$rowData['expiry_type'],
												"timeLimit"=>date('d-m-y',strtotime($rowData['expiry_date'])),
												"queueNo" => $CFG['service']['queueTypes']['nameUpdateValidity'],
												"nameValidity"=>$rowData['validity'],
												"nameValidityType"=>$rowData['validity_type'],
												"countryCode"=>$tempUserCountry
												);
								}
								
								$_Aresult[$_groupIndex]['nameUpdateValidity']=$nameUpdateValidity;
							}
							if(isset($CFG['timeLineMatrix']['penaltyStartDate']['status'])&&$CFG['timeLineMatrix']['penaltyStartDate']['status']=='Y')
							{
								if($rowData['timeline_type']=="PENALTY")
								{
									$rowData['penalty_value'] = $rowData['validity'];
									$rowData['penalty_type_id'] = $rowData['validity_type'];
								}
								else
								{
									$sql = "SELECT
											expiry_date,
											percentage_value,
											timeline_type,
											validity,
											(SELECT fare_validity_values FROM ".$CFG['db']['tbl']['fare_validity_type_details']." WHERE fare_validity_type_id = validity_type) validity_type
											FROM 
												".$CFG['db']['tbl']['request_timeline_details']." as rtm
											WHERE
												rtm.timeline_type = 'PENALTY' AND
												rtm.transaction_id = ".$_OtransactionMaster->_ItransactionId;
									if(DB::isError($result = $this->_Oconnection->query($sql))) 
									{
										fileWrite($sql,"SqlError","a+");
										return false;
									}
									if ($result->numRows() > 0)
									{
										while($row=$result->fetchRow(DB_FETCHMODE_ASSOC))
										{
											$rowData['penalty_value'] = $row['validity'];
											$rowData['penalty_type_id'] = $row['validity_type'];
											
										}
									}
								}
								$_DpenaltyStartDate = $this->_getPenaltyStartDate($rowData);
								if($_DpenaltyStartDate!='')
								{
									$_ApenaltyValidity[0]=array(
												"text"=>"GRACE PERIOD",
												"dateAndTime"=>$_DpenaltyStartDate,
												"timeLimit"=>date('d-m-y',strtotime($_DpenaltyStartDate)),
												"queueNo" => $CFG['service']['queueTypes']['penaltyValidity'],
												);
									$_Aresult[$_groupIndex]['penaltyValidity']=$_ApenaltyValidity;
								}
							}
						}
					}
				}

			}
		}
		return $_Aresult;
	}
        
        /*
	 * Function Name : _checkPaymentTypeInPercentage()
	 * Description: This function will check the payment type is percentage or absolute by checking the 
         *              request_timeline_details table,associated with group level timeline flow.
	 * Author: Babu S
	 * Created Date: 27-06-2018
	 * Modified Date:27-06-2018
         * Params :- RequestMasterID and PNR
         * Return :- Y - if payment is in percentage
         *           N - If payment is absolute
	 */
	function _checkPaymentTypeInPercentage($pnr,$_transactionMasterId=0,$_seriesGroupId=1,$_pnrBlockingId='')
    {
		global $CFG;
		$paymentInPercent = 'Y';
		$_ItransactionMasterId= 0;     		
		$_IseriesGroupId= 0;
		if($_transactionMasterId!='' && $_seriesGroupId!='' && $_transactionMasterId>0 && $_seriesGroupId>0)
		{
			$_ItransactionMasterId= $_transactionMasterId;     		
			$_IseriesGroupId= $_seriesGroupId;
		}
		else
		{
			#Getting all requestApprovedFlightId's associated with this PNR
			$_ArequestApprovedflightIds = array();
			$requestApprovedFlightDetails =  array();
			$requestTimeLineDetails =  array();

			$pnrBlockingDetailsSql="SELECT
											request_approved_flight_id
									FROM
											".$CFG['db']['tbl']['pnr_blocking_details']."
									WHERE
											pnr = '".$pnr."'";	
			
			if(DB::isError($result=$this->_Oconnection->query($pnrBlockingDetailsSql)))
			{
					fileWrite($pnrBlockingDetailsSql,"SqlError","a+");
					return false;
			}
			if($result->numRows() > 0)
			{    
					while($row=$result->fetchRow(DB_FETCHMODE_ASSOC))
					{
							$_ArequestApprovedflightIds[]=$row['request_approved_flight_id'];
					}
					//Taking the series group id using the transaction id and series request id 
					$requestApprovedFlightDetailsSQL = "SELECT 
															rafd.transaction_master_id,
															rafd.series_request_id,
															srd.series_group_id
													FROM 
														   ".$CFG['db']['tbl']['request_approved_flight_details']." as rafd,
														   ".$CFG['db']['tbl']['series_request_details']." as srd  
													WHERE 
															rafd.request_approved_flight_id = ".$_ArequestApprovedflightIds[0]." AND
															rafd.series_request_id = srd.series_request_id 
													ORDER BY 
															transaction_master_id DESC ";
					
					if(DB::isError($requestApprovedResult = $this->_Oconnection->query($requestApprovedFlightDetailsSQL)))
					{
							fileWrite($requestApprovedFlightDetailsSQL,"SqlError","a+");
							return false;
					}
					if($requestApprovedResult->numRows() > 0)
					{
							while($requestApprovedResultRow=$requestApprovedResult->fetchRow(DB_FETCHMODE_ASSOC))
							{
								$requestApprovedFlightDetails[] = $requestApprovedResultRow;
							}
							$_ItransactionMasterId= $requestApprovedFlightDetails[0]['transaction_master_id'];     		
							$_IseriesGroupId= $requestApprovedFlightDetails[0]['series_group_id'];
					} 
			}
        }
		if($_ItransactionMasterId!='' && $_IseriesGroupId!='' && $_ItransactionMasterId>0 && $_IseriesGroupId>0)
		{
			if ($_pnrBlockingId!= '')
				$_Scondition = "AND pnr_blocking_id = ".$_pnrBlockingId."";
			else if ($_IseriesGroupId!='')
				$_Scondition = "AND series_group_id = ".$_IseriesGroupId."";

			//Taking the percentage or absoulte amount from request time line details
			$requestTimelineDetails = "SELECT 
												percentage_value,
												absolute_amount
										FROM 
												".$CFG['db']['tbl']['request_timeline_details']." 
										WHERE       
												transaction_id = ".$_ItransactionMasterId." AND
												timeline_type = 'PAYMENT' AND
												status!='TIMELINEEXTEND'
												".$_Scondition."
										ORDER BY            
												transaction_id ASC ";
			if(DB::isError($requestTimeLineResult = $this->_Oconnection->query($requestTimelineDetails)))
			{
					fileWrite($requestTimelineDetails,"SqlError","a+");
					return false;
			}
			if($requestTimeLineResult -> numRows() >0)
			{
					while($requestTimeLineRow=$requestTimeLineResult->fetchRow(DB_FETCHMODE_ASSOC))
					{
						$requestTimeLineDetails[] = $requestTimeLineRow;
					}   
					//if the percentage values and  amount is  zero than payment percent is yes
					if($requestTimeLineDetails[0]['percentage_value']>0 && $requestTimeLineDetails[0]['absolute_amount'] == 0)
					{
						$paymentInPercent = 'Y';
					}
					//if the absolute amount is greater than zero than payment percent is No
					else if($requestTimeLineDetails[0]['absolute_amount'] != 0)
					{
						$paymentInPercent = 'N';
					}    
			}
		}
		return $paymentInPercent;

	}
        
		/*
		 * Author      : S.GANESAN
		 * Created on  : 09-07-2018
		 * Description : Get infant count when infant added as SSR 
		 */
		function _getSSRInfantCount($_IrequestApproveFlightId,$_Spnr="",$_SinfantCountView="N")
		{
			global $CFG;
			
			// Get infant count
			$sqlSSRMaster ="SELECT count( DISTINCT spd. ) AS infant_count,pbd.no_of_infant,sd.remarks
							FROM ".$CFG['db']['tbl']['ssr_details']." sd 
							INNER JOIN ssr_pax_details spd ON sd.ssr_pax_id=spd.ssr_pax_id 
							INNER JOIN ssr_master sm ON sd.ssr_master_id=sm.ssr_master_id 
							INNER JOIN pnr_blocking_details pbd ON spd.pnr_blocking_id=pbd.pnr_blocking_id
							WHERE pbd.request_approved_flight_id IN (".$_IrequestApproveFlightId.") AND sm.last_transaction='Y' AND sd.ssr_code IN ('INFT','INFB')";
			if($_Spnr!="")
				$sqlSSRMaster.=" AND sm.pnr='".$_Spnr."'";
			$_IinfantCount=$this->_executeQuery($sqlSSRMaster);
			if($_SinfantCountView=='Y' && $_IinfantCount[0]['infant_count']==$_IinfantCount[0]['no_of_infant'] && $_IinfantCount[0]['remarks']=='Offline ssr')
				return 0;
			else
				return $_IinfantCount[0]['infant_count'];		
		} 

		/*
		 * Author      : sri muthu rajesh
		 * Created on  : 20-07-2018
		 * Description : getting menu id by name
		 */
		function _getMenuIdByName($menuName){
			// filewrite($menuName,'men','a+');
			fileRequire("dataModels/class.grmMenuDetails.php");
			$this->_OgrmMenuDetails=new grmMenuDetails();
			$this->_OgrmMenuDetails->_Oconnection=$this->_Oconnection;
			$this->_OgrmMenuDetails->_SmenuName=$menuName;
			$this->_OgrmMenuDetails->_selectGrmMenuDetails();
			return $this->_OgrmMenuDetails->_ImenuId;
		}   
		/****
		*Author  	:A.kaviyarasan
		*Created on :30-07-2018
		*Description:This function is used to give the country and city details
		*return value:Array with country and city details
		*****/
	  function _getCountryCityDetails($_ScitizenCode="",$_ScityId="Other"){
			if(empty($_ScitizenCode))
				return false;
			fileRequire("dataModels/class.citizenshipDetails.php");
			$_OcitizenShipDetails = new citizenshipDetails();
			$_OcitizenShipDetails->_Oconnection=$this->_Oconnection;
			$_OcitizenShipDetails->_ScitizenCode=$_ScitizenCode;
			$_AcountryCityDetails['country']=$_OcitizenShipDetails->_selectCitizenshipDetails()[0];
			fileRequire("dataModels/class.cityMaster.php");
			$_OcityMaster = new cityMaster();
			$_OcityMaster->_Oconnection=$this->_Oconnection;
			if($_ScityId=="Other")
				$_OcityMaster->_ScityName=$_ScityId;
			else
				$_OcityMaster->_IcityId=$_ScityId;
			$_OcityMaster->_Sstatus='Y';
			if(!empty($_ScityId))
				$_AcountryCityDetails['city']=$_OcityMaster->_selectCityMaster()[0];
			return $_AcountryCityDetails;
		}
		/*
			@Author:	Anboli
			@Created : 17-08-'18
			@Description : Get the parent request id even the child request date is given
		*/
		function _getParentRequestIdByDate($_DstartDate = '',$_DendDate = '',$_Sstatus='', $_SreturnSql = false)
		{
			global $CFG;			
			$_ArequestMasterId = array();
			$sql = "SELECT CASE
						WHEN rm.reference_request_master_id = 0 THEN rm.request_master_id 
						WHEN rm.reference_request_master_id > 0 THEN rm.reference_request_master_id
			    	END as request_master_id
					FROM ".$CFG['db']['tbl']['request_master']." rm,
						 ".$CFG['db']['tbl']['airlines_request_mapping']." arm
					WHERE arm.request_master_id=rm.request_master_id";
					
			if($_DstartDate!= '' && $_DendDate!= '')
				$sql.=" AND	 (rm.requested_date BETWEEN '".$_DstartDate."' AND '".$_DendDate."')";
			elseif ($_DstartDate != '' && $_DendDate == '')
				$sql.=" AND rm.requested_date>='".$_DstartDate."'";
			elseif ($_DstartDate == '' && $_DendDate != '')
				$sql.=" AND rm.requested_date<='".$_DendDate."'";
			elseif ($_Sstatus != '')
				$sql.=" AND arm.current_status='".$_Sstatus."'";

			if($_SreturnSql === true)
				return $sql;
			
			
			if(DB::isError($_Aresult = $this->_Oconnection->query($sql)))
			{
					fileWrite($sql,"SqlError","a+");
					return false;
			}
			if($_Aresult -> numRows() >0)
			{
					while($row=$_Aresult->fetchRow(DB_FETCHMODE_ASSOC))
					{
						$_ArequestMasterId[] = $row['request_master_id'];
					}   
			}
			return $_ArequestMasterId;
		}


		/*Function Name	:	_sectorGroupDetails
	 *Description	:	Prepare the array for the grouping the sector details based on 
	 * 					series request id and mapped series request id.
	 * 					For modified request array prepared based on 
	 * 					request details history id and mapped series request id
	 *Parameters	:	$testArray->sector details array
	 * 					$emailGRDetails->request details
	 * 					$seriesRequestId->Initial value as 0
	 * 					$modifyRequest->modified status (if modified request->'Y' otherwise 'N')
	 *Return		: 	Array (testArrayValues->grouped sector details)
	 *Created date	:	14.08.2018
	 *Author		:	Roja.G
	 **/
	function _sectorGroupDetails($testArray,$emailGRDetails,$seriesRequestId,$modifyRequest)
	{
		/* The index value is initialzed for fixing index mismatch in series and conference,
		 * Changed the sector details for conference which is same as series sector details in email */
		$index=0;
		$flag=0;
		$checkRequestId=$seriesRequestId;
		$mappingrequestId=0;
		$testArray1=array();
		$testArray1 = $testArray;
		$testArrayValues=array();
		/*Prepare the array for group the sectors details*/
		foreach($testArray1 as $key=>$values)
		{
			/*If trip type is oneway for adhoc,series,conference and alternate*/
			if(($emailGRDetails['request_type'] =='adhoc')||($emailGRDetails['request_type'] =='flexible' && $values['trip_type'] == 1) || ($emailGRDetails['request_type_id'] == 3 && $values['trip_type'] == 1)||($emailGRDetails['request_type_id']==2 && $emailGRDetails['trip_type']=='O'))
			{	
				//In conference request with group 2 as one way and group 1 as round trip
				if($flag==1 && $emailGRDetails['request_type_id'] == 3 && $values['trip_type'] == 1)		
					$index++;
				$testArrayValues[$index][]=$values;
				if($flag==1 && $emailGRDetails['request_type_id'] == 3 && $values['trip_type'] == 1)		
					$index--;
				/*First group consist of one way, values to be added and increment the index for next group*/
				if($key==0)
					$index++;
				/*Other than first group contains oneway increment the index and the values added in array*/
				if($key!=0 && $emailGRDetails['request_type_id'] != 2 )
					$index++;
				/*Added this for an issue where the sectors were coming in group1 and group2 only. For series request this will help in seperating the sectors in groups, by incresing the index for it*/
				if($key!=0 && $emailGRDetails['trip_type'] == 'O' ){
					$index++;
				}
			}
			else
			{
				foreach($testArray as $subKey=>$subValues)
				{
					if($subValues['trip_type'] != 1)
					{					
						/*Prepare the group for a request to be compare mapped series request id 
						 *with the request details history id for modified request. 
						 *Otherwise,series request id to be compared with mapped series request id*/
						if($modifyRequest=="N")
							$mappingrequestId=$testArray1[$key]['series_request_id'];
						else
							$mappingrequestId=$testArray1[$key]['series_request_history_id'];
							
						if($mappingrequestId == $testArray[$subKey]['mapped_series_request_id'])
						{
							/*Increment the index based on mapped series request id and series request id
							 *Restrict the initial group not get increment */
							if($checkRequestId!=$testArray[$subKey]['mapped_series_request_id'] && $checkRequestId != 0)
								$index++;
							
							/*For restrict initial sector value push two 
							 *times in an array*/
							if($checkRequestId != $mappingrequestId)
								$testArrayValues[$index][]=$values;
						
							$testArrayValues[$index][]=$subValues;
							/* Initial sector for multicity in series 
							 * needs to show one time, for that here
							 * assign series_request_id in a variable.*/
							$checkRequestId = $mappingrequestId;
						}
					}
					//For conference request with group 1 as round trip and  group 2 as one way
					else if($emailGRDetails['request_type']== "conference" && $subValues['trip_type'] == 1)
						$flag=1;
					
				}
			}
		}
		return $testArrayValues;
	}
	/****
	*Author  	:A.kaviyarasan
	*Created on :27-08-2018
	*Parameter  :orgin and destination airport code    
	*Description:This function is to get  the primary users for passed sector's based on group id.
	*Return		: 	Array (primary user details)
	*****/
	public  function _getPrimaryUserForSectors($_Sorgin,$_Sdestination='All')
	{
		if(empty($_Sorgin))
			$_Sorgin='All';
		global $CFG;
		$sql="	SELECT 
					sum.user_id,
					sum.group_id,
					sum.sector_id,
					sm.origin,
					sm.destination,
					ud.corporate_id,
					".encrypt::_decrypt('ud.title')." AS title,
					".encrypt::_decrypt('ud.first_name')." AS first_name,
					".encrypt::_decrypt('ud.last_name')." AS last_name,
					".encrypt::_decrypt('ud.email_id')." AS email_id
				FROM 
					 ".$CFG['db']['tbl']['sector_user_mapping']." sum
				INNER JOIN ".$CFG['db']['tbl']['user_details']." ud
				ON 	ud.user_id=sum.user_id 
				INNER JOIN ".$CFG['db']['tbl']['sector_management']." sm 
				ON 	sm.sector_id=sum.sector_id  
				WHERE sm.active_status='Y' 
				AND sum.primary_user=1 AND ";
		$_ScheckExactUser=$sql."sm.origin='".$_Sorgin."' AND sm.destination='".$_Sdestination."'";
		//passing the query and getting the primary user's based on passed orgin and destination
		if(DB::isError($_Oresult = $this->_Oconnection->query($_ScheckExactUser)))
		{
			fileWrite($_ScheckExactUser,"SqlError","a+");
			return false;
		}
		//check the row is present in the sector_user_mapping	
		if(!$_Oresult->numRows()>0)
		{
			if(($_Sorgin!='All')&&(!$_Oresult->numRows()>0))
			{
				//check destination All user for this orgin
				$_ScheckDestinationAllUser=$sql."sm.origin='".$_Sorgin."' AND sm.destination='All'";
				if($_ScheckExactUser!=$_ScheckDestinationAllUser)
				{
					if(DB::isError($_Oresult = $this->_Oconnection->query($_ScheckDestinationAllUser)))
					{
						fileWrite($_ScheckDestinationAllUser,"SqlError","a+");
						return false;
					}
				}
			}
			if(($_Sdestination!='All')&&(!$_Oresult->numRows()>0))
			{
				//check the orgin All user for this orgin
				$_ScheckOrginAllUser=$sql."sm.origin='All' AND sm.destination='".$_Sdestination."'";
				if($_ScheckExactUser!=$_ScheckOrginAllUser)
				{
					if(DB::isError($_Oresult = $this->_Oconnection->query($_ScheckOrginAllUser)))
					{
						fileWrite($_ScheckOrginAllUser,"SqlError","a+");
						return false;
					}
				}
			}
				
		}
		//returning false if all possibilities fails
		if(!$_Oresult->numRows()>0)
			return false;
		//getting the results
		while($row=$_Oresult->fetchRow(DB_FETCHMODE_ASSOC))
		{
				$_AprimaryUsers[$row['group_id']] = $row;
		}
		return $_AprimaryUsers;
	}
	
	/* Function    : _checkToFetchBaggageFare
	 * Author      : Subalakshmi S
	 * Modified by : Dilli Raj P
	 * Created on  : 03.10.2018
	 * Modified on : 24-Apr-2019
	 * Description : This function is to check whether to fetch baggage fare
	 * 				incase of NOBAG or 0BAG 
	 */
	function _checkToFetchBaggageFare($_AflightDetails)
	{
		global $CFG;
		$_SfetchBaggageFare = 'N';
		
		foreach($_AflightDetails as $_Ikey => $_AflightValues)
		{
			$_SfareBasisCode = $_AflightValues['fareDetails'][0]['fare_basis_code'];
			// Checking whether the farebasis code have multiple values 
			if(is_array($CFG['site']['baggageFareBasisCode']))
			{
				//Fare basis code should have "NOBAG" or "0BAG"
				foreach($CFG['site']['baggageFareBasisCode'] as $_SfareBasisKey)
				{
					$_Sresult = strpos($_SfareBasisCode,$_SfareBasisKey);
					if($_Sresult !== false)
					{
						$_SfetchBaggageFare = 'Y';
						break 2;
					}
				}
			}
			else if($CFG['site']['baggageFareBasisCode']!='')
			{
				//Fare basis code should have "NOBAG"
				$_Sresult = strpos($_SfareBasisCode,$CFG['site']['baggageFareBasisCode']);
				if($_Sresult !== false)
				{
					$_SfetchBaggageFare = 'Y';
					break;
				}
			}
		}
		
		
		return $_SfetchBaggageFare;
	} 
	
	/* Function    : _checkIsModify
	 * Author      : Subalakshmi S
	 * Created on  : 05.10.2018
	 * Description : This function is to check whether the request is modify
	 */
	function _checkIsModify($_IrequestMasterId,$_SincludeRQ = 'N',$_SfetchFromDB='N')
	{
		global $CFG;
		$_AmodifiedRequestDetails = array();
		//Checks from static array
		$_AstaticData = $this->_staticData('_checkIsModify',$_IrequestMasterId.'_'.$_SincludeRQ);
		if($_AstaticData !== false && $_SfetchFromDB == 'N')
			$_AmodifiedRequestDetails = $_AstaticData;
		else
		{
			// Check whether the modified request is farequoted or not 
			$sqlModifyRequest= "SELECT
									modify_status,
									request_master_history_id
								FROM
								".$CFG['db']['tbl']['request_master_history']."
								WHERE
									request_master_id = ".$_IrequestMasterId."
								ORDER BY
									request_master_history_id
								DESC LIMIT 1";
								
			if(DB::isError($resultModifyRequest=$this->_Oconnection->query($sqlModifyRequest)))
			{
				fileWrite($sqlModifyRequest,"SqlError","a+");
				return false;
			}
			if($resultModifyRequest->numRows() > 0)
			{
				$rowModifyRequest=$resultModifyRequest->fetchRow(DB_FETCHMODE_ASSOC);
				/*Add '16' to check the modify request when it is sent for review status*/
				$_Astatus = array('RQ','AN','SR','RA','RR');
				if($_SincludeRQ == 'Y')
					array_push($_Astatus,'NA');
				if(in_array($this->_getCurrentStatusCode($rowModifyRequest['modify_status']),$_Astatus))
				{
					$_AmodifiedRequestDetails['requestModifyStatus'] = 'Y';
					$_AmodifiedRequestDetails['modifyStatus'] = $rowModifyRequest['modify_status'];
					$_AmodifiedRequestDetails['requestMasterHistoryId'] = $rowModifyRequest['request_master_history_id'];
				}
				else
					$_AmodifiedRequestDetails['requestModifyStatus'] = 'N';
			}
			$this->_staticData('_checkIsModify',$_IrequestMasterId.'_'.$_SincludeRQ,$_AmodifiedRequestDetails);
		}
		
		return $_AmodifiedRequestDetails;
	}
	
	/*
	*Function name:_getEmailCheckBoxSettings()
	*Author       :A.kaviyarasan
	*Arguments    :Smarty connection and userId
	*Descscription  :(For code reusablitiy convereted as function)This function is used to check and compare the mapping between email_setting and user_email_mapping table and based the mapping a checkbox will be checked in the user edit related pages.
	*created date :26-10-2018
	*/ 
	function _getEmailCheckBoxSettings($_IuserId='',$_IcorporateTypeId=0)
	{
		global $CFG;
		if($_IuserId!='')
		{
			//getting all the email settings which has active status
			$_AmailSettings=$this->_getEmailSetting();
			//removable setting id(25-Send for review,26-Send for review,27-Flight controller reject) for travel users,(39-Marketing) for airline
			$_ArestrictedIds=$CFG["emailSettings"]["hideMailsBasedOnCorporateType"][$_IcorporateTypeId];  
			//checking the GDBR configuration
			if(isset($CFG["limit"]["GDPR"]))
			{
	       		//getting the marketing mail type index
	       		$_SmarketingIndex=array_search("Marketing", array_column($_AmailSettings, 'email_type'));
	       		//checking the GDBR configuration is enabled  for this corporate type
	       		if(in_array($_IcorporateTypeId,$CFG["limit"]["GDPR"]["marketing"]["corporateTypeIds"]))
	       		{
	       			//checking the configuration is enabled for after login(edit user,edit profile,edit travel agent)
	       			if($CFG["limit"]["GDPR"]["marketing"]["showAfterLogin"]!="Y")
	       			{
	       				//since GDPR marketing mail type is not available after login, removing it from insertion and  updation 
	       				if($_SmarketingIndex)
	       					$_ArestrictedIds[]=$_AmailSettings[$_SmarketingIndex]["email_setting_id"];
	       			}
	       		}
	        	else
	        	{
	           		//since GDBR marketing is not available for this corporate,removing marketing mail type from insertion and updation
	           		if($_SmarketingIndex)
	           	    	$_ArestrictedIds[]=$_AmailSettings[$_SmarketingIndex]["email_setting_id"];
	           	}
	        }
			
			//removing the restricted email types from insertion
			$_AallsettingIds=array_column($_AmailSettings,'email_setting_id');	
			foreach ($_ArestrictedIds as $_Iid)
			{
				$_IsettingIndex=array_search($_Iid, $_AallsettingIds);	
				//checking and removing the index
				if($_IsettingIndex)
					unset($_AmailSettings[$_IsettingIndex]);
			}


			//getting all the mapped settings based on the userid
			$_AuserEmailMappings=$this->_getUserEmailMapping($_IuserId);
			//default checkBox checked count
			$_IcheckedCount=0;
			//getting count of the settings
			$_IAllSettingsCount=count($_AmailSettings);
			$_ImappedSettingsCount=count($_AuserEmailMappings);
			
			if($_ImappedSettingsCount>0)
			{
				//checking the missed mapped setting
				if($_IAllSettingsCount>$_ImappedSettingsCount)
				{
					//storing the missed count
					$_IcheckedCount=$_IAllSettingsCount-$_ImappedSettingsCount;
				}

				foreach($_AmailSettings as $_Ikey => $_AeachMailSetting)
				{
					
	    			$_IsettingIdIndex=array_search($_AeachMailSetting["email_setting_id"], array_column($_AuserEmailMappings, 'email_setting_id'));
	    			//handling the mapped mails against user
	    			if(is_numeric($_IsettingIdIndex))
	    			{
	    				//storing the appropriate mapped setting details into the base email setting array for the corresponding user
						$_AmailSettings[$_Ikey]['user_email_mapping_id']=$_AuserEmailMappings[$_IsettingIdIndex]['user_email_mapping_id'];
						$_AmailSettings[$_Ikey]['user_id']=$_AuserEmailMappings[$_IsettingIdIndex]['user_id'];
						$_AmailSettings[$_Ikey]['language']=$_AuserEmailMappings[$_IsettingIdIndex]['language'];
						$_AmailSettings[$_Ikey]['email_status']=$_AuserEmailMappings[$_IsettingIdIndex]['email_status'];
						if($_AuserEmailMappings[$_IsettingIdIndex]['email_status']=="Y")
							$_IcheckedCount++;
						else
							$_AmailSettings[$_Ikey]['checkedStatus']="unchecked";
	    			}
	    			else
	    			{
	    				//since the mail type  is not mapped against the user changing the status
	    				$_AmailSettings[$_Ikey]['checkedStatus']="unchecked";
	    			}

				}

				if($_IAllSettingsCount==$_IcheckedCount)
					$_SallSettingCheckBox="checked";
				else
					$_SallSettingCheckBox="unchecked";
			}
			else
				$_SallSettingCheckBox="checked";

			//storing the variables into smarty
			$this->_Osmarty->assign("allSettingCheckBox",$_SallSettingCheckBox);
			$this->_Osmarty->assign("userMappingCount",$_ImappedSettingsCount);
			$this->_Osmarty->assign("emailSetting",array_values($_AmailSettings));
		}
	}

	/*
	 * Author       : Ganesan.S
	 * Created Date : 31-10-2018
	 * Input        : Series request id
	 * Output       : PNR
	 * Description  : Get parent group pnr, based on series request id
	 */ 
	function _getParentGroupPNR($_IseriesRequestId)
	{
		global $CFG;
		$selectPNR = "SELECT 
							pbd.pnr 
						FROM 
							".$CFG['db']['tbl']['pnr_blocking_details']." pbd 
						INNER JOIN request_approved_flight_details rafd ON pbd.request_approved_flight_id = rafd.request_approved_flight_id 
						INNER JOIN series_request_details srd ON rafd.series_request_id = srd.series_request_id 
						WHERE srd.series_request_id = ".$_IseriesRequestId.";";
		$_SselectedPNR = $this->_executeQuery($selectPNR);
		return $_SselectedPNR[0]['pnr'];
	}
	
	
	
	/**
	 * Description : This function is used to get the faredetails against each series flight schedule id
	 * Author      : Dilli Raj P
	 * Created On  : 12-Nov-2018
	 * Input       : Seriesflightscheduleid
	 * Output 	   : Fare detail array
	**/
	function _getFareDetails($_IseriesFlightScheduleId)
	{
		global $CFG;
		$_AstaticData = $this->_staticData('_getFareDetails',$_IseriesFlightScheduleId);
		if($_AstaticData !== false)
			$_AfareDetails = $_AstaticData;
		else
		{
			fileRequire('dataModels/class.fareDetails.php');
			$this->_OfareDetails = new fareDetails();
			$this->_OfareDetails->_Oconnection = $this->_Oconnection;
			$this->_OfareDetails->_IseriesFlightScheduleId = $_IseriesFlightScheduleId;
			$_AfareDetails = $this->_OfareDetails->_selectFareDetails();
			foreach($_AfareDetails as $_IfareKey => $_AfareValue)
			{
				$_AchdIntFareBasis = json_decode($_AfareValue['chd_inf_basis_code'],1);
				if(!empty($_AchdIntFareBasis))
				{
					$_AfareDetails[$_IfareKey]['chd_fare_basis_code'] = $_AchdIntFareBasis['CHD'];
					$_AfareDetails[$_IfareKey]['inf_fare_basis_code'] = $_AchdIntFareBasis['INF'];
				}
			}
			$this->_staticData('_getFareDetails',$_IseriesFlightScheduleId,$_AfareDetails);
		}

		return $_AfareDetails;
	}
	/**
     * @Description This function is used to get cancel poilicy details 
     * @Author      Anboli M.
     * @Created     Date 30-11-2018
     * @param       _IcorporateId,_SactivationStatus
     * @return      Cancel policy array
     */
	function _getCancelPolicydetails($_IcancelPolicyId = 0, $_SdefaultStatus = '',$_ScancelDescription = 'Y')
	{
		global $CFG;

		$_AcancelPolicyDetails = array();
		if($_IcancelPolicyId == 0 && $_SdefaultStatus == '')
			return $_AcancelPolicyDetails;

		$_Skey = $_IcancelPolicyId .'_'. $_SdefaultStatus.'_'.$_ScancelDescription;
		$_AstaticData = $this->_staticData("_getCancelPolicydetails",$_Skey);
		if($_AstaticData !== false)
			return $_AstaticData;

		$_AsqlSelectField = array('cancel_policy_id','cancel_policy_name');
		if($_ScancelDescription == 'Y')
			$_AsqlSelectField[] = 'cancel_policy_description';
		$sql = "SELECT
					".implode(',',$_AsqlSelectField)."
				FROM
					".$CFG['db']['tbl']['cancel_policy_details'];

		$_Aconditions = array();
		if($_IcancelPolicyId > 0)
			$_Aconditions[] = 'cancel_policy_id = "'.$_IcancelPolicyId.'"';
		if($_SdefaultStatus != '')
			$_Aconditions[] = 'default_status = "'.$_SdefaultStatus.'"';
		
		$sql .= ' WHERE ' . implode(' AND ', $_Aconditions);

		if(DB::isError($result = $this->_Oconnection->query($sql)))
		{
			fileWrite($sql,"SqlError","a+");
			return false;
		}

		if ($result->numRows() > 0)
		{
			$_AcancelPolicyDetails = $result->fetchRow(DB_FETCHMODE_ASSOC);
			$search = array("\n","\N");
			$replace = array("<br>"," ");
			if(isset($_AcancelPolicyDetails['cancel_policy_description']))
				$_AcancelPolicyDetails['cancel_policy_description'] = str_replace($search,$replace,$_AcancelPolicyDetails['cancel_policy_description']);
			$this->_staticData("_getCancelPolicydetails", $_Skey, $_AcancelPolicyDetails);
		}
		return $_AcancelPolicyDetails;
	}

	/* Function    : _prepareSubstringOfPolicy
	 * Author      : Subalakshmi S
	 * Created on  : 17.12.2018
	 * Description : This function is to prepare the substring while policy execution.
	 * 				 when there is connecting flights or interline flights
	 */
	 
	function _prepareSubstringOfPolicy($_ArequestCriteria,$_SpolicyCriteria,$_SlogicalValue)
	{
		$_Scount = count($_ArequestCriteria);
		$_SconditionString = '(';
		for($_Skey=0;$_Skey<$_Scount;$_Skey++)
		{
			if($_Skey != $_Scount-1 && $_Scount>1)
				$_Soperator = '||';
			else 
				$_Soperator = '';
				
			if($_SlogicalValue == 'BTWN')
				$_SconditionString .= "'".$_ArequestCriteria[$_Skey]."' >= '".$_SpolicyCriteria[0]."' && '".$_ArequestCriteria[$_Skey]."' <= '".$_SpolicyCriteria[1]."' ".$_Soperator;
			elseif(is_numeric($_SpolicyCriteria))
				$_SconditionString .= "'".$_ArequestCriteria[$_Skey]."' ".$_SlogicalValue." '".$_SpolicyCriteria."' ".$_Soperator;
			else
				$_SconditionString .= " strtoupper('".$_ArequestCriteria[$_Skey]."')".$_SlogicalValue." strtoupper('".$_SpolicyCriteria."') ".$_Soperator;
		}
		$_SconditionString .= ')';
		return $_SconditionString;
	}


	/*
	 Desc:Due to change in tables,
	 functionName:_getFareBasisCodeForLowestFareFromFlightCabinMappingDetails,
	 Author:Gopinath.
	 AddedDate:20-dec-2018,
	 */

	private function _getRequestApprovedFlightsIds($_paramARequestApprovedFlightDetails){
		$Aid = array();
		foreach ($_paramARequestApprovedFlightDetails as $eachReq) {
			array_push($Aid,$eachReq['request_approved_flight_id']);
		}
		return $Aid;
	}

	private function _getFareBasisCodeOfMinBaseFareFromRAFId($_AparamIDs){
		global $CFG;
		$this->_staticData("_getFareBasisCodeOfMinBaseFareFromRAFId", $_AparamIDs);
		if ($_AstaticData !== false) {
			return $_AstaticData;
		}
		$sql = "SELECT
				fcmd.fare_basis_code AS fare_basis_code,
				fcmd.request_approved_flight_id,
				min(fcmd.cabin_base_fare)
				FROM
				".$CFG['db']['tbl']['flight_cabin_mapping_details']." fcmd
				WHERE
				fcmd.request_approved_flight_id IN (".implode(',',$_AparamIDs).")
				GROUP BY request_approved_flight_id
				ORDER BY
				via_flight_id";

		$res = $this->_executeQuery($sql);
		$akey = array_column(array_values($res),'request_approved_flight_id');$avals = array_column(array_values($res),'fare_basis_code');
		$map1stValueAsKey2ndValueAsVal = array_combine($akey,$avals);
		$this->_staticData("_getFareBasisCodeOfMinBaseFareFromRAFId", $_AparamIDs, $map1stValueAsKey2ndValueAsVal);
		return $map1stValueAsKey2ndValueAsVal;
	}


		/**
 * @Author	: Subalakshmi S 2019-12-02
 * @Modified by 	: kathir B 2022-12-10
 * @Desc	: To change the request status as Billed whose penalty date is started
 */
function _penaltyDateStatusChange() {
	global $CFG;
	$_AstatusCode = array('AR');
	$_AstatusDetails = $this->_getStatusDetails('', $_AstatusCode);
	$_Astatus = implode(",", $_AstatusDetails);
	$sql = "SELECT
					arm.airlines_request_id,
					arm.request_master_id,
					arm.current_status,
					tm.transaction_id,
					rtm.expiry_date
				FROM
					airlines_request_mapping arm,
					transaction_master tm,
					request_timeline_details rtm,
					request_group_details rgd
				WHERE
					tm.airlines_request_id = arm.airlines_request_id
					AND
					tm.transaction_id = rtm.transaction_id
					AND
					rgd.transaction_master_id = tm.transaction_id
					AND
					rgd.series_group_id = rtm.series_group_id
					AND
					rtm.timeline_type  = 'PENALTY'
					AND
					rtm.status != 'TIMELINEEXTEND'
					AND
					arm.current_status IN (" . $_Astatus . ")
					AND
					rgd.group_status IN (" . $_Astatus . ")
				ORDER BY
					arm.request_master_id,
					tm.transaction_id DESC,rtm.expiry_date ASC";


	if (DB::isError($result = $this->_Oconnection->query($sql))) {
		fileWrite($sql, "SqlError", "a+");
		return false;
	} else {
		if ($result->numRows() > 0) {

			$tempArray = array();
			$_AchildDetails = array();
			while ($row = $result->fetchRow(DB_FETCHMODE_ASSOC)) {
				$_DcurrentDate = $this->_getUTCDateValue();
				if (in_array($row['request_master_id'], $tempArray)) {
					continue;
				}

				$tempArray[] = $row['request_master_id'];
				if (!empty($row['expiry_date']) && $row['expiry_date'] != "0000-00-00 00:00:00" && (strtotime($row['expiry_date']) < strtotime($_DcurrentDate))) {
					fileRequire("dataModels/class.requestGroupDetails.php");
					$_OrequestGroupDetailsObj = new requestGroupDetails();
					$_OrequestGroupDetailsObj->_Oconnection = $this->_Oconnection;
					$_IrequestTypeId = $this->_getRequestType($row['request_master_id'], 'Y');
					if (in_array($_IrequestTypeId, array(2, 3))) {
						$_OrequestGroupDetailsObj->_SgroupStatus = 9;
					}
					$_OrequestGroupDetailsObj->_IairlineRequestId = $row['airlines_request_id'];
					$_OrequestGroupDetailsObj->_ItransactionMasterId = $row['transaction_id'];
					$_AresultRequestGroupDetails = $_OrequestGroupDetailsObj->_selectRequestGroupDetails();
					$_ArequestGroupDetailsId = implode(",", array_column($_AresultRequestGroupDetails, 'request_group_id'));
					$_OrequestGroupDetailsObj->__construct($this->_Oconnection);
					$_OrequestGroupDetailsObj->_IrequestGroupId = $_ArequestGroupDetailsId;
					$_OrequestGroupDetailsObj->_SgroupStatus = $this->_getCurrentStatusId('BI');
					$_OrequestGroupDetailsObj->_INcondition = "IN";
					$_OrequestGroupDetailsObj->_updateRequestGroupDetails();

					$flag = false;
					fileRequire("dataModels/class.airlinesRequestMapping.php");
					$_objAirlinesReqMap = new airlinesRequestMapping();
					$_objAirlinesReqMap->__construct();
					$_objAirlinesReqMap->_Oconnection = $this->_Oconnection;
					$_objAirlinesReqMap->_IairlinesRequestId = $row['airlines_request_id'];
					$_objAirlinesReqMap->_SlastUpdated = $_DcurrentDate;
					$_objAirlinesReqMap->_IcurrentStatus = $this->_getCurrentStatusId('BI'); //Offer expired status
					$flag = $_objAirlinesReqMap->_updateAirlinesRequestMapping();
					/* update penalty status to child request */
					$_AquoteType = $CFG['timeLineMatrix']['penaltyStartDate']['childRequestQuoteType'];

					$_AchildDetails = $this->_getResubmitedChild($row['request_master_id'], $_AquoteType);
					foreach ($_AchildDetails['request_master_id'] as $childKey => $childValue) {
						$_objAirlinesReqMap->__construct();
						$_objAirlinesReqMap->_Oconnection = $this->_Oconnection;
						$_SPNR = $this->_getPNR($childValue);
						$_ScurrentStatus = $this->_getStatusFromRequestId($childValue);
						if ($_SPNR && $_ScurrentStatus == $this->_getCurrentStatusId('AR')) {
							$airlinesRequestId = $this->_getAirlineRequestId($childValue);
							$_objAirlinesReqMap->_IairlinesRequestId = $airlinesRequestId;
							$_objAirlinesReqMap->_SlastUpdated = $_DcurrentDate;
							$_objAirlinesReqMap->_IcurrentStatus = $this->_getCurrentStatusId('BI');
							$_objAirlinesReqMap->_updateAirlinesRequestMapping();
							$_OrequestGroupDetailsObj = new requestGroupDetails();
							$_OrequestGroupDetailsObj->_Oconnection = $this->_Oconnection;
							$_OrequestGroupDetailsObj->_IairlineRequestId = $airlinesRequestId;
							$_OrequestGroupDetailsObj->_SgroupStatus = $this->_getCurrentStatusId('BI');
							$_OrequestGroupDetailsObj->_updateRequestGroupDetails();
						}
					}
					
					if ($flag) {
						fileWrite('Time: ' . $row['expiry_date'] . '<' . $_DcurrentDate . ' Penalty status has been changed for the request ' . $row['request_master_id'], 'penaltyStatusChange', 'a+');

					}
				}
			}
		} else {
			return true;
		}

	}
}

	/*
     * @Description This function is used to get OOH request in a given group 
     * @Author      Anboli M.
     * @Created     Date 10-01-2019
     * @param       _IrequesterMasterId
     * @return      Status
     */
	function _getOohRequestInGroup($_IrequesterMasterId)
	{
		global $CFG;
		fileRequire("dataModels/class.requestQuoteDetails.php");
		$_requestQuoteDetails = new requestQuoteDetails;
		$_requestQuoteDetails->_Oconnection=$this->_Oconnection;
		$_ArequestQuoteDetails=array();

		$_requestQuoteDetails->_IrequestMasterId=$_IrequesterMasterId;
		$_requestQuoteDetails->_SquoteType='OH';
		$_requestQuoteDetails->_Sstatus='NEW';
		$_ArequestQuoteDetails=$_requestQuoteDetails->_selectRequestQuoteDetails();
		filewrite("OOH request details:".print_r($_ArequestQuoteDetails,1),'oohFareCheck','a+');

		return $_ArequestQuoteDetails;

	}

	/*
	end of series of functions for table change.
	*/
	
	/*
	 * @Description :- This function is used to make the country field editable/non-editable in all the pages.
	 * 					ADD user, edit user, add travel agent, edit travel agent, edit profile 
	 * @Date 		:- 4-02-2019
	 * @Author 		:- Vishwa Raj
	 * 
	 * */
	function _editNonEditCountryDetails(){
		global $CFG;
		$editCountry = 'Yes';
		if(isset($CFG['limit']['restrictedGroups']['restrictedGroupIds']) && !empty(isset($CFG['limit']['restrictedGroups']['restrictedGroupIds']))){			
			// get the userType to check the variables
			$userType = '';
			// check for retailUser.
			if($_SESSION['groupRM']['groupId'] == 4 && in_array($_SESSION['groupRM']['groupId'],$CFG['limit']['restrictedGroups']['restrictedGroupIds'])){	// check if the person is a retail user
				$editCountry = 'No';
			}
			// check if it is an IATA/NONIATA agent 
			else if($_SESSION['groupRM']['groupIataCode'] == "NONIATA"){
				$userType = "NONIATA";
			}
			else{
				$userType = "IATA";
			}
			// check if the groupId is restricted or not and also check if it is an IATA or a NONIATA travel agent
			if(isset($CFG['limit']['restrictedGroups']['restrictedAgentType']) && in_array($userType,$CFG['limit']['restrictedGroups']['restrictedAgentType']) && in_array($_SESSION['groupRM']['groupId'],$CFG['limit']['restrictedGroups']['restrictedGroupIds'])){
				$editCountry = 'No';
			}
		}
		return $editCountry;
	}
	/**
		Author : sri muthu rajesh
		Date   : 05-03-2019
		Description : spilting airlinecode string and merging the same via flights
		*/
	function _viaFlightMergeString($_SinputFlightNumber){
		global $CFG;
	  	$_AflightNumberSlash = array();
	  	$_SinputFlightNumber = explode(",", $_SinputFlightNumber); 
	  	foreach ($_SinputFlightNumber as $flightNumberKey => $flightNumberValue) {
		    if($CFG["site"]["showAirlineCodeAllFlights"]=="Y"){
		        $_AflightNumberSlash[] = implode("/",array_unique(explode("/", $flightNumberValue)));
		    }else{
		      	$_AflightNumberCodeArray = explode("-", $flightNumberValue);
		      	$_AflightNumberSlash[] = $_AflightNumberCodeArray[0]."-".implode("/",explode("/", $_AflightNumberCodeArray[1]));
		    }
	  	}
	  	return implode(",", $_AflightNumberSlash);
	}
	/**
	 * Desc - Update function dynamically
	 * Author - Anboli M.
	 * Created On - 15-Mar-2019
	**/
	function _updateQuery($_StableName,$_AupdateField=array(),$_AconditionDetails=array())
    {
        global $CFG;
        /*Query making process starts*/
        if($_StableName != '')
            $sql = "UPDATE ".$CFG['db']['tbl'][$_StableName]." SET ";
        /*updtaing fields set here*/
        if(!empty($_AupdateField))
        {
            $_Scomma = '';
            foreach ($_AupdateField as $key => $value) {
                $sql .= $_Scomma." ".$key." = '".$value."'";
                $_Scomma = ',';
            }

        }
        /*Conditions added here*/
        if(!empty($_AconditionDetails))
        {
            $sql .= " WHERE ";
            $_Sglue = '';
            foreach ($_AconditionDetails as $field => $record) {
                $_Scondition = ($record['condition'] != '')? $record['condition'] ." ('".implode("','",$record['value'])."')": "='".$record['value']."'";
                    $sql .= $_Sglue." ".$field." ".$_Scondition;
                $_Sglue = ' AND ';
            }
        }  
        /*Execute the query*/ 
        if(DB::isError($result=$this->_Oconnection->query($sql)))
        {
            fileWrite($sql,"SqlError","a+");
            return false;
        }
        return true;
    } 

	/**
	 * Desc - To get the series group id using series request id
	 * Author - Dilli Raj P.
	 * Created On - 30-Mar-2019
	**/

    public function _getSeriesGroupId($_AseriesRequestId)
    {
    	fileRequire('dataModels/class.seriesRequestDetails.php');
    	$this->_ObjseriesRequestDetails = new seriesRequestDetails();
		$this->_ObjseriesRequestDetails->__construct();
		$this->_ObjseriesRequestDetails->_Oconnection=$this->_Oconnection;
		$this->_ObjseriesRequestDetails->_INcondition = "IN";
		$this->_ObjseriesRequestDetails->_IseriesRequestId = is_array($_AseriesRequestId) ?
				implode(',',$_AseriesRequestId) : $_AseriesRequestId ; 
		$_AseriesRequestDetails = $this->_ObjseriesRequestDetails->_selectSeriesRequestDetails();
		return array_unique(array_column($_AseriesRequestDetails, 'series_group_id'));
	}
	
	/**
	 * Desc - To check whether this transaction is modified transaction or not
	 * Author - Dilli Raj P.
	 * Created On - 30-Mar-2019
	**/
	public function _checkIsModifyTransaction($_ItransactionId)
	{
		$_Aresult = array();
		$_Aresult['modifyTransaction'] = 'N';
		fileRequire('dataModels/class.requestApprovedFlightDetails.php');
		$_OrequestApprovedFlightDetails = new requestApprovedFlightDetails();
		$_OrequestApprovedFlightDetails->__construct();
		$_OrequestApprovedFlightDetails->_Oconnection=$this->_Oconnection;
		$_OrequestApprovedFlightDetails->_ItransactionMasterId = $_ItransactionId;
		$_ArequestApprovedFlightDetails = $_OrequestApprovedFlightDetails->_selectRequestApprovedFlightDetails();
		$_AseriesHistoryId = array_column($_ArequestApprovedFlightDetails,'series_request_history_id');
		$_AseriesHistoryId = array_diff($_AseriesHistoryId,array(0));
		if(!empty($_AseriesHistoryId))
		{
			$_Aresult['modifyTransaction'] = 'Y';
			$_Aresult['seriesRequestHistoryId'] = $_AseriesHistoryId;
		}
		return $_Aresult;
	}
	/**
	 * Desc : This function is used to validate the active group count of the sibilings request
	 * Param : 1. Request master id , 2. Whether we consider the given request id or not , 3. Based on last transaction
	 * Author : Dilli Raj P.
	 * Created on : 11-Apr-2019
	**/
	public function _commonValidation($_IrequestMasterId,$_SconsiderGivenRequest = 'N',$_SbasedLastTransaction = 'N')
	{
		global $CFG;
		$_AcheckTender = array();
		$_Aresult =  $_AsiblingsRequestMasterId = array();
		// Setting the default values
		$_AgroupDetails = $this->_getActiveGroupCount($_IrequestMasterId,'Y',$_SbasedLastTransaction);
		$_Aresult['currentGroupCount'] = $_AgroupDetails['groupCount'];
		$_Aresult['ableToProceed'] = 'N';
		$_Aresult['siblingsGroupCount'] = $_AgroupDetails['siblingsCount'];
		$_SpnrStatus='N';
        if(!empty($this->_getPNR($_IrequestMasterId)))
        	$_SpnrStatus='Y';
		$_Aresult['pnrStatus'] = $_SpnrStatus;
		// Getting the request type
		$_IrequestType = $this->_getRequestType($_IrequestMasterId,'Y');
		$_IparentPaxCount=0;
		// To validate pax count for conference request while partial accept or partial approve
		if($_IrequestType == '3')
		{
			fileRequire("classes/class.requestSetting.php");
			$this->_OrequestSetting = new requestSetting;
			$this->_OrequestSetting->_Oconnection = $this->_Oconnection;
			$this->_OrequestSetting->_Osmarty = $this->_Osmarty;
			$seriesGroupIds = $this->_getSeriesRequestId($_IrequestMasterId);
			$_IseriesGroupIdsLoop=1;
			foreach($seriesGroupIds as $key=>$value)
			{
				if($value['mapped_series_request_id']==0) 
				{
					$_ApaxPolicyDataExisting =  $this->_OrequestSetting->_getPaxCountForRequestPolicy($_IrequestMasterId,$value['series_request_id']);
					$_Aresult['paxCountData'][$_IseriesGroupIdsLoop]['originalPaxCount'] = $_ApaxPolicyDataExisting['number_of_passenger'];
					$_IseriesGroupIdsLoop++;
				}
			}
			//Check the corresponding request modify status
			$_AmodifyStatus = $this->_checkIsModify($_IrequestMasterId);
			//If it is modify request then get the pax count from history table
			if($_AmodifyStatus['requestModifyStatus'] == 'Y')
			{
				fileRequire('classes/class.processRequest.php');
				$_OprocessRequest = new processRequest();
				$_OprocessRequest->__construct();
				$_OprocessRequest->_Oconnection = $this->_Oconnection;
				//Getting the newly added group information
				$_AseriesRequestHistory = $_OprocessRequest->_getSeriesRequestHistory($_IrequestMasterId,$_AmodifyStatus['requestMasterHistoryId'],'Y');
				foreach($_AseriesRequestHistory as $_AhistoryValue)
				{
					//Push the pax count to the corresponding series group id
					if($_AhistoryValue['mapped_series_request_id'] == 0)
						$_Aresult['paxCountData'][$_AhistoryValue['series_group_id']]['originalPaxCount'] = $_AhistoryValue['number_of_passenger'];
				}
			}
		}
		// If we going to consider the given request then the given having more than the minimum
		// 		group count then no need to check with sibilings request.
		if($_SconsiderGivenRequest == 'Y')
		{
			if($this->_validateGroupCount($_Aresult['currentGroupCount'],$_IrequestType) == 'Y')
				return $_Aresult;
		}

		// Getting the sibilings request id
		$_AsiblingsRequestMasterId = $this->_getSiblingsRequest($_IrequestMasterId);

		if($_AsiblingsRequestMasterId!='')
		{
			$_ArequestMasterIds=explode(',', $_AsiblingsRequestMasterId);
			foreach ($_ArequestMasterIds as $requestKey => $requestVal)
			{
				if($_IrequestMasterId!=$requestVal)
					$_IparentPaxCount +=$this->_getCurrentPaxCount($requestVal);
					
			}
		}
		$_Aresult['originalParentChildPaxCount'] = $_IparentPaxCount;
		// If the given request doesn't having any active group then no need to check with siblings
		if($_Aresult['currentGroupCount'] > 0 && !empty($_AsiblingsRequestMasterId))
		{
			//Getting sibilings request ids
			$_AchildRequestMasterId = explode(',', $_AsiblingsRequestMasterId);
			
			// Removing the given request id from the siblings request id
			$_AchildRequestMasterId = array_flip($_AchildRequestMasterId);
			unset($_AchildRequestMasterId[$_IrequestMasterId]);
			$_AchildRequestMasterId = array_flip($_AchildRequestMasterId);

			$_IactiveGroupCount = 1;
			if($_SconsiderGivenRequest == 'Y')
				$_IactiveGroupCount = $_Aresult['currentGroupCount'];
			if(!empty($_AchildRequestMasterId))
			{
				foreach($_AchildRequestMasterId as $_IrequestMasterId)
				{
					if($_IrequestMasterId != '')
					{
						$_AgroupDetails = $this->_getActiveGroupCount($_IrequestMasterId,'','','Y');
						$_IchildCount = $_AgroupDetails['groupCount'];
						$_IactiveGroupCount += $_IchildCount;
						$_Aresult['siblingsGroupCount'] += $_IchildCount;	
						if($this->_validateGroupCount($_IactiveGroupCount,$_IrequestType) == 'Y')
						{
							$_Aresult['ableToProceed'] = 'Y';
							break;
						}
					}
				}
			}
		}
		else
			$_Aresult['ableToProceed'] = 'N';
			
		#To reterive the tender information 
		fileRequire("classes/class.getTenderInformation.php");
		$_OgetTenderInformation = new getTenderInformation;
		$_OgetTenderInformation->_Oconnection = $this->_Oconnection;
		$_OgetTenderInformation->_IrequestMasterId = $_IrequestMasterId;
		$_AcheckTender = $_OgetTenderInformation->_checkTenderPnr();
		
		return $_Aresult;
	}
	/**
	 * Desc : This function is used to checking the active group count with config value
	 * Param : 1. Active group count , 2. Request type
	 * Author : Dilli Raj P.
	 * Created on : 11-Apr-2019
	**/
	private function _validateGroupCount($_IgroupCount,$_IrequestType)
	{
		global $CFG;
		$_Sstatus = 'N';
		switch ($_IrequestType) {
			case 1:
				if($_IgroupCount >= 1)
					$_Sstatus = 'Y';
				break;
			case 2:
				if($_IgroupCount >= $CFG['limit']['minimumSeriesGroupCount'])
					$_Sstatus = 'Y';
				break;
			case 3:
				if($_IgroupCount >= $CFG['limit']['minConferenceGroupCount'])
					$_Sstatus = 'Y';
				break;
		}
		return $_Sstatus;
	}
	/**
	 * Desc : This function is used to getting the active group count
	 * Param : 1. Request master id
	 * Author : Dilli Raj P.
	 * Created on : 11-Apr-2019
	**/
	public function _getActiveGroupCount($_IrequestMasterId,$_ScheckPNR = 'N',$_SbasedLastTransaction = 'N',$_SfetchSiblingCount='N')
	{

		$_Aresult = array();
		$_Aresult['groupCount'] = 0;
		$_Aresult['siblingsCount'] = 0;
		$_IbasedLastTransactionId = 0;
		$_IcurrentStatus = $this->_getStatusFromRequestId($_IrequestMasterId);
		$_ScurrentStatusCode = $this->_getCurrentStatusCode($_IcurrentStatus);
		$_AnotAllowedStatusCode = array('RJ','NR','RC','RE','RS','OE','PN','PM','SC');
		$_AnotAllowedStatusCode = ($_ScurrentStatusCode != 'RN') ? array_push($_AnotAllowedStatusCode, 'RN') : $_AnotAllowedStatusCode;

		if($_SbasedLastTransaction == 'Y')
			$_IbasedLastTransactionId = $this->_getLastTransactionMasterId($_IrequestMasterId);

		//For the current request we need to check whether pnr is blocked or not.
		// If it has pnr then we able to proceed without validation
		$_IgroupCount = 0;
		$_Icount=0;
		if($_ScheckPNR == 'Y')
		{
			fileRequire('dataModels/class.pnrBlockingDetails.php');
			$_OpnrBlockingDetails = new pnrBlockingDetails();
			$_OpnrBlockingDetails->__construct();
			$_OpnrBlockingDetails->_Oconnection = $this->_Oconnection;
			$_OpnrBlockingDetails->_IrequestMasterId = $_IrequestMasterId;
			$_OpnrBlockingDetails->_selectPnrBlockingDetails();
			$_IpnrCheck = $_OpnrBlockingDetails->_IcountLoop;
			if($_IpnrCheck > 0)
			{
				$_IairlinesRequestId = $this->_getAirlineRequestId($_IrequestMasterId);
				$_IrequestMasterHistoryId = 0;
				$_AmodifyStatus = $this->_checkIsModify($_IrequestMasterId);
				if($_AmodifyStatus['requestModifyStatus'] == 'Y')
					$_IrequestMasterHistoryId = $_AmodifyStatus['requestMasterHistoryId'];

				fileRequire('dataModels/class.requestGroupDetails.php');
				$_OrequestGroupDetails = new requestGroupDetails();
				$_OrequestGroupDetails->__construct();
				$_OrequestGroupDetails->_Oconnection = $this->_Oconnection;
				$_OrequestGroupDetails->_IairlineRequestId = $_IairlinesRequestId;
				if($_IbasedLastTransactionId > 0)
					$_OrequestGroupDetails->_ItransactionMasterId = $_IbasedLastTransactionId;

				$_AreqGroupDetails = $_OrequestGroupDetails->_selectRequestGroupDetails();
				//For pnr created group we need to set siblings group count as current group count minus one.
				// Then only user can able to proceed with only one group.
				foreach($_AreqGroupDetails as $_Ikey=>$_Avalue)
				{
					$_SgroupStatus = $this->_getCurrentStatusCode($_Avalue['group_status']);
					if($_AmodifyStatus['requestModifyStatus'] == 'Y')
					{
						if($_SgroupStatus!='RQ')
							$_IgroupCount++;
					}
					elseif((!in_array($_SgroupStatus, $_AnotAllowedStatusCode) && $_SgroupStatus!='NJ'))
						$_IgroupCount++;
					#fetch modified group count to check active group count while approve the request
					if($_ScurrentStatusCode=="RM")
					{
						if($_SgroupStatus=="RM")
							$_Icount++;
					}
				}
				if($_Icount!=0)
					$_IgroupCount=$_Icount;
				$_Aresult['groupCount'] = $_IgroupCount;
				if($_IgroupCount>0 && $_SfetchSiblingCount=='Y')
					$_Aresult['siblingsCount'] = ($_IgroupCount - 1);
				return $_Aresult;
			}
		}

		$_IgroupCount = 0;
		if(!in_array($_ScurrentStatusCode,$_AnotAllowedStatusCode))
		{
			if($_ScurrentStatusCode == 'AN')
			{
				$_IlastTransactionId = $this->_getLastTransactionMasterId($_IrequestMasterId);
				$_Avalidity = $this->_getValidityDate($_IrequestMasterId,$_IlastTransactionId);
				$_DcurrentDate = $this->_getUTCDateValue();
				if(strtotime($_Avalidity['fare']['date']) < strtotime($_DcurrentDate))
				{
					$_Aresult['groupCount'] = $_IgroupCount;
					return $_Aresult;
				}
			}
			else if($_ScurrentStatusCode != 'RN')
			{
				array_push($_AnotAllowedStatusCode, 'RN');
			}
			$_IairlinesRequestId = $this->_getAirlineRequestId($_IrequestMasterId);
			$_IrequestMasterHistoryId = 0;
			$_AmodifyStatus = $this->_checkIsModify($_IrequestMasterId);
			if($_AmodifyStatus['requestModifyStatus'] == 'Y')
				$_IrequestMasterHistoryId = $_AmodifyStatus['requestMasterHistoryId'];

			$_IbasedLastTransactionId = 0;
			if($_SbasedLastTransaction == 'Y')
				$_IbasedLastTransactionId = $this->_getLastTransactionMasterId($_IrequestMasterId);

			fileRequire('dataModels/class.requestGroupDetails.php');
			$_OrequestGroupDetails = new requestGroupDetails();
			$_OrequestGroupDetails->__construct();
			$_OrequestGroupDetails->_Oconnection = $this->_Oconnection;
			$_OrequestGroupDetails->_IairlineRequestId = $_IairlinesRequestId;
			$_OrequestGroupDetails->_IrequestMasterHistoryId = $_IrequestMasterHistoryId;
			if($_IbasedLastTransactionId > 0)
				$_OrequestGroupDetails->_ItransactionMasterId = $_IbasedLastTransactionId;
				
			$_ArequestGroupDetails = $_OrequestGroupDetails->_selectRequestGroupDetails();

			foreach($_ArequestGroupDetails as $_Ikey=>$_Avalue)
			{
				$_SgroupStatus = $this->_getCurrentStatusCode($_Avalue['group_status']);
				if(!in_array($_SgroupStatus, $_AnotAllowedStatusCode))
					$_IgroupCount++;
			}
		}
		$_Aresult['groupCount'] = $_IgroupCount;
		return $_Aresult;
	}
	/**
	 * Desc : This function is used to get the request master id based on request id or request history id
	 * Param : 1. RequestId,2.RequestDetailsHistoryId
	 * Author : Dilli Raj P.
	 * Created on : 16-Apr-2019
	**/
	public function _getRequestMasterIdByRequestId($_IrequestId=0,$_IrequestDetailsHistoryId = 0)
	{
		$_IrequesterMasterId = 0;
		if($_IrequestId != 0)
		{
			fileRequire('dataModels/class.requestDetails.php');
			$_OrequestDetails = new requestDetails();
			$_OrequestDetails->__construct();
			$_OrequestDetails->_Oconnection = $this->_Oconnection;
			$_OrequestDetails->_IrequestId = $_IrequestId;
			$_OrequestDetails->_selectRequestDetails();
			$_IrequestMasterId = $_OrequestDetails->_IrequestMasterId;
		}
		else if($_IrequestDetailsHistoryId != 0)
		{
			fileRequire('dataModels/class.requestDetailsHistory.php');
			$_OrequestDetailsHistory = new requestDetailsHistory();
			$_OrequestDetailsHistory->__construct();
			$_OrequestDetailsHistory->_Oconnection = $this->_Oconnection;
			$_OrequestDetailsHistory->_IrequestDetailsHistoryId = $_IrequestDetailsHistoryId;
			$_OrequestDetailsHistory->_selectRequestDetailsHistory();
			$_IrequestMasterId = $_OrequestDetailsHistory->_IrequestMasterId;
		}
		return $_IrequestMasterId;
	}

	/**
	 * Desc : This function is used to get the sibilings request id based on the parent request type
	 * Param : 1. RequestMasterId
	 * Author : Dilli Raj P.
	 * Created on : 16-Apr-2019
	**/
	public function _getSiblingsRequest($_IrequestMasterId)
	{
		global $CFG;

		//Checking whether the given request id is parent or not
		$getParentIdSql = "SELECT 
						  (IF(rm.reference_request_master_id!=0,rm.reference_request_master_id,rm.request_master_id )) as parentRequestMasterid
						  FROM
						  ".$CFG['db']['tbl']['request_master']." rm
						  WHERE
						  rm.request_master_id = ".$_IrequestMasterId; 

							  
		if(DB::isError($resultGetParentId = $this->_Oconnection->query($getParentIdSql)))
		{
			fileWrite($getParentIdSql,"SqlError","a+");
			return false;
		}
		if ($resultGetParentId->numRows() > 0)
		{
			$rowGetParentId = $resultGetParentId->fetchRow(DB_FETCHMODE_ASSOC)['parentRequestMasterid'];
		}

		//To get the siblings request id which is in request type of series and conference only
		$sql = "SELECT 
					GROUP_CONCAT(request_master_id) AS siblingsRequestIds
				FROM 
					".$CFG['db']['tbl']['request_master']."
				WHERE 
					reference_request_master_id=".$rowGetParentId."
				AND 
					request_type_id IN (2,3)";/*Removed group by in order to avoid multiple rows of results*/
					
		if(DB::isError($result=$this->_Oconnection->query($sql)))
		{
			fileWrite($sql,"SqlError","a+");
			return false;
		}
		if($result->numRows() > 0)
		{
			$row=$result->fetchRow(DB_FETCHMODE_ASSOC);
			//Appending the parent request master id to the siblings request id
			if($row['siblingsRequestIds']!='')
				return $row['siblingsRequestIds'].",".$rowGetParentId;
			else
				return $rowGetParentId;
		}
		return false;
	}
	function _getPnrSynRemarks($airlinesRequestId)
	{
		global $CFG;
		$sql="SELECT
			rgd.remarks,
			srd.series_request_id
			FROM
				airlines_request_mapping arm
				inner join request_details rd
				on rd.request_master_id = arm.request_master_id
				inner join series_request_details srd
				on srd.request_id = rd.request_id
				inner join request_group_details rgd
				on rgd.airlines_request_id = arm.airlines_request_id
				WHERE
				srd.series_group_id=rgd.series_group_id AND
				arm.airlines_request_id =".$airlinesRequestId;
					
		if(DB::isError($result=$this->_Oconnection->query($sql)))
		{
			fileWrite($sql,"SqlError","a+");
			return false;
		}
		$resultArray=array();
		if($result->numRows() >0)
		{
			while($row=$result->fetchRow(DB_FETCHMODE_ASSOC))
			{
				if($row['remarks']!="")
					$resultArray[$row['series_request_id']]=$row['remarks'];
			}
		}
		return $resultArray;
	}
	/*
		Author : sri muthu rajesh
		Description : get site languages orgive default language english
		Date  : 03/06/2019
		Arguements: -
		ReturnValue  String	
	**/
	function _getSiteLanguage(){
		global $CFG;
		$_SgroupRmLang='en';
		if(isset($_COOKIE['groupRMLan']) && strlen($_COOKIE['groupRMLan'])) 
			$_SgroupRmLang=strtolower($_COOKIE['groupRMLan']);
		else if(!empty($CFG["groupRM"]["siteLang"]['defaultLang']))
	        $_SgroupRmLang=strtolower($CFG["groupRM"]["siteLang"]['defaultLang']);
	    return $_SgroupRmLang;
	}
	/*
		Author : Gowri
		Description : this function used to fetch the pnr group wise
		Date  : 07/06/2019
		Arguements: request master id and PNR
		ReturnValue:array	
	**/
	function _getGroupPnr($IrequestMasterId,$_Spnr='')
	{
		global $CFG;
		$mealDetails = $_Scondition = '';
		//$_IlastTransactionId = $this->_getLastTransactionMasterId($IrequestMasterId);
		if($_Spnr !='')
			$_Scondition=" AND pbd.pnr='".$_Spnr."'";
	    $sql="SELECT
	    		srd.series_request_id,
	    		srd.series_group_id,
	    		srd.parent_series_request_id,
				rafd.request_approved_flight_id,
				CONCAT(rafd.departure_date,' ',rafd.dep_time,':00') as departure_date,
				pbd.pnr,
				pbd.status,
				pbd.no_of_adult,
				pbd.no_of_child,
				pbd.no_of_infant,
				pbd.no_of_foc
			FROM
				".$CFG['db']['tbl']['request_master']." rm,
				".$CFG['db']['tbl']['request_details']." rd,
				".$CFG['db']['tbl']['series_request_details']." srd,
				".$CFG['db']['tbl']['request_approved_flight_details']." rafd,
				".$CFG['db']['tbl']['pnr_blocking_details']." pbd
			WHERE
				rm.request_master_id=rd.request_master_id
				AND rd.request_id=srd.request_id
				AND srd.series_request_id = rafd.series_request_id
				AND rafd.request_approved_flight_id = pbd.request_approved_flight_id
				-- AND rafd.transaction_master_id = '".$_IlastTransactionId."'
				AND rm.request_master_id='".$IrequestMasterId."'".$_Scondition;

		if(DB::isError($result = $this->_Oconnection->query($sql)))
		{
			fileWrite($sql,'SqlError','a+');
			return false;
		}
		while($row = $result->fetchRow(DB_FETCHMODE_ASSOC))
		{
			$pnrDetails[$row['series_request_id']]['pnr']=$row['pnr'];
			if(!isset($pnrDetails[$row['series_request_id']]['showPnr']))
			{
				$pnrDetails[$row['series_request_id']]['showPnr'][$row['pnr']]['number_of_adult']=$row['no_of_adult'];
				$pnrDetails[$row['series_request_id']]['showPnr'][$row['pnr']]['number_of_child']=$row['no_of_child'];
				$pnrDetails[$row['series_request_id']]['showPnr'][$row['pnr']]['number_of_infant']=$row['no_of_infant'];
				$pnrDetails[$row['series_request_id']]['showPnr'][$row['pnr']]['no_of_foc']=$row['no_of_foc'];
				$pnrDetails[$row['series_request_id']]['showPnr'][$row['pnr']]['series_request_id']=$row['series_request_id'];
				$pnrDetails[$row['series_request_id']]['showPnr'][$row['pnr']]['request_approved_flight_id']=$row['request_approved_flight_id'];
			}
			else
			{
				if(!in_array($row['pnr'],$pnrDetails[$row['series_request_id']]['showPnr']))
				{
					$pnrDetails[$row['series_request_id']]['showPnr'][$row['pnr']]['number_of_adult']=$row['no_of_adult'];
					$pnrDetails[$row['series_request_id']]['showPnr'][$row['pnr']]['number_of_child']=$row['no_of_child'];
					$pnrDetails[$row['series_request_id']]['showPnr'][$row['pnr']]['number_of_infant']=$row['no_of_infant'];
					$pnrDetails[$row['series_request_id']]['showPnr'][$row['pnr']]['no_of_foc']=$row['no_of_foc'];
					$pnrDetails[$row['series_request_id']]['showPnr'][$row['pnr']]['series_request_id']=$row['series_request_id'];
					$pnrDetails[$row['series_request_id']]['showPnr'][$row['pnr']]['request_approved_flight_id']=$row['request_approved_flight_id'];

				}
			}
			$pnrDetails[$row['series_request_id']]['series_group_id']=$row['series_group_id'];
			$pnrDetails[$row['series_request_id']]['status']=$row['status'];
			$pnrDetails[$row['series_request_id']]['requestApprovedFlightId']=$row['request_approved_flight_id'];
			if($row['parent_series_request_id'] > 0)
				$pnrDetails[$row['series_request_id']]['parent_series_request_id']=$row['parent_series_request_id'];
		}
		return $pnrDetails;
	}
	/*
	 * Created by   : Ganesan.S
	 * Created date : 15-06-2019
	 * Description  : Validate basic registraion needed fields
	 */
	public function _validateRegistrationData($_Adata)
    {
    	$_SerrorFound = 'N';
    	$_SerrorMessage = '';
    	if(empty($_Adata['dataId']))
    		$_SdataId = 'data';

    	switch(strtoupper($_Adata['dataType'])){
    		case "ALPHA":
    			# Check given data contains only alphabets
		    	if(!ctype_alpha($_Adata['data']))
					$_SerrorFound = 'Y';
			break;
			case "NUM":
				# Check given data contains only numbers
				if(!ctype_digit($_Adata['data']))
					$_SerrorFound = 'Y';
			break;
			case "ALNUM":
				# Check given data contains only alphabates and numbers
				if(!ctype_alnum($_Adata['data']))
					$_SerrorFound = 'Y';
			break;
			case "ALSPACE":
                # Allows only characters, space  
                if(!preg_match('/^[a-zA-Z0-9\s]+$/', $_Adata['data']))
                	$_SerrorFound = 'Y';
            break;
            case "ADDR":
            	# Allows only characters, space, dot 
                if(!preg_match('/^[a-zA-Z0-9\s,.]+$/', $_Adata['data']))
                	$_SerrorFound = 'Y';
            break;
            case "ALHYPENSLASH":
            	# Allows characters a-z, A-Z, numbers 0-9, space ' ', dot '.', hypen '-',comma ',', slash '/', colon ':' ,semicolon ';', ampersant '&'
                if(!preg_match('/^[a-zA-Z0-9\-\:\&\;\/\s,.]+$/', $_Adata['data']))
                	$_SerrorFound = 'Y';
            break;
			case "EMAILID":
				# Check email id format
				if(!filter_var($_Adata['data'],FILTER_VALIDATE_EMAIL))
					$_SerrorFound = 'Y';
			break;
			default:

    	}
    	if($_SerrorFound == 'Y')
    		$_SerrorMessage .= 'Given '.$_Adata['dataId'].' is invalid '.$_Adata['extraContent'].'. ';

    	if(!empty($_Adata['minLength']) && (strlen($_Adata['data']) < $_Adata['minLength']))
			$_SerrorMessage .= ucfirst($_Adata['dataId']).' length minimum limit '.$_Adata['minLength'].'.';
		# check name's maximum lenght 
		if(!empty($_Adata['maxLength']) && (strlen($_Adata['data']) > $_Adata['maxLength']))
			$_SerrorMessage .= ucfirst($_Adata['dataId']).' length exceed the maximum limit '.$_Adata['maxLength'].'.';

		return $_SerrorMessage;
    }

    /* Created by : S.GANESAN
     * Created date : 08-07-2019
     * Dscription : Get all PNRs from series request
     */
    function _getAllRequestedPNR($IrequestMasterId)
    {        
		global $CFG;
		if(empty($IrequestMasterId))
			return false;

		$sql="SELECT 
				DISTINCT pnr
			  FROM 
			  	".$CFG['db']['tbl']['pnr_blocking_details']."
			  WHERE  
			    request_master_id =".$IrequestMasterId;
		if(DB::isError($pnr=$this->_Oconnection->query($sql)))
		{
			fileWrite($sql,"SqlError","a+");
			return false;
		}	
		if($pnr->numRows() >0)
		{
			$_AallPnrArray = array();
			while($_AallPnr = $pnr->fetchRow(DB_FETCHMODE_ASSOC))
			{
				$_AallPnrArray[] = $_AallPnr['pnr'];
			}
			return $_AallPnrArray;
		}
		return false;
	}
		 /*
	 *Function name:_getRequestSeriesRequestHistory
	 *Created By   :A.kaviyarasan 
	 *Created date :24-07-2019
	 *Description  :Getting the merged request_details_history with series_request_details_history
	 *Arguments    :$_IrequestDetailsHistoryId-(Integer)
	 *Return       :Array 
	 */
	
	function _getRequestSeriesRequestHistory($_IrequestDetailsHistoryId,$_IseriesHistoryId=0)
	{
		fileRequire("dataModels/class.requestDetailsHistory.php");
		$_OrequestDetailsHistory=new requestDetailsHistory();
		$_OrequestDetailsHistory->_Oconnection=$this->_Oconnection;
		$_OrequestDetailsHistory->_IrequestDetailsHistoryId=$_IrequestDetailsHistoryId;
		$_ArequestHistoryDetails=$_OrequestDetailsHistory->_selectRequestDetailsHistory()[0];
		fileRequire("dataModels/class.seriesRequestDetailsHistory.php");
		$_OseriesRequestDetailsHistory=new seriesRequestDetailsHistory();
		$_OseriesRequestDetailsHistory->_Oconnection=$this->_Oconnection;
		if($_IseriesHistoryId!=0)
			$_OseriesRequestDetailsHistory->_IseriesRequestHistoryId=$_IseriesHistoryId;
		$_OseriesRequestDetailsHistory->_IrequestDetailsHistoryId=$_IrequestDetailsHistoryId;
		$_AseriesRequestHistoryDetails=$_OseriesRequestDetailsHistory->_selectSeriesRequestDetailsHistory();
		//override and merge the request history info with series request history 
		foreach ($_AseriesRequestHistoryDetails as $_Ikey => $_Avalue)
		{
			$_AseriesRequestHistoryDetails[$_Ikey]=array_replace_recursive($_ArequestHistoryDetails,$_Avalue);
		}
		return $_AseriesRequestHistoryDetails;
	}
	 /*
	 *Function name:_getSeriesRequestDetails
	 *Created By   :A.kaviyarasan 
	 *Created date :24-07-2019
	 *Description  :Getting the series_request_details from data model by passing series_request_id
	 *Arguments    :$_IseriesRequestId-(Integer),$_IrequestId-(Integer)
	 *Return       :Array 
	 */
	function _getSeriesRequestDetails($_IseriesRequestId,$_IrequestId=0)
	{
		fileRequire("dataModels/class.seriesRequestDetails.php");
		$objSeriesRequestDetails=new seriesRequestDetails();
		$objSeriesRequestDetails->_Oconnection=$this->_Oconnection;
		if(!empty($_IseriesRequestId))
			$objSeriesRequestDetails->_IseriesRequestId=$_IseriesRequestId;
		if(!empty($_IrequestId))
			$objSeriesRequestDetails->_IrequestId=$_IrequestId;
		$data=$objSeriesRequestDetails->_selectSeriesRequestDetails();	
		return $data;
	}
	 /*
	 *Function name:_rowSpanPreparation
	 *Created By   :A.kaviyarasan 
	 *Created date :24-07-2019
	 *Description  :This function is to prepare the rowspan to show flight info in the flighDetailsEmail template
	 *Arguments    :$_IstartKey-Integer(start position of the loop),$_AeachGroupArray-Array(All the flights in a same group)
	 *Return       :Array(Matched flight ids) 
	 */
	function _rowSpanPreparation($_IstartKey,$_AeachGroupArray)
	{
		//getting the current group count
		$_Icount=count($_AeachGroupArray);
		$_AsameSecFlights=array();
		//getting the start keys source and destination
		$_SfirstSource=$_AeachGroupArray[$_IstartKey]['source'];
		$_SfirstDestination=$_AeachGroupArray[$_IstartKey]['destination'];
		for($i=$_IstartKey;$i<$_Icount;$i++)
		{
			//getting the each source and destination
			$_ScurrentSource=$_AeachGroupArray[$i]['source'];
			$_ScurrentDestination=$_AeachGroupArray[$i]['destination'];
			//make sure no via flights in current flight with matched source and destination
			if(!is_array($_AeachGroupArray[$i]['viaFlight']) && ($_SfirstSource==$_ScurrentSource && $_SfirstDestination==$_ScurrentDestination))
				$_AsameSecFlights[]=$_AeachGroupArray[$i]['request_approved_flight_id'];
			else
				break;
		}
		return $_AsameSecFlights;
	}
	/*
	 *Function name:_getCommonDetailsForSectorMail
	 *Created By   :A.kaviyarasan 
	 *Created date :24-07-2019
	 *Description  :This function is to fetch the common details(airlines_request_mapping,request_master,request_details etc) for the normal and modified request based on the arguments 
	 *Arguments    :$_IrequestMasterId-Integer,$_SmodifyRequest-String
	 *Return       :Array
	 */
	function _getCommonDetailsForSectorMail($_IrequestMasterId,$_SmodifyRequest='N')
	{
		global $CFG;
		$_AairlineDetails=$_ArequestMaster=$_ArequestDetails=$_ArequestMasterHistoryDetails=array();
		fileRequire("dataModels/class.airlinesRequestMapping.php");
		fileRequire("dataModels/class.requestMaster.php");
		//Airlines request mapping
		$objAirlinesRequestMapping=new airlinesRequestMapping();
		$objAirlinesRequestMapping->_Oconnection=$this->_Oconnection;
		$objAirlinesRequestMapping->_IrequestMasterId=$_IrequestMasterId;
		$_AairlineDetails=$objAirlinesRequestMapping->_selectAirlinesRequestMapping();
	
		//Request master
		$objRequestMaster=new requestMaster();
		$objRequestMaster->_Oconnection=$this->_Oconnection;
		$objRequestMaster->_IrequestMasterId=$_IrequestMasterId;
		$_ArequestMaster=$objRequestMaster->_selectRequestMaster();
		
		if($_SmodifyRequest=="N")
		{	
			//request details
			fileRequire("dataModels/class.requestDetails.php");
			$objRequestDetails=new requestDetails();
			$objRequestDetails->_Oconnection=$this->_Oconnection;
			$objRequestDetails->_IrequestMasterId=$_IrequestMasterId;
			$_ArequestDetails=$objRequestDetails->_selectRequestDetails();
		}
		else
		{
			//request master history for modify
			fileRequire("dataModels/class.requestMasterHistory.php");
			$objRequestMasterHistory=new requestMasterHistory();
			$objRequestMasterHistory->_Oconnection=$this->_Oconnection;
			$objRequestMasterHistory->_IrequestMasterId=$_IrequestMasterId;
			$requestMasterHistoryDetails=$objRequestMasterHistory->_selectRequestMasterHistory();
			//overide and get the last row
			foreach($requestMasterHistoryDetails as $key=>$value)
				$_ArequestMasterHistoryDetails[$value['request_master_id']]=$value;
			$_ArequestMasterHistoryDetails=array_values($_ArequestMasterHistoryDetails);
		
			//getting the request details history
			fileRequire("dataModels/class.requestDetailsHistory.php");
			$objRequestDetailsHistory=new requestDetailsHistory();
			$objRequestDetailsHistory->_Oconnection=$this->_Oconnection;
			$objRequestDetailsHistory->_IrequestMasterHistoryId=$_ArequestMasterHistoryDetails[0]['request_master_history_id'];
			$_ArequestDetails=$objRequestDetailsHistory->_selectRequestDetailsHistory();
		}
		//overriding the infos like trip type..,etc for modify
		$_AemailGRDetails=array();
		$_AemailGRDetails=array_replace_recursive($_ArequestMaster,$_ArequestMasterHistoryDetails,$_AairlineDetails);
		if(isset($_AemailGRDetails[0]))
		{
			$_AemailGRDetails[0]['request_fare']=$this->_getRoundOffFare($_AemailGRDetails[0]['request_fare'],2,"displayFare");
			$_AemailGRDetails=$_AemailGRDetails[0];
		}
		$_AemailGRDetails['requestDetails']=$_ArequestDetails;
		return $_AemailGRDetails;
	}
	/**
	 * Description : Used to get the group id from group alais name from config file
	 * Author : Dilli Raj P
	 * Created Date : 26-Jul-2019
	**/
	public function _getGroupIdFromAlaisName($_SaliasName)
	{
		global $CFG;
		$_AgroupDetails=array_values($CFG['groupAlais']);
		unset ($_AgroupDetails[count($_AgroupDetails)-1]);
		$_IgroupIndex= $this->multiArraySearch($_SaliasName, $_AgroupDetails,'alias_name');
		if($_IgroupIndex!== false)
			return $_AgroupDetails[$_IgroupIndex]['id'];
		else
			return '';
	}
	/**
	 * Description : Used to get the json file from the required path.
	 * Author : Dilli Raj P
	 * Created Date : 26-Jul-2019
	**/
	public static function _loadJsonFile($_SjsonFilePath="")
	{
		global $CFG;
		$_Scontent = "";
		if($_SjsonFilePath)
		{
			$_SfileCheck = file_exists($CFG['path']['basePath'].$_SjsonFilePath);
			$_ScompleteFileName = $CFG['path']['basePath'].$_SjsonFilePath;
		}
		if($_SfileCheck)
			$_Scontent = file_get_contents($_ScompleteFileName);
		return $_Scontent;
	}
	/**
	 * Description : Used to create the temp table for pos mapped users
	 * Author : Dilli Raj P
	 * Created Date : 31-Jul-2019
	**/
	public function _posTempTableCreation()
	{
		global $CFG;

		$_AallMapped = $this->_getUserPOSDetails($_SESSION['groupRM']['groupUserId'],"ALL");
		if(empty($_AallMapped))
		{
			$_Ssql = "CREATE TEMPORARY TABLE IF NOT EXISTS temp_pos_data (
					request_master_id int,
					booked_by varchar(15),
					index (request_master_id))
					SELECT * FROM (
					SELECT
					rm.request_master_id,
					'agent' as booked_by
					FROM
					".$CFG['db']['tbl']['request_master']." rm INNER JOIN ".$CFG['db']['tbl']['user_details'] ." ud on rm.user_id = ud.user_id
					INNER JOIN ".$CFG['db']['tbl']['group_details']." gd on ud.group_id = gd.group_id
					INNER JOIN ".$CFG['db']['tbl']['corporate_details']." cd on ud.corporate_id = cd.corporate_id
					INNER JOIN ".$CFG['db']['tbl']['pos_details']." pd on ".encrypt::_decrypt('cd.pos_code')." = pd.pos_code
					WHERE
					gd.group_alias_name not in ('RU') and EXISTS (SELECT * FROM ".$CFG['db']['tbl']['pos_user_mapping']." pum WHERE pum.pos_code = pd.pos_code AND pum.active_status = 'Y' AND pum.user_id = ".$_SESSION['groupRM']['groupUserId'].")
					UNION ALL
					SELECT
					rm.request_master_id,
					'retail_user' as booked_by
					FROM
					".$CFG['db']['tbl']['request_master']." rm INNER JOIN ".$CFG['db']['tbl']['user_details']." ud on rm.user_id = ud.user_id
					INNER JOIN ".$CFG['db']['tbl']['group_details']." gd on ud.group_id = gd.group_id
					INNER JOIN ".$CFG['db']['tbl']['city_master']." cm on ud.city_id = cm.city_id
					INNER JOIN ".$CFG['db']['tbl']['pos_details']." pd on cm.pos_code = pd.pos_code
					WHERE
					EXISTS (SELECT * FROM ".$CFG['db']['tbl']['pos_user_mapping']." pum WHERE pum.pos_code = pd.pos_code AND pum.active_status = 'Y' AND pum.user_id = ".$_SESSION['groupRM']['groupUserId'].") and
					gd.group_alias_name in ('RU') ) as inn ";

			if(DB::isError($result = $this->_Oconnection->query($_Ssql)))
			{
				fileWrite($_Ssql,'SqlError','a+');
				return FALSE;
			}
			return TRUE;
		}
		return FALSE;
		
	}
	/*
	 * Function name	:_checkMenuActiveStatus
	 * Param 			:string ($_SmenuName)
	 * Description		:This function will return true or false based on menu display status of particular group id
	 * Create date		:28-02-2018
	 * Created by		:Selvakumar S
	 */
	function _checkMenuActiveStatus($_SmenuName)
	{
		global $CFG;
		$_AmenuDetails = array();
		$_QmenuDetails = "SELECT menu_id FROM ".$CFG['db']['tbl']['grm_menu_details']." WHERE menu_name = '".$_SmenuName."'";
		$_AmenuDetails = $this->_executeQuery($_QmenuDetails);
		if(!empty($_AmenuDetails))
		{
			$_AmenuMappingDetails =array();
			$_QmenuMappingDetails = "SELECT display_status FROM ".$CFG['db']['tbl']['grm_menu_mapping_details']." WHERE child_id = ".$_AmenuDetails[0]['menu_id']." AND group_id =".$_SESSION['groupRM']['groupId']." ORDER BY menu_mapping_id DESC";
			$_AmenuMappingDetails = $this->_executeQuery($_QmenuMappingDetails);
			//Hide link from dashbord if display status is in N or D
			if(empty($_AmenuMappingDetails)||(!empty($_AmenuMappingDetails)&&in_array($_AmenuMappingDetails[0]['display_status'],array('N','D'))))
				return false;
			return true;
		}
		return false;
	}




	/**
	 * _checkJson
	 * 
	 * @author Gopinath v <gopinath@infinitisoftware.net> 
	 * @param string $paramValue
	 * @return mixed - array/"", (array json decoded)/("" if the string is not valid)
	 * @creationDate 07-aug-2019
	 */
	protected function  _checkJson($paramValue){
		//basic validation, check all fields that are going to be set,
		$json = $paramValue;
		$processedString = filter_var($json,FILTER_SANITIZE_STRING|FILTER_SANITIZE_MAGIC_QUOTES);
		$decodedJson = json_decode(stripslashes($processedString),true);
		if(json_last_error() || ! is_string($processedString)){
			fileWrite("Error in json decode","json_decode_error","a+");
			return "";
		}
		return $decodedJson;
	}
	

	/**
	 * _getGlobalConfig
	 * 
     * get it from config, or database,  or just hardcode it.
     * using global variable everywhere is not recommended for unittests creates dependecy.
	 * 
	 * @author Gopinath v <gopinath@infinitisoftware.net>
	 * @param string $_Svariable - ex: 'common,defaut,language'
	 * @param string $_SExceptionMsg (optional) exception message that must be thrown
	 * 				 if the config value is not set/ the config value is null.
	 * @throws Exception (optional) - the exception message that is passed.
	 * @creationDate 19-aug-2019
     */
	function _getGlobalConfig($_Svariable,$_SExceptionMsg=''){
		global $CFG;

		/* build-up config each-subset */
		$accessArray = function($string,$cfg){
			return is_array($cfg)? $cfg[$string]: ""; /* prevent reading past offset */
		};
		for($config=$CFG,$count=0,$terms=explode(',',$_Svariable); $count<count($terms); $count++){
			$config = $accessArray($terms[$count],$config);
		}
		$configValue = $config;
		if($_SExceptionMsg=='')
			return $configValue;
		if(is_null($configValue) || $configValue == "")
			throw new Exception($_SExceptionMsg);
		return $configValue;
		}
		
	/**
	 * @Author      	: Deepraj Singh Rajawat
	 * @Created Date 	: 21-Dec-2018
	 * @Param 			: AthresholdData,IseriesGroupId
	 * @Return 			: true 
	 * @Description   	: Calling function to update the request group details
	 */	
	public function _callUpdateRequestGroupDetails($_AthresholdData=array(),$_IseriesGroupId,$_IgroupStatus,$_SseriesGrpIdMandatory = 'Y') {

		if($_SseriesGrpIdMandatory == 'Y' && !$_IseriesGroupId){

			$this->_AerrorFileWrite['_callUpdateRequestGroupDetails'] = 'Error';
			return false;
		}
		
		if(!$this->_ItransactionId && !$this->_IairlinesRequestId){

			fileWrite('requestGroupDetailsError','requestError','a+');
			return false;
		}
		global $CFG;		
		#Updating request group details
		fileRequire("dataModels/class.requestGroupDetails.php");
		$this->_OrequestGroupDetails = new requestGroupDetails();
		$this->_OrequestGroupDetails->__construct();
		$this->_OrequestGroupDetails->_Oconnection = $this->_Oconnection;
		$this->_OrequestGroupDetails->_ItransactionMasterId = $this->_ItransactionId;
		$this->_OrequestGroupDetails->_IairlinesRequestId = $this->_IairlinesRequestId;
		$this->_OrequestGroupDetails->_IseriesGroupId = $_IseriesGroupId;
		
		array_push($this->_OrequestGroupDetails->_AupdateCondition, 'series_group_id');
		if(!empty($_AthresholdData)){

			$this->_OrequestGroupDetails->_IresponseFare = $_AthresholdData[$this->_IgroupNo]['threshold']['currentFare'];
			$this->_OrequestGroupDetails->_IthesholdPolicyId = $_AthresholdData[$this->_IgroupNo]['threshold']['thresholdId'];
			$this->_OrequestGroupDetails->_IthresholdFare = $_AthresholdData[$this->_IgroupNo]['threshold']['thresholdFare'];
		}
		$this->_OrequestGroupDetails->_SgroupStatus = $_IgroupStatus;

		$this->_OrequestGroupDetails->_updateRequestGroupDetails();	
		
		return true;
	}

	/**
	 * _checkHashIsMD5
	 *
	 * @param pwdHash - hashedString
	 * @return boolean - checks if the string is md5 capable
	 */
	public function _checkHashIsMD5($pwdHash){
		$_Shash = $pwdHash;# select user_pwd from db.
		$_IpwdLength = strlen($_Shash);
		$_IpatternStatus = preg_match('/^[a-f0-9]{32}$/',$_Shash);
		return (($_IpwdLength == 32) && $_IpatternStatus) ? true: false;
	}


	/**
	 * _checkPWDField
	 *
	 * @return boolean - checks user_detail's password columns length
	 */
	public function _checkPWDField(){
		$sql = "SHOW FIELDS FROM user_details WHERE FIELD = 'user_password'";
		if ( DB::isError($result = $this->_Oconnection->query($sql))) 
		{
			filewrite($sql,"SqlError","a+");
			return FALSE;
		}

		$_Astructure = array();
		if($result->numRows() > 0)
		{
			while($row=$result->fetchRow(DB_FETCHMODE_ASSOC))
			{
				$_Astructure = [];
				$_Astructure['field'] = $row['Field'];
				$_Astructure['type'] = $row['Type'];
			}
		}
		$pwdProperty = str_replace(['(',')'],'',substr($_Astructure['type'], strpos($_Astructure['type'],'(')));
		$length = intval($pwdProperty,10);
		return ($length >= 80);
	}
	/* Function    : _getSeriesGroupIdForPnr
	 * Author      : Manojkumar S
	 * Created on  : 16.10.2019
	 * Description : This function is to get the series group id for a given pnr
	 */
	function _getSeriesGroupIdForPnr($_pnr,$_requestMasterId)
	{
		global $CFG;
		$_AseriesRequestDetails=array();
		$sqlSeriesGroupId="SELECT
								srd.series_group_id,
								srd.series_request_id,
								pbd.pnr_blocking_id,
								srd.cabin
							FROM
								".$CFG['db']['tbl']['request_approved_flight_details']." rafd,
								".$CFG['db']['tbl']['series_request_details']." srd,
								".$CFG['db']['tbl']['pnr_blocking_details']." pbd
								
							WHERE	
									rafd.request_approved_flight_id=pbd.request_approved_flight_id
								AND rafd.series_request_id=srd.series_request_id
								AND pbd.pnr='".$_pnr."'
								AND pbd.request_master_id='".$_requestMasterId."'";
								
			if(DB::isError($resultSeriesGroupId=$this->_Oconnection->query($sqlSeriesGroupId)))
			{
				fileWrite($sqlSeriesGroupId,"SqlError","a+");
				return false;
			}
			if($resultSeriesGroupId -> numRows() >0)
			{
					while($row=$resultSeriesGroupId->fetchRow(DB_FETCHMODE_ASSOC))
					{
						$_AseriesRequestDetails['seriesGroupId'] = $row['series_group_id'];
						$_AseriesRequestDetails['cabin'] = $row['cabin'];
						$_AseriesRequestDetails['seriesRequestId'][]= $row['series_request_id'];
						$_AseriesRequestDetails['pnrBlockingId'][]= $row['pnr_blocking_id'];
					}   
			}
			return $_AseriesRequestDetails;
	}
	/* Function    : _deleteConfigFiles
	 * Author      : Dilli Raj P
	 * Created on  : 19-Sep-2019
	 * Description : This function is used to delete config files
	 */
	public function _deleteConfigFiles()
	{
		global $CFG;
		//Delete common config file 
		$commonConfigFile="config/config.common.php";

		//Dhamu G 18-04-2022 added below condition to delete config file in common folder for loadbalancer concept
	    if(!empty($CFG['path']['loadBalancerCommonFolderPath'])){
	        $commonConfigFile=$CFG['path']['loadBalancerCommonFolderPath'].$commonConfigFile;
	    }else{
			if($CFG['path']['pluginBasePath']!='' && is_dir($CFG['path']['basePath'].$CFG['path']['pluginBasePath']."config"))
				$commonConfigFile = $CFG['path']['pluginBasePath']."config/config.common.php";
			$commonConfigFile = $CFG['path']['basePath'].$commonConfigFile;
	    }
	    unlink($commonConfigFile);
	}
	/* Function    : _getAllotmentValues
	 * Author      : Dilli Raj P
	 * Created on  : 19-Dec-2019
	 * Description : This function is used to get the allotment config values
	 */
	public function _getAllotmentValues($_IrequestMasterId,$_StravelType = 'domestic',$_SserviceType = 'availability')
	{
		global $CFG;
		if($_IrequestMasterId == 0 && empty($_StravelType))
			return false;
		$_SavailConfig = '';
		$_SrequestType = $this->_getRequestType($_IrequestMasterId);
		$_SrequestType = strtolower(str_replace(' ','',$_SrequestType));
		//Allotment config values
		$_Aconfig = $CFG['processRequest']['allotmentServiceCall'];
		if(array_key_exists($_SrequestType, $_Aconfig) && !empty($_Aconfig[$_SrequestType]))
		{
			if(!empty($_Aconfig[$_SrequestType][$_SserviceType]))
			{
				if(!empty($_Aconfig[$_SrequestType][$_SserviceType][$_StravelType]))
					$_SavailConfig = strtoupper($_Aconfig[$_SrequestType][$_SserviceType][$_StravelType]);
			}
		}
		return $_SavailConfig;
	}
	
		
	/* Function    : _getPenaltyStartDate
	 * Author      : Subalakshmi S
	 * Created on  : 19-Dec-2019
	 * Description : This function is used to get the penalty start date using the validity
	 */
	public function _getPenaltyStartDate($_Avalidity)
	{				
		$_DcurrentDate = $this->_getUTCDateValue();
		fileRequire('dataModels/class.fareValidityTypeDetails.php');
		$this->_OfareValidityTypeDetails = new fareValidityTypeDetails();
		$this->_OfareValidityTypeDetails->__construct;
		$this->_OfareValidityTypeDetails->_Oconnection = $this->_Oconnection;
		$this->_OfareValidityTypeDetails->_SexpiryStatus = 'Y';
		$_AtempFareExpiryType = $this->_OfareValidityTypeDetails->_selectFareValidityTypeDetails();
		// Changed the array structure to get quick access below
		foreach($_AtempFareExpiryType as $_AtempValues)
			$_AfareExpiryType[$_AtempValues['fare_validity_type_id']] = $_AtempValues['fare_validity_values'];
		//Remove unwanted array
		unset($this->_OfareValidityTypeDetails);
		unset($_AtempFareExpiryType);
		
		if($_Avalidity['penalty_type_id']!='')
		{
			if(is_numeric($_Avalidity['penalty_type_id']))
				$_DpenaltyDate = date('Y-m-d H:i:s',strtotime("+".$_Avalidity['penalty_value']." ".$_AfareExpiryType[$_Avalidity['penalty_type_id']],strtotime($_DcurrentDate)));
			else
				$_DpenaltyDate = date('Y-m-d H:i:s',strtotime("+".$_Avalidity['penalty_value']." ".$_Avalidity['penalty_type_id'],strtotime($_DcurrentDate)));
		}
		return $_DpenaltyDate;
	}
	/*
		Author : Gowri
		Description : this function used to fetch resubmitted child details
		Date  : 07/06/2019
		Arguements: request master id
		ReturnValue:array	
	**/
	function _getResubmitedChild($IrequestMasterId='',$quoteType=array(),$seriesRequestId='')
	{
		global $CFG;
		$resumbitedChild=array();
	    $sql="SELECT
	    		*
			FROM
				".$CFG['db']['tbl']['request_master']." rm
			WHERE
				rm.reference_request_master_id='".$IrequestMasterId."'";
				
		if(!empty($quoteType))
			$sql.=" AND rm.quote_type IN ('".implode('\',\'', $quoteType)."')";


		if(DB::isError($result = $this->_Oconnection->query($sql)))
		{
			fileWrite($sql,'SqlError','a+');
			return false;
		}
		while($row = $result->fetchRow(DB_FETCHMODE_ASSOC))
		{
			if(isset($row['quote_type']))
				$resumbitedChild['quote_type']=$row['quote_type'];
			$resumbitedChild['reference_request_master_id']=$row['reference_request_master_id'];
			$resumbitedChild['request_master_id'][]=$row['request_master_id'];
		}

		if(!empty($quoteType) && !empty($seriesRequestId))
		{
			$resumbitedChild = array();

			$_SsqlSeriesRequestDetails = "SELECT srd.series_request_id, srd.parent_series_request_id, rm.quote_type, rm.reference_request_master_id, rm.request_master_id FROM series_request_details srd, request_details rd, request_master rm WHERE rd.request_id = srd.request_id AND rm.request_master_id=rd.request_master_id AND rm.reference_request_master_id=".$IrequestMasterId." AND srd.parent_series_request_id=".$seriesRequestId." AND rm.quote_type IN ('".implode('\',\'', $quoteType)."')";

			if(DB::isError($result = $this->_Oconnection->query($_SsqlSeriesRequestDetails)))
			{
				fileWrite($_SsqlSeriesRequestDetails,"SqlError","a+");
				return false;
			}

			if($result->numRows() > 0)
			{
				while($row = $result->fetchRow(DB_FETCHMODE_ASSOC))
				{
					if(isset($row['quote_type']))
					{
						$resumbitedChild['quote_type']=$row['quote_type'];
					}
					$resumbitedChild['reference_request_master_id']=$row['reference_request_master_id'];
					$resumbitedChild['parent_series_request_id']=$row['parent_series_request_id'];
					$resumbitedChild['series_request_id']=$row['series_request_id'];
					$resumbitedChild['request_master_id'][]=$row['request_master_id'];
				}
			}
		}
		
		return $resumbitedChild;
	}

	/*
	 * @author : Karuppasamy S
	 * @date   : 24-jan-2020
	 * @description : To get parent request details
	 * @param  : request master id
	*/

	function _getParentSeriesDetails($_IrequestMasterID){

		global $CFG;
		$_AchildRequestDetails=$this->_getRequestDetails($_IrequestMasterID);
		fileRequire("dataModels/class.seriesRequestDetails.php");
		$objSeriesRequestDetails=new seriesRequestDetails();
		$objSeriesRequestDetails->__construct();
		$objSeriesRequestDetails->_Oconnection=$this->_Oconnection;
		$objSeriesRequestDetails->_INcondition='IN';
		$objSeriesRequestDetails->_IrequestId=implode(',',array_column($_AchildRequestDetails,'request_id'));	
		$_AchildSeriesRequestDetails=$objSeriesRequestDetails->_selectSeriesRequestDetails();

		$_IparentSeriesId = ($_AchildSeriesRequestDetails[0]['parent_series_request_id']!=0)?$_AchildSeriesRequestDetails[0]['parent_series_request_id']:$_AchildSeriesRequestDetails[0]['series_request_id'];
		if($_IparentSeriesId!=0)
		{
			$objSeriesRequestDetails->__construct();
			$objSeriesRequestDetails->_Oconnection=$this->_Oconnection;
			$objSeriesRequestDetails->_IseriesRequestId=$_IparentSeriesId;	

			$_AparentRequestDetails = $objSeriesRequestDetails->_selectSeriesRequestDetails();
			return $_AparentRequestDetails;
		}
	}


	/*
	 * @author : Karuppasamy S
	 * @date   : 24-jan-2020
	 * @description : To get request group details
	 * @param  : parent airline request id and parent series group id
	*/

	function _getRequestGroupDetails($_IparentAirlineRequestId,$_IparentSeriesGroupId=0,$_ItransactionMasterId=0){

		fileRequire('dataModels/class.requestGroupDetails.php');
		$_OobjReqGrpDet = new requestGroupDetails();
		$_OobjReqGrpDet->__construct();
		$_OobjReqGrpDet->_Oconnection = $this->_Oconnection;
		$_OobjReqGrpDet->_IairlinesRequestId = $_IparentAirlineRequestId;
		if($_IparentSeriesGroupId>0)
			$_OobjReqGrpDet->_IseriesGroupId = $_IparentSeriesGroupId;
		if($_ItransactionMasterId>0)
			$_OobjReqGrpDet->_ItransactionMasterId = $_ItransactionMasterId;
		$_AgrpDets = $_OobjReqGrpDet->_selectRequestGroupDetails();

		return $_AgrpDets;
	}

	/**
	 * function _insertReviewAsNotes
	 * @author Gopinath v <gopinath@infinitisoftware.net>'
	 * if uploaded files presnt, i.e third param, then will insert into respsective tables, check definiton
	 * @param int $reqMasterId
	 * @param string $remarks
	 * @return void
	 * 
	 */

	 function _insertRemarksAsNotes($reqMasterId,$remarks, $files){

		// if no attachment dont insert into notes
		if($files=='')	
			return;
		
		// initialise
		$attachTypeID = "";
		// getmetainfo if found
		$getMetaInfo = function($filePath) {
			$exif = '';
			if(!file_exists($filePath))
				throw new Exception("$filePath : file does not exist");
			if (function_exists('exif_read_data')) {
				$exif = exif_read_data($filePath);
			}
			return $exif;
		};
		// getting the files
		$filesArr = explode('&&',$files);
		foreach($filesArr as $key => $val){
			$filesArr[$key] = base64_decode($val);
		}
		// get attachment folder FOR module form database 
		$tableName = systemSetup::_getGlobalConfig("db,tbl,attachment_type_master",
			"attachment_type_master table not found");
		$result = $this->_Oconnection->_performQuery(
			$tableName,
			['attachment_type_id','attachment_folder'],
			'DB_AUTOQUERY_SELECT',
			['attachment_type'=> 'notes']
		);

		// getting folder path
		$attachTypeID = $result[0]['attachment_type_id'];
		$attachmentFolder = systemSetup::_getGlobalConfig("path,basePath")
				.$result[0]['attachment_folder'];
		$name ='UPLOAD_'. $_SESSION['groupRM']['groupUserId'];
		$attachmentDetailsId = [];

		// notes details table
		fileRequire("dataModels/class.noteDetails.php");
		$_OnoteDetails =  new noteDetails();

		$insertNoteDetails = function($reqMasterId,$remarks) use(&$_OnoteDetails) {
			$_OnoteDetails->_Oconnection = $this->_Oconnection;
			$_OnoteDetails->_Smessage = trim("remark:" . $remarks);
			$_OnoteDetails->_IrequestMasterId = $reqMasterId;
			$_OnoteDetails->_IpostedBy = $_SESSION['groupRM']['groupUserId'];
			$_OnoteDetails->_SpostedOn = $this->_getUTCDateValue();
			$_OnoteDetails->_Sstatus = 'Y';
			$_OnoteDetails->_insertNoteDetails();

		};

		// notes user mapping table
		fileRequire("dataModels/class.noteUserMappingDetails.php");
		$_OnoteUserMappingDetails = new noteUserMappingDetails();

		$insertNotesUserMapping = function($notesDetailId) use(&$_OnoteUserMappingDetails){
			$_OnoteUserMappingDetails->__construct();
			$_OnoteUserMappingDetails->_Oconnection = $this->_Oconnection;
			$_OnoteUserMappingDetails->_InoteDetailsId = $notesDetailId;
			$_OnoteUserMappingDetails->_Sstatus = 'Y';
			$_OnoteUserMappingDetails->_IuserId = 0;
			$_OnoteUserMappingDetails->_IgroupId = 0;
			$_OnoteUserMappingDetails->_insertNoteUserMappingDetails();
		};
		
		// insertion for notes
		$insertNoteDetails($reqMasterId, $remarks);
		$insertNotesUserMapping($_OnoteDetails->_InoteDetailsId);
		
		fileRequire("dataModels/class.attachment.php");
		$_Oattachment = new attachment();
		$_Oattachment->setConnection($this->_Oconnection);
		
		// insertion for attachment
		while(!empty($_SESSION[$name])){
			$info = [];
			foreach($_SESSION[$name] as $key => $val){
				if($key == "")
					throw new Exception("upload Problem occured, logout and login to unset the value");
				if((!isset($val['movedPath']) 
							|| !isset($val['otherInfo']))
						|| !in_array($key,$filesArr)){
					if($key){
						unset($_SESSION[$name][$key]);
						unlink($attachmentFolder.'/'.$val['movedPath']);
					} //uploaded file but not submited it
					continue;
				}
				$meta = $getMetaInfo($attachmentFolder. '/'.$val['movedPath']);
				$info['movedPath'] = $val['movedPath'];
				$info['mime'] = $val['otherInfo']['type'];
				$info['fileSize'] = $val['otherInfo']['size'];
				$info['meta']  =json_encode($meta);
				$info['originalName'] = $val['otherInfo']['name'];
				$insertAttachmentId = $_Oattachment->insertAttachmentDetails($attachTypeID, $info);
				$_Oattachment->insertAttachmentLog('upload', $insertAttachmentId, $_SESSION['groupRM']['groupUserId']);
				$attachmentDetailsId[] = $insertAttachmentId;
				if($key) unset($_SESSION[$name][$key]);
			}
		}
		
		if(empty($attachTypeID))
			throw new Exception("attachTypeId is empty");
		if(empty($_OnoteDetails->_InoteDetailsId))
			throw new Exception("InoteDetailsId is empty");
		foreach ($attachmentDetailsId as $attachId) {
			$_Oattachment->insertAttachmentMapping($attachTypeID, $attachId, $_OnoteDetails->_InoteDetailsId);
		}
			
		$_OnoteUserMappingDetails->_insertNoteUserMappingDetails();
		// attachment to be accesible for all
		foreach($attachmentDetailsId as $attachmentID){
			$_Oattachment->insertAttachmentUserMapping(
				$attachmentID,
				[
					"level"=>'all',
					"id"=>0,
					"status"=>"Y",
				]
			);
		}

	 }

	/* Created by   : Ganesan.S
     * Created date : 05-05-2020
     * Description  : Create object and call class module
     */
	function _callModule( $_SfileRequirePath, $_SclassName, $_SclassTplName, $_AformData ){
        
        if(empty($_SfileRequirePath) || empty($_SclassName))
            return false;

        fileRequire($_SfileRequirePath);
        $_OobjectName = "_O".$_SclassName;
        $this->_OobjectName = new $_SclassName();
        $this->_OobjectName->_Oconnection = $this->_Oconnection;
        $this->_OobjectName->_Osmarty = $this->_Osmarty;
        $this->_OobjectName->_OobjResponse = $this->_OobjResponse;
        $this->_OobjectName->_IinputData = $_AformData;
        $this->_OobjectName->_StemplateType = 'tpl';
        $this->_OobjectName->_classTplName = array(0 => $_SclassTplName);
        $_Aresponse = $this->_OobjectName->_setModuleData();
        return $_Aresponse;
    }
    /* Created By   :M.Niveda
     * Created Date :16-02-2021
     * Description  :To get the details of who submitted the guest names in name update page and   display the user's information in view payment history tooltip*/
    function _getGuestSubmittedByInfo($_IpassengerId,$_SdisplayFlag)
	{
		if(!empty($_IpassengerId))
		{
			global $CFG;
			$sqlGuestSubmittedInfo="SELECT 
											submitted_by
									 FROM
									 	".$CFG['db']['tbl']['passenger_pnr_mapping']." 
									 WHERE  
									 		passenger_id=".$_IpassengerId." ";
			if(DB::isError($result=$this->_Oconnection->query($sqlGuestSubmittedInfo)))
			{
				fileWrite($sqlGuestSubmittedInfo,"SqlError","a+");
				return false;
			}
			while($row=$result->fetchRow()) {
				$_AuserEmailId=array();
				//If user_id passed as 0 it will fetch all user_details and return the last row, so it is restricted
				if($row['submitted_by'] != 0)
					$_AuserEmailId=$this->_getUserDetails($row['submitted_by'],'');
				return $_AuserEmailId['email_id'];	
			}
			if($_SdisplayFlag=='Y')
				return $_AuserEmailId['email_id'];
		}	

	}
	/* Created By   :M.Niveda
     * Created Date :16-02-2021
     * Description  :To get the details of who issued  the tickets/ticketed by information */
	function _getTicketedByInfo($_IticketingId)
	{
		if(!empty($_IticketingId))
		{	
			global $CFG;
			$sqlTicketInfo="SELECT 
								ticketed_by			
							FROM
							 	".$CFG['db']['tbl']['ticketing_details']." 
							 WHERE  
							 		ticketing_id=".$_IticketingId." ";
					if(DB::isError($result=$this->_Oconnection->query($sqlTicketInfo)))
					{
						fileWrite($sqlTicketInfo,"SqlError","a+");
						return false;
					}
					while($row=$result->fetchRow()){
						$_AticketDetails=array();
						$_AticketDetails=$row;
						$_AuserEmailId=array();
						if($_AticketDetails['ticketed_by']=='')
							return $_AuserEmailId;
						else
							$_AuserEmailId=$this->_getUserDetails($_AticketDetails['ticketed_by'],'');
						return $_AuserEmailId['email_id'];
					}
			}
	}
	/* Created by   : Ganesan.S
     * Created date : 05-05-2020
     * Description  : Check wheather a request or a group is resized or not.
     */
	function _resizedRequestCheck($_IrequestMasterId, $_Spnr, $_IresizeTypeId){
		
		global $CFG;

		if(empty($_IrequestMasterId) || empty($_Spnr) || empty($_IresizeTypeId))
			return false;
		
		$_SsqlCheckResizedRequest ="SELECT
										request_master_id,
										pnr
									FROM
										".$CFG['db']['tbl']['groupchange_request_master']."
									WHERE
										request_master_id =".$_IrequestMasterId."
										AND pnr = '".$_Spnr."'
										AND resize_type_id = ".$_IresizeTypeId;
		
		if(DB::isError($result=$this->_Oconnection->query($_SsqlCheckResizedRequest)))
		{ 
			fileWrite($sql,'SqlError','a+');
			return false;
		}
		
		if($result->numRows()>0)
			return true;
		else
			return false;
	}
	/* Created by   : Gowri.G
     * Created date : 10-06-2020
     * Description  : get fareTypes.
     */
	function _getFaretype()
	{
		global $CFG;
		$_AfareTypeArray=array();
		$_ArequestTypeArray=array();
		$_AfareTypeValues=array();
		$_ArequestTypeArray=$this->_getRequestTypeMaster();
		if(isset($CFG['site']['specialFareTypes']) && $CFG['site']['specialFareTypes']['status'] == 'Y')
		{
			foreach ($_ArequestTypeArray as $reqKey => $reqValue)
			{
				if($reqValue['request_type_name']!='All')
				{
					if(!empty($CFG['site']['specialFareTypes']['fareTypes'][$reqValue['request_type_id']]))
	                	$_AspecialFares = $CFG['site']['specialFareTypes']['fareTypes'][$reqValue['request_type_id']];
				}
				if(!empty($_AspecialFares))
					$_AfareTypeArray=array_merge($_AfareTypeArray,$_AspecialFares);
			}
			$_AfareTypeArray=array_unique($_AfareTypeArray);
			for($i=0;$i<count($_AfareTypeArray);$i++)
			{
				$_AfareTypeValues[$i]['fare_type_name']=$this->_Osmarty->getConfigVars("COMMON_".$_AfareTypeArray[$i]);
				$_AfareTypeValues[$i]['fare_type_value']=$_AfareTypeArray[$i];
			}
		}
		return $_AfareTypeValues;
	}
	/* Created by   : Gowri.G
     * Created date : 13-07-2020
     * Description  : get pnr information.
     */
	function _checkPnrStatus($pnr='',$_ScheckStatus='N')
	{
		global $CFG;
		$_SpnrModifiedStatus='';
		if(isset($CFG['site']['checkPnrInformation']) && $CFG['site']['checkPnrInformation']['status']=="Y")
		{
			fileRequire("classes/class.syncOfflinePaymentUpdation.php");
			$this->_OsyncOfflinePaymentUpdation = new syncOfflinePaymentUpdation();
			$this->_OsyncOfflinePaymentUpdation->__construct();
			$this->_OsyncOfflinePaymentUpdation->_Oconnection = $this->_Oconnection;
			$this->_OsyncOfflinePaymentUpdation->_SstatusVal = $this->_SstatusVal;
			$_SpnrModifiedStatus=$this->_OsyncOfflinePaymentUpdation->_checkPnrInformation($pnr,'N',$_ScheckStatus);
			return $_SpnrModifiedStatus;
		}
		return 1;
	}

	/* Created by   : Hari Prasanth A
     * Created date : 18-07-2020
     * Description  : get ticket type from pnr details table.
     */
	function _getTicketType($requestId,$pnr)
	{
		global $CFG;		

		if(empty($requestId) || empty($pnr))
			return false;
		
		$sql = "SELECT
					ticket_type
				FROM 
					".$CFG['db']['tbl']['pnr_details']."
				WHERE
					airlines_request_id=".$requestId."
				AND 
					pnr_number='".$pnr."'";

		if(DB::isError($result = $this->_Oconnection->query($sql))) 
		{
			fileWrite($sql,"SqlError","a+");
			return false;
		}
		if ($result->numRows() > 0)
		{
			while($row=$result->fetchRow(DB_FETCHMODE_ASSOC))
			{
				$ticketType=$row['ticket_type'];
			}
		}
		return $ticketType;
	}

	public function _decryptModule($module){
		$token = explode("#$#$",$this->decryptData($module));
		return explode("$$$$",$token[0])[0];	    
	}

   /****
    *Author     :A.kaviyarasan
    *Created on :19-08-2019
    *Param      :null
    *Description:This function will get the mapped airline user details based on sector mapping or pos mapping
    *return      : Array
    *****/
	function _getMappingDetailsBasedOnGroupId($_IcorporateId,$_IgroupId,$_Sorigin='',$_Sdestination='',$_AuserIdDetails)
	{
		global $CFG;
		if(in_array($_IgroupId,$CFG['site']['sectorMappingGroupId']) && $_Sorigin!='' && $_Sdestination!='')
		{
			$_SsectorSql="	SELECT  
                        		ud.user_id,
                            	ud.group_id,
                           		".encrypt::_decrypt('ud.title')." AS title,
                            	".encrypt::_decrypt('ud.first_name')." AS first_name,
                            	".encrypt::_decrypt('ud.last_name')." AS last_name,
                            	".encrypt::_decrypt('ud.email_id')." AS email_id,
                            	".encrypt::_decrypt('ud.user_address')." AS user_address,
                            	".encrypt::_decrypt('ud.phone_number')."  AS phone_number
                        	FROM 
                            	".$CFG['db']['tbl']['user_details']." ud,
                            	".$CFG['db']['tbl']['sector_management']." sm,
                            	".$CFG['db']['tbl']['sector_user_mapping']." sum
                        	WHERE 
                                ((sm.origin='".$_Sorigin."' OR sm.origin='All') AND 
                                (sm.destination='".$_Sdestination."' OR sm.destination='All')) AND 
                                sum.status='Y' AND 
                                ud.group_id=".$_IgroupId." AND 
                                sm.sector_id=sum.sector_id AND 
                                sum.user_id=ud.user_id";
            return $this->_executeQuery($_SsectorSql);
        }
        else
        	return $this->_getUserInformation($_IcorporateId,$_IgroupId,$_AuserIdDetails);
    }
   /* Created by   : Gowri
     * Created date : 08-09-2020
     * Description  : get the status of penality payment
     */
    function _checkPenaltyPaymentStatus($_IrequestMasterId,$_ScheckPenaltyPayment='N',$_ScheckPnrPayment='N',$_Spnr='',$_ApenaltyTransactionDetails=array(),$_ScheckssrPayment='N')
	{
		global $CFG;

		$_ItotalPax=0;
		$_AsubmittedPax=array();
		$pnrBasedPendingStatus="AND ppd.pnr='".$_Spnr."'";
		$_SpaymentStatus='PENALTYPAYMENT';
		if($_ScheckPenaltyPayment=='Y')
		{
			$_SfetchPenaltyPaymentStatus="SELECT * 
												FROM payment_additional_charge_details pacd
												INNER JOIN pnr_payment_details ppd
												ON pacd.pnr_payment_id=ppd.pnr_payment_id
												WHERE pacd.request_master_id=".$_IrequestMasterId."
												AND pacd.paid_status IN ('PENDING','REQUEST') 
												AND ppd.payment_status='".$_SpaymentStatus."'";
			if(!empty($_Spnr))
				$_SfetchPenaltyPaymentStatus=$_SfetchPenaltyPaymentStatus.$pnrBasedPendingStatus;
			if(DB::isError($resultPenaltyStatus=$this->_Oconnection->query($_SfetchPenaltyPaymentStatus)))
			{
				fileWrite($_SfetchPenaltyPaymentStatus,"SqlError","a+");
				return false;
			}
			if($resultPenaltyStatus->numRows() >0)
				$_ScheckPenaltyPayment='Y';
			else
				$_ScheckPenaltyPayment='N';
			return $_ScheckPenaltyPayment;
		}
		if($_ScheckPnrPayment=='Y')
		{
			$_IairlinesRequestId=$this->_getAirlineRequestId($_IrequestMasterId);
			$_IlastTransactionId = $this->_getLastTransactionMasterId($_IrequestMasterId);
			$_SfetchPnrPaymentStatus="SELECT * 
												FROM payment_master pm
												INNER JOIN pnr_payment_details ppd
												ON pm.payment_master_id=ppd.payment_master_id
												WHERE pm.airlines_request_id=".$_IairlinesRequestId."
												AND ppd.payment_status IN ('PENDING','REQUEST')";
			if(DB::isError($resultPnrStatus=$this->_Oconnection->query($_SfetchPnrPaymentStatus)))
			{
				fileWrite($_SfetchPnrPaymentStatus,"SqlError","a+");
				return false;
			}
			if($resultPnrStatus->numRows() > 0)
			{
				$_ScheckPnrPayment='N';
			}
			else
				$_ScheckPnrPayment='Y';
			fileRequire("dataModels/class.airlinesRequestMapping.php");
			$this->_OairlinesRequestMapping=new airlinesRequestMapping();
			$_AseriesRequestDetails=$this->_getSeriesGroupIdForPnr($_Spnr,$_IrequestMasterId);
			fileRequire("dataModels/class.requestGroupDetails.php");
			$this->_OrequestGroupDetails=new requestGroupDetails();
			fileRequire("dataModels/class.pnrPaymentDetails.php");
			$this->_OpnrPaymentDetails=new pnrPaymentDetails();

			if($_ScheckPnrPayment=='Y')
			{
				$this->_OairlinesRequestMapping->_Oconnection=$this->_Oconnection;
				$this->_OairlinesRequestMapping->_IcurrentStatus=12;
				$this->_OairlinesRequestMapping->_IairlinesRequestId=$_IairlinesRequestId;
				$this->_OairlinesRequestMapping->_updateAirlinesRequestMapping();
			}
			$this->_OpnrPaymentDetails->_Oconnection=$this->_Oconnection;
			$this->_OpnrPaymentDetails->_INcondition='IN';
			$this->_OpnrPaymentDetails->_SpaymentStatus=implode(',', array('PENDING','REQUEST'));
			$this->_OpnrPaymentDetails->_Spnr=$_Spnr;
			$this->_OpnrPaymentDetails->_selectPnrPaymentDetails();
			if(empty($this->_OpnrPaymentDetails->_ApnrPaymentDetails))
			{
				$this->_OrequestGroupDetails->_Oconnection=$this->_Oconnection;
				$this->_OrequestGroupDetails->_SgroupStatus=$this->_getCurrentStatusId('PC');
				$this->_OrequestGroupDetails->_ItransactionMasterId=$_IlastTransactionId;
				$this->_OrequestGroupDetails->_IairlinesRequestId=$_IairlinesRequestId;
				$this->_OrequestGroupDetails->_IseriesGroupId = $_AseriesRequestDetails['seriesGroupId'];
				$this->_OrequestGroupDetails->_updateRequestGroupDetails();
			}
			$this->_setPassengerRequested($_IrequestMasterId,'');
			fileRequire("dataModels/class.pnrBlockingDetails.php");
			$this->_OpnrBlockingDetails=new pnrBlockingDetails();
			$this->_OpnrBlockingDetails->_Oconnection=$this->_Oconnection;
			$this->_OpnrBlockingDetails->_IrequestMasterId=$_IrequestMasterId;
			$this->_OpnrBlockingDetails->_Spnr=$_Spnr;
			$this->_OpnrBlockingDetails->_selectPnrBlockingDetails();
			$_ItotalPax=$this->_OpnrBlockingDetails->_ApnrBlockingDetails[0]['no_of_adult']+$this->_OpnrBlockingDetails->_ApnrBlockingDetails[0]['no_of_child'];
			$_AsubmittedPax=$this->_getSubmittedCountByPaxType($_Spnr);
			if(!empty($_AsubmittedPax))
			{
				if($_ItotalPax==$_AsubmittedPax['submittedPax'])
				{

					$this->_OrequestGroupDetails=new requestGroupDetails();
					$this->_OrequestGroupDetails->_Oconnection=$this->_Oconnection;
					$this->_OrequestGroupDetails->_SgroupStatus= ($_ScheckssrPayment=='Y' && isset($_Istatus)) ? $_Istatus :$this->_getCurrentStatusId('RP');
					$this->_OrequestGroupDetails->_ItransactionMasterId=$_IlastTransactionId;
					$this->_OrequestGroupDetails->_IairlinesRequestId=$_IairlinesRequestId;
					$this->_OrequestGroupDetails->_IseriesGroupId = $_AseriesRequestDetails['seriesGroupId'];
					$this->_OrequestGroupDetails->_updateRequestGroupDetails();
				}
			}
			return true;
		}
		if(!empty($_ApenaltyTransactionDetails))
		{
			foreach ($_ApenaltyTransactionDetails as $pnrKey => $pnrVal)
			{
				if($pnrVal['payment_status']=='PENALTYPAYMENT')
				{
					$sqlFetchPaymentDetails="SELECT pm.payment_requested_date,
											pd.paid_by,
											pd.payment_mode,
											pacd.remarks,
											pacd.paid_status
										  FROM
											".$CFG['db']['tbl']['payment_master']." pm
											LEFT JOIN ".$CFG['db']['tbl']['payment_details']." pd
											ON pm.payment_master_id=pd.request_source_id
											INNER JOIN ".$CFG['db']['tbl']['pnr_payment_details']." ppd
											ON pm.payment_master_id=ppd.payment_master_id
											INNER JOIN ".$CFG['db']['tbl']['payment_additional_charge_details']." pacd ON ppd.pnr_payment_id=pacd.pnr_payment_id
										  WHERE
										  pm.payment_master_id='".$pnrVal['payment_master_id']."'";
					if(DB::isError($resultFetchPaymentDetails=$this->_Oconnection->query($sqlFetchPaymentDetails)))
					{
						fileWrite($sqlFetchPaymentDetails,"SqlError","a+");
						return false;
					}
					$this->_OuserDetails=new userDetails();
					$this->_OuserDetails->_Oconnection=$this->_Oconnection;
					if($resultFetchPaymentDetails->numRows() > 0)
					{
						while($rowPaymentMasterDetails=$resultFetchPaymentDetails->fetchRow(DB_FETCHMODE_ASSOC))
						{
							$this->_OuserDetails->_IuserId=$rowPaymentMasterDetails['paid_by'];
				   			$this->_OuserDetails->_selectUserDetails();
				   			if($rowPaymentMasterDetails['paid_status']=='APPROVED' || $rowPaymentMasterDetails['paid_status']=='SSRPAYMENT')
				   			{
								$_ApenaltyTransactionDetails[$pnrKey]['payment_mode']=$rowPaymentMasterDetails['payment_mode'];
								$_ApenaltyTransactionDetails[$pnrKey]['userName']=$this->_OuserDetails->_AuserDetails['email_id'];
							}
							$_ApenaltyTransactionDetails[$pnrKey]['remarks']=$rowPaymentMasterDetails['remarks'];
							$_ApenaltyTransactionDetails[$pnrKey]['payment_requested_date']=$rowPaymentMasterDetails['payment_requested_date'];
							$_ApenaltyTransactionDetails[$pnrKey]['payment_requested_date_disp']=$this->_getUserDateFormatValue($rowPaymentMasterDetails['payment_requested_date']);
							$_ApenaltyTransactionDetails[$pnrKey]['penalty_status']=$rowPaymentMasterDetails['paid_status'];
						}
					}
				}
				fileRequire("dataModels/class.paymentTransactionDetails.php");
				$this->_OpaymentTransactionDetails=new paymentTransactionDetails();
				$this->_OpaymentTransactionDetails->_Oconnection = $this->_Oconnection;
				$this->_OpaymentTransactionDetails->_IpaymentMasterId =$pnrVal['payment_master_id'];
				$_ApaymentHistory=$this->_OpaymentTransactionDetails->_selectPaymentTransactionDetails();
				if($CFG['payment']['invoicePayment'] == 'N')
				{
					if(!empty($_ApaymentHistory[0]['bank_name']))
					{
						 $viewHistorySql="SELECT
				                            bank_name,
				                            account_number
				                      FROM
				                            ".$CFG['db']['tbl']['bank_details']."
				                      WHERE
				                            bank_details_id='".$_ApaymentHistory[0]['bank_name']."'";
				   		if(DB::isError($viewHistoryResult=$this->_Oconnection->query($viewHistorySql)))
						{
							fileWrite($viewHistorySql,"SqlError","a+");
							return false;
						}
				   		if($viewHistoryResult->numRows() >0)
						{
							$viewHistroyRow=$viewHistoryResult->fetchRow(DB_FETCHMODE_ASSOC);
						}
					}
				}
				if(isset($_ApenaltyTransactionDetails[$pnrKey]['penalty_status']) && $_ApenaltyTransactionDetails[$pnrKey]['penalty_status']=='REQUEST')
				{
					$_ApenaltyTransactionDetails[$pnrKey]['bank_name'] = $viewHistroyRow['bank_name'];
					$_ApenaltyTransactionDetails[$pnrKey]['account_number'] = $viewHistroyRow['account_number'];
				}
			}
			return $_ApenaltyTransactionDetails;
		}
		return true;
	}

	/****
    *Author     	: Kanitha A
    *Created on 	: 16-09-2020
    *Parameter      : request master id and pnr
    *Description    :This function return penalty details against a pnr
    *return         : Array
    *****/
	function _getPenaltyAmountAndValidity($_IrequestMasterId,$_Spnr)
	{
		global $CFG;
		$_ApenaltyDetails= array();
		//Query to get penalty amt and validity
		$_Ssql="SELECT 
					pacd.additional_amount,ppd.pnr_payment_validity_date,pacd.paid_status,
					(SELECT pnr_payment_validity_date FROM pnr_payment_details WHERE payment_status='PENALTYPAYMENT' AND paid_date='0000-00-00 00:00:00' AND pnr='".$_Spnr."' LIMIT 1 ) as next_penalty_validity

				FROM 
					payment_additional_charge_details pacd
				 	INNER JOIN pnr_payment_details ppd
				 	ON pacd.pnr_payment_id=ppd.pnr_payment_id
				WHERE pacd.request_master_id=".$_IrequestMasterId. 
					  " AND ppd.pnr='".$_Spnr."' AND ppd.payment_status='PENALTYPAYMENT'
					  AND pacd.paid_status!='MODIFY' AND pacd.paid_status!='CANCELLED'";

		if(DB::isError($resultVal = $this->_Oconnection->query($_Ssql)))
		{
			fileWrite($_Ssql,"SqlError","a+");
			return false;
		}
		if($resultVal->numRows()>0)
		{
			while($row = $resultVal->fetchRow(DB_FETCHMODE_ASSOC))
			{
				$_ApenaltyDetails[]	=$row;
			}
		}
		//returns the penalty details
		return $_ApenaltyDetails;
	}

	/*
	 * Created by: Ganesan.S
	 * Created date: 18-09-2020
	 * Description: Get penalty total, paid and balance amount
	 */
	function _getPenaltyTotalPaidAndDueAmount($_IrequestMasterId,$_Spnr){
		// Get penalty paid and pending mount
		$_ApenaltyDetails=$this->_getPenaltyAmountAndValidity($_IrequestMasterId,$_Spnr);
		if(!empty($_ApenaltyDetails))
		{
			$_ArowPayment = array();
			$_IpenaltyTotalAmount=0;
			$_IpenaltyPaidAmount=0;
			$_IpenaltyDueAmount=0;

			//loop on penalty details to get total and pending amount
			foreach ($_ApenaltyDetails as $penaltyValue) {
				$_IpenaltyTotalAmount += $penaltyValue['additional_amount'];
				if($penaltyValue['paid_status']=="APPROVED")
					$_IpenaltyPaidAmount += $penaltyValue['additional_amount'];
				if($penaltyValue['paid_status']=="PENDING")
					$_IpenaltyDueAmount += $penaltyValue['additional_amount'];
			}
			//assign the penalty amount and validity
			$_ArowPayment['penaltyTotalAmount'] = $_IpenaltyTotalAmount;
			$_ArowPayment['penaltyPaidAmount'] = $_IpenaltyPaidAmount;
			$_ArowPayment['penaltyDueAmount'] = $_IpenaltyDueAmount;
			return $_ArowPayment;
		}
		return false;
	}

	/*
	 * Created by: Suganya.B
	 * Created date: 16-10-2020
	 * Description: This function returns config of resize settings
	 */
	function _getResizeSettings($_SresizeType,$_SresizeConfigName,$_IrequestMasterId,$_AseriesRequestData=array())
	{
		global $CFG;
		$_AresizeRestrict = array();
		$_AresizeRestrict = $CFG['site']['resizeSettings'];

		$_AcontractCoveredConfig = array(
			'groupUpsizeCount' => 'upsize_count',
			'upsizeNewRequestBefore' => 'upsize_timeLimitInput',
			'downsizeDepartureCheck' => 'downsize_timeLimitInput',
			'maximumDivideCount' => 'divide_count'
		);		

		$_ScontractStatus = $CFG['site']['contractManager']['status'];

		if(($_ScontractStatus == 'Y') && array_key_exists($_SresizeConfigName,$_AcontractCoveredConfig))
		{
			if($_IrequestMasterId==0)
				return false;
	        if(empty($_AseriesRequestData))
			{
		        $_AseriesRequestData = $this->_getSeriesRequestId($_IrequestMasterId);
		        $_IseriesGroupId =  $_AseriesRequestData[0]['series_group_id'];
			}
			else
				$_IseriesGroupId =  $_AseriesRequestData['series_group_id'];
			fileRequire('classes/class.contractManager.php');
	        $_OcontractManager = new contractManager();
	        $_OcontractManager->_Oconnection = $this->_Oconnection;
			$_AcontractResizeData = $_OcontractManager->_getSpecifiedValues($_IrequestMasterId,$_SresizeType,$_IseriesGroupId);
			
			return $_AcontractResizeData[$_IseriesGroupId][$_AcontractCoveredConfig[$_SresizeConfigName]];
		}
		else
		{
			if(!empty($_SresizeConfigName))
			{	
				return $_AresizeRestrict[$_SresizeType][$_SresizeConfigName];
			}
			else
			{
				return $_AresizeRestrict[$_SresizeType];
			}
		}		
		return true;
	}
	/****
    *Author     	: Kanitha A
    *Created on 	: 25-11-2020
    *Parameter      : airlines request id
    *Description    :This function return cancel policy details for special farea
    *return         : Array
    *****/
	function _cancelPolicyDetails($airlineRequestId)
	{
		global $CFG;
		//Query to get cancel policy details
		$_Ssql="SELECT 
					cpd.cancel_policy_name,
					cpd.cancel_policy_description,
					rad.fare_filter_method
				FROM 
					airlines_request_mapping arm
				 	INNER JOIN request_approved_flight_details rafd
				 	ON rafd.airlines_request_id=arm.airlines_request_id
				 	INNER JOIN request_approved_fare_details rad
				 	ON rad.request_approved_flight_id=rafd.request_approved_flight_id
				 	INNER JOIN cancel_policy_details cpd
				 	ON cpd.cancel_policy_id=rad.cancel_policy_id
				WHERE 
				 rafd.airlines_request_id=".$airlineRequestId."
				ORDER BY rafd.request_approved_flight_id DESC LIMIT 2";
		if(DB::isError($resultVal = $this->_Oconnection->query($_Ssql)))
		{
			fileWrite($_Ssql,"SqlError","a+");
			return false;
		}
		if($resultVal->numRows()>0)
		{
			while($row = $resultVal->fetchRow(DB_FETCHMODE_ASSOC))
			{
			 $_AcancelPolicyDetails[$this->_Osmarty->getConfigVars("COMMON_SPECIAL_FARE_TYPE_".$row['fare_filter_method'])]=$row;
			}
		}
		//returns the cancel policy details
		return $_AcancelPolicyDetails;
	}

	/**
	 * @Author      	: Karupswami
	 * @Created Date 	: 12-06-2020
	 * @Param 			: Display formated currency
	 * @Return 			: formatedAmount 
	 */	
	/* Display formated currency */
	function _displayFormatedAmount($fare,$currencyCode="displayFare")
	{
		global $CFG;
		if(empty($fare))
		{
			return false;
		}	
		if(isset($CFG["limit"]["amountDisplayFormat"]['status']) && $CFG["limit"]["amountDisplayFormat"]['status'] == "Y")
		{	
			//To Display the fare with decimal values
			return $this->_getRoundOffFare($fare,'',$currencyCode);
		}
		else if(!isset($CFG["limit"]["amountDisplayFormat"]['status']) || $CFG["limit"]["amountDisplayFormat"]['status'] == "N")
		{
			return $this->_getRoundOffFare($fare);
		}
		
	}

	/**
	 * @Author      	: Deepraj Singh Rajawat
	 * @Created Date 	: 21-Dec-2020
	 * @Param 			: pnr, _AdummyPassenger
	 * @Return 			: paxDet 
	 * @Description   	: Calling function to get passenger details
	 */	
	public function _getPassengerDetailForReissue($_Spnr,$_AdummyPassenger = array()) {

		if(!$_Spnr){

			$this->_AerrorFileWrite['_getPassengerDetailForReissue'] = 'Error';
			return false;
		}
		
		global $CFG;	
		$_ApassengerDetails = array();
		$paxDet = array();

		#Getting passenger details if exist otherwise return dummy
		fileRequire("dataModels/class.passengerDetails.php");
		$_OpassengerDetails=new passengerDetails();

		$_OpassengerDetails->__construct();
		$_OpassengerDetails->_Oconnection=$this->_Oconnection;
		$_OpassengerDetails->_Spnr = $_Spnr;
		$_OpassengerDetails->_selectPassengerDetails();
		$_ApassengerDetails = $_OpassengerDetails->_ApassengerDetails;

		if(isset($_ApassengerDetails[0]['first_name']) && $_ApassengerDetails[0]['first_name'] != '')
		{
			$paxDet['first_name'] = $_ApassengerDetails[0]['first_name'];
			$paxDet['last_name'] = $_ApassengerDetails[0]['last_name'];
			$paxDet['title'] = $_ApassengerDetails[0]['title'];
			$paxDet['middle_name'] = $_ApassengerDetails[0]['middle_name'];
		}
		else
		{
			$paxDet['first_name'] = $_AdummyPassenger[0]['corporate_name'];
			$paxDet['last_name'] = $_AdummyPassenger[0]['pos_code'];
			if($_AdummyPassenger[0]['group_id'] == 4 && $_AdummyPassenger[0]['pos_code'] == '')
				$paxDet['last_name'] = 'ALL';
		}
		
		return $paxDet;
	}
	
	/**
	 * @Author      	: Subalakshmi S 
	 * @Created Date 	: 05-01-2020
	 * @Param 			: Request master id
	 * @Return 			: Flag : Y,N
	 * @Description   	: Whether the request is needed to show or hide in the list
	 */	
		
	function _isAllowedBooking($_IrequestMasterId)
	{
		global $CFG;
		$_AstaticData = $this->_staticData("_isAllowedBooking",$_IrequestMasterId);
		if($_AstaticData !== false)
			return $_AstaticData;
			
		$_IparentRequestId = $this->_getParentRequestMasterId($_IrequestMasterId);
		$_IparentRequestId = ($_IparentRequestId==0)?$_IrequestMasterId:$_IparentRequestId;
		$_SallowBooking = 'N';
		if($_IparentRequestId!=0)
		{
			$_AchildDetails = $this->_getResubmitedChild($_IparentRequestId,array('C'));
			$_IintialRequest = (isset($_AchildDetails['request_master_id'][0])&&$_AchildDetails['request_master_id'][0]!=0)?$_AchildDetails['request_master_id'][0]:$_IparentRequestId;
			
			$_SconfigRequestId = $CFG['list']['hideRequest']['requestId'];
			if($_IintialRequest<=$_SconfigRequestId)
			{
				$_SallowBooking = 'N';
			}
			else
			{
				$_SallowBooking = 'Y';
			}
		}
		$this->_staticData("_isAllowedBooking",$_IrequestMasterId,$_SallowBooking);
		return $_SallowBooking;
	}

	function _updateScheduleChangeFlightDetails($_AupdateValues=array(),$_IseriesRequestId=0,$_SviaFlightStatus='N')
	{
		if(empty($_AupdateValues))
			return true;
		if($_IseriesRequestId!=0)
		{
			$_SselectHistory="SELECT MAX(rafd.series_request_history_id) as series_history_id
				FROM request_approved_flight_details rafd
				WHERE rafd.series_request_id=".$_IseriesRequestId."
				AND rafd.accepted_flight_status='Y'";
			if(DB::isError($resultHistory=$this->_Oconnection->query($_SselectHistory)))
			{
				fileWrite($_SselectHistory,"SqlError","a");
				return false;
			}
			if($resultHistory->numRows()>0)
			{
				$rowSeriesHistory=$resultHistory->fetchRow(DB_FETCHMODE_ASSOC);
				$_IseriesHistoryId=$rowSeriesHistory['series_history_id'];
			}
			$_IupdatedSeriesRequestId=$_IseriesRequestId;
			if($_IseriesHistoryId>0)
				$_IupdatedSeriesRequestId=$_IseriesHistoryId;
			if(isset($_AupdateValues['scheduleDetails']) && !empty($_AupdateValues['scheduleDetails']))
			{
				$_AtableName=array();
				$_AupdateColumns=array();
				$_AconditionFields=array();
				$_AtableName[0] = 'series_flight_schedule_details';
				$_AupdateColumns[$_AtableName[0]]['departure_time'] = substr($_AupdateValues['scheduleDetails']['departure_time'],0,5);
				$_AupdateColumns[$_AtableName[0]]['arrival_time'] = substr($_AupdateValues['scheduleDetails']['arrival_time'],0,5);
		    	$_AconditionFields[$_AtableName[0]]['series_request_id']['condition'] = '';
				$_AconditionFields[$_AtableName[0]]['series_request_id']['value'] = $_IupdatedSeriesRequestId;
				$_AconditionFields[$_AtableName[0]]['flight_number']['condition'] = '';
				$_AconditionFields[$_AtableName[0]]['flight_number']['value'] = $_AupdateValues['scheduleDetails']['flight_number'];
				$this->_updateQuery($_AtableName[0],$_AupdateColumns[$_AtableName[0]],$_AconditionFields[$_AtableName[0]]);
			}
			if($_SviaFlightStatus=='Y' && isset($_AupdateValues['viaFlightDetails']) && !empty($_AupdateValues['viaFlightDetails']))
			{
				$_SseriesViaFlightId="SELECT series_flight_schedule_id 
	     	  	FROM series_flight_schedule_details
	     	  	WHERE series_request_id=".$_IupdatedSeriesRequestId;
				if(DB::isError($resultViaFlightId=$this->_Oconnection->query($_SseriesViaFlightId)))
				{
					fileWrite($_SseriesViaFlightId,"SqlError","a");
					return false;
				}
				$rowViaFlightId=$resultViaFlightId->fetchRow(DB_FETCHMODE_ASSOC);
				$_AtableName=array();
				$_AupdateColumns=array();
				$_AconditionFields=array();
				$_AtableName[0] = 'series_via_flight_details';
				$_AupdateColumns[$_AtableName[0]]['time_departure'] = $_AupdateValues['viaFlightDetails']['time_departure'];
				$_AupdateColumns[$_AtableName[0]]['time_arrival'] = $_AupdateValues['viaFlightDetails']['time_arrival'];
	        	$_AconditionFields[$_AtableName[0]]['series_flight_schedule_id']['condition'] = '';
				$_AconditionFields[$_AtableName[0]]['series_flight_schedule_id']['value'] = $rowViaFlightId['series_flight_schedule_id'];
				$_AconditionFields[$_AtableName[0]]['flight_number']['condition'] = '';
				$_AconditionFields[$_AtableName[0]]['flight_number']['value'] = $_AupdateValues['viaFlightDetails']['flight_number'];
				$this->_updateQuery($_AtableName[0],$_AupdateColumns[$_AtableName[0]],$_AconditionFields[$_AtableName[0]]);
			}
		}
		return true;
	}
	/**
	 * function _defaultCompression 
	 * compresses the provided variable and returs it as string
	 * 
	 * @author Gopinath v <gopinath@infinitisoftware.net> 
	 * @return string
	 *  */	
	public function _defaultCompression($_paramData){
		if(is_object($_paramData))
			$_paramData = var_export($_paramData,true);
		return  rtrim(strtr(base64_encode(gzdeflate(serialize($_paramData), 9)), '+/', '-_'), '=');
	}
	/**
	 * Desc : Checks whether attachement given for the request or not 
	 * Param : Request master id
	 * Return : Boolean
	 * Author : Dilli Raj P 
	 * Created on : 19-Mar-2021
	**/
	public function _checkAttachmentExist($_IrequestMasterId)
	{
		global $CFG;
		$_AselectField = array('nd.request_master_id');
		$_StableName = "note_details nd 
						INNER JOIN 
							attachment_mapping am 
						ON
							nd.note_details_id = am.id 
						INNER JOIN
							attachment_type_master atm
						ON
							am.attachment_type_id = atm.attachment_type_id";
		$_AconditionValue = array(
			'nd.request_master_id' => $_IrequestMasterId,
			'atm.attachment_type' => 'notes'
		);
		$_AqueryResult = $this->_Oconnection->_performJoinQuery($_StableName,$_AselectField,$_AconditionValue);
		if(count($_AqueryResult) > 0)
			return true;
		return false;
	}
	/**
	 * Desc : To explode the given cabin value
	 * Param : cabin
	 * Return : Array
	 * Author : Vijayakumar P 
	 * Created on : 09-Jun-2021
	**/	
	public function _setBrandCode($cabin)
	{
		global $CFG;
		$tempArr=array();
		$_AbrandDetails=array();		
		$tempArr = explode('-',$cabin);
		$_AbrandDetails['cabin']=$tempArr[0];
		if (count($tempArr)>1)
			$_AbrandDetails['brandCode']=$tempArr[1];
		return $_AbrandDetails;	
	}	
	/**
	 * function _writeToTempFile 
	 * writes the provided data to /tmp/
	 *
	 * if filename is not provided, its used as log
	 * 
	 * @author Gopinath v <gopinath@infinitisoftware.net>
	 * @param string $paramData
	 * @param string/null $paramData
	 * @param string $paramFileName
	 * @return string/null $paramExtension	
	 * @example 
	 * $filename = $this->_writeToTempFile($data, NULL,'.gz');
	 */
	public function _writeToTempFile($paramData, $paramFileName = NULL , $paramExtension = NULL){
		is_null($paramFileName) && $paramFileName = "log";
		$tmpFileName = tempnam(sys_get_temp_dir(), $paramFileName) ;$handle = fopen($tmpFileName, "w");
		!is_null($paramExtension) && rename($tmpFileName, $tmpFileName .= $paramExtension); 
		fwrite($handle, $paramData); fclose($handle);
		return $tmpFileName;
	}
	/**
	 * Desc : To fetch current active group pax count
	 * Param : RequestMasterId
	 * Return : paxCount
	 * Author : Gowri G
	 * Created on : 22-Jun-2021
	**/	
	function _getCurrentPaxCount($_IrequestMasterId)
	{
		$_IpaxCount=0;
		$cond='';
		$_AnotAllowedStatusCode = array('RJ','NR','RC','RE','RS','OE','PN','SC');
		$_IairlinesRequestId=$this->_getAirlineRequestId($_IrequestMasterId);	
		$_IlastTransactionId = $this->_getLastTransactionMasterId($_IrequestMasterId);
		$_AchildDetails=$this->_getResubmitedChild($_IrequestMasterId);
		$_IcurrentStatus = $this->_getStatusFromRequestId($_IrequestMasterId);
		$_ScurrentStatusCode = $this->_getCurrentStatusCode($_IcurrentStatus);
		if(!empty($_AchildDetails))
			array_push($_AnotAllowedStatusCode, 'RN');
		elseif (empty($_AchildDetails) && $_ScurrentStatusCode!='RN')
			array_push($_AnotAllowedStatusCode, 'RN');
		if($_IlastTransactionId>0)
			$cond=" AND rgd.transaction_master_id=".$_IlastTransactionId;
		$_AmodifyStatus = $this->_checkIsModify($_IrequestMasterId);
		$_AseriesGroupId=array();
		if($_AmodifyStatus['requestModifyStatus'] == 'Y')
		{
			fileRequire('classes/class.processRequest.php');
			$_OprocessRequest = new processRequest();
			$_OprocessRequest->__construct();
			$_OprocessRequest->_Oconnection = $this->_Oconnection;
			//Getting the newly added group information
			$_AseriesRequestHistory = $_OprocessRequest->_getSeriesRequestHistory($_IrequestMasterId,$_AmodifyStatus['requestMasterHistoryId'],'Y');
			foreach($_AseriesRequestHistory as $_AhistoryValue)
			{
				//add newly added group pax count
				if($_AhistoryValue['mapped_series_request_id'] == 0)
					$_IpaxCount += $_AhistoryValue['number_of_passenger'];
			}
		}
		$selectOriginalPaxDetails = "SELECT
									srd.number_of_adult,
									srd.number_of_child,
									srd.number_of_infant,
									srd.number_of_passenger,
									srd.series_group_id,
									rgd.group_status
									FROM
										request_master rm,
										request_details rd,
										series_request_details srd,
										request_group_details rgd
									WHERE
										rm.request_master_id = ".$_IrequestMasterId." AND
										rm.request_master_id  = rd.request_master_id AND
										rd.request_id = srd.request_id AND
										srd.series_group_id = rgd.series_group_id AND
										rgd.airlines_request_id=".$_IairlinesRequestId.
											$cond.
										" ORDER BY srd.series_group_id,srd.series_request_id";
		if(DB::isError($resultOriginalPaxDetails = $this->_Oconnection->query($selectOriginalPaxDetails)))
		{
			fileWrite($selectOriginalPaxDetails,'SqlError','a+');
			return FALSE;
		}
		if($resultOriginalPaxDetails->numRows() > 0)
		{
			while($rowOriginalPaxDetails=$resultOriginalPaxDetails->fetchRow(DB_FETCHMODE_ASSOC))
			{
				$_SgroupStatus = $this->_getCurrentStatusCode($rowOriginalPaxDetails['group_status']);
				if(!in_array($_SgroupStatus, $_AnotAllowedStatusCode) && !in_array($rowOriginalPaxDetails['series_group_id'], $_AseriesGroupId))
				{
					$_IpaxCount +=$rowOriginalPaxDetails['number_of_passenger'];
					$_AseriesGroupId[]=$rowOriginalPaxDetails['series_group_id'];
				}
			}
		}
		return $_IpaxCount;
	}
	/**
	 * Desc : To prepare history details for unmodified segments
	 * Param : _AapprovedData-previous approved flight details,_AseriesFlightScheduleDetails-current flightschedule details
	 * Return : _AselectedFlightDetails
	 * Author : Gowri G
	 * Created on : 07-Jul-2021
	**/	
	function _prepareSelectedFlightDetails($_AapprovedData=array(),$_AseriesFlightScheduleDetails=array(),$_AseriesFlightScheuleId=array(),$_AflightScheduleArray=array())
	{
		$_AselectedFlightDetails=array();
		$_Iindex=0;
		fileRequire("dataModels/class.seriesViaFlightDetails.php");
		$_OseriesViaFlightDetails = new seriesViaFlightDetails();
		foreach ($_AapprovedData as $_IflightKey => $_AflightData)
		{
			$_IseriesRequestId=$_AflightData['series_request_id'];
			if(in_array($_IseriesRequestId, array_keys($_AseriesFlightScheduleDetails)))
			{
				$_AselectedFlightDetails[$_Iindex]=$_AflightData;
				$_AselectedFlightDetails[$_Iindex]['request_id']=$_AseriesFlightScheduleDetails[$_IseriesRequestId]['request_id'];
				$_AselectedFlightDetails[$_Iindex]['series_request_id']=$_AseriesFlightScheduleDetails[$_IseriesRequestId]['series_request_id'];
				$_AselectedFlightDetails[$_Iindex]['request_details_history_id']=$_AseriesFlightScheduleDetails[$_IseriesRequestId]['request_details_history_id'];
				$_AselectedFlightDetails[$_Iindex]['series_request_history_id']=$_AseriesFlightScheduleDetails[$_IseriesRequestId]['series_request_id'];
				$_AselectedFlightDetails[$_Iindex]['requestGroupId']=$_AflightData['seriesRequestDetails'][0]['series_group_id'];
				$_AselectedFlightDetails[$_Iindex]['series_flight_schedule_id']=$_AseriesFlightScheuleId[$_AseriesFlightScheduleDetails[$_IseriesRequestId]['series_request_id']][$_AflightData['flight_number']][0];
				$_IfareDetailsIndex=array_search($_AseriesFlightScheuleId[$_AseriesFlightScheduleDetails[$_IseriesRequestId]['series_request_id']][$_AflightData['flight_number']][0], array_column($_AflightScheduleArray, 'series_flight_schedule_id'));
				$_AselectedFlightDetails[$_Iindex]['fareDetails']=$_AflightScheduleArray[$_IfareDetailsIndex]['fareDetails'];
				$_ApreApprFlightNo = explode('/',str_replace($_AflightData['airlines_code'].'-', '', $_AflightData['flight_num']));
				if(!empty($_AflightData['viaFlightDetails']) && count($_AseriesFlightScheuleId[$_AseriesFlightScheduleDetails[$_IseriesRequestId]['series_request_id']][$_AflightData['flight_number']])>1)
				{
					foreach ($_AseriesFlightScheuleId[$_AseriesFlightScheduleDetails[$_IseriesRequestId]['series_request_id']][$_AflightData['flight_number']] as $flightKey => $flightVal)
					{
						$_OseriesViaFlightDetails->__construct();
						$_OseriesViaFlightDetails->_Oconnection = $this->_Oconnection;
						$_OseriesViaFlightDetails->_IseriesFlightScheduleId = $flightVal;
						$_AviaFlightDetails=$_OseriesViaFlightDetails->_selectSeriesViaFlightDetails();
						$_AviaFlightsNumber=array_column($_AviaFlightDetails, 'flight_number');
						$_AdiffFlightNumber=array_diff($_ApreApprFlightNo, $_AviaFlightsNumber);
						if(empty($_AdiffFlightNumber))
						{
							$_AselectedFlightDetails[$_Iindex]['series_flight_schedule_id']=$flightVal;
							$_IfareDetailsIndex=array_search($flightVal, array_column($_AflightScheduleArray, 'series_flight_schedule_id'));
							$_AselectedFlightDetails[$_Iindex]['fareDetails']=$_AflightScheduleArray[$_IfareDetailsIndex]['fareDetails'];
						}
					}
				}
				$_Iindex++;
			}
		}
		return $_AselectedFlightDetails;
	}


	/**
	 * Desc : calculate ssr payment total amount for request
	 * Param :_IrequestMasterId request master id, _SpaidStatus paid status
	 * Return : ssr payment total amount
	 * Author : Hari Prasanth A

	**/	
	function _getSSRPaymentTotalAmount($_IrequestMasterId='',$_SpaidStatus='',$_Spnr='')
	{
		global $CFG;
		if (isset($CFG['ssr']['SSRPayment']) && $CFG['ssr']['SSRPayment']['status']== 'Y'){

			if (isset($_Spnr) && isset($_IrequestMasterId)) {
				$_ApnrBlockingDetails=$this->_getPnrInformation($_Spnr,$_IrequestMasterId);		
			}

			fileRequire("dataModels/class.paymentAdditionalChargeDetails.php");
			$this->_OpaymentAdditionalChargeDetails=new paymentAdditionalChargeDetails();
			$this->_OpaymentAdditionalChargeDetails->__construct();
			$this->_OpaymentAdditionalChargeDetails->_Oconnection = $this->_Oconnection;
			$this->_OpaymentAdditionalChargeDetails->_IrequestMasterId =$_IrequestMasterId;
			$this->_OpaymentAdditionalChargeDetails->_SpaidStatus =$_SpaidStatus;
			if ($_ApnrBlockingDetails)
				$this->_OpaymentAdditionalChargeDetails->_IpnrBlockingId =$_ApnrBlockingDetails['pnrDetails']['pnr_blocking_id'];
			//$this->_OpaymentAdditionalChargeDetails->_SssrStatus ='Y';
			$this->_OpaymentAdditionalChargeDetails->_SssrStatus ='SR';
			$_ApaymentAdditionalChargeDetails=$this->_OpaymentAdditionalChargeDetails->_selectPaymentAdditionalChargeDetails();
			
			if(count($_ApaymentAdditionalChargeDetails) > 0){
				foreach ($_ApaymentAdditionalChargeDetails as $_ApaymentAdditionalKey => $_ApaymentAdditionalVal)
				{
					$_Itotalamount+=$_ApaymentAdditionalVal['additional_amount'];

				}
			}
			else
				return false;	
		}
		return $_Itotalamount;

	}
	/***
	 * Description	: Getting seat amount
	* Parameter		: $_IrequestMasterId,$_SpaidStatus,$_Spnr
	* Author		: Nivetha M
	* Date			: 27.03.2023
	***/
	function _getSeatPaymentTotalAmount($_IrequestMasterId='',$_SpaidStatus='',$_Spnr='')
	{
		global $CFG;
		if (isset($CFG["ssr"]["SEATPayment"]) && $CFG["ssr"]["SEATPayment"]["status"]== 'Y')
		{
			if (isset($_Spnr) && isset($_IrequestMasterId)) 
				$_ApnrBlockingDetails=$this->_getPnrInformation($_Spnr,$_IrequestMasterId);

			fileRequire("dataModels/class.paymentAdditionalChargeDetails.php");
			$this->_OpaymentAdditionalChargeDetails=new paymentAdditionalChargeDetails();
			$this->_OpaymentAdditionalChargeDetails->__construct();
			$this->_OpaymentAdditionalChargeDetails->_Oconnection = $this->_Oconnection;
			$this->_OpaymentAdditionalChargeDetails->_IrequestMasterId =$_IrequestMasterId;
			$this->_OpaymentAdditionalChargeDetails->_SpaidStatus =$_SpaidStatus;
			if ($_ApnrBlockingDetails)
				$this->_OpaymentAdditionalChargeDetails->_IpnrBlockingId =$_ApnrBlockingDetails['pnrDetails']['pnr_blocking_id'];
			$this->_OpaymentAdditionalChargeDetails->_SssrStatus ='SE';
			$_ApaymentAdditionalChargeDetails=$this->_OpaymentAdditionalChargeDetails->_selectPaymentAdditionalChargeDetails();
			
			if(count($_ApaymentAdditionalChargeDetails) > 0){
				foreach ($_ApaymentAdditionalChargeDetails as $_ApaymentAdditionalKey => $_ApaymentAdditionalVal)
				{
					$_ItotalSeatAmount+=$_ApaymentAdditionalVal['additional_amount'];

				}
			}
			else
				return false;	
		}
		return $_ItotalSeatAmount;

	}
	/***
	 * Description	: Getting fee amount
	* Parameter		: $_IrequestMasterId,$_SpaidStatus,$_Spnr
	* Author		: Nivetha M
	* Date			: 27.03.2023
	***/
	function _getFeePaymentTotalAmount($_IrequestMasterId,$pnr='',$status='FE')
	{
		global $CFG;
		if($pnr!='')
		{
			fileRequire("dataModels/class.pnrBlockingDetails.php");
			$this->_OpnrBlockingDetails=new pnrBlockingDetails();
			$this->_OpnrBlockingDetails->_Oconnection=$this->_Oconnection;
			$this->_OpnrBlockingDetails->_Spnr=$pnr;
			$_ApnrBlockingDetails =$this->_OpnrBlockingDetails->_selectPnrBlockingDetails();
			$_IpnrBlockingId=$_ApnrBlockingDetails[0]['pnr_blocking_id'];
		}
		$selectFeeAmout = "SELECT 
					 ROUND(SUM(additional_amount),2) as addtionalAmount
				FROM 
					".$CFG['db']['tbl']['payment_additional_charge_details']."  
				WHERE request_master_id = ".$_IrequestMasterId." AND ssr_status='".$status."'";

		if($_IpnrBlockingId!='')
			$selectFeeAmout.=" AND pnr_blocking_id=".$_IpnrBlockingId;

		$_IgetFeeAmount = $this->_executeQuery($selectFeeAmout);
		return $_IgetFeeAmount[0]['addtionalAmount'];

	}

	/***
	 * Description	: Getting fare basis code
	* Parameter		: $_IrequestMasterId,$_IseriesRequestId,$classOfService,$_spaxType(AD,CH,IN)
	* Return	 	: $fareBasisCode(string)
	* Author		: Kanitha A
	* Date			: 09.11.2021
	***/

	function _getFareBasisCodeFormat($_IrequestMasterId,$_IseriesRequestId,$classOfService,$_SpaxType='')
	{
		global $CFG;
		$CFG['settings']['fareBasisCodeFormet']["fareBasisCodeString"]=strip_tags($CFG['settings']['fareBasisCodeFormet']["fareBasisCodeString"]);
		$groupRequestId=$this->_changeGroupRequestFormat($_IrequestMasterId);
		$fareBasisFormat ='';
		//Getting series request details
		$_AseriesRequestDetails=$this->_getSeriesRequestDetails($_IseriesRequestId);
		fileRequire('dataModels/class.requestDetails.php');
		$_OrequestDetails = new requestDetails();
		$_OrequestDetails->__construct();
		$_OrequestDetails->_Osmarty = $this->_Osmarty;
		$_OrequestDetails->_Oconnection = $this->_Oconnection;
		$_OrequestDetails->_IrequestId = $_AseriesRequestDetails[0]['request_id'];
		$_ArequestDetails = $_OrequestDetails->_selectRequestDetails();
		//Geting the trip type for the fareBasiscode
		if($_ArequestDetails[0]['trip_type'] == 1 || $_ArequestDetails[0]['trip_type'] == 'O')
		{
			$tripType = 'OW';
		}
		elseif ($_ArequestDetails[0]['trip_type'] == 2 || $_ArequestDetails[0]['trip_type'] == 'R') 
		{
			$tripType = 'RT';
		}
		elseif ($_ArequestDetails[0]['trip_type'] == 3 || $_ArequestDetails[0]['trip_type'] == 'M') 
		{
			$tripType = 'MC';
		}

		$posDetails=$this->_getRequestPosDetails($_IrequestMasterId);
		$countryCode=$this->_getPOSCountryDetail($posDetails['pos_code']);
		#Checking the country code and replace the country code in fare basis code for group base fare do not use iata country codes
		if(isset($CFG["settings"]["fareBasisCodeFormet"]["restrictedCountryCodes"]) && 
		!empty($CFG["settings"]["fareBasisCodeFormet"]["restrictedCountryCodes"][$countryCode]))
			$countryCode=$CFG["settings"]["fareBasisCodeFormet"]["restrictedCountryCodes"][$countryCode];
		//class of service
		$classReplaceString=str_replace('Class',$classOfService,$CFG['settings']['fareBasisCodeFormet']["fareBasisCodeString"]);
		$fareBasisFormetReplaceString=str_replace('CountryCode',$countryCode,$classReplaceString);
		$fareBasisFormetReplaceString=str_replace('TripType',$tripType,$fareBasisFormetReplaceString);
		$fareBasisFormetReplaceString=str_replace('GroupRequestID',substr($groupRequestId,0,3).$countryCode,$fareBasisFormetReplaceString);
		//Taking Adult pax type as AD by default
		if($_SpaxType != '')
			$fareBasisFormat=str_replace('PaxType',$_SpaxType,$fareBasisFormetReplaceString);
		else
			$fareBasisFormat=str_replace('PaxType','AD',$fareBasisFormetReplaceString);
		return $fareBasisFormat;						
		
	}
	function _getFocPax($requestMasterId)
	{
		$_AseriesRequestDetails=array();
		$_IseriesGroupId=array();
		$_AseriesRequestDetails=$this->_getSeriesRequestId($requestMasterId);
		foreach ($_AseriesRequestDetails as $key => $value) 
		{
			if(!in_array($value['series_group_id'],$_IseriesGroupId))
			{
				$_IseriesGroupId[]=$value['series_group_id'];
				$_AfocPax = json_decode($value['foc_pax'],1);
				if(is_array($_AfocPax))				
					$_ATotalfocPax['totalFoc'] += ($_AfocPax['edited']>0)?$_AfocPax['edited']:$_AfocPax['requested'];		
				else
					$_ATotalfocPax['totalFoc'] += $_AfocPax;
			}
		}
		return $_ATotalfocPax;
	}
	/***
	* Description	: Remove dummy rows on passenger details table
	* Parameter		: $_IseriesRequestId,$_Spnr,$passengerCount
	* Author		: Vijayakumar P
	* Date			: 13.01.2022
	***/

	function _removeDummyRows($_IseriesRequestId,$_Spnr,$passengerCount)
	{
		global $CFG;
		$_StableName = '';
		$_AselectField = array();
		$_AconditionValue = array();
		$_AdeleteConditionValue = array();
		$_ADeleteCondition = array();
		$_AselectField = array("passenger_id");
		$_StableName = $CFG['db']['tbl']['passenger_details'];
		$_AconditionValue = ["series_request_id" => $_IseriesRequestId,"pnr" => $_Spnr];
		$_AconditionValue['additional_details']['condition'] ='like ';
		$_AconditionValue['additional_details']['value'] ='%insertedDummyRow\":\"Y%';
		$_ApassengerId = $this->_Oconnection->_performQuery($_StableName,$_AselectField,'DB_AUTOQUERY_SELECT',$_AconditionValue,'','','passenger_id DESC',$passengerCount);
		$_ADeleteCondition['passenger_id']['condition'] = "IN";
		$_ADeleteCondition['passenger_id']['value'] = array_column($_ApassengerId,'passenger_id');
		return $this->_Oconnection->_performQuery($_StableName,$_AdeleteTableValue = [],'DB_AUTOQUERY_DELETE',$_ADeleteCondition);
	}

	function _getPartialModifiedPaxCount($_IrequestMasterId)
	{
		$cond='' ;
		$_IairlinesRequestId=$this->_getAirlineRequestId($_IrequestMasterId);	
		$_IlastTransactionId = $this->_getLastTransactionMasterId($_IrequestMasterId);
		if($_IlastTransactionId>0)
			$cond=" AND rgd.transaction_master_id=".$_IlastTransactionId;
		$_AgroupCount=array();
		$_ApartialGrpPaxCount=array('totalNoOfPax'=>0,'totalNoOfAdult'=>0,'totalNoOfChild'=>0,'totalNoOfInfant'=>0,'totalNoOfFoc'=>0);
		$_AgroupStatus=array('PM','RN','RS','NR','SC');
		$_IcurrentStatus=$this->_getStatusFromRequestId($_IrequestMasterId); 
		$_SmodifyFareQuote='N';
		$_AlastTransactionId=$this->_getModifyFareQuoteStatus($_IrequestMasterId,'Y');
		$_SmodifyStatus=$this->_checkRequestModifyStatus($_AlastTransactionId['lastTransactionId']);
		if($_SmodifyStatus=='Y')
		{
			#Get modified details from history tables
			$_AmodifiedDetails=$this->_getModifyFareQuoteStatus($_IrequestMasterId);
			if(!empty($_AmodifiedDetails) && $_AmodifiedDetails['flightDetails']['requestMasterHistory']['request_modify_status']==3 && $_SmodifyStatus=="Y")
				$_SmodifyFareQuote='N';
		}
		else if($this->_getCurrentStatusCode($_IcurrentStatus)=="AN")
			$_SmodifyFareQuote='Y';
		$selectOriginalPaxDetails = "SELECT
								srd.number_of_adult,
								srd.number_of_child,
								srd.number_of_infant,
								srd.number_of_passenger,
								srd.foc_pax,
								srd.series_group_id,
								rgd.group_status,
								rgd.request_master_history_id
								FROM
									request_master rm,
									request_details rd,
									series_request_details srd,
									request_group_details rgd
								WHERE
									rm.request_master_id = ".$_IrequestMasterId." AND
									rm.request_master_id  = rd.request_master_id AND
									rd.request_id = srd.request_id AND
									srd.series_group_id = rgd.series_group_id AND
									rgd.airlines_request_id=".$_IairlinesRequestId.
										$cond.
									" ORDER BY srd.series_group_id,srd.series_request_id";
		if(DB::isError($resultOriginalPaxDetails = $this->_Oconnection->query($selectOriginalPaxDetails)))
		{
			fileWrite($selectOriginalPaxDetails,'SqlError','a+');
			return FALSE;
		}
		if($resultOriginalPaxDetails->numRows() > 0)
		{

			while($rowOriginalPaxDetails=$resultOriginalPaxDetails->fetchRow(DB_FETCHMODE_ASSOC))
			{

				if(!in_array($rowOriginalPaxDetails['series_group_id'], $_AgroupCount) && (!in_array($this->_getCurrentStatusCode($rowOriginalPaxDetails['group_status']), $_AgroupStatus) || (in_array($this->_getCurrentStatusCode($_IcurrentStatus),array("RN","NR","RS")) && in_array($this->_getCurrentStatusCode($rowOriginalPaxDetails['group_status']),array("RN","NR","RS")))))
				{

					/* consider modify rejected group count */
					if($this->_getCurrentStatusCode($_IcurrentStatus)=="AR" || ($this->_getCurrentStatusCode($_IcurrentStatus)=="AN" && $_SmodifyFareQuote=="N"))
					{
						if($_SmodifyFareQuote=="N" && $rowOriginalPaxDetails['request_master_history_id'] == 0 && $_SmodifyStatus=="Y" && $this->_getCurrentStatusCode($rowOriginalPaxDetails['group_status'])=="RJ")
							continue;
						elseif($this->_getCurrentStatusCode($rowOriginalPaxDetails['group_status'])=="RJ" && $_SmodifyStatus!="Y")
								continue;
					}

					$_ApartialGrpPaxCount['totalNoOfAdult']=$_ApartialGrpPaxCount['totalNoOfAdult']+$rowOriginalPaxDetails['number_of_adult'];
					$_ApartialGrpPaxCount['totalNoOfChild']=$_ApartialGrpPaxCount['totalNoOfChild']+$rowOriginalPaxDetails['number_of_child'];
					$_ApartialGrpPaxCount['totalNoOfInfant']=$_ApartialGrpPaxCount['totalNoOfInfant']+$rowOriginalPaxDetails['number_of_infant'];
					$_AfocPaxDetails['foc_pax']=json_decode($rowOriginalPaxDetails['foc_pax'],1);
					$_IfocPax=($_AfocPaxDetails['foc_pax']['edited']==0)?$_AfocPaxDetails['foc_pax']['requested']:$_AfocPaxDetails['foc_pax']['edited'];
					$_ApartialGrpPaxCount['totalNoOfFoc']=$_ApartialGrpPaxCount['totalNoOfFoc']+$_IfocPax;
					$_ApartialGrpPaxCount['totalNoOfPax']=$_ApartialGrpPaxCount['totalNoOfPax']+
					$rowOriginalPaxDetails['number_of_passenger']+$_IfocPax;
					$_AgroupCount[]=$rowOriginalPaxDetails['series_group_id'];
				}
			}
		}
		return $_ApartialGrpPaxCount;
	}
	/*
	 * Created by: Gopinath.K
	 * Created date: 27-02-2023
	 * Description: This function check for IX airline mapped or not for agent.
	 * return : boolean
	 */
	function _agentCodeValidation($_AinputArray)
	{
		global $CFG;
		$count = 0;
		$jsonValue=$_AinputArray['jsonVal'];
		$_AinputFlightArray=json_decode($jsonValue,true);
		if(!in_array($_SESSION['groupRM']['groupId'],array(1,2,5,6,15)))
		{
			$_AinputArray['userDetails'] = $_SESSION['groupRM']['groupUserId'];
		}
		$_AflightNumber = array();
		foreach($_AinputFlightArray['flights'] as $flightKey => $flightValue)
		{
			$_AflightNumber[]=$flightValue['airlineCode'];
		}
		if(in_array('IX',$_AflightNumber))
		{
			fileRequire("dataModels/class.userDetails.php");
			$objUserDetails=new userDetails();
			$objUserDetails->_Oconnection = $this->_Oconnection;
			$objUserDetails->_IuserId = $_AinputArray['userDetails'];
			$_AgetUserDetails = $objUserDetails->_selectUserDetails();
            fileRequire('dataModels/class.agencyCodeDetails.php');
			$_OagencyCodeDetails = new agencyCodeDetails();
			$_OagencyCodeDetails->_Oconnection = $this->_Oconnection;
			$_OagencyCodeDetails->_IcorporateId = $_AgetUserDetails[0]['corporate_id'];
			$_OagencyCodeDetails->_ScodeType = 'AC';
			$_OagencyCodeDetails->_selectAgencyCodeDetails();
			$_AagencyCodeDetails = $_OagencyCodeDetails->_AagencyCodeDetails;
            if(!empty($_AagencyCodeDetails))
			{
				foreach($_AagencyCodeDetails as $agentKey => $agentValue)
				{
					if($agentValue['code_type'] =='AC')
					{
						$allowedStatus ='Y';
					}
				}

			}else{
				$allowedStatus = 'N';
			}
		}
		if(in_array('I5',$_AflightNumber))
		{
			$allowedStatus ='Y';
		}
		return $allowedStatus;
	}
	/**
     *  Function: insertRegistrationPaymentDetails()
	 *  Author : Kanitha A
	 *  Description : Inserting EMD details
	 *  Created Date : 06-05-2022
	**/
	function insertRegistrationPaymentDetails($_IcorporateId,$_IuserId,$_Spos)
	{
		global $CFG;		
		//Calculating amount
		$_StoCurrency = $this->_getCurrencyCode($_Spos);
		$_AcurrencyConversion=$this->_currencyConversion($CFG['registration']['payment']['currency'],$_StoCurrency,'','','Y');
		$_AcurrencyDetails=$this->_getCurrencyDetails($_StoCurrency);
		//Getting registration payment details
		fileRequire("dataModels/class.registrationPaymentDetails.php");
		$this->_OregistrationPayment=new registrationPaymentDetails();
		$this->_OregistrationPayment->_Oconnection=$this->_Oconnection;
		$this->_OregistrationPayment->_IcorporateId = $_IcorporateId;
		$this->_OregistrationPayment->_IuserId = $_IuserId;
		$this->_OregistrationPayment->_IstatusId = 9;
		$_AregistrationPayment = $this->_OregistrationPayment->_selectRegistrationPaymentDetails();		
		if(empty($_AregistrationPayment))
		{				
			$_Iamount=$CFG['registration']['payment']['amount'] * $_AcurrencyConversion['amount'];
			$this->_OregistrationPayment->_IcurrencyId = $_AcurrencyDetails[0]['currency_id'];
			$this->_OregistrationPayment->_Iamount =$this->_getRoundOffFare($_Iamount,'',$_AcurrencyDetails[0]['currency_type']);
			$this->_OregistrationPayment->_insertRegistrationPaymentDetails();
		}
	}

	/**
     *  Function: Dashboarddatefiter()
	 *  Author : kathirvelu B
	 *  Description : dasboard select filter funtionality added
	 *  Created Date : 30-06-2022
	**/
	function _Dashboarddatefiter(){
		global $CFG;
		$_DcurrentDate = date('Y-m-d');
		$_Aresultarr=array();
		$_AconfigfilterData=$CFG["systemSettings"]["configfilterdate"];
		if(is_array($_AconfigfilterData) && count($_AconfigfilterData)>0){
			foreach ($_AconfigfilterData as $dkey => $value) {
				// code...
				$_SdateConvertformat='-'.''.$value[0].' '.$value[1];
				$_SdateType='last';
				$_Idays=$value[0];
				$_SmonthType=$value[1];
				if($_Idays>0){
					if($_Idays==1){
						$_SlangConfigName="COMMON_DASHBOARD_".strtoupper($_SdateType)."_".strtoupper($_SmonthType)."_".$_Idays;
					}else{
						$_SlangConfigName="COMMON_DASHBOARD_".strtoupper($_SdateType)."_".strtoupper($_SmonthType);			
					}
					
				}else{
					$_SlangConfigName="COMMON_DASHBOARD_".strtoupper($_SdateType)."_".strtoupper($_SmonthType)."_".$_Idays;
				}
				
				if($_Idays==0){
	
					if($_SmonthType=='weeks'){
						$day = date('w');
						$_SdateConvertformat='-'.''.$day.' '.'days';
					}
					if($_SmonthType=='month'){
						$day =round(abs(strtotime(date('Y-m-01')) - strtotime(date('Y-m-d')))/86400);
						$_SdateConvertformat='-'.''.$day.' '.'days';
					}
					if($_SmonthType=='years'){
						$day =round(abs(strtotime(date('Y-01-01')) - strtotime(date('Y-m-d')))/86400);
						$_SdateConvertformat='-'.''.$day.' '.'days';
					} 
				}
	
				if($_Idays>0){
					$_SconfigdateName=$this->_Osmarty->getConfigVars($_SlangConfigName);
					$_SconfigdateName=str_replace('%S',$_Idays,$_SconfigdateName);
				}else{
					$_SconfigdateName=$this->_Osmarty->getConfigVars($_SlangConfigName);
				}
	
				$_Aresultarr[]=array(date("Y-m-d", strtotime($_SdateConvertformat, strtotime($_DcurrentDate))),$_SconfigdateName);		
			}
		}


		return $_Aresultarr;
	}
	
	function _getDividedChildAmount($_IinputData,$percentage='',$absoluteAmount=0){
		fileWrite(print_r($_IinputData,1),'emdChildAmount','a+');
		$paxFare = $this->_getPnrPaxFare($_IinputData['requestMasterId'],$_IinputData['pnr']);
		fileWrite(print_r($paxFare),'emdChildAmount','a+');
		if($percentage!=''){
			$_IadultPaxAmount = (($paxFare['ADT']['total'] * $percentage)/100)*$_IinputData['adultCount'];
			$_IchildPaxAmount = (($paxFare['CHD']['total'] * $percentage)/100)*$_IinputData['childCount'];
			$_IinfantPaxAmount = (($paxFare['INF']['total'] * $percentage)/100)*$_IinputData['infantCount'];			
		} elseif($absoluteAmount!=0) {
			$_IadultPaxAmount = $paxFare['ADT']['total'] !=0 ? $_IinputData['adultCount'] * $absoluteAmount : 0;
			$_IchildPaxAmount = $paxFare['CHD']['total'] !=0 ? $_IinputData['childCount'] * $absoluteAmount : 0;
			$_IinfantPaxAmount = $paxFare['INF']['total'] !=0 ? $_IinputData['infantCount'] * $absoluteAmount : 0;			
		}
		$userCurrency = $this->_getUserCurrency($_IinputData['requestMasterId']);
		$userCurrency=$userCurrency['user_currency'];
		$_IchildPaymentAmount = round($_IadultPaxAmount + $_IchildPaxAmount + $_IinfantPaxAmount,2);
		fileWrite("percentage - ". $percentage.", childamount -". $_IchildPaymentAmount .", absolute maount -". $absoluteAmount,'emdChildAmount','a+');
		return $_IchildPaymentAmount;
	}

	/**
     *  Function: _preparePassengerNames()
	 *  Author : Gowri G
	 *  Description : prepare passenger names for resize service
	 *  Created Date : 29-06-2022
	**/
	function _preparePassengerNames($_IrequestMasterId,$_Spnr,$_SdivideStatus='N',$passengerDeatils=array(),$_AchildDetails=array())
	{
		$_ApassengerNames=array();
		fileRequire("classes/class.airlineService.php");
		$_OairlineService = new airlineService();
		$_OairlineService->_Oconnection=$this->_Oconnection;
		$_OairlineService->_IrequestMasterId = $_IrequestMasterId;
		$_OairlineService->_Spnr = $_Spnr;
		$_OairlineService->_Sairline=$_SESSION['groupRM']['airlineCode'];
		$_AgetBookingResult = $_OairlineService->_getBookingViaPnr();
		$_IpaxKey=0;
		if($_SdivideStatus=='N')
		{
			foreach ($_AgetBookingResult['response']['travelItineraryReadRS']['CustomerInfo']['PersonName'] as $resultKey => $resultVal)
			{
				if($resultKey!=0)
				{
					$_SnameNumber=$resultVal['attributes']['NameNumber'].".1";
					if(in_array($_SnameNumber,$passengerDeatils))
					{
						$_ApassengerNames[$_IpaxKey]['first_name']=$resultVal['GivenName'];
						$_ApassengerNames[$_IpaxKey]['last_name']=$resultVal['Surname'];
						$_ApassengerNames[$_IpaxKey]['name_number']=$resultVal['attributes']['NameNumber'];
						if($resultVal['paxType']== 'ADT')
							$_ApassengerNames[$_IpaxKey]['passenger_type']='Adult';
						else if($resultVal['paxType']== 'CHD')
							$_ApassengerNames[$_IpaxKey]['passenger_type']='Child';
						else if($resultVal['paxType']== 'INF')
							$_ApassengerNames[$_IpaxKey]['passenger_type']='Infant';
						$_IpaxKey++;
					}
				}
			}
		}
		else if($_SdivideStatus=='Y' && !empty($_AchildDetails))
		{
			$_ApaxDetails=array_reverse($_AgetBookingResult['response']['travelItineraryReadRS']['CustomerInfo']['PersonName']);
			$_IadultCou=$_AchildDetails['ADT'];
			$_IchildCou=$_AchildDetails['CHD'];
			$_AnameNumbers=array();
			foreach ($_ApaxDetails as $divKey => $divVal)
			{
				if($divVal['paxType']== 'ADT' && !in_array($divVal['attributes']['NameNumber'], $_AnameNumbers))
				{
					if($_IadultCou>0)
					{
						$_ApassengerNames[$_IpaxKey]['first_name']=$divVal['GivenName'];
						$_ApassengerNames[$_IpaxKey]['last_name']=$divVal['Surname'];
						$_ApassengerNames[$_IpaxKey]['name_number']=$divVal['attributes']['NameNumber'];
						$_ApassengerNames[$_IpaxKey]['passenger_type']='Adult';
						$_IpaxKey++;
						$_IadultCou--;
						$_AnameNumbers[]=$divVal['attributes']['NameNumber'];
					}	
				}
				else if($divVal['paxType']== 'CHD')
				{
					if($_IchildCou>0 && !in_array($divVal['attributes']['NameNumber'], $_AnameNumbers))
					{
						$_ApassengerNames[$_IpaxKey]['first_name']=$divVal['GivenName'];
						$_ApassengerNames[$_IpaxKey]['last_name']=$divVal['Surname'];
						$_ApassengerNames[$_IpaxKey]['name_number']=$divVal['attributes']['NameNumber'];
						$_ApassengerNames[$_IpaxKey]['passenger_type']='Child';
						$_IpaxKey++;
						$_IchildCou--;
						$_AnameNumbers[]=$divVal['attributes']['NameNumber'];
					}
				}
			}
		}
		return $_ApassengerNames;
	}
	
	function _fetchDummyPassengerCount($_IairlinesRequestId,$_IapprovedFlightId,$_Spnr)
	{
		global $CFG;
		$_AdummyPassengerDetails=array();
		$sqlGetPaxDetails= "SELECT
						pd.passenger_id,
						pd.passenger_type
					FROM
						".$CFG['db']['tbl']['passenger_details']." pd
						INNER JOIN ".$CFG['db']['tbl']['passenger_pnr_mapping']." ppm
						ON pd.passenger_id=ppm.passenger_id
						INNER JOIN ".$CFG['db']['tbl']['ticketing_details']." td
						ON ppm.ticketing_id=td.ticketing_id
					WHERE
						pd.airlines_request_id='".$_IairlinesRequestId."'
						AND pd.request_approved_flight_id='".$_IapprovedFlightId."'
						AND pd.pnr='".$_Spnr."'
						AND td.ticket_status='N'";
		if(DB::isError($resultGetPaxDetails=$this->_Oconnection->query($sqlGetPaxDetails)))
		{
			fileWrite($sqlGetPaxDetails,"SqlError","a+");
			return false;
		}
		if($resultGetPaxDetails->numRows() > 0)
		{
			while($rowGetPaxDetails=$resultGetPaxDetails->fetchRow(DB_FETCHMODE_ASSOC))
			{
				$_AdummyPassengerDetails[$rowGetPaxDetails['passenger_type']][]=$rowGetPaxDetails['passenger_id'];
			}
		}
		return $_AdummyPassengerDetails;
	}
	function _paxModifyCheck($_AmodifiedDetails,$_AhistoryDetails)
    {
    	global $CFG;
    	$_ApaxModifyCheck=array();
    	$_AmodifiedCriteria=$CFG["site"]["modifyCriteria"]["normalModify"];
    	$_IairlinesRequestId=$this->_getAirlineRequestId($_AmodifiedDetails['requestMaster']);
    	fileRequire('dataModels/class.transactionMaster.php');
		$_OtransactionMaster = new transactionMaster();
		fileRequire('dataModels/class.requestApprovedFlightDetails.php');
		$_OrequestApprovedFlightDetails = new requestApprovedFlightDetails();
		fileRequire("dataModels/class.seriesRequestDetailsHistory.php");
		$_OseriesRequestDetailsHistory=new seriesRequestDetailsHistory();
		$_OtransactionMaster->__construct();
		$_OtransactionMaster->_Oconnection = $this->_Oconnection;
		$_OtransactionMaster->_IairlinesRequestId = $_IairlinesRequestId;
		$_AtransactionDetails = $_OtransactionMaster->_selectTransactionMaster();
		if(count($_AtransactionDetails)>1)
		{
			$_IfindTransactionKey=array_search($_AmodifiedDetails['transactionId'], array_column($_AtransactionDetails, 'transaction_id'));
			$_IprevTrasactionId = $_AtransactionDetails[$_IfindTransactionKey-1]['transaction_id'];
		}
		foreach ($_AmodifiedDetails['acceptedFlightIds'] as $groupKey => $grpVal)
		{
			$_AapprovedId=implode(',', $grpVal);
			$_OrequestApprovedFlightDetails->__construct();
			$_OrequestApprovedFlightDetails->_Oconnection = $this->_Oconnection;
			$_OrequestApprovedFlightDetails->_IrequestApprovedFlightId = $_AapprovedId;
			$_OrequestApprovedFlightDetails->_INcondition = "IN";
			$_AmodifiedApprovedDetails = $_OrequestApprovedFlightDetails->_selectRequestApprovedFlightDetails();
			$_OrequestApprovedFlightDetails->__construct();
			$_OrequestApprovedFlightDetails->_Oconnection = $this->_Oconnection;
			$_OrequestApprovedFlightDetails->_IseriesRequestId = implode(',',array_column($_AmodifiedApprovedDetails, 'series_request_id'));
			$_OrequestApprovedFlightDetails->_INcondition = "IN";
			$_OrequestApprovedFlightDetails->_ItransactionMasterId = $_IprevTrasactionId;
			$_ArequestApprovedDetails = $_OrequestApprovedFlightDetails->_selectRequestApprovedFlightDetails();
			//$_AgroupId=$this->_getSeriesGroupId($_AmodifiedApprovedDetails[0]['series_request_id']);
			if($_AmodifiedApprovedDetails[0]['series_request_id']>0)
				$_AgroupId=$this->_getSeriesGroupId($_AmodifiedApprovedDetails[0]['series_request_id']);
			else if($_AmodifiedApprovedDetails[0]['series_request_history_id']>0)
			{
				$_OseriesRequestDetailsHistory->__construct();
				$_OseriesRequestDetailsHistory->_Oconnection=$this->_Oconnection;
				$_OseriesRequestDetailsHistory->_IseriesRequestHistoryId=$_AmodifiedApprovedDetails[0]['series_request_history_id'];
				$_AseriesRequestHistoryDetails=$_OseriesRequestDetailsHistory->_selectSeriesRequestDetailsHistory();
				$_AgroupId[0]=$_AseriesRequestHistoryDetails[0]['series_group_id'];
			}
			// Check for fare edit
			if(!empty($_AmodifiedApprovedDetails))
			{
				foreach($_AmodifiedApprovedDetails as $changeKey=>$changeValue)
				{
					if($changeValue['series_request_id']>0)
						$_AgetGroupId=$this->_getSeriesGroupId($changeValue['series_request_id']);
					else if($changeValue['series_request_history_id']>0)
					{
						$_OseriesRequestDetailsHistory->__construct();
						$_OseriesRequestDetailsHistory->_Oconnection=$this->_Oconnection;
						$_OseriesRequestDetailsHistory->_IseriesRequestHistoryId=$changeValue['series_request_history_id'];
						$_AseriesRequestHistoryDetails=$_OseriesRequestDetailsHistory->_selectSeriesRequestDetailsHistory();
						$_AgetGroupId[0]=$_AseriesRequestHistoryDetails[0]['series_group_id'];
					}
					if(!empty($changeValue['displacement_fare_remarks']) && !isset($_ApaxModifyCheck['fareEdit'][$_AgetGroupId[0]]))
					{
						$_ApaxModifyCheck['fareEdit'][$_AgetGroupId[0]] = 'Y';
					}
				}
			}
			if(in_array('tripType',$_AmodifiedCriteria) && count($_AmodifiedApprovedDetails)!=count($_ArequestApprovedDetails))
			{
				$_ApaxModifyCheck['modify'][$_AgroupId[0]]='N';
			}
			else
			{
				foreach ($_AmodifiedApprovedDetails as $changeFlightKey => $changeFlightVal)
				{
					$_IfindSeriesKey=array_search($changeFlightVal['series_request_id'], array_column($_ArequestApprovedDetails, 'series_request_id'));
					$_IfindSeriesHisKey=array_search($changeFlightVal['series_request_id'], array_column($_AhistoryDetails['flightDetails']['seriesRequestDetailsHistory'], 'series_request_id'));
					if($changeFlightVal['series_request_id']>0)
					{
						$_AseriesRequestData=$this->_getSeriesRequestDetails($changeFlightVal['series_request_id']);
						$_IgroupId=$_AseriesRequestData[0]['series_group_id'];
					}
					else if($changeFlightVal['series_request_history_id']>0)
					{
						$_OseriesRequestDetailsHistory->__construct();
						$_OseriesRequestDetailsHistory->_Oconnection=$this->_Oconnection;
						$_OseriesRequestDetailsHistory->_IseriesRequestHistoryId=$changeFlightVal['series_request_history_id'];
						$_AseriesRequestHistoryDetails=$_OseriesRequestDetailsHistory->_selectSeriesRequestDetailsHistory();
						$_IgroupId=$_AseriesRequestHistoryDetails[0]['series_group_id'];
					}
					if(in_array('source',$_AmodifiedCriteria) && $changeFlightVal['source']!=$_ArequestApprovedDetails[$_IfindSeriesKey]['source'])
					{
						$_ApaxModifyCheck['modify'][$_IgroupId]='N';
						break;
					}
					elseif(in_array('destination',$_AmodifiedCriteria) && $changeFlightVal['destination']!=$_ArequestApprovedDetails[$_IfindSeriesKey]['destination'])
					{
						$_ApaxModifyCheck['modify'][$_IgroupId]='N';
						break;
					}
					elseif(in_array('departureDate',$_AmodifiedCriteria) && $changeFlightVal['departure_date']!=$_ArequestApprovedDetails[$_IfindSeriesKey]['departure_date'])
					{
						$_ApaxModifyCheck['modify'][$_IgroupId]='N';
						break;
					}
					elseif(in_array('flightNumber',$_AmodifiedCriteria) && $changeFlightVal['flight_number']!=$_ArequestApprovedDetails[$_IfindSeriesKey]['flight_number'])
					{
						$_ApaxModifyCheck['modify'][$_IgroupId]='N';
						break;
					}
					elseif(in_array('cabin',$_AmodifiedCriteria) && !empty($_AseriesRequestData) && $_AseriesRequestData[0]['cabin']!=$_AhistoryDetails['flightDetails']['seriesRequestDetailsHistory'][$_IfindSeriesHisKey]['cabin_value'])
					{
						$_ApaxModifyCheck['modify'][$_IgroupId]='N';
						break;
					}
					elseif(in_array('noOfPax',$_AmodifiedCriteria) && ($changeFlightVal['no_of_adult']!=$_ArequestApprovedDetails[$_IfindSeriesKey]['no_of_adult'] || $changeFlightVal['no_of_child']!=$_ArequestApprovedDetails[$_IfindSeriesKey]['no_of_child']))
					{
						if(($changeFlightVal['no_of_adult']+$changeFlightVal['no_of_child']) ==($_ArequestApprovedDetails[$_IfindSeriesKey]['no_of_adult']+$_ArequestApprovedDetails[$_IfindSeriesKey]['no_of_child']))
						{
							$_ApaxModifyCheck['modify'][$_IgroupId]='Y';
							break;
						}
					}
				}
			}
		}
		return $_ApaxModifyCheck;
    }
	function _sendBackTraceMail($query,$desc){
		global $CFG;

 		#Prepare backtrace for tracking the query prepared module
 		$_AdebugBacktrace = debug_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS);
 		$_AprepareStackTrace = array();

 		#Prepare the backrace array to view
 		$_AprepareStackTrace =  array_map(function($_Ikey,$_Aroute)
 		{
 			global $CFG;
 			return ' #'.$_Ikey.' '.str_replace($CFG['path']['basePath'],'',$_Aroute['file']).' ('.$_Aroute['line'].'): '.$_Aroute['class'].$_Aroute['type'].$_Aroute['function'].'</br>';
 		},array_keys($_AdebugBacktrace),array_values($_AdebugBacktrace));

 		#Include the sendEmail file
 		fileRequire('classes/class.sendEmail.php');

 		#Assign the prepared values to sendEmail class variables.
 		$_OsendEmail = new sendEmail();
 		$_OsendEmail->from = $CFG['email']['mail'];
 		$_OsendEmail->to = 'grmteam@infinitisoftware.net';
 		$_OsendEmail->_Oconnection = $this->_Oconnection;
 		$_OsendEmail->subject = "Query Alert : ".$CFG['path']['basePath'];

 		/**
 		 * Prepare contents to the body of the mail that contains number of rows,number of columns, executed query
 		 * and the stacktrace. 
 		**/
 		$_OsendEmail->message="Hi Team,</br>Here we have attached the logs and back trace. Regarding, ".$desc.", this may occur in the future, So kindly trace the query and logs.</br></br><b>Executed query: </b>".$query." </br><b>Stack trace: </b> </br>".implode($_AprepareStackTrace)." </br></br>Regards,</br><b>Group RM</b>.";

 		#Call the setHeaderNew function from sendEmail class to create header of the mail content.
 		$_OsendEmail->setHeaderNew();

 		#Call the setEmail function to send the mail
 		$_OsendEmail->setEmail();

 		#Clear the sendEmail object.
 		unset($_OsendEmail);
 		return true;
	}
	/**
     *  Function: _getpreviousTransactionId()
	 *  Author : Gopinath.k
	 *  Description : previous transaction id
	 *  Created Date : 24-04-2023
	**/
	public function _getpreviousTransactionId($_IrequestMasterId,$_IairlinesRequestId=0)
	{
		global $CFG;
		if(empty($_IairlinesRequestId))
			$_IairlinesRequestId=$this->_getAirlineRequestId($_IrequestMasterId);
		else
			$_IairlinesRequestId=$_IairlinesRequestId;	
		$sql = "SELECT 
					transaction_id 
				FROM 
					".$CFG['db']['tbl']['transaction_master']."
				WHERE 
					airlines_request_id = ".$_IairlinesRequestId."
				ORDER BY
					transaction_id desc
				LIMIT 1,1";

		if(DB::isError($result=$this->_Oconnection->query($sql)))
		{
			fileWrite($sql,"SqlError","a+");
			return false;
		}

		if($result->numRows() >0)
		{
			$row = $result->fetchRow(DB_FETCHMODE_ASSOC);
			$_IoldTransactionId=$row['transaction_id'];	
		}
		return $_IoldTransactionId;		
	}

	/****
	    *Author     	: Kanitha A
	    *Created on 	: 09-05-2023
	    *Parameter      : PNR details
	    *Description    : This function returns the PNR that are need to sync
	    *return         : String
	*****/
	function _checkSyncStatus($_ApnrDetails)
	{
		global $CFG;
		$i=0;			
		foreach($_ApnrDetails as $pnrKey => $pnrValue)
		{			
			//Checking the PNR information
			$_Spnr =($pnrValue['pnr']!='')?$pnrValue['pnr']:'';
			if($_Spnr!='' && (empty($_AtempPNR)||!in_array($_Spnr,$_AtempPNR)) && !in_array($pnrValue['status'],$CFG['pnr']['pnrNotShowStatus']))
			{
				$_Adata = array(
					"post" => array(
						"file" => 'classes/class.scheduleChange.php',
						"class" => 'scheduleChange',
						"function" => '_checkScheduleChangeStatus',
						"params" => array($this->_IrequestMasterId,$_Spnr,'resize')
					)
				);
				$_ApostData[$i] = $_Adata;
				$_AtempPNR[$i]=$_Spnr;
				$i++;
			}
		}
		$_ApnrCheck = $_AthreadResults = array();
		if(!empty($_ApostData))
		{			
			fileWrite("Request master ID: ".$this->_IrequestMasterId." post data: ".print_r($_ApostData,1),"pnrToSync","a+");
			$this->_ImaxThreads=2;
			fileRequire("classes/class.multiThreads.php");
			$_AthreadResults = multiThreads::_runRequests($_ApostData,$this->_ImaxThreads);
			if(!empty($_AthreadResults))
			{
				foreach($_AthreadResults as $_Iindex=>$_Aresults)
				{
					$_Aresponse = $_Aresults['result'];					
					//Push the PNR that are need to sync
					if(is_string($_Aresponse['response'])&&$_Aresponse['response']=='Error')
						$_ApnrCheck[] = $_AtempPNR[$_Iindex];					
					if(!empty($_Aresponse['response'])&&is_array($_Aresponse['response'])&&$_Aresponse['response']!==true)
					{
						if($_Aresponse['response']['scheduleChangeStatus']!='N')
							$_ApnrCheck[] =  $_AtempPNR[$_Iindex];
						else if(!in_array($_AtempPNR[$_Iindex],$_ApnrCheck))
							$_ApnrCheck[]=$_AtempPNR[$_Iindex];
					}					
				}
			}
		}
		$_SpnrToSync ='';
		//Convert the PNRs array into string format
		if(!empty($_ApnrCheck))
			$_SpnrToSync=implode(',',$_ApnrCheck);
		fileWrite("PNR to sync: ".$_SpnrToSync." response: ".print_r($_AthreadResults,1),"pnrToSync","a+");
		return $_SpnrToSync;
	}
    /**
	 * @Author      : Vijayakumar P
     * @Created Date: 16-05-2023
     * @param   Integer requestMasterId
     * @return  Integer Parent request master id
     * @desc    This function will return the exact parent request master id
     */	
	function _getExactParentRequestId($requestMasterId){
		if(!is_object($this->_Osmarty)) 
			$this->_Osmarty= smartyCall();
		$_IparentRequestId = 0;
		fileRequire("/dataModels/class.requestMaster.php");
		$_OrequestMaster = new requestMaster();
		$_OrequestMaster->__construct();
		$_OrequestMaster->_Oconnection = $this->_Oconnection;
		$_OrequestMaster->_IrequestMasterId = $requestMasterId;
		$_ArequestMasterDeails = $_OrequestMaster->_selectRequestMaster();
		if($_ArequestMasterDeails[0]['remarks'] != '')
			$_IparentRequestId = preg_replace('/[^0-9]/', '', explode(' ',substr($_ArequestMasterDeails[0]['remarks'],stripos($_ArequestMasterDeails[0]['remarks'],$this->_Osmarty->getConfigVars('COMMON_GR'))))[0]);
		if($this->_checkCloneRequest($_IparentRequestId)!='C')
			return $_IparentRequestId;
		return false;
	}
	/****
	    *Author     	: Gowri G
	    *Created on 	: 14-05-2023
	    *Parameter      : flightNumber
	    *Description    : check allowed carrier code
	    *return         : String
	*****/
	function _checkAllowedCarrierCode($_SflightNo='')
	{
		global $CFG;
		if($_SflightNo=='')
			return false;
		$_AexplodedFlightNo = explode('/', $_SflightNo);
		foreach($_AexplodedFlightNo as $_SfltNum)
		{
			$airlineCode = substr($_SfltNum,0,2);
			foreach ($CFG["site"]["allowedFlightsCarrierCode"] as $key => $value) {
				if (strpos($_SfltNum, $value) > -1) {
					$_SfltNum = str_replace($value,"",$_SfltNum);
					$_AfltNum[] = $airlineCode."-".$_SfltNum;
				}
			}
		}
		$_SflightNo=implode('/', $_AfltNum);
		return $_SflightNo;
	}
	
	#Naveen Kumar. B - Get the ancillary status as bool type
	public function _ancillaryStatus(string $_Sflag)
	{
		global $CFG;
		if(empty($CFG["processRequest"]["ancillary"]['status']))
			return ($_Sflag == "N") ? true : false;
		return ($CFG["processRequest"]["ancillary"]['status'] && $CFG["processRequest"]["ancillary"]['status'] == trim($_Sflag));
	}

	/****
	    *Author     	: Kanitha A
	    *Created on 	: 15-06-2023
	    *Parameter      : URL
	    *Description    :Validating the URL and sending mail
	*****/
	function _validateMakePaymentLink($_SurlLink)
	{
		global $CFG;
		//call common functionality=		
		$_StableName = $CFG['db']['tbl']['reset_password'];
	       //column values
	       $_AconditionValue['url_token']=$_SurlLink;
	      // $_AconditionValue['used_status']='N';
	       $_AconditionValue['reset_token_type']='PL';
	       $_AtableField   = array('expiry_time','used_status');
	       //inserting the data
	       $_AresultToken=  $this->_Oconnection->_performQuery($_StableName,$_AtableField,'DB_AUTOQUERY_SELECT',$_AconditionValue);;
	       $_DcurrentDate=$this->_getUTCDateValue();
	       if($_AresultToken[0]['used_status'] =='E' || !empty($_AresultToken[0]['expiry_time']) && $_DcurrentDate > $_AresultToken[0]['expiry_time'])
	       {
	        	$_SESSION['customErrorMsg']='Payment link is expired';
			header('location: '.$CFG['path']['sitePath'].'conflict.php',true,302);
	        	return false;
	       }
	       $_SdecryptedString=encrypt::_decode($_SurlLink);
		$_AdecrptedArray = explode('&&',$_SdecryptedString);
		$_IuserId=$_AdecrptedArray[0];
		$_AuserDetails =$this->_getUserDetails($_AdecrptedArray[0]);
		$_SESSION['sessionName'] = $_AuserDetails['email_id'];
		$_SESSION['sessionPassword'] = $_AuserDetails['user_password'];
		$_SESSION['groupRM']['requestMasterId']=$_AdecrptedArray[1];
		$_SESSION['groupRM']['pnr']=$_AdecrptedArray[2];
		$this->_IinputData['loginSecurityCode'] = 'Y';
		$this->MFA($_IuserId);
	}
	/****
	    *Author     	: Kanitha A
	    *Created on 	: 15-06-2023
	    *Parameter      : user id
	    *Description    :For sending OTP mail
	*****/
	function MFA($_IuserId)
	{
		global $CFG;
		fileRequire("classes/class.userOperations.php");
		$_OuserOperations=new userOperations();
		$_OuserOperations->_Oconnection=$this->_Oconnection;		
		$_OuserOperations->_Osmarty=$this->_Osmarty;
		$_OuserOperations->_sendUrlTokenMail($_IuserId,'Y');
		$_SESSION['groupRM']['instantQuoteRequest']= 'Y';
	}
	/***
	* Description	       : Check parent child in name submission
	* Parameter		: $requestMasterId,$PNR
	* Author		: Nivetha M
	* Date			: 28.06.2023
	***/
	function _checkParentChildNameUpdate($requestMasterId,$PNR)
	{
		$_SparentRequestMasterId='';
		$_IparentRequestMasterId = $this->_getParentRequestMasterId($requestMasterId);

		if($_IparentRequestMasterId!=0)
		{
			$this->_IparentPaidPercentage = $this->_getPaidPercentage($_IparentRequestMasterId);
			$_IparentRequestId=$this->_getAirlineRequestId($_IparentRequestMasterId);

			$_SPNR=$this->_getPNR($_IparentRequestMasterId);

			fileRequire("dataModels/class.passengerDetails.php");
			$_OpassengerDetails=new passengerDetails();

			$_OpassengerDetails->__construct();
			$_OpassengerDetails->_Oconnection=$this->_Oconnection;
			$_OpassengerDetails->_Spnr = $_SPNR;
			$_OpassengerDetails->_IairLinesRequestId = $_IparentRequestId;
			
			$_OpassengerDetails->_selectPassengerDetails();
			$_ApassengerDetails = $_OpassengerDetails->_ApassengerDetails;
			if(count($_ApassengerDetails)==0)
				$_SparentRequestMasterId= $this->_changeGroupRequestFormat($_IparentRequestMasterId);
		}
		return $_SparentRequestMasterId;

	}
	/***
	* Description	       : get name number based on paxtype
	* Parameter		: $requestMasterId,$PNR
	* Author		: Nivetha M
	* Date			: 05.07.2023
	***/
	function _getNameNumber($_Spnr,$_IairlinesRequestId)
	{
		
		fileRequire("dataModels/class.passengerDetails.php");
		$_AnameNumber=array();
		$this->_OpassengerDetails=new passengerDetails();
		$this->_OpassengerDetails->__construct();
		$this->_OpassengerDetails->_Oconnection = $this->_Oconnection;
		$this->_OpassengerDetails->_IairLinesRequestId=$_IairlinesRequestId;
		$this->_OpassengerDetails->_Spnr=$_Spnr;
		$this->_OpassengerDetails->_SneedDummyRows='Y';
		$this->_OpassengerDetails->_selectPassengerDetails();
		$_ApassengerDetails=$this->_OpassengerDetails->_ApassengerDetails;
		foreach($_ApassengerDetails as $key =>$value)
		{
			if($value['passenger_type']=='Adult')
				$_AnameNumber['adult'][]=$value['name_number'];
			if($value['passenger_type']=='Child')
				$_AnameNumber['child'][]=$value['name_number'];
			if($value['passenger_type']=='Infant')
				$_AnameNumber['infant'][]=$value['name_number'];
		}
		return $_AnameNumber;
	}
	/**
	 * @Author      : gopinath.k
     * @Created Date: 21-07-2023
     * @desc         :secand time rejected groups not allowed in fare quoted time stamp in request group details of view history
     */
	function _getRejectedGroupInPreviousTransaction($_IairlinesRequestId)
	{
		fileRequire('dataModels/class.requestGroupDetails.php');
		$_OrequestGroupDetails = new requestGroupDetails();
		$_OrequestGroupDetails->_Oconnection = $this->_Oconnection;
		$_OrequestGroupDetails->_IairlinesRequestId = $_IairlinesRequestId;
		$_ArequestGroupDetails = $_OrequestGroupDetails->_selectRequestGroupDetails();
		$_AgroupLeveltransactionId = array();
		$_ArequestGroupIdArray =array();
		$_rejectedIdGroup = array();
		foreach($_ArequestGroupDetails as $_Ikey=>$_Avalue)
		{
			$_AgroupLeveltransactionId[] = $_Avalue['transaction_master_id'];
		}
		$_AuniqueTransactionId = array_unique(array_values($_AgroupLeveltransactionId));
		//get last two transaction id
		$_AuniqueTransactionId = array_slice($_AuniqueTransactionId, -2, 2, true);
		$_AuniqueTransactionId = array_values($_AuniqueTransactionId);
		if(count($_AuniqueTransactionId)==1)
		{
			return false;
		}
		foreach($_AuniqueTransactionId as $_IuniqueKey=>$_AtransactionId)
		{
			$_OrequestGroupDetails->__construct();
			$_OrequestGroupDetails->_Oconnection = $this->_Oconnection;
			$_OrequestGroupDetails->_ItransactionMasterId = $_AtransactionId;
			$_ArequestGroupDetailsArray = $_OrequestGroupDetails->_selectRequestGroupDetails();
			$_ArequestGroupIdArray[$_AtransactionId] = array();
			foreach($_ArequestGroupDetailsArray as $_IgroupKey=>$_AgroupValue)
			{
				$_ArequestGroupIdArray[$_AtransactionId][$_AgroupValue['series_group_id']] = $_AgroupValue['group_status'];
			}
		}
		$_previousTransaction = $_ArequestGroupIdArray[$_AuniqueTransactionId[0]];
		$_currentTransaction = $_ArequestGroupIdArray[$_AuniqueTransactionId[1]];
		$_groupIdMatch= array_intersect($_previousTransaction,$_currentTransaction);
		//first fare quote rejected groups not allowed second time fare quote stage
		if(in_array(2,$_groupIdMatch) && in_array(2,$_previousTransaction))
		{
			foreach($_groupIdMatch as $_groupIdMatchKey=>$_groupIdMatchValue)
			{
				if($_groupIdMatchValue ==2)
				{
					$_rejectedIdGroup[] = $_groupIdMatchKey;
				}
			}
		}
		else
			return false;
		return $_rejectedIdGroup;
	}

	/****
	    *Author     	: Hari Prasanth A
	    *Created on 	: 09-09-2023
	    *Parameter      : AncillaryFare
	    *Description    : Calculate ancillaryFare Based on config
	    *return         : Array
	*****/
	function _ancillaryFareCalculation($_AancillaryFare)
	{
		global $CFG;
		if (!empty($_AancillaryFare)) {
			$_AancillaryFareDisplay = $CFG['payment']['ancillaryFareDisplay'];
			foreach ($_AancillaryFare as $ancillaryFareKey => $ancillaryFareVal) {
                        foreach ($_AancillaryFareDisplay as $AncillaryDisplayKey => $AncillaryDisplayValue) {
                            if ( $ancillaryFareKey == $AncillaryDisplayKey) {
                                foreach ($ancillaryFareVal as $key=>$val) {
                                    if (in_array($key, $AncillaryDisplayValue)) {
                                        if ($ancillaryFareKey == 'ADT')
                                            $_IadultAncillaryFare+= $ancillaryFareVal[$key];
                                        if ($ancillaryFareKey == 'CHD')
                                            $_IchildAncillaryFare+= $ancillaryFareVal[$key];
                                        if ($ancillaryFareKey == 'INF')
                                            $_IinfantAncillaryFare+= $ancillaryFareVal[$key];
                                    }
                                }
                            }
                        }   
                    }
                    $_AancillaryFareSplit['ADT'] =$_IadultAncillaryFare;
                    $_AancillaryFareSplit['CHD'] =$_IchildAncillaryFare;
                    $_AancillaryFareSplit['INF'] =$_IinfantAncillaryFare;

                    return $_AancillaryFareSplit;
		}
		return false;

	}
	/****
	    *Author     	: Gowri G
	    *Created on 	: 20-09-2023
	    *Parameter      : childRequestMasterId
	    *Description    : Fetch orginal parent series request id
	    *return         : Array
	*****/
	function _getOrignalParentSeriesId($_IchildRequestMasterId=0)
	{
		global $CFG;
		$_AparentInfo = array();
		if($_IchildRequestMasterId>0)
		{
			$_SselectChildId = "SELECT
									gcrm.parent_request_master_id,
									gcrd.parent_series_request_id
								FROM
									".$CFG['db']['tbl']['groupchange_request_master']." gcrm,
									".$CFG['db']['tbl']['groupchange_request_details']." gcrd
								WHERE
									
									gcrm.request_master_id = ".$_IchildRequestMasterId."
									AND gcrm.groupchange_master_id = gcrd.groupchange_master_id
									AND gcrm.resize_type_id = 3";
			if(DB::isError($_AresultChildIds=$this->_Oconnection->query($_SselectChildId)))
			{
				fileWrite($_SselectChildId,"SqlError","a+");
				return false;
			}
			if($_AresultChildIds->numRows() >0)
			{
				while($rowChild = $_AresultChildIds->fetchRow(DB_FETCHMODE_ASSOC))
				{
					$_AparentInfo['parentRequestId'] = $rowChild['parent_request_master_id'];
					$_AparentInfo['parentSeriesIds'][] = $rowChild['parent_series_request_id'];
				}
			}
		}
		return $_AparentInfo;
	}
	/****
	    *Author     	: Gowri G
	    *Created on 	: 27-09-2023
	    *Parameter      : RequestMasterId,requestApprovedFlightId
	    *Description    : Fetch mapped request approved flight id
	    *return         : Array
	*****/
	function _getMappedApprovedFlightId($_IrequestMasterId,$_IrequestApprovedFlightId)
	{
		global $CFG;
		$_AflightDetailsMapping = array();
		if($_IrequestApprovedFlightId>0)
		{
			$sql = "SELECT
					rafd.transaction_master_id,
					rafd.series_request_id
				FROM
					".$CFG['db']['tbl']['request_approved_flight_details']." rafd
				WHERE 
					rafd.request_approved_flight_id = ".$_IrequestApprovedFlightId;
			if(DB::isError($result = $this->_Oconnection->query($sql)))
			{
				fileWrite($sql,"SqlError","a+");
				return false;
			}
			$_AapprovedFlightDetails=$result->fetchRow(DB_FETCHMODE_ASSOC);
			$_ItransactionId = $_AapprovedFlightDetails['transaction_master_id'];
			fileRequire("classes/class.requestSetting.php");
			$_OrequestSetting = new requestSetting();
			$_OrequestSetting->_Oconnection = $this->_Oconnection;
			$_OrequestSetting->_Osmarty = $this->_Osmarty;
			$_AparentSeriesRequest = $_OrequestSetting->_getParentSeriesRequestId($_AapprovedFlightDetails['series_request_id']);
			$_AmappedSeriesRequestId = array();
			if(isset($_AparentSeriesRequest['mapped_series_request_id']) && $_AparentSeriesRequest['mapped_series_request_id']>0)
			{
				$_AmappedSeriesRequestId[]=$_AparentSeriesRequest['mapped_series_request_id'];
				$_AtempMappedSeriesRequestId = $this->_getMappedSeriesRequest($_IrequestMasterId,$_AparentSeriesRequest['mapped_series_request_id']);
			}
			else
			{
				$_AmappedSeriesRequestId[]=$_AapprovedFlightDetails['series_request_id'];
				$_AtempMappedSeriesRequestId = $this->_getMappedSeriesRequest($_IrequestMasterId,$_AapprovedFlightDetails['series_request_id']);
			}
			$_AmappedSeriesRequestId = array_merge($_AmappedSeriesRequestId,array_column($_AtempMappedSeriesRequestId,'series_request_id'));
			$sql = "SELECT
					rafd.request_approved_flight_id
				FROM
					".$CFG['db']['tbl']['request_approved_flight_details']." rafd,
					".$CFG['db']['tbl']['series_request_details']." srd
				WHERE 
					rafd.series_request_id = srd.series_request_id AND
					rafd.transaction_master_id = ".$_ItransactionId." AND
					srd.series_request_id IN (".implode($_AmappedSeriesRequestId,',').")";
			if(DB::isError($result = $this->_Oconnection->query($sql)))
			{
				fileWrite($sql,"SqlError","a+");
				return false;
			}

			if ($result->numRows() > 0)
			{
				while($row=$result->fetchRow(DB_FETCHMODE_ASSOC))
				{
					$_AflightDetailsMapping[] = $row;
				}
			}
		}
		return $_AflightDetailsMapping;
	}

	/* Function    : _applyAutopilotBasedOnConfig
	 * Author      : Ranjani P
	 * Created on  : 11-Mar-2024
	 * Description : This function is used to apply autopilot based on config 
	 */
	public function _applyAutopilotBasedOnConfig($_IrequestMasterId,$_SquoteType = ''):void
	{
		global $CFG;
		fileRequire("classes/class.fetchPolicyDetails.php");
		$this->_OfetchPolicyDetails = new fetchPolicyDetails();
		$this->_OfetchPolicyDetails->_Oconnection = $this->_Oconnection;
		#Conditions for checking autopilot flow
		$_SautoPilotEnabled = $CFG['settings']['autoPilot']['status'] == 'Y';
		$_SpriorityCheckEnabled = $_SautoPilotEnabled && $CFG['settings']['autoPilotPriorityCheck'] == "Y";
		$_SautoPilotRequestTypes = $_SautoPilotEnabled ? array_keys($CFG['settings']['autoPilot']['autoPilotRequestType']) : [];
		#get requestType id 
		$_IrequestTypeId = $this->_getRequestType($_IrequestMasterId,'Y');
		$_AprocessStatus = systemSetup::_getGlobalConfig("settings,autoPilot,autoPilotRequestType") ?? ["RQ"];
		$_BproceedAutoPilot = in_array($this->_getCurrentStatusCode($this->_getStatusFromRequestId($_IrequestMasterId)), $_AprocessStatus[$_IrequestTypeId]);
		#set quote type for resubmit bookings
		$_SquoteType = ($_SquoteType == 'Y')?'C':$_SquoteType;
		#check for autopilot config
		if ($_SpriorityCheckEnabled &&
			in_array($_IrequestTypeId, $_SautoPilotRequestTypes) && $_SquoteType == "" && $_BproceedAutoPilot) 
		{
			$this->_OfetchPolicyDetails->_fetchAutoPilotPolicy($_IrequestMasterId);
		} 
		else if ($_SpriorityCheckEnabled && !empty($CFG['settings']['autoPilot']['quoteType'][$_SquoteType]) && in_array($_IrequestTypeId, $CFG['settings']['autoPilot']['quoteType'][$_SquoteType])) {
			#check quote type available in config
			$this->_OfetchPolicyDetails->_fetchAutoPilotPolicy($_IrequestMasterId);
		}
		return;
	}
	   /***
	* Description	: get current status of the PNR
	* Author		: V.Prasanth
	* Date			: 09.10.2023
	***/
	public function _setRequestCurrentStatus($_Spnr='',$flag='N')
	{
		global $CFG;
		$_ItotalPaxCount = 0;	
		$_AtotalPaxCount=array();
		$_ApnrBlockingDetails = array();
		$_ApnrBlocking=array();
		$_IpaidAmount=0;
		$_IrequestTotalAmount=0;
		#Smarty object Check condition
		if(empty($this->_Osmarty))
			$this->_Osmarty= smartyCall();
		#Get pnr closed status id 
		$this->_IclosedPnrStatusId=$this->_getCurrentStatusId($this->_Osmarty->getConfigVars("PNR_CLOSE_STATUS"));

		#get Request master id based on Pnr
		fileRequire("dataModels/class.pnrBlockingDetails.php");
		$this->_OpnrBlockingDetails=new pnrBlockingDetails();
		$this->_OpnrBlockingDetails->_Oconnection=$this->_Oconnection;
		$this->_OpnrBlockingDetails->_Spnr=$_Spnr;
		$_ApnrBlockingDetails =$this->_OpnrBlockingDetails->_selectPnrBlockingDetails();

		#Get Pnr blocking details 
		$_IrequestId=$_ApnrBlockingDetails[0]['request_master_id'];
		$this->_OpnrBlockingDetails->__construct();
		$this->_OpnrBlockingDetails->_Oconnection=$this->_Oconnection;
		$this->_OpnrBlockingDetails->_IrequestMasterId=$_IrequestId;
		$_ApnrBlockingDetails =$this->_OpnrBlockingDetails->_selectPnrBlockingDetails();

		foreach ($_ApnrBlockingDetails as $key => $value)
		{
		    // If the value is already not stored in the final array
		    if(!in_array($value['pnr'],$_Apnrs)) 
		    	  array_push($_ApnrBlocking,$value);

		    $_Apnrs=array_column($_ApnrBlocking,'pnr');
		} 


		$_IcancelRequestCount=0;
		foreach($_ApnrBlocking as $_ApnrValue)
		{
			$StatusCheck =$_ApnrValue['status'];
			if(strtoupper($StatusCheck)== 'CLOSED')
				$_IcancelRequestCount++;
		}
		#Serios request all pnr close status then Over all status is RC
		if($_ApnrBlocking!=0 && count($_ApnrBlocking)==$_IcancelRequestCount)
			return $this->_getCurrentStatusId($this->_Osmarty->getConfigVars("PNR_CLOSE_STATUS"));	
		#cancel Pnr checking process
		#Request status details calculate base on Request group status
		if(isset($this->_ScancelGroupDetails)&&($this->_ScancelGroupDetails=='Y'))
		{
			$_SreturnValue=$this->_getclosedStatusBasedOnRequestGroupDetails($_IrequestId,$_ApnrBlocking);
			if($_SreturnValue!=false)
				return $_SreturnValue;
		}

		#Get Airline reqeust id 
		$airlinesRequestId = $this->_getAirlineRequestId($_IrequestId);
		$_ArequestLevelSubmittedPax= $this->_getRequestLevelSubmittedPaxCount($_Apnrs);
		if(isset($CFG['ssr']['infantCount']['includeInfantCount']) && $CFG['ssr']['infantCount']['includeInfantCount']=='Y')
			$_IsubmittedPax=$_ArequestLevelSubmittedPax['submittedPax'];
		else
			$_IsubmittedPax=$_ArequestLevelSubmittedPax['submittedAdult']+$_ArequestLevelSubmittedPax['submittedChild'];
		$_IpaidPercentage=$this->_getPaidPercentage($_IrequestId);
		$_IpaidAmount=$this->_getPaidAmount($airlinesRequestId);
		$_IrequestTotalAmount=$this->_getRequestTotalAmount($_IrequestId);

		$_AtotalPaxCount=$this->_getTotalpassengerCount($_IrequestId,'Y');
		$_ItotalPaxCount = array_reduce($_AtotalPaxCount, function($carry, $item) {
			return $carry + $item['adult'] + $item['child'] + $item['infant'] + $item['foc'];
		}, 0);		
		if($flag=='Y')
		{
			$_ItotalPaxCoun=0;
			$_IrequestTotalAmount=$this->_getRequestPnrTotalAmount($_Spnr,$_IrequestId);
			$_IpaidAmount=$this->_getPnrPaidAmount($_IrequestId,$_Spnr);
			$_IpaidPercentage=$this->_getPnrPaidPercentage($_Spnr,$airlinesRequestId);
			$_AsubmittedPax= $this->_getSubmittedCountByPaxType($_Spnr);
			$_IsubmittedPax=$_AsubmittedPax['submittedPax'];
			$_pnrPaxCount=$_ApnrBlocking[array_search($_Spnr, array_column($_ApnrBlocking, 'pnr'))];
			$_ItotalPaxCount =  $_pnrPaxCount['no_of_adult'] + $_pnrPaxCount['no_of_child'] + $_pnrPaxCount['no_of_infant'] + $_pnrPaxCount['no_of_foc'];
			$_ArequestApporvedFlightId = $this->_getRequestApprovedFlightDetails($_IrequestId,$_Spnr);
			$_IssrInfantCount = $this->_getSSRInfantCount($_ArequestApporvedFlightId[0]['request_approved_flight_id'],$_Spnr);
			if(isset($CFG['ssr']['infantCount']['includeInfantCount']) && $CFG['ssr']['infantCount']['includeInfantCount']=='Y'){
				$_ItotalPaxCount+= $_IssrInfantCount;
				$_IsubmittedPax=$_AsubmittedPax['submittedPax'];
			}
			else
				$_IsubmittedPax=$_AsubmittedPax['submittedAdult']+$_AsubmittedPax['submittedChild'];
		}
		if( isset($CFG['ssr']['infantCount']) && $CFG['ssr']['infantCount']['ssrInfant']=='Y' && isset($CFG['ssr']['infantCount']['includeInfantCount']) && $CFG['ssr']['infantCount']['includeInfantCount']=='Y' && $flag=='N'){
			$_SrequestApporvedFlightId = implode(',',$this->_ArequestApprovedflightIds);
			$_IssrInfantCount = $this->_getSSRInfantCount($_SrequestApporvedFlightId,$_Spnr);
			$_ItotalPaxCount+= $_IssrInfantCount;
		}
		$_IpassengerNeed=$_ItotalPaxCount-$_IsubmittedPax;

		if(($_IpaidPercentage>=100 || round($_IrequestTotalAmount,2)<=round($_IpaidAmount,2) )  && ($_IsubmittedPax==$_ItotalPaxCount))
			$_pnrSubmitted='14';	    
		// elseif($_IpaidPercentage<100 && ($_IsubmittedPax == $_ItotalPaxCount)&& ($_IsubmittedPax!=0)&& $flag=='Y' )
		// 	$_pnrSubmitted='13';
		elseif(($_IpaidPercentage>=100 || round($_IrequestTotalAmount,2)<=round($_IpaidAmount,2)) && ($_IsubmittedPax < $_ItotalPaxCount))
			$_pnrSubmitted='12';
		elseif($_IpaidPercentage<100)
			$_pnrSubmitted='9';


		return $_pnrSubmitted;
    }
	public function _getRequestLevelSubmittedPaxCount($_Apnrs=array())
	{
		$_ArequestLevelSubmittedPax = ['submittedPax' => 0,'submittedAdult' => 0,'submittedChild' => 0,'submittedInfant' => 0];
		foreach ($_Apnrs as $_IpnrIndex => $_Spnr)
		{
			$_AsubmittedPax= $this->_getSubmittedCountByPaxType($_Spnr);
			$_ArequestLevelSubmittedPax['submittedPax'] += $_AsubmittedPax['submittedPax'];
			$_ArequestLevelSubmittedPax['submittedAdult'] += $_AsubmittedPax['submittedAdult'];
			$_ArequestLevelSubmittedPax['submittedChild'] += $_AsubmittedPax['submittedChild'];
			$_ArequestLevelSubmittedPax['submittedInfant'] += $_AsubmittedPax['submittedInfant'];
		}
		return $_ArequestLevelSubmittedPax;
	}
		/*
		Description : To create a list of items to be blocked in the advanced filter dropdown menu for policy mapping 
					  from the JSON file "advanceFilter"
		Parameter	: $_policyType -> To select the policy details from the JSON file
		Author		: Mohith Seshan KM ISS726
		Date		: 27.03.2024
		*/
	public function _getAdvanceFilterBlockList($_policyType){
		global $CFG;
		$_JadvanceFilterFile = file_get_contents('xml/advanceFilter.json');
		$_AadvanceFilter = json_decode($_JadvanceFilterFile,1);
		if(isset($_AadvanceFilter[$CFG['default']['airlineCode']][$_policyType]))
			$_AadvanceFilter = $_AadvanceFilter[$CFG['default']['airlineCode']][$_policyType];
		elseif(isset($_AadvanceFilter["GRM"][$_policyType]))
			$_AadvanceFilter = $_AadvanceFilter["GRM"][$_policyType];
		else
			$_AadvanceFilter = [];
		$this->_JadvanceFilterList=json_encode($_AadvanceFilter);
		$this->_Osmarty->assign("advanceFilterList",$this->_JadvanceFilterList);
	}

	public function _getRequestCurrentStatus($requestMasterId){
		global $CFG;
		$getRequestStatusSql = "SELECT
							status_id,status_code
						FROM
							".$CFG['db']['tbl']['airlines_request_mapping']." arm,
							".$CFG['db']['tbl']['status_details']." sd
						WHERE
							arm.current_status = sd.status_id AND
							arm.request_master_id = ".$requestMasterId;
							
		if(DB::isError($getRequestStatusResult=$this->_Oconnection->query($getRequestStatusSql)))
		{
			fileWrite($getRequestStatusSql,"SqlError","a+");
			return false;
		}
		if($getRequestStatusResult->numRows() > 0)
		{
			while($rowGetStatusDetails=$getRequestStatusResult->fetchRow(DB_FETCHMODE_ASSOC))
			{
				$resultArray[] =  $rowGetStatusDetails;
			}
		}
		return 	$resultArray;
	}
	/***
	* Description	: series request group details status 
	* Author		: Ajith kumar P
	* Date			: 11.06.2024
	***/
	function _getclosedStatusBasedOnRequestGroupDetails($_IrequestId,$_ApnrBlocking)
	{

		if($this->_getAirlinesRequestId($_IrequestId))
			$_IairlinesRequestId=$this->_IairlineRequestId;
		fileRequire("dataModels/class.requestGroupDetails.php");
		$this->_OrequestGroupDetails = new requestGroupDetails();
		$this->_OrequestGroupDetails->__construct();
		$this->_OrequestGroupDetails->_Oconnection = $this->_Oconnection;
		$this->_OrequestGroupDetails->_IairlineRequestId = $_IairlinesRequestId;
		$_ArequestGroupDetails = $this->_OrequestGroupDetails->_selectRequestGroupDetails();
		$_IcancelRequestCount=0;
		foreach($_ApnrBlocking as $_ApnrValue)
		{
			$StatusCheck =$_ApnrValue['status'];
			if(strtoupper($StatusCheck)== 'CLOSED')
				$_IcancelRequestCount++;
		}
		$_IrequestGroupCount=0;
		$_IrequestTimelineCout=0;
		$_activePnr=0;
		foreach($_ArequestGroupDetails as $_ArequestGroupDetailsValue)
		{
			$_IstatusCheck =$_ArequestGroupDetailsValue['group_status'];
			if($_IstatusCheck!=$this->_IclosedPnrStatusId)
				$_IrequestGroupCount++;
			if($_IstatusCheck==11)
				$_IrequestTimelineCout++;
			if(in_array($_IstatusCheck,array('14')))
				$_IcancelRequestCount++;

		}
		#Serios request all pnr close status then Over all status is RC
		if($_ApnrBlocking!=0 && count($_ApnrBlocking)==$_IrequestGroupCount)
			return $this->_IclosedPnrStatusId;	
		else if($_ApnrBlocking!=0&&  (count($_ApnrBlocking)-$_IcancelRequestCount)==$_IrequestTimelineCout)
			return '11';
		return false;
		


		
	}
	/***
	* Description	: Get airlineRequest id function 
	* Author		: Ajith kumar P
	* Date			: 11.06.2024
	***/
	function _getAirlinesRequestId($_IrequestId)
	{
		if(empty($_IrequestId))
			return false;
			
		$sql = "SELECT
					airlines_request_id
				FROM
					airlines_request_mapping
				WHERE 
					request_master_id = " .$_IrequestId;
					
		if (DB::isError($result = $this->_Oconnection->query($sql))) {
			fileWrite($sql,"SqlError","a+");
			return false;
		}

		if ($result->numRows() > 0) {
			while ($row = $result->fetchRow(DB_FETCHMODE_ASSOC)) {
				$this->_IairlineRequestId = $row['airlines_request_id'];
			}
		}
		return true;
	}
		/***
	* Description	: Get Request Group details Status
	* Author		: Ajith kumar P
	* Date			: 06.07.2024
	***/
	function _getPnrGroupStatus($_Spnr,$_IAirlinesRuestId)
	{
		fileRequire("dataModels/class.pnrBlockingDetails.php");
		$this->_OpnrBlockingDetails=new pnrBlockingDetails();
		$this->_OpnrBlockingDetails->__construct();
		$this->_OpnrBlockingDetails->_Oconnection=$this->_Oconnection;
		$this->_OpnrBlockingDetails->_Spnr=$_Spnr;
		$this->_OpnrBlockingDetails->_IrequestMasterId = $this->_getRequestMasterId($_IAirlinesRuestId);
		$_ApnrBlockingDetails =$this->_OpnrBlockingDetails->_selectPnrBlockingDetails();
		fileRequire('dataModels/class.requestApprovedFlightDetails.php');
		$_OrequestApprovedFlightDetails = new requestApprovedFlightDetails();
		$_OrequestApprovedFlightDetails->__construct();
		$_OrequestApprovedFlightDetails->_Oconnection=$this->_Oconnection;
		$_OrequestApprovedFlightDetails->_IairlinesRequestId = $_IAirlinesRuestId;	
		$_OrequestApprovedFlightDetails->_IrequestApprovedFlightId=$_ApnrBlockingDetails[0]['request_approved_flight_id'];
		$_AapprovedFlight=$_OrequestApprovedFlightDetails->_selectRequestApprovedFlightDetails();
		$_IseriesGroupId=$this->_getSeriesGroupId($_AapprovedFlight[0]['series_request_id'])[0];
		$_IlastTransactionMasterId = $this->_getLastTransactionMasterId($_ApnrBlockingDetails[0]['request_master_id']);
		$_APnrGroupStatus=$this->_getRequestGroupDetails($_IAirlinesRuestId,$_IseriesGroupId,$_IlastTransactionMasterId);
		return $_APnrGroupStatus[0]['group_status'];

	}

		/***
	* Description	: wallet error handling for acceptanceQueue
	* Author		: Hari Prasanth A
	* Date			: 18.12.2024
	***/
	function _walletErrorCheck($_SwalletError,$airlineRequestId)
	{
		global $CFG;
		fileRequire("dataModels/class.statusDetails.php");
		$_OstatusDetails  = new statusDetails;
		$_IrequestMasterId = $this->_getRequestMasterId($airlineRequestId);
		// Set view history flag to send the offer accepted date if error received from wallet
		// Only send date when the tool update the status as NA
		$_BviewHistoryNA = false;
		$_BgroupStatusNA = false;
		fileRequire("dataModels/class.responseDetails.php");
		$_OresponseDetails= new responseDetails();

		if (isset($CFG['payment']['walletErrorHandling']) && count($CFG['payment']['walletErrorHandling'])>0 && $_SwalletError!='') 
		{
			foreach ($CFG['payment']['walletErrorHandling'] as $statusKey => $walletErrorVal) {
			    if (in_array($_SwalletError, $walletErrorVal)) {

				$_OstatusDetails->_SstatusCode = $statusKey;
				$_OstatusDetails->_Oconnection = $this->_Oconnection;
				$_OstatusDetails->_SbackEnd = 'Y';
				$_AstatusDetails = $_OstatusDetails->_selectStatusDetails();

				// Require necessary files
				fileRequire('dataModels/class.requestGroupDetails.php');
				$_OrequestGroupDetails = new requestGroupDetails();
				$_OrequestGroupDetails->_Oconnection = $this->_Oconnection;
				$_OrequestGroupDetails->_IairlinesRequestId = $airlineRequestId;
				$requestGroupDetailsArray = $_OrequestGroupDetails->_selectRequestGroupDetails();
				$_IrequestMasterId = $this->_getRequestMasterId($airlineRequestId);
				$_IlastTransactionMasterId=$this->_getLastTransactionMasterId($_IrequestMasterId);
				// Iterate through request group details
					foreach ($requestGroupDetailsArray as $requestGroupData) {
						if (isset($_AstatusDetails[0]['status_id']) && $_AstatusDetails[0]['status_id'] != '' && $requestGroupData['group_status'] == 5) 
						{
							$_OrequestGroupDetails->_INcondition = 'IN';
							$_OrequestGroupDetails->_IairlineRequestId = $airlineRequestId;
							$_OrequestGroupDetails->_IrequestGroupId = $requestGroupData['request_group_id'];
							$_OrequestGroupDetails->_SgroupStatus = $_AstatusDetails[0]['status_id'];
							$_OrequestGroupDetails->_IseriesGroupId = $requestGroupData['series_group_id'];
							$_OrequestGroupDetails->_ItransactionMasterId = $requestGroupData['transaction_master_id'];
							$_OrequestGroupDetails->_updateRequestGroupDetails();
							if($statusKey == 'NA'){
								$_BgroupStatusNA = true;
							}
						}
					}
					if (isset($_AstatusDetails[0]['status_id']) && $_AstatusDetails[0]['status_id'] != '') {
						// Require necessary files
						fileRequire("dataModels/class.airlinesRequestMapping.php");
						$this->_OairlinesRequestMapping = new airlinesRequestMapping();
						$this->_OairlinesRequestMapping->__construct();
						$this->_OairlinesRequestMapping->_Oconnection = $this->_Oconnection;
						$this->_OairlinesRequestMapping->_IairlinesRequestId = $airlineRequestId;
						$this->_OairlinesRequestMapping->_IcurrentStatus = $_AstatusDetails[0]['status_id'];
						$this->_OairlinesRequestMapping->_SlastUpdated = $this->_getUTCDateValue();
						$this->_OairlinesRequestMapping->_updateAirlinesRequestMapping();
					}
					// Send view history data only for the NA(Offer Accepted) status
					if(!empty($_IrequestMasterId) && $_IrequestMasterId != 0 && $_BviewHistoryNA == false && $_BgroupStatusNA == true){
						$_BviewHistoryNA = true;
						fileRequire("classes/class.viewHistoryProcess.php");
						$_AviewHistoryProcess=new viewHistoryProcess();
						$_AviewHistoryProcess->_Oconnection=$this->_Oconnection;
						$_AinsertAcceptData=$_AviewHistoryProcess->_fetchHistoryData('NA',$_IrequestMasterId);

						# Sending Pnr creation failed mail on payment failure for acceptance queue
						if(isset($CFG["site"]["acceptanceQueue"]["status"]) && $CFG["site"]["acceptanceQueue"]["status"] == "Y")
						{
							fileRequire("classes/class.sendEmail.php");
							$_OsendEmail = new sendEmail();
							$_OsendEmail->_Oconnection = $this->_Oconnection;
							$_OsendEmail->_Osmarty = $this->_Osmarty;
							$_AinputData['emailName']="Pnr creation failed";
							$_AinputData['request_master_id'] = $_IrequestMasterId;
							$_OsendEmail->_setInput($_AinputData);
							$_OsendEmail->_sendMessage();
						}

					}

					if($_AstatusDetails[0]['status_code'] == 'AN'|| $_AstatusDetails[0]['status_code'] =='NA' && $_IlastTransactionMasterId>0){
						$_OresponseDetails->__construct();				
						$_OresponseDetails->_Oconnection=$this->_Oconnection;
						$_OresponseDetails->_IairlinesRequestId=$airlineRequestId;
						$_OresponseDetails->_ItransactionMasterId=$_IlastTransactionMasterId;
						$_OresponseDetails->_IresponseStatus='5';
						$_AreponseDetails = $_OresponseDetails->_selectResponseDetails();

						#delete responseDetails row based on responseId
						if (!empty($_AreponseDetails[0]['response_id']) && count($_AreponseDetails[0]['response_id']) >0) {
							$_OresponseDetails->_IresponseId=$_AreponseDetails[0]['response_id'];
							$_OresponseDetails->_deleteResponseDetails();
						}
					}
			    return true;
			    }
			}
		}
		else
			return false;
	}

	/*
	* Description	: Check is pnr is migrated one
	* Author		: Fazil sheriff
	* Date			: 24.03.2025
	 */
	function _isMigratedPnr($_Spnr,$_IrequestMasterId='')
	{
		if($_Spnr!='')
		{
			if($_IrequestMasterId==''|| empty($_IrequestMasterId))
			{
				fileRequire('dataModels/class.pnrBlockingDetails.php');
				$_OpnrBlockingDetails=new pnrBlockingDetails();
				$_OpnrBlockingDetails->_Oconnection=$this->_Oconnection;
				$_OpnrBlockingDetails->_Spnr=$_Spnr;
				$_ApnrBlockingDetails=$_OpnrBlockingDetails->_selectPnrBlockingDetails();
				$_IrequestMasterId=$_ApnrBlockingDetails[0]['request_master_id'];
			}
			else
			{
				fileRequire('dataModels/class.requestMaster.php');
				$_OrequestMaster=new requestMaster();
				$_OrequestMaster->_Oconnection=$this->_Oconnection;
				$_OrequestMaster->_IrequestMasterId=$_IrequestMasterId;
				$_ArequestMaster=$_OrequestMaster->_selectRequestMaster();
				if(!empty($_ArequestMaster))
				{
					if($_ArequestMaster[0]['request_group_name']!='' && $_ArequestMaster[0]['request_group_name']=='GROUP_'.$_Spnr)
						return true;
					else
						return false;
				}

			}
		}
		return false;
	}

	/***
	* Description	: child schedule change timestamp send
	* Author		: Gopinath.K
	* Date			: 11-02-2025
	***/
	function _parentChildViewHistoryData($_AclonedDetails,$childRequestCreateforScheduleChange)
	{
		global $CFG;
		fileRequire("classes/class.viewHistoryProcess.php");
		$_OviewHistoryProcess=new viewHistoryProcess();
		$_OviewHistoryProcess->__construct();
		$_OviewHistoryProcess->_Oconnection=$this->_Oconnection;
		//schedule change timestamp call in parent request
		$_OviewHistoryProcess->_SseriesScheduleChanage="Y";
		$_OviewHistoryProcess->_IchildId = $_AclonedDetails['childId'];
		$_OviewHistoryProcess->_SparentScheduleChangeStatus = 'Y';
		$_AinsertScheduleChangeData = $_OviewHistoryProcess->_fetchHistoryData('SC',$_AclonedDetails['parentMasterId']);
		unset($_OviewHistoryProcess->_IchildId);
		unset($_OviewHistoryProcess->_SparentScheduleChangeStatus);
		unset($_OviewHistoryProcess->_SseriesScheduleChanage);
		$_OviewHistoryProcess->_IrequestMasterId=$_AclonedDetails['parentMasterId'];
		$_OviewHistoryProcess->_SparentMasterId=$_AclonedDetails['parentMasterId'];
		$_OviewHistoryProcess->_IparentRequestMasterId = $_AclonedDetails['parentMasterId'];
		$_AinsertAcceptData=$_OviewHistoryProcess->_fetchHistoryData('RQ',$_AclonedDetails['childId']);
		$_ArejectGroupId[]=0;
		$_OviewHistoryProcess->rejectGroupId=$_ArejectGroupId;
		$_IlastTransactionId = $this->_getLastTransactionMasterId($_AclonedDetails['childId']); 
		fileRequire("classesTpl/class.tpl.processRequestSubmitV1.php");
		$_OprocessRequestSubmitTplV1=new processRequestSubmitTplV1();
		$_OprocessRequestSubmitTplV1->_Oconnection=$this->_Oconnection;
		$_ApolicyMatrixDetails = $_OprocessRequestSubmitTplV1->_getPolicyMatrixInfo($_AclonedDetails['childId'],$_IlastTransactionId);
		$_OviewHistoryProcess->_ApolicyMatrixDetails=$_ApolicyMatrixDetails;
		$_AinsertApprovedData=$_OviewHistoryProcess->_fetchHistoryData('AN',$_AclonedDetails['childId']);
		$_AinsertPaymentPendingData=$_OviewHistoryProcess->_fetchHistoryData('AR',$_AclonedDetails['childId']);
	}

	/***
	* Description	: To identify whether ssr payment is initiated and payment sync gateway cron is not run to change payment completed in take control details 
	* Author		: hari prasath - modified by vignesh.p
	  output        : error and returs error 
	***/
	function _identifySsrPaymentSync($requestMasterId)
	{
		global $CFG;
		$_IairlineRequestId= $this->_getAirlineRequestId($requestMasterId);


		$_SpaymentMasterIdSql="SELECT  payment_master_id					
							FROM  ".$CFG['db']['tbl']['payment_master']." 
							WHERE airlines_request_id= '".$_IairlineRequestId."' AND payment_status = 9  ORDER BY payment_master_id DESC LIMIT 1"; 

		if(DB::isError($result=$this->_Oconnection->query($_SpaymentMasterIdSql)))
		{
			fileWrite($_SpaymentMasterIdSql,"SqlError","a+");
			return false;
		}

		if($result->numRows() >0)
		{					
			$row=$result->fetchRow(DB_FETCHMODE_ASSOC);				
			$_IpaymentMasterId= $row['payment_master_id'];
		}

		if (isset($_IpaymentMasterId)) {
			fileRequire("dataModels/class.takeControlDetails.php");
			$this->_OtakeControlDetails=new takeControlDetails();

			$this->_OtakeControlDetails->__construct();
			$this->_OtakeControlDetails->_Oconnection=$this->_Oconnection;
			$this->_OtakeControlDetails->_ScontrolStatus='GATEWAYINITIATE';
			$this->_OtakeControlDetails->_IrequestMasterId=$requestMasterId;
			$this->_OtakeControlDetails->_IreferenceMasterId = $_IpaymentMasterId;
			$this->_OtakeControlDetails->_SprocessType='SSRPAYMENTGATEWAY';		
			$_AtakeControlDetails = $this->_OtakeControlDetails->_selectTakeControlDetails();
			if (count((array)$_AtakeControlDetails) >0 ){
				if(in_array($_SESSION['groupRM']['groupId'],$CFG['default']['airlinesGroupId']))
					$this->_OobjResponse->script("Ext.Msg.alert('".$this->_Osmarty->getConfigVars('COMMON_REPORT_ERROR')."','".$this->_Osmarty->getConfigVars('COMMON_SSRPAYMENT_WALLETPAYMENT')."');");	
				else
					$this->_OobjResponse->script('commonObj.showSuccessMessage("'.$this->_Osmarty->getConfigVars('COMMON_SSRPAYMENT_WALLETPAYMENT').'")');

			return 'ERROR';
			}
		}
	}
	
}

	

function sortByDepartDate($firstArray, $secondArray)
{
	return strtotime($firstArray['departure_date']) > strtotime($secondArray['departure_date']);
}
/* Alternate to array_column when version problem raised */
if(!function_exists('array_column'))
{
	function array_column(array $array, $columnKey, $indexKey = null)
	{
		$result = array();
		foreach ($array as $subArray) {
			if (!is_array($subArray)) {
				continue;
			} elseif (is_null($indexKey) && array_key_exists($columnKey, $subArray)) {
				$result[] = $subArray[$columnKey];
			} elseif (array_key_exists($indexKey, $subArray)) {
				if (is_null($columnKey)) {
					$result[$subArray[$indexKey]] = $subArray;
				} elseif (array_key_exists($columnKey, $subArray)) {
					$result[$subArray[$indexKey]] = $subArray[$columnKey];
				}
			}
		}
		return $result;
	}         
}

/**
 * PHP 8.3 Upgrade fix
 * Calculates the fare based on a value and divisor, handling division by zero.
 *
 * This function calculates the fare based on a given value and divisor. It also handles
 * the case where the divisor is zero, returning NAN (Not A Number) in such cases.
 *
 * @author BOTHRAJ P
 * @since Dec 2023
 * @param float $value The value to be divided to calculate the fare.
 * @param float $divisor The divisor used to divide the value. If this is zero, NAN is returned.
 * @param int $decimalPlaces (optional) The number of decimal places to round the fare to. Default is 2.
 * @param string $currencyCode (optional) The currency code for formatting the fare. Default is an empty string.
 * @param string $type (optional) The type of fare calculation. Default is 'RoundOffFare'. use alternate type fareCheck
 * @param string $type fareCheck is used for only checking the division functionality
 * @return float|string The calculated fare, rounded to the specified decimal places, or NAN if divisor is zero.
 * @Modified : Mukesh prabu N - 25-Mar-2024 -Change value NAN to zero .NAN affects in json encode convertion.so set the value as Zero
 */
function _calculateDivisibleByZeroFare($value, $divisor, $decimalPlaces = 2,$currencyCode='',$type='RoundOffFare') {
	if ($type == "RoundOffFare")
    	return ((int)$divisor != 0) ? (new common)->_getRoundOffFare($value/$divisor, $decimalPlaces, $currencyCode) : 0;
	if ($type == "RoundOffFarePercentage")
    	return ((int)$divisor != 0) ? (new common)->_getRoundOffFare(($value/$divisor)*100, $decimalPlaces=0, $currencyCode='') : 0;
	if ($type == "RoundOffFareDifference")
    	return ((int)$divisor != 0) ? (new common)->_getRoundOffFare(($value-$divisor), $decimalPlaces, $currencyCode='') : 0;
	elseif ($type == 'fareCheckPercentage')
		return ((int)$divisor != 0) ? ($value/$divisor)*100 : 0;
	else 
		return ((int)$divisor != 0) ? ($value/$divisor) : 0;
}

?>
